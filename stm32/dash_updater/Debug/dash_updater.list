
dash_updater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c8  080047c8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c8  080047c8  000057c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080047d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  0800483c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800483c  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c61  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e0  00000000  00000000  0000dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0000f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000573  00000000  00000000  0000fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b42  00000000  00000000  0000ff73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008adb  00000000  00000000  00026ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e6f  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b83ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028cc  00000000  00000000  000b8444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000bad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045ac 	.word	0x080045ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080045ac 	.word	0x080045ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <NEXTION_SendText_sin_unidades>:
const char *array_elementos_a_poner_rojo_por_alerta[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4", "brakePedal", "acePedal"}; //elelementos d el ainterfaz a actualizar por alerta

//Variable para indicar el final del mensaje
uint8_t Cmd_End[3]= {0xff,0xff,0xff};

NEXTION_SendText_sin_unidades(char *obj, char *text) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8000d66:	2032      	movs	r0, #50	@ 0x32
 8000d68:	f002 f9a2 	bl	80030b0 <malloc>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, text); // inicializa el buffer con el objeto y valor a inicializar
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	490d      	ldr	r1, [pc, #52]	@ (8000dac <NEXTION_SendText_sin_unidades+0x50>)
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f002 fbe4 	bl	8003544 <siprintf>
 8000d7c:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // Transmite el buffer a través de UART
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	68f9      	ldr	r1, [r7, #12]
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <NEXTION_SendText_sin_unidades+0x54>)
 8000d8a:	f001 fdd5 	bl	8002938 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8000d8e:	2364      	movs	r3, #100	@ 0x64
 8000d90:	2203      	movs	r2, #3
 8000d92:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <NEXTION_SendText_sin_unidades+0x58>)
 8000d94:	4806      	ldr	r0, [pc, #24]	@ (8000db0 <NEXTION_SendText_sin_unidades+0x54>)
 8000d96:	f001 fdcf 	bl	8002938 <HAL_UART_Transmit>
	free(buffer); // Libera la memoria asignada al buffer
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f002 f990 	bl	80030c0 <free>
}
 8000da0:	bf00      	nop
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	08004618 	.word	0x08004618
 8000db0:	20000088 	.word	0x20000088
 8000db4:	20000000 	.word	0x20000000

08000db8 <NEXTION_SendText_unidades>:
//Función para actualizar objeto obj de la interfaz con un valor text
void NEXTION_SendText_unidades(char *obj, char *text, char *units) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8000dc4:	2032      	movs	r0, #50	@ 0x32
 8000dc6:	f002 f973 	bl	80030b0 <malloc>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	617b      	str	r3, [r7, #20]
    int len = sprintf((char *)buffer, "%s.txt=\"%s%s\"", obj, text, units); // Agrega las unidades al texto
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <NEXTION_SendText_unidades+0x54>)
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f002 fbb3 	bl	8003544 <siprintf>
 8000dde:	6138      	str	r0, [r7, #16]
    HAL_UART_Transmit(&huart1, buffer, len, 1000); // Transmite el buffer a través de UART
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de8:	6979      	ldr	r1, [r7, #20]
 8000dea:	4809      	ldr	r0, [pc, #36]	@ (8000e10 <NEXTION_SendText_unidades+0x58>)
 8000dec:	f001 fda4 	bl	8002938 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8000df0:	2364      	movs	r3, #100	@ 0x64
 8000df2:	2203      	movs	r2, #3
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <NEXTION_SendText_unidades+0x5c>)
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <NEXTION_SendText_unidades+0x58>)
 8000df8:	f001 fd9e 	bl	8002938 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f002 f95f 	bl	80030c0 <free>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08004624 	.word	0x08004624
 8000e10:	20000088 	.word	0x20000088
 8000e14:	20000000 	.word	0x20000000

08000e18 <NEXTION_SendNumber>:

void NEXTION_SendNumber(char *obj, int number) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8000e22:	2032      	movs	r0, #50	@ 0x32
 8000e24:	f002 f944 	bl	80030b0 <malloc>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60fb      	str	r3, [r7, #12]
    int len = sprintf((char *)buffer, "%s.val=%d", obj, number); // Inicializa el buffer con el objeto y el valor a inicializar
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <NEXTION_SendNumber+0x4c>)
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f002 fb86 	bl	8003544 <siprintf>
 8000e38:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(&huart1, buffer, len, 1000); // Transmite el buffer a través de UART
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	68f9      	ldr	r1, [r7, #12]
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <NEXTION_SendNumber+0x50>)
 8000e46:	f001 fd77 	bl	8002938 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8000e4a:	2364      	movs	r3, #100	@ 0x64
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4907      	ldr	r1, [pc, #28]	@ (8000e6c <NEXTION_SendNumber+0x54>)
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <NEXTION_SendNumber+0x50>)
 8000e52:	f001 fd71 	bl	8002938 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f002 f932 	bl	80030c0 <free>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08004634 	.word	0x08004634
 8000e68:	20000088 	.word	0x20000088
 8000e6c:	20000000 	.word	0x20000000

08000e70 <procesarReceivedCan>:

void procesarReceivedCan(uint16_t valor) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
    // Generar un número aleatorio entre 0 y 9
    int random_value = rand() % 100;
 8000e7a:	f002 fa05 	bl	8003288 <rand>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a60      	ldr	r2, [pc, #384]	@ (8001004 <procesarReceivedCan+0x194>)
 8000e82:	fb82 1203 	smull	r1, r2, r2, r3
 8000e86:	1151      	asrs	r1, r2, #5
 8000e88:	17da      	asrs	r2, r3, #31
 8000e8a:	1a8a      	subs	r2, r1, r2
 8000e8c:	2164      	movs	r1, #100	@ 0x64
 8000e8e:	fb01 f202 	mul.w	r2, r1, r2
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	617b      	str	r3, [r7, #20]
    int rev = rand() % 9000;
 8000e96:	f002 f9f7 	bl	8003288 <rand>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8001008 <procesarReceivedCan+0x198>)
 8000e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea2:	1311      	asrs	r1, r2, #12
 8000ea4:	17da      	asrs	r2, r3, #31
 8000ea6:	1a8a      	subs	r2, r1, r2
 8000ea8:	f242 3128 	movw	r1, #9000	@ 0x2328
 8000eac:	fb01 f202 	mul.w	r2, r1, r2
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    // Convertir el número aleatorio a una cadena de caracteres
    char text[4]; // Suponiendo que los valores aleatorios solo van de 0 a 9
    sprintf(text, "%d", random_value);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4954      	ldr	r1, [pc, #336]	@ (800100c <procesarReceivedCan+0x19c>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fb41 	bl	8003544 <siprintf>

    // Añadir un retraso de 10ms
    HAL_Delay(10);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f000 fda8 	bl	8001a18 <HAL_Delay>

    switch(valor) {
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f240 6255 	movw	r2, #1621	@ 0x655
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f300 8092 	bgt.w	8000ff8 <procesarReceivedCan+0x188>
 8000ed4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000ed8:	da06      	bge.n	8000ee8 <procesarReceivedCan+0x78>
 8000eda:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000ede:	d037      	beq.n	8000f50 <procesarReceivedCan+0xe0>
 8000ee0:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8000ee4:	d03b      	beq.n	8000f5e <procesarReceivedCan+0xee>
            break;
        case 0x648:
        	ledsRevoluciones(rev);
            break;
        default:
            break;
 8000ee6:	e087      	b.n	8000ff8 <procesarReceivedCan+0x188>
    switch(valor) {
 8000ee8:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8000eec:	2b15      	cmp	r3, #21
 8000eee:	f200 8083 	bhi.w	8000ff8 <procesarReceivedCan+0x188>
 8000ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef8 <procesarReceivedCan+0x88>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f79 	.word	0x08000f79
 8000efc:	08000f89 	.word	0x08000f89
 8000f00:	08000f97 	.word	0x08000f97
 8000f04:	08000fa1 	.word	0x08000fa1
 8000f08:	08000fb1 	.word	0x08000fb1
 8000f0c:	08000fc1 	.word	0x08000fc1
 8000f10:	08000fd1 	.word	0x08000fd1
 8000f14:	08000fe1 	.word	0x08000fe1
 8000f18:	08000ff1 	.word	0x08000ff1
 8000f1c:	08000ff9 	.word	0x08000ff9
 8000f20:	08000ff9 	.word	0x08000ff9
 8000f24:	08000ff9 	.word	0x08000ff9
 8000f28:	08000ff9 	.word	0x08000ff9
 8000f2c:	08000ff9 	.word	0x08000ff9
 8000f30:	08000ff9 	.word	0x08000ff9
 8000f34:	08000ff9 	.word	0x08000ff9
 8000f38:	08000ff9 	.word	0x08000ff9
 8000f3c:	08000ff9 	.word	0x08000ff9
 8000f40:	08000ff9 	.word	0x08000ff9
 8000f44:	08000ff9 	.word	0x08000ff9
 8000f48:	08000ff9 	.word	0x08000ff9
 8000f4c:	08000f6f 	.word	0x08000f6f
        	NEXTION_SendText_sin_unidades("speed", text);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	482e      	ldr	r0, [pc, #184]	@ (8001010 <procesarReceivedCan+0x1a0>)
 8000f58:	f7ff ff00 	bl	8000d5c <NEXTION_SendText_sin_unidades>
            break;
 8000f5c:	e04d      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("voltage", text, "V");
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <procesarReceivedCan+0x1a4>)
 8000f64:	4619      	mov	r1, r3
 8000f66:	482c      	ldr	r0, [pc, #176]	@ (8001018 <procesarReceivedCan+0x1a8>)
 8000f68:	f7ff ff26 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000f6c:	e045      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendNumber("brakePedal", random_value);
 8000f6e:	6979      	ldr	r1, [r7, #20]
 8000f70:	482a      	ldr	r0, [pc, #168]	@ (800101c <procesarReceivedCan+0x1ac>)
 8000f72:	f7ff ff51 	bl	8000e18 <NEXTION_SendNumber>
            break;
 8000f76:	e040      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("revValue", text, " RPM");
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4a28      	ldr	r2, [pc, #160]	@ (8001020 <procesarReceivedCan+0x1b0>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4828      	ldr	r0, [pc, #160]	@ (8001024 <procesarReceivedCan+0x1b4>)
 8000f82:	f7ff ff19 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000f86:	e038      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_sin_unidades("gear", text);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4826      	ldr	r0, [pc, #152]	@ (8001028 <procesarReceivedCan+0x1b8>)
 8000f90:	f7ff fee4 	bl	8000d5c <NEXTION_SendText_sin_unidades>
            break;
 8000f94:	e031      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendNumber("acePedal", random_value);
 8000f96:	6979      	ldr	r1, [r7, #20]
 8000f98:	4824      	ldr	r0, [pc, #144]	@ (800102c <procesarReceivedCan+0x1bc>)
 8000f9a:	f7ff ff3d 	bl	8000e18 <NEXTION_SendNumber>
            break;
 8000f9e:	e02c      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("brake1", text, "\xB0");
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <procesarReceivedCan+0x1c0>)
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4822      	ldr	r0, [pc, #136]	@ (8001034 <procesarReceivedCan+0x1c4>)
 8000faa:	f7ff ff05 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000fae:	e024      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("brake2", text, "\xB0");
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <procesarReceivedCan+0x1c0>)
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481f      	ldr	r0, [pc, #124]	@ (8001038 <procesarReceivedCan+0x1c8>)
 8000fba:	f7ff fefd 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000fbe:	e01c      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("brake3", text, "\xB0");
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <procesarReceivedCan+0x1c0>)
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481c      	ldr	r0, [pc, #112]	@ (800103c <procesarReceivedCan+0x1cc>)
 8000fca:	f7ff fef5 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000fce:	e014      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("brake4", text, "\xB0");
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <procesarReceivedCan+0x1c0>)
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	@ (8001040 <procesarReceivedCan+0x1d0>)
 8000fda:	f7ff feed 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000fde:	e00c      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	NEXTION_SendText_unidades("engineTemp", text, "\xB0");
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <procesarReceivedCan+0x1c0>)
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4816      	ldr	r0, [pc, #88]	@ (8001044 <procesarReceivedCan+0x1d4>)
 8000fea:	f7ff fee5 	bl	8000db8 <NEXTION_SendText_unidades>
            break;
 8000fee:	e004      	b.n	8000ffa <procesarReceivedCan+0x18a>
        	ledsRevoluciones(rev);
 8000ff0:	6938      	ldr	r0, [r7, #16]
 8000ff2:	f000 f829 	bl	8001048 <ledsRevoluciones>
            break;
 8000ff6:	e000      	b.n	8000ffa <procesarReceivedCan+0x18a>
            break;
 8000ff8:	bf00      	nop
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	51eb851f 	.word	0x51eb851f
 8001008:	7482296b 	.word	0x7482296b
 800100c:	08004640 	.word	0x08004640
 8001010:	080045c4 	.word	0x080045c4
 8001014:	08004644 	.word	0x08004644
 8001018:	08004648 	.word	0x08004648
 800101c:	08004600 	.word	0x08004600
 8001020:	08004650 	.word	0x08004650
 8001024:	080045cc 	.word	0x080045cc
 8001028:	080045d8 	.word	0x080045d8
 800102c:	0800460c 	.word	0x0800460c
 8001030:	08004658 	.word	0x08004658
 8001034:	080045e0 	.word	0x080045e0
 8001038:	080045e8 	.word	0x080045e8
 800103c:	080045f0 	.word	0x080045f0
 8001040:	080045f8 	.word	0x080045f8
 8001044:	0800465c 	.word	0x0800465c

08001048 <ledsRevoluciones>:
        free(buffer);
    }
}


void ledsRevoluciones(int val) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    int resultado1 = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
    int resultado2 = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
    int resultado3 = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]

    if (val >= 0 && val < 3000) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db26      	blt.n	80010b0 <ledsRevoluciones+0x68>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001068:	4293      	cmp	r3, r2
 800106a:	dc21      	bgt.n	80010b0 <ledsRevoluciones+0x68>
        resultado1 = val / 30.0; // Rango 0-3000
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fa59 	bl	8000524 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b45      	ldr	r3, [pc, #276]	@ (800118c <ledsRevoluciones+0x144>)
 8001078:	f7ff fbe8 	bl	800084c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fcca 	bl	8000a1c <__aeabi_d2iz>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]
        resultado1 = (resultado1 + 10) / 20 * 20;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	330a      	adds	r3, #10
 8001090:	4a3f      	ldr	r2, [pc, #252]	@ (8001190 <ledsRevoluciones+0x148>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	10d2      	asrs	r2, r2, #3
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
        resultado2 = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e05d      	b.n	800116c <ledsRevoluciones+0x124>
    } else if (val >= 3000 && val < 6000) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80010b6:	4293      	cmp	r3, r2
 80010b8:	dd29      	ble.n	800110e <ledsRevoluciones+0xc6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f241 726f 	movw	r2, #5999	@ 0x176f
 80010c0:	4293      	cmp	r3, r2
 80010c2:	dc24      	bgt.n	800110e <ledsRevoluciones+0xc6>
        resultado1 = 100;
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	617b      	str	r3, [r7, #20]
        resultado2 = (val - 3000) / 30.0; // Rango 3000-6000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa28 	bl	8000524 <__aeabi_i2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <ledsRevoluciones+0x144>)
 80010da:	f7ff fbb7 	bl	800084c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fc99 	bl	8000a1c <__aeabi_d2iz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	613b      	str	r3, [r7, #16]
        resultado2 = (resultado2 + 10) / 20 * 20;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	330a      	adds	r3, #10
 80010f2:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <ledsRevoluciones+0x148>)
 80010f4:	fb82 1203 	smull	r1, r2, r2, r3
 80010f8:	10d2      	asrs	r2, r2, #3
 80010fa:	17db      	asrs	r3, r3, #31
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]

        resultado3 = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e02e      	b.n	800116c <ledsRevoluciones+0x124>
    } else if (val >= 6000 && val <= 9000) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001114:	4293      	cmp	r3, r2
 8001116:	dd29      	ble.n	800116c <ledsRevoluciones+0x124>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f242 3228 	movw	r2, #9000	@ 0x2328
 800111e:	4293      	cmp	r3, r2
 8001120:	dc24      	bgt.n	800116c <ledsRevoluciones+0x124>
        resultado1 = 100;
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	617b      	str	r3, [r7, #20]
        resultado2 = 100;
 8001126:	2364      	movs	r3, #100	@ 0x64
 8001128:	613b      	str	r3, [r7, #16]
        resultado3 = (val - 6000) / 30.0; // Rango 6000-9000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f5a3 53bb 	sub.w	r3, r3, #5984	@ 0x1760
 8001130:	3b10      	subs	r3, #16
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f9f6 	bl	8000524 <__aeabi_i2d>
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <ledsRevoluciones+0x144>)
 800113e:	f7ff fb85 	bl	800084c <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fc67 	bl	8000a1c <__aeabi_d2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	60fb      	str	r3, [r7, #12]
        resultado3 = (resultado3 + 10) / 20 * 20;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	330a      	adds	r3, #10
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <ledsRevoluciones+0x148>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	10d2      	asrs	r2, r2, #3
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	60fb      	str	r3, [r7, #12]

    }

    // Envía los resultados a las barras correspondientes
    NEXTION_SendNumber("led1", resultado1);
 800116c:	6979      	ldr	r1, [r7, #20]
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <ledsRevoluciones+0x14c>)
 8001170:	f7ff fe52 	bl	8000e18 <NEXTION_SendNumber>
    NEXTION_SendNumber("led2", resultado2);
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <ledsRevoluciones+0x150>)
 8001178:	f7ff fe4e 	bl	8000e18 <NEXTION_SendNumber>
    NEXTION_SendNumber("led3", resultado3);
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <ledsRevoluciones+0x154>)
 8001180:	f7ff fe4a 	bl	8000e18 <NEXTION_SendNumber>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	403e0000 	.word	0x403e0000
 8001190:	66666667 	.word	0x66666667
 8001194:	08004674 	.word	0x08004674
 8001198:	0800467c 	.word	0x0800467c
 800119c:	08004684 	.word	0x08004684

080011a0 <NEXTION_SendPageChange>:

void NEXTION_SendPageChange(char *page_name) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    // Reserva memoria para un buffer de 50 bytes
    uint8_t *buffer = malloc(50 * sizeof(char));
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f001 ff81 	bl	80030b0 <malloc>
 80011ae:	4603      	mov	r3, r0
 80011b0:	60fb      	str	r3, [r7, #12]
    // Inicializa el buffer con la instrucción para cambiar de página
    int len = sprintf((char *)buffer, "page %s", page_name);
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	490c      	ldr	r1, [pc, #48]	@ (80011e8 <NEXTION_SendPageChange+0x48>)
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f002 f9c4 	bl	8003544 <siprintf>
 80011bc:	60b8      	str	r0, [r7, #8]
    // Transmite el buffer a través de UART
    HAL_UART_Transmit(&huart1, buffer, len, 1000);
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <NEXTION_SendPageChange+0x4c>)
 80011ca:	f001 fbb5 	bl	8002938 <HAL_UART_Transmit>
    // Transmite un comando para indicar el final del mensaje
    HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	2203      	movs	r2, #3
 80011d2:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <NEXTION_SendPageChange+0x50>)
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <NEXTION_SendPageChange+0x4c>)
 80011d6:	f001 fbaf 	bl	8002938 <HAL_UART_Transmit>
    // Libera la memoria asignada al buffer
    free(buffer);
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f001 ff70 	bl	80030c0 <free>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0800468c 	.word	0x0800468c
 80011ec:	20000088 	.word	0x20000088
 80011f0:	20000000 	.word	0x20000000

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

	// Semilla para la generación de números aleatorios
	srand(time(NULL));
 80011fa:	2000      	movs	r0, #0
 80011fc:	f002 faa2 	bl	8003744 <time>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4613      	mov	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f002 f810 	bl	800322c <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fb92 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f888 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 f944 	bl	80014a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001218:	f000 f918 	bl	800144c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800121c:	f000 f8ec 	bl	80013f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //	  NEXTION_Alert();
	NEXTION_SendPageChange("page0");
 8001220:	483c      	ldr	r0, [pc, #240]	@ (8001314 <main+0x120>)
 8001222:	f7ff ffbd 	bl	80011a0 <NEXTION_SendPageChange>
<<<<<<< HEAD
    HAL_Delay(2800);
 8001226:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
=======
      HAL_Delay(4000);
 8001226:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
>>>>>>> 51f84d24cea1ba433ff42396f640eec8f264c713
 800122a:	f000 fbf5 	bl	8001a18 <HAL_Delay>
  	NEXTION_SendPageChange("page1");
 800122e:	483a      	ldr	r0, [pc, #232]	@ (8001318 <main+0x124>)
 8001230:	f7ff ffb6 	bl	80011a0 <NEXTION_SendPageChange>
    /* USER CODE END WHILE */

//	  NEXTION_Alert();

	// Generar valor aleatorio entre 0 y 9
	int random_value = rand() % 12;
 8001234:	f002 f828 	bl	8003288 <rand>
 8001238:	4602      	mov	r2, r0
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <main+0x128>)
 800123c:	fb83 1302 	smull	r1, r3, r3, r2
 8001240:	1059      	asrs	r1, r3, #1
 8001242:	17d3      	asrs	r3, r2, #31
 8001244:	1ac9      	subs	r1, r1, r3
 8001246:	460b      	mov	r3, r1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	440b      	add	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	607b      	str	r3, [r7, #4]

	switch(random_value) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0b      	cmp	r3, #11
 8001256:	d857      	bhi.n	8001308 <main+0x114>
 8001258:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <main+0x6c>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001291 	.word	0x08001291
 8001264:	0800129b 	.word	0x0800129b
 8001268:	080012a5 	.word	0x080012a5
 800126c:	080012af 	.word	0x080012af
 8001270:	080012b9 	.word	0x080012b9
 8001274:	080012c3 	.word	0x080012c3
 8001278:	080012cd 	.word	0x080012cd
 800127c:	080012d7 	.word	0x080012d7
 8001280:	080012e1 	.word	0x080012e1
 8001284:	080012eb 	.word	0x080012eb
 8001288:	080012f5 	.word	0x080012f5
 800128c:	080012ff 	.word	0x080012ff
		case 0:
			procesarReceivedCan(0x110);
 8001290:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8001294:	f7ff fdec 	bl	8000e70 <procesarReceivedCan>
			break;
 8001298:	e03a      	b.n	8001310 <main+0x11c>
		case 1:
			procesarReceivedCan(0x120);
 800129a:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800129e:	f7ff fde7 	bl	8000e70 <procesarReceivedCan>
			break;
 80012a2:	e035      	b.n	8001310 <main+0x11c>
		case 2:
			procesarReceivedCan(0x655);
 80012a4:	f240 6055 	movw	r0, #1621	@ 0x655
 80012a8:	f7ff fde2 	bl	8000e70 <procesarReceivedCan>
			break;
 80012ac:	e030      	b.n	8001310 <main+0x11c>
		case 3:
			procesarReceivedCan(0x640);
 80012ae:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80012b2:	f7ff fddd 	bl	8000e70 <procesarReceivedCan>
			break;
 80012b6:	e02b      	b.n	8001310 <main+0x11c>
		case 4:
			procesarReceivedCan(0x641);
 80012b8:	f240 6041 	movw	r0, #1601	@ 0x641
 80012bc:	f7ff fdd8 	bl	8000e70 <procesarReceivedCan>
			break;
 80012c0:	e026      	b.n	8001310 <main+0x11c>
		case 5:
			procesarReceivedCan(0x642);
 80012c2:	f240 6042 	movw	r0, #1602	@ 0x642
 80012c6:	f7ff fdd3 	bl	8000e70 <procesarReceivedCan>
			break;
 80012ca:	e021      	b.n	8001310 <main+0x11c>
		case 6:
			procesarReceivedCan(0x643);
 80012cc:	f240 6043 	movw	r0, #1603	@ 0x643
 80012d0:	f7ff fdce 	bl	8000e70 <procesarReceivedCan>
			break;
 80012d4:	e01c      	b.n	8001310 <main+0x11c>
		case 7:
			procesarReceivedCan(0x644);
 80012d6:	f240 6044 	movw	r0, #1604	@ 0x644
 80012da:	f7ff fdc9 	bl	8000e70 <procesarReceivedCan>
			break;
 80012de:	e017      	b.n	8001310 <main+0x11c>
		case 8:
			procesarReceivedCan(0x645);
 80012e0:	f240 6045 	movw	r0, #1605	@ 0x645
 80012e4:	f7ff fdc4 	bl	8000e70 <procesarReceivedCan>
			break;
 80012e8:	e012      	b.n	8001310 <main+0x11c>
		case 9:
			procesarReceivedCan(0x646);
 80012ea:	f240 6046 	movw	r0, #1606	@ 0x646
 80012ee:	f7ff fdbf 	bl	8000e70 <procesarReceivedCan>
			break;
 80012f2:	e00d      	b.n	8001310 <main+0x11c>
		case 10:
			procesarReceivedCan(0x647);
 80012f4:	f240 6047 	movw	r0, #1607	@ 0x647
 80012f8:	f7ff fdba 	bl	8000e70 <procesarReceivedCan>
			break;
 80012fc:	e008      	b.n	8001310 <main+0x11c>
		case 11:
			procesarReceivedCan(0x648);
 80012fe:	f44f 60c9 	mov.w	r0, #1608	@ 0x648
 8001302:	f7ff fdb5 	bl	8000e70 <procesarReceivedCan>
			break;
 8001306:	e003      	b.n	8001310 <main+0x11c>
		default:
			printf("Número aleatorio fuera de rango\n");
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <main+0x12c>)
 800130a:	f002 f913 	bl	8003534 <puts>
			break;
 800130e:	bf00      	nop
  {
 8001310:	e790      	b.n	8001234 <main+0x40>
 8001312:	bf00      	nop
 8001314:	08004694 	.word	0x08004694
 8001318:	0800469c 	.word	0x0800469c
 800131c:	2aaaaaab 	.word	0x2aaaaaab
 8001320:	080046a4 	.word	0x080046a4

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	@ 0x50
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2230      	movs	r2, #48	@ 0x30
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f002 f9fe 	bl	8003734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <SystemClock_Config+0xcc>)
 8001352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001356:	6413      	str	r3, [r2, #64]	@ 0x40
 8001358:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <SystemClock_Config+0xcc>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <SystemClock_Config+0xd0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <SystemClock_Config+0xd0>)
 800136e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <SystemClock_Config+0xd0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2310      	movs	r3, #16
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001394:	2310      	movs	r3, #16
 8001396:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001398:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800139c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800139e:	2304      	movs	r3, #4
 80013a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a2:	2304      	movs	r3, #4
 80013a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fddc 	bl	8001f68 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013b6:	f000 f8e1 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2302      	movs	r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 f83e 	bl	8002458 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013e2:	f000 f8cb 	bl	800157c <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	@ 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MX_USART1_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 8001404:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_USART1_UART_Init+0x4c>)
 8001430:	f001 fa32 	bl	8002898 <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f89f 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000088 	.word	0x20000088
 8001448:	40011000 	.word	0x40011000

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f001 fa08 	bl	8002898 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 f875 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000d0 	.word	0x200000d0
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a2c      	ldr	r2, [pc, #176]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a25      	ldr	r2, [pc, #148]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <MX_GPIO_Init+0xd0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_GPIO_Init+0xd0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_GPIO_Init+0xd0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <MX_GPIO_Init+0xd0>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_GPIO_Init+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2120      	movs	r1, #32
 800152a:	4812      	ldr	r0, [pc, #72]	@ (8001574 <MX_GPIO_Init+0xd4>)
 800152c:	f000 fd02 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001536:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_GPIO_Init+0xd8>)
 8001548:	f000 fb70 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800154c:	2320      	movs	r3, #32
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_GPIO_Init+0xd4>)
 8001564:	f000 fb62 	bl	8001c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	@ 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020800 	.word	0x40020800

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f000 fafc 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a32      	ldr	r2, [pc, #200]	@ (80016c0 <HAL_UART_MspInit+0xe8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12d      	bne.n	8001656 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a30      	ldr	r2, [pc, #192]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a29      	ldr	r2, [pc, #164]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001632:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001644:	2307      	movs	r3, #7
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	481e      	ldr	r0, [pc, #120]	@ (80016c8 <HAL_UART_MspInit+0xf0>)
 8001650:	f000 faec 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001654:	e030      	b.n	80016b8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <HAL_UART_MspInit+0xf4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d12b      	bne.n	80016b8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800166a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	4a0f      	ldr	r2, [pc, #60]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6313      	str	r3, [r2, #48]	@ 0x30
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_UART_MspInit+0xec>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001698:	230c      	movs	r3, #12
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a8:	2307      	movs	r3, #7
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_UART_MspInit+0xf0>)
 80016b4:	f000 faba 	bl	8001c2c <HAL_GPIO_Init>
}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40004400 	.word	0x40004400

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f957 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}

0800172e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_kill>:

int _kill(int pid, int sig)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001748:	f002 f880 	bl	800384c <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	2216      	movs	r2, #22
 8001750:	601a      	str	r2, [r3, #0]
  return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_exit>:

void _exit (int status)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001766:	f04f 31ff 	mov.w	r1, #4294967295
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffe7 	bl	800173e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <_exit+0x12>

08001774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001786:	f3af 8000 	nop.w
 800178a:	4601      	mov	r1, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf0      	blt.n	8001786 <_read+0x12>
  }

  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e009      	b.n	80017d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf1      	blt.n	80017c0 <_write+0x12>
  }
  return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_close>:

int _close(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800180e:	605a      	str	r2, [r3, #4]
  return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f001 ffe4 	bl	800384c <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000118 	.word	0x20000118
 80018b8:	20000270 	.word	0x20000270

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e4:	f7ff ffea 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ea:	490d      	ldr	r1, [pc, #52]	@ (8001920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001900:	4c0a      	ldr	r4, [pc, #40]	@ (800192c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800190e:	f001 ffa3 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fc6f 	bl	80011f4 <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001924:	080047d0 	.word	0x080047d0
  ldr r2, =_sbss
 8001928:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800192c:	2000026c 	.word	0x2000026c

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 f931 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fe0e 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f93b 	bl	8001c12 <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 f911 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000004 	.word	0x20000004
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	2000011c 	.word	0x2000011c

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000011c 	.word	0x2000011c

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	@ (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	@ 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff47 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff5c 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffb0 	bl	8001b80 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e159      	b.n	8001efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8148 	bne.w	8001ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a2 	beq.w	8001ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b54      	ldr	r3, [pc, #336]	@ (8001f14 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a49      	ldr	r2, [pc, #292]	@ (8001f1c <HAL_GPIO_Init+0x2f0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x202>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	@ (8001f20 <HAL_GPIO_Init+0x2f4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x1fe>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	@ (8001f24 <HAL_GPIO_Init+0x2f8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x1fa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	@ (8001f28 <HAL_GPIO_Init+0x2fc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x1f6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	@ (8001f2c <HAL_GPIO_Init+0x300>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x1f2>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x204>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	@ (8001f18 <HAL_GPIO_Init+0x2ec>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a2f      	ldr	r2, [pc, #188]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a24      	ldr	r2, [pc, #144]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea2:	4b23      	ldr	r3, [pc, #140]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f aea2 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e267      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	4b88      	ldr	r3, [pc, #544]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00c      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b85      	ldr	r3, [pc, #532]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b7e      	ldr	r3, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e242      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b76      	ldr	r3, [pc, #472]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a75      	ldr	r2, [pc, #468]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b70      	ldr	r3, [pc, #448]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6f      	ldr	r2, [pc, #444]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b69      	ldr	r3, [pc, #420]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a68      	ldr	r2, [pc, #416]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b66      	ldr	r3, [pc, #408]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a65      	ldr	r2, [pc, #404]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fcee 	bl	8001a00 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff fcea 	bl	8001a00 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e207      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b5b      	ldr	r3, [pc, #364]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fcda 	bl	8001a00 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fcd6 	bl	8001a00 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1f3      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	4b51      	ldr	r3, [pc, #324]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b47      	ldr	r3, [pc, #284]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d11c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b44      	ldr	r3, [pc, #272]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1c7      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4937      	ldr	r1, [pc, #220]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	e03a      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0x244>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff fc8f 	bl	8001a00 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff fc8b 	bl	8001a00 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1a8      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	4b2b      	ldr	r3, [pc, #172]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b28      	ldr	r3, [pc, #160]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4925      	ldr	r1, [pc, #148]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211a:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <HAL_RCC_OscConfig+0x244>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fc6e 	bl	8001a00 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7ff fc6a 	bl	8001a00 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e187      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d036      	beq.n	80021c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_RCC_OscConfig+0x248>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff fc4e 	bl	8001a00 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7ff fc4a 	bl	8001a00 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e167      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <HAL_RCC_OscConfig+0x240>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
 8002186:	e01b      	b.n	80021c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_RCC_OscConfig+0x248>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff fc37 	bl	8001a00 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	e00e      	b.n	80021b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7ff fc33 	bl	8001a00 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d907      	bls.n	80021b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e150      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ea      	bne.n	8002196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8097 	beq.w	80022fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b81      	ldr	r3, [pc, #516]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b7d      	ldr	r3, [pc, #500]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a7c      	ldr	r2, [pc, #496]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ee:	4b7a      	ldr	r3, [pc, #488]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b77      	ldr	r3, [pc, #476]	@ (80023dc <HAL_RCC_OscConfig+0x474>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b74      	ldr	r3, [pc, #464]	@ (80023dc <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a73      	ldr	r2, [pc, #460]	@ (80023dc <HAL_RCC_OscConfig+0x474>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff fbf3 	bl	8001a00 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff fbef 	bl	8001a00 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e10c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b6a      	ldr	r3, [pc, #424]	@ (80023dc <HAL_RCC_OscConfig+0x474>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x2ea>
 8002244:	4b64      	ldr	r3, [pc, #400]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	4a63      	ldr	r2, [pc, #396]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x30c>
 800225a:	4b5f      	ldr	r3, [pc, #380]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a5e      	ldr	r2, [pc, #376]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
 8002266:	4b5c      	ldr	r3, [pc, #368]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	4a5b      	ldr	r2, [pc, #364]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	@ 0x70
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002274:	4b58      	ldr	r3, [pc, #352]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a57      	ldr	r2, [pc, #348]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002280:	4b55      	ldr	r3, [pc, #340]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a54      	ldr	r2, [pc, #336]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff fbb4 	bl	8001a00 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7ff fbb0 	bl	8001a00 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0cb      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b49      	ldr	r3, [pc, #292]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ee      	beq.n	800229c <HAL_RCC_OscConfig+0x334>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fb9e 	bl	8001a00 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff fb9a 	bl	8001a00 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0b5      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022de:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ee      	bne.n	80022c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b39      	ldr	r3, [pc, #228]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a1 	beq.w	8002448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002306:	4b34      	ldr	r3, [pc, #208]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d05c      	beq.n	80023cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d141      	bne.n	800239e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fb6e 	bl	8001a00 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff fb6a 	bl	8001a00 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e087      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	491b      	ldr	r1, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x478>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff fb43 	bl	8001a00 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff fb3f 	bl	8001a00 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e05c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x416>
 800239c:	e054      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_RCC_OscConfig+0x478>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fb2c 	bl	8001a00 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7ff fb28 	bl	8001a00 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e045      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e038      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x4ec>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d028      	beq.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800241a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	4293      	cmp	r3, r2
 800241e:	d111      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0cc      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b68      	ldr	r3, [pc, #416]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d90c      	bls.n	8002494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b65      	ldr	r3, [pc, #404]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a58      	ldr	r2, [pc, #352]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a52      	ldr	r2, [pc, #328]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d044      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4934      	ldr	r1, [pc, #208]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7ff fa5a 	bl	8001a00 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff fa56 	bl	8001a00 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e04f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d20c      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ca:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	@ (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	@ (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f9ba 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	080046c8 	.word	0x080046c8
 800261c:	20000004 	.word	0x20000004
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b094      	sub	sp, #80	@ 0x50
 800262a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002630:	2300      	movs	r3, #0
 8002632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263c:	4b79      	ldr	r3, [pc, #484]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 8002648:	2b08      	cmp	r3, #8
 800264a:	f200 80e1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3a>
 8002656:	e0db      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b73      	ldr	r3, [pc, #460]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 800265a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800265c:	e0db      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265e:	4b73      	ldr	r3, [pc, #460]	@ (800282c <HAL_RCC_GetSysClockFreq+0x208>)
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002662:	e0d8      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b6f      	ldr	r3, [pc, #444]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266e:	4b6d      	ldr	r3, [pc, #436]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	633b      	str	r3, [r7, #48]	@ 0x30
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
 8002692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c8:	4659      	mov	r1, fp
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4651      	mov	r1, sl
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4651      	mov	r1, sl
 80026d8:	ebb2 0801 	subs.w	r8, r2, r1
 80026dc:	4659      	mov	r1, fp
 80026de:	eb63 0901 	sbc.w	r9, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f6:	4690      	mov	r8, r2
 80026f8:	4699      	mov	r9, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb18 0303 	adds.w	r3, r8, r3
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	462b      	mov	r3, r5
 8002704:	eb49 0303 	adc.w	r3, r9, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002716:	4629      	mov	r1, r5
 8002718:	024b      	lsls	r3, r1, #9
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002720:	4621      	mov	r1, r4
 8002722:	024a      	lsls	r2, r1, #9
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002734:	f7fe f99a 	bl	8000a6c <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	e058      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	4618      	mov	r0, r3
 800274c:	4611      	mov	r1, r2
 800274e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
 8002758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276e:	0150      	lsls	r0, r2, #5
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4641      	mov	r1, r8
 8002776:	ebb2 0a01 	subs.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800278c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002794:	ebb2 040a 	subs.w	r4, r2, sl
 8002798:	eb63 050b 	sbc.w	r5, r3, fp
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	00eb      	lsls	r3, r5, #3
 80027a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	4614      	mov	r4, r2
 80027ae:	461d      	mov	r5, r3
 80027b0:	4643      	mov	r3, r8
 80027b2:	18e3      	adds	r3, r4, r3
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	464b      	mov	r3, r9
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	61fa      	str	r2, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	f7fe f940 	bl	8000a6c <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002818:	4618      	mov	r0, r3
 800281a:	3750      	adds	r7, #80	@ 0x50
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_RCC_GetHCLKFreq+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	080046d8 	.word	0x080046d8

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffdc 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0b5b      	lsrs	r3, r3, #13
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	@ (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	080046d8 	.word	0x080046d8

08002898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e042      	b.n	8002930 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fe8a 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	@ 0x24
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f973 	bl	8002bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b20      	cmp	r3, #32
 8002956:	d175      	bne.n	8002a44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_UART_Transmit+0x2c>
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e06e      	b.n	8002a46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2221      	movs	r2, #33	@ 0x21
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002976:	f7ff f843 	bl	8001a00 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002990:	d108      	bne.n	80029a4 <HAL_UART_Transmit+0x6c>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e003      	b.n	80029ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029ac:	e02e      	b.n	8002a0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2180      	movs	r1, #128	@ 0x80
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f848 	bl	8002a4e <UART_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e03a      	b.n	8002a46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e007      	b.n	80029fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1cb      	bne.n	80029ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	@ 0x40
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f814 	bl	8002a4e <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e006      	b.n	8002a46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5e:	e03b      	b.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d037      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe ffca 	bl	8001a00 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	6a3a      	ldr	r2, [r7, #32]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e03a      	b.n	8002af8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d023      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d020      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b40      	cmp	r3, #64	@ 0x40
 8002a9a:	d01d      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d116      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f81d 	bl	8002b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e00f      	b.n	8002af8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d0b4      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b095      	sub	sp, #84	@ 0x54
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b28:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e5      	bne.n	8002b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3314      	adds	r3, #20
 8002b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e5      	bne.n	8002b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d119      	bne.n	8002bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f023 0310 	bic.w	r3, r3, #16
 8002b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b98:	61ba      	str	r2, [r7, #24]
 8002b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6979      	ldr	r1, [r7, #20]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bba:	bf00      	nop
 8002bbc:	3754      	adds	r7, #84	@ 0x54
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b0c0      	sub	sp, #256	@ 0x100
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be4:	68d9      	ldr	r1, [r3, #12]
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	ea40 0301 	orr.w	r3, r0, r1
 8002bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c20:	f021 010c 	bic.w	r1, r1, #12
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c42:	6999      	ldr	r1, [r3, #24]
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	ea40 0301 	orr.w	r3, r0, r1
 8002c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b8f      	ldr	r3, [pc, #572]	@ (8002e94 <UART_SetConfig+0x2cc>)
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0xa0>
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b8d      	ldr	r3, [pc, #564]	@ (8002e98 <UART_SetConfig+0x2d0>)
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d104      	bne.n	8002c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fe02 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c70:	e003      	b.n	8002c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c72:	f7ff fde9 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8002c76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c84:	f040 810c 	bne.w	8002ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	1891      	adds	r1, r2, r2
 8002ca0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ca2:	415b      	adcs	r3, r3
 8002ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002caa:	4621      	mov	r1, r4
 8002cac:	eb12 0801 	adds.w	r8, r2, r1
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb43 0901 	adc.w	r9, r3, r1
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cca:	4690      	mov	r8, r2
 8002ccc:	4699      	mov	r9, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	eb18 0303 	adds.w	r3, r8, r3
 8002cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb49 0303 	adc.w	r3, r9, r3
 8002cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	18db      	adds	r3, r3, r3
 8002cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	eb42 0303 	adc.w	r3, r2, r3
 8002d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d0c:	f7fd feae 	bl	8000a6c <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <UART_SetConfig+0x2d4>)
 8002d16:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	011c      	lsls	r4, r3, #4
 8002d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	1891      	adds	r1, r2, r2
 8002d36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d38:	415b      	adcs	r3, r3
 8002d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d40:	4641      	mov	r1, r8
 8002d42:	eb12 0a01 	adds.w	sl, r2, r1
 8002d46:	4649      	mov	r1, r9
 8002d48:	eb43 0b01 	adc.w	fp, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d60:	4692      	mov	sl, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	eb1a 0303 	adds.w	r3, sl, r3
 8002d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb4b 0303 	adc.w	r3, fp, r3
 8002d74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	18db      	adds	r3, r3, r3
 8002d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d92:	4613      	mov	r3, r2
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002da2:	f7fd fe63 	bl	8000a6c <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <UART_SetConfig+0x2d4>)
 8002dae:	fba3 2301 	umull	r2, r3, r3, r1
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2264      	movs	r2, #100	@ 0x64
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dc2:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <UART_SetConfig+0x2d4>)
 8002dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dd0:	441c      	add	r4, r3
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	1891      	adds	r1, r2, r2
 8002dea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dec:	415b      	adcs	r3, r3
 8002dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002df4:	4641      	mov	r1, r8
 8002df6:	1851      	adds	r1, r2, r1
 8002df8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	414b      	adcs	r3, r1
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	00cb      	lsls	r3, r1, #3
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e16:	4651      	mov	r1, sl
 8002e18:	00ca      	lsls	r2, r1, #3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4642      	mov	r2, r8
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e28:	464b      	mov	r3, r9
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e48:	460b      	mov	r3, r1
 8002e4a:	18db      	adds	r3, r3, r3
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4e:	4613      	mov	r3, r2
 8002e50:	eb42 0303 	adc.w	r3, r2, r3
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e5e:	f7fd fe05 	bl	8000a6c <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <UART_SetConfig+0x2d4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	@ 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	3332      	adds	r3, #50	@ 0x32
 8002e7a:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <UART_SetConfig+0x2d4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 0207 	and.w	r2, r3, #7
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4422      	add	r2, r4
 8002e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e90:	e106      	b.n	80030a0 <UART_SetConfig+0x4d8>
 8002e92:	bf00      	nop
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40011400 	.word	0x40011400
 8002e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eb2:	4642      	mov	r2, r8
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	1891      	adds	r1, r2, r2
 8002eb8:	6239      	str	r1, [r7, #32]
 8002eba:	415b      	adcs	r3, r3
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	1854      	adds	r4, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb43 0501 	adc.w	r5, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	00eb      	lsls	r3, r5, #3
 8002ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eda:	00e2      	lsls	r2, r4, #3
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	18e3      	adds	r3, r4, r3
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ee8:	464b      	mov	r3, r9
 8002eea:	eb45 0303 	adc.w	r3, r5, r3
 8002eee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002efe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f0e:	4629      	mov	r1, r5
 8002f10:	008b      	lsls	r3, r1, #2
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f18:	4621      	mov	r1, r4
 8002f1a:	008a      	lsls	r2, r1, #2
 8002f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f20:	f7fd fda4 	bl	8000a6c <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4b60      	ldr	r3, [pc, #384]	@ (80030ac <UART_SetConfig+0x4e4>)
 8002f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	011c      	lsls	r4, r3, #4
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	61b9      	str	r1, [r7, #24]
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f54:	4641      	mov	r1, r8
 8002f56:	1851      	adds	r1, r2, r1
 8002f58:	6139      	str	r1, [r7, #16]
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	414b      	adcs	r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	00cb      	lsls	r3, r1, #3
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f76:	4651      	mov	r1, sl
 8002f78:	00ca      	lsls	r2, r1, #3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4642      	mov	r2, r8
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f88:	464b      	mov	r3, r9
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fac:	4649      	mov	r1, r9
 8002fae:	008b      	lsls	r3, r1, #2
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	008a      	lsls	r2, r1, #2
 8002fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fbe:	f7fd fd55 	bl	8000a6c <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <UART_SetConfig+0x4e4>)
 8002fca:	fba3 2301 	umull	r2, r3, r3, r1
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2264      	movs	r2, #100	@ 0x64
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	1acb      	subs	r3, r1, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	@ 0x32
 8002fdc:	4a33      	ldr	r2, [pc, #204]	@ (80030ac <UART_SetConfig+0x4e4>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe8:	441c      	add	r4, r3
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fee:	2200      	movs	r2, #0
 8002ff0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ff2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ff4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	415b      	adcs	r3, r3
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003008:	4641      	mov	r1, r8
 800300a:	1851      	adds	r1, r2, r1
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	4649      	mov	r1, r9
 8003010:	414b      	adcs	r3, r1
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003020:	4659      	mov	r1, fp
 8003022:	00cb      	lsls	r3, r1, #3
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302a:	4651      	mov	r1, sl
 800302c:	00ca      	lsls	r2, r1, #3
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	4603      	mov	r3, r0
 8003034:	4642      	mov	r2, r8
 8003036:	189b      	adds	r3, r3, r2
 8003038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303a:	464b      	mov	r3, r9
 800303c:	460a      	mov	r2, r1
 800303e:	eb42 0303 	adc.w	r3, r2, r3
 8003042:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	663b      	str	r3, [r7, #96]	@ 0x60
 800304e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800305c:	4649      	mov	r1, r9
 800305e:	008b      	lsls	r3, r1, #2
 8003060:	4641      	mov	r1, r8
 8003062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003066:	4641      	mov	r1, r8
 8003068:	008a      	lsls	r2, r1, #2
 800306a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800306e:	f7fd fcfd 	bl	8000a6c <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <UART_SetConfig+0x4e4>)
 8003078:	fba3 1302 	umull	r1, r3, r3, r2
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	2164      	movs	r1, #100	@ 0x64
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	3332      	adds	r3, #50	@ 0x32
 800308a:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <UART_SetConfig+0x4e4>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4422      	add	r2, r4
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	bf00      	nop
 80030a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ac:	51eb851f 	.word	0x51eb851f

080030b0 <malloc>:
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <malloc+0xc>)
 80030b2:	4601      	mov	r1, r0
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	f000 b82d 	b.w	8003114 <_malloc_r>
 80030ba:	bf00      	nop
 80030bc:	2000001c 	.word	0x2000001c

080030c0 <free>:
 80030c0:	4b02      	ldr	r3, [pc, #8]	@ (80030cc <free+0xc>)
 80030c2:	4601      	mov	r1, r0
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	f000 bc0d 	b.w	80038e4 <_free_r>
 80030ca:	bf00      	nop
 80030cc:	2000001c 	.word	0x2000001c

080030d0 <sbrk_aligned>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003110 <sbrk_aligned+0x40>)
 80030d4:	460c      	mov	r4, r1
 80030d6:	6831      	ldr	r1, [r6, #0]
 80030d8:	4605      	mov	r5, r0
 80030da:	b911      	cbnz	r1, 80030e2 <sbrk_aligned+0x12>
 80030dc:	f000 fb94 	bl	8003808 <_sbrk_r>
 80030e0:	6030      	str	r0, [r6, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 fb8f 	bl	8003808 <_sbrk_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	d103      	bne.n	80030f6 <sbrk_aligned+0x26>
 80030ee:	f04f 34ff 	mov.w	r4, #4294967295
 80030f2:	4620      	mov	r0, r4
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	1cc4      	adds	r4, r0, #3
 80030f8:	f024 0403 	bic.w	r4, r4, #3
 80030fc:	42a0      	cmp	r0, r4
 80030fe:	d0f8      	beq.n	80030f2 <sbrk_aligned+0x22>
 8003100:	1a21      	subs	r1, r4, r0
 8003102:	4628      	mov	r0, r5
 8003104:	f000 fb80 	bl	8003808 <_sbrk_r>
 8003108:	3001      	adds	r0, #1
 800310a:	d1f2      	bne.n	80030f2 <sbrk_aligned+0x22>
 800310c:	e7ef      	b.n	80030ee <sbrk_aligned+0x1e>
 800310e:	bf00      	nop
 8003110:	20000120 	.word	0x20000120

08003114 <_malloc_r>:
 8003114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003118:	1ccd      	adds	r5, r1, #3
 800311a:	f025 0503 	bic.w	r5, r5, #3
 800311e:	3508      	adds	r5, #8
 8003120:	2d0c      	cmp	r5, #12
 8003122:	bf38      	it	cc
 8003124:	250c      	movcc	r5, #12
 8003126:	2d00      	cmp	r5, #0
 8003128:	4606      	mov	r6, r0
 800312a:	db01      	blt.n	8003130 <_malloc_r+0x1c>
 800312c:	42a9      	cmp	r1, r5
 800312e:	d904      	bls.n	800313a <_malloc_r+0x26>
 8003130:	230c      	movs	r3, #12
 8003132:	6033      	str	r3, [r6, #0]
 8003134:	2000      	movs	r0, #0
 8003136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003210 <_malloc_r+0xfc>
 800313e:	f000 f869 	bl	8003214 <__malloc_lock>
 8003142:	f8d8 3000 	ldr.w	r3, [r8]
 8003146:	461c      	mov	r4, r3
 8003148:	bb44      	cbnz	r4, 800319c <_malloc_r+0x88>
 800314a:	4629      	mov	r1, r5
 800314c:	4630      	mov	r0, r6
 800314e:	f7ff ffbf 	bl	80030d0 <sbrk_aligned>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	4604      	mov	r4, r0
 8003156:	d158      	bne.n	800320a <_malloc_r+0xf6>
 8003158:	f8d8 4000 	ldr.w	r4, [r8]
 800315c:	4627      	mov	r7, r4
 800315e:	2f00      	cmp	r7, #0
 8003160:	d143      	bne.n	80031ea <_malloc_r+0xd6>
 8003162:	2c00      	cmp	r4, #0
 8003164:	d04b      	beq.n	80031fe <_malloc_r+0xea>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	eb04 0903 	add.w	r9, r4, r3
 8003170:	f000 fb4a 	bl	8003808 <_sbrk_r>
 8003174:	4581      	cmp	r9, r0
 8003176:	d142      	bne.n	80031fe <_malloc_r+0xea>
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	1a6d      	subs	r5, r5, r1
 800317c:	4629      	mov	r1, r5
 800317e:	4630      	mov	r0, r6
 8003180:	f7ff ffa6 	bl	80030d0 <sbrk_aligned>
 8003184:	3001      	adds	r0, #1
 8003186:	d03a      	beq.n	80031fe <_malloc_r+0xea>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	442b      	add	r3, r5
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	f8d8 3000 	ldr.w	r3, [r8]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	bb62      	cbnz	r2, 80031f0 <_malloc_r+0xdc>
 8003196:	f8c8 7000 	str.w	r7, [r8]
 800319a:	e00f      	b.n	80031bc <_malloc_r+0xa8>
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	1b52      	subs	r2, r2, r5
 80031a0:	d420      	bmi.n	80031e4 <_malloc_r+0xd0>
 80031a2:	2a0b      	cmp	r2, #11
 80031a4:	d917      	bls.n	80031d6 <_malloc_r+0xc2>
 80031a6:	1961      	adds	r1, r4, r5
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	6025      	str	r5, [r4, #0]
 80031ac:	bf18      	it	ne
 80031ae:	6059      	strne	r1, [r3, #4]
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	bf08      	it	eq
 80031b4:	f8c8 1000 	streq.w	r1, [r8]
 80031b8:	5162      	str	r2, [r4, r5]
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 f82f 	bl	8003220 <__malloc_unlock>
 80031c2:	f104 000b 	add.w	r0, r4, #11
 80031c6:	1d23      	adds	r3, r4, #4
 80031c8:	f020 0007 	bic.w	r0, r0, #7
 80031cc:	1ac2      	subs	r2, r0, r3
 80031ce:	bf1c      	itt	ne
 80031d0:	1a1b      	subne	r3, r3, r0
 80031d2:	50a3      	strne	r3, [r4, r2]
 80031d4:	e7af      	b.n	8003136 <_malloc_r+0x22>
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	42a3      	cmp	r3, r4
 80031da:	bf0c      	ite	eq
 80031dc:	f8c8 2000 	streq.w	r2, [r8]
 80031e0:	605a      	strne	r2, [r3, #4]
 80031e2:	e7eb      	b.n	80031bc <_malloc_r+0xa8>
 80031e4:	4623      	mov	r3, r4
 80031e6:	6864      	ldr	r4, [r4, #4]
 80031e8:	e7ae      	b.n	8003148 <_malloc_r+0x34>
 80031ea:	463c      	mov	r4, r7
 80031ec:	687f      	ldr	r7, [r7, #4]
 80031ee:	e7b6      	b.n	800315e <_malloc_r+0x4a>
 80031f0:	461a      	mov	r2, r3
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d1fb      	bne.n	80031f0 <_malloc_r+0xdc>
 80031f8:	2300      	movs	r3, #0
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	e7de      	b.n	80031bc <_malloc_r+0xa8>
 80031fe:	230c      	movs	r3, #12
 8003200:	6033      	str	r3, [r6, #0]
 8003202:	4630      	mov	r0, r6
 8003204:	f000 f80c 	bl	8003220 <__malloc_unlock>
 8003208:	e794      	b.n	8003134 <_malloc_r+0x20>
 800320a:	6005      	str	r5, [r0, #0]
 800320c:	e7d6      	b.n	80031bc <_malloc_r+0xa8>
 800320e:	bf00      	nop
 8003210:	20000124 	.word	0x20000124

08003214 <__malloc_lock>:
 8003214:	4801      	ldr	r0, [pc, #4]	@ (800321c <__malloc_lock+0x8>)
 8003216:	f000 bb44 	b.w	80038a2 <__retarget_lock_acquire_recursive>
 800321a:	bf00      	nop
 800321c:	20000268 	.word	0x20000268

08003220 <__malloc_unlock>:
 8003220:	4801      	ldr	r0, [pc, #4]	@ (8003228 <__malloc_unlock+0x8>)
 8003222:	f000 bb3f 	b.w	80038a4 <__retarget_lock_release_recursive>
 8003226:	bf00      	nop
 8003228:	20000268 	.word	0x20000268

0800322c <srand>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <srand+0x44>)
 8003230:	681d      	ldr	r5, [r3, #0]
 8003232:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003234:	4604      	mov	r4, r0
 8003236:	b9b3      	cbnz	r3, 8003266 <srand+0x3a>
 8003238:	2018      	movs	r0, #24
 800323a:	f7ff ff39 	bl	80030b0 <malloc>
 800323e:	4602      	mov	r2, r0
 8003240:	6328      	str	r0, [r5, #48]	@ 0x30
 8003242:	b920      	cbnz	r0, 800324e <srand+0x22>
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <srand+0x48>)
 8003246:	480c      	ldr	r0, [pc, #48]	@ (8003278 <srand+0x4c>)
 8003248:	2146      	movs	r1, #70	@ 0x46
 800324a:	f000 fb2d 	bl	80038a8 <__assert_func>
 800324e:	490b      	ldr	r1, [pc, #44]	@ (800327c <srand+0x50>)
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <srand+0x54>)
 8003252:	e9c0 1300 	strd	r1, r3, [r0]
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <srand+0x58>)
 8003258:	6083      	str	r3, [r0, #8]
 800325a:	230b      	movs	r3, #11
 800325c:	8183      	strh	r3, [r0, #12]
 800325e:	2100      	movs	r1, #0
 8003260:	2001      	movs	r0, #1
 8003262:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003266:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	611c      	str	r4, [r3, #16]
 800326c:	615a      	str	r2, [r3, #20]
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	2000001c 	.word	0x2000001c
 8003274:	080046e0 	.word	0x080046e0
 8003278:	080046f7 	.word	0x080046f7
 800327c:	abcd330e 	.word	0xabcd330e
 8003280:	e66d1234 	.word	0xe66d1234
 8003284:	0005deec 	.word	0x0005deec

08003288 <rand>:
 8003288:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <rand+0x5c>)
 800328a:	b510      	push	{r4, lr}
 800328c:	681c      	ldr	r4, [r3, #0]
 800328e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003290:	b9b3      	cbnz	r3, 80032c0 <rand+0x38>
 8003292:	2018      	movs	r0, #24
 8003294:	f7ff ff0c 	bl	80030b0 <malloc>
 8003298:	4602      	mov	r2, r0
 800329a:	6320      	str	r0, [r4, #48]	@ 0x30
 800329c:	b920      	cbnz	r0, 80032a8 <rand+0x20>
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <rand+0x60>)
 80032a0:	4812      	ldr	r0, [pc, #72]	@ (80032ec <rand+0x64>)
 80032a2:	2152      	movs	r1, #82	@ 0x52
 80032a4:	f000 fb00 	bl	80038a8 <__assert_func>
 80032a8:	4911      	ldr	r1, [pc, #68]	@ (80032f0 <rand+0x68>)
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <rand+0x6c>)
 80032ac:	e9c0 1300 	strd	r1, r3, [r0]
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <rand+0x70>)
 80032b2:	6083      	str	r3, [r0, #8]
 80032b4:	230b      	movs	r3, #11
 80032b6:	8183      	strh	r3, [r0, #12]
 80032b8:	2100      	movs	r1, #0
 80032ba:	2001      	movs	r0, #1
 80032bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80032c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80032c2:	480e      	ldr	r0, [pc, #56]	@ (80032fc <rand+0x74>)
 80032c4:	690b      	ldr	r3, [r1, #16]
 80032c6:	694c      	ldr	r4, [r1, #20]
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <rand+0x78>)
 80032ca:	4358      	muls	r0, r3
 80032cc:	fb02 0004 	mla	r0, r2, r4, r0
 80032d0:	fba3 3202 	umull	r3, r2, r3, r2
 80032d4:	3301      	adds	r3, #1
 80032d6:	eb40 0002 	adc.w	r0, r0, r2
 80032da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80032de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	2000001c 	.word	0x2000001c
 80032e8:	080046e0 	.word	0x080046e0
 80032ec:	080046f7 	.word	0x080046f7
 80032f0:	abcd330e 	.word	0xabcd330e
 80032f4:	e66d1234 	.word	0xe66d1234
 80032f8:	0005deec 	.word	0x0005deec
 80032fc:	5851f42d 	.word	0x5851f42d
 8003300:	4c957f2d 	.word	0x4c957f2d

08003304 <std>:
 8003304:	2300      	movs	r3, #0
 8003306:	b510      	push	{r4, lr}
 8003308:	4604      	mov	r4, r0
 800330a:	e9c0 3300 	strd	r3, r3, [r0]
 800330e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003312:	6083      	str	r3, [r0, #8]
 8003314:	8181      	strh	r1, [r0, #12]
 8003316:	6643      	str	r3, [r0, #100]	@ 0x64
 8003318:	81c2      	strh	r2, [r0, #14]
 800331a:	6183      	str	r3, [r0, #24]
 800331c:	4619      	mov	r1, r3
 800331e:	2208      	movs	r2, #8
 8003320:	305c      	adds	r0, #92	@ 0x5c
 8003322:	f000 fa07 	bl	8003734 <memset>
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <std+0x58>)
 8003328:	6263      	str	r3, [r4, #36]	@ 0x24
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <std+0x5c>)
 800332c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <std+0x60>)
 8003330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <std+0x64>)
 8003334:	6323      	str	r3, [r4, #48]	@ 0x30
 8003336:	4b0d      	ldr	r3, [pc, #52]	@ (800336c <std+0x68>)
 8003338:	6224      	str	r4, [r4, #32]
 800333a:	429c      	cmp	r4, r3
 800333c:	d006      	beq.n	800334c <std+0x48>
 800333e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003342:	4294      	cmp	r4, r2
 8003344:	d002      	beq.n	800334c <std+0x48>
 8003346:	33d0      	adds	r3, #208	@ 0xd0
 8003348:	429c      	cmp	r4, r3
 800334a:	d105      	bne.n	8003358 <std+0x54>
 800334c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003354:	f000 baa4 	b.w	80038a0 <__retarget_lock_init_recursive>
 8003358:	bd10      	pop	{r4, pc}
 800335a:	bf00      	nop
 800335c:	08003585 	.word	0x08003585
 8003360:	080035a7 	.word	0x080035a7
 8003364:	080035df 	.word	0x080035df
 8003368:	08003603 	.word	0x08003603
 800336c:	20000128 	.word	0x20000128

08003370 <stdio_exit_handler>:
 8003370:	4a02      	ldr	r2, [pc, #8]	@ (800337c <stdio_exit_handler+0xc>)
 8003372:	4903      	ldr	r1, [pc, #12]	@ (8003380 <stdio_exit_handler+0x10>)
 8003374:	4803      	ldr	r0, [pc, #12]	@ (8003384 <stdio_exit_handler+0x14>)
 8003376:	f000 b869 	b.w	800344c <_fwalk_sglue>
 800337a:	bf00      	nop
 800337c:	20000010 	.word	0x20000010
 8003380:	0800404d 	.word	0x0800404d
 8003384:	20000020 	.word	0x20000020

08003388 <cleanup_stdio>:
 8003388:	6841      	ldr	r1, [r0, #4]
 800338a:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <cleanup_stdio+0x34>)
 800338c:	4299      	cmp	r1, r3
 800338e:	b510      	push	{r4, lr}
 8003390:	4604      	mov	r4, r0
 8003392:	d001      	beq.n	8003398 <cleanup_stdio+0x10>
 8003394:	f000 fe5a 	bl	800404c <_fflush_r>
 8003398:	68a1      	ldr	r1, [r4, #8]
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <cleanup_stdio+0x38>)
 800339c:	4299      	cmp	r1, r3
 800339e:	d002      	beq.n	80033a6 <cleanup_stdio+0x1e>
 80033a0:	4620      	mov	r0, r4
 80033a2:	f000 fe53 	bl	800404c <_fflush_r>
 80033a6:	68e1      	ldr	r1, [r4, #12]
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <cleanup_stdio+0x3c>)
 80033aa:	4299      	cmp	r1, r3
 80033ac:	d004      	beq.n	80033b8 <cleanup_stdio+0x30>
 80033ae:	4620      	mov	r0, r4
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	f000 be4a 	b.w	800404c <_fflush_r>
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	bf00      	nop
 80033bc:	20000128 	.word	0x20000128
 80033c0:	20000190 	.word	0x20000190
 80033c4:	200001f8 	.word	0x200001f8

080033c8 <global_stdio_init.part.0>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <global_stdio_init.part.0+0x30>)
 80033cc:	4c0b      	ldr	r4, [pc, #44]	@ (80033fc <global_stdio_init.part.0+0x34>)
 80033ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003400 <global_stdio_init.part.0+0x38>)
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	4620      	mov	r0, r4
 80033d4:	2200      	movs	r2, #0
 80033d6:	2104      	movs	r1, #4
 80033d8:	f7ff ff94 	bl	8003304 <std>
 80033dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033e0:	2201      	movs	r2, #1
 80033e2:	2109      	movs	r1, #9
 80033e4:	f7ff ff8e 	bl	8003304 <std>
 80033e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033ec:	2202      	movs	r2, #2
 80033ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f2:	2112      	movs	r1, #18
 80033f4:	f7ff bf86 	b.w	8003304 <std>
 80033f8:	20000260 	.word	0x20000260
 80033fc:	20000128 	.word	0x20000128
 8003400:	08003371 	.word	0x08003371

08003404 <__sfp_lock_acquire>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__sfp_lock_acquire+0x8>)
 8003406:	f000 ba4c 	b.w	80038a2 <__retarget_lock_acquire_recursive>
 800340a:	bf00      	nop
 800340c:	20000269 	.word	0x20000269

08003410 <__sfp_lock_release>:
 8003410:	4801      	ldr	r0, [pc, #4]	@ (8003418 <__sfp_lock_release+0x8>)
 8003412:	f000 ba47 	b.w	80038a4 <__retarget_lock_release_recursive>
 8003416:	bf00      	nop
 8003418:	20000269 	.word	0x20000269

0800341c <__sinit>:
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	f7ff fff0 	bl	8003404 <__sfp_lock_acquire>
 8003424:	6a23      	ldr	r3, [r4, #32]
 8003426:	b11b      	cbz	r3, 8003430 <__sinit+0x14>
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f7ff bff0 	b.w	8003410 <__sfp_lock_release>
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <__sinit+0x28>)
 8003432:	6223      	str	r3, [r4, #32]
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <__sinit+0x2c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f5      	bne.n	8003428 <__sinit+0xc>
 800343c:	f7ff ffc4 	bl	80033c8 <global_stdio_init.part.0>
 8003440:	e7f2      	b.n	8003428 <__sinit+0xc>
 8003442:	bf00      	nop
 8003444:	08003389 	.word	0x08003389
 8003448:	20000260 	.word	0x20000260

0800344c <_fwalk_sglue>:
 800344c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003450:	4607      	mov	r7, r0
 8003452:	4688      	mov	r8, r1
 8003454:	4614      	mov	r4, r2
 8003456:	2600      	movs	r6, #0
 8003458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800345c:	f1b9 0901 	subs.w	r9, r9, #1
 8003460:	d505      	bpl.n	800346e <_fwalk_sglue+0x22>
 8003462:	6824      	ldr	r4, [r4, #0]
 8003464:	2c00      	cmp	r4, #0
 8003466:	d1f7      	bne.n	8003458 <_fwalk_sglue+0xc>
 8003468:	4630      	mov	r0, r6
 800346a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346e:	89ab      	ldrh	r3, [r5, #12]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d907      	bls.n	8003484 <_fwalk_sglue+0x38>
 8003474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003478:	3301      	adds	r3, #1
 800347a:	d003      	beq.n	8003484 <_fwalk_sglue+0x38>
 800347c:	4629      	mov	r1, r5
 800347e:	4638      	mov	r0, r7
 8003480:	47c0      	blx	r8
 8003482:	4306      	orrs	r6, r0
 8003484:	3568      	adds	r5, #104	@ 0x68
 8003486:	e7e9      	b.n	800345c <_fwalk_sglue+0x10>

08003488 <_puts_r>:
 8003488:	6a03      	ldr	r3, [r0, #32]
 800348a:	b570      	push	{r4, r5, r6, lr}
 800348c:	6884      	ldr	r4, [r0, #8]
 800348e:	4605      	mov	r5, r0
 8003490:	460e      	mov	r6, r1
 8003492:	b90b      	cbnz	r3, 8003498 <_puts_r+0x10>
 8003494:	f7ff ffc2 	bl	800341c <__sinit>
 8003498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800349a:	07db      	lsls	r3, r3, #31
 800349c:	d405      	bmi.n	80034aa <_puts_r+0x22>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	0598      	lsls	r0, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_puts_r+0x22>
 80034a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034a6:	f000 f9fc 	bl	80038a2 <__retarget_lock_acquire_recursive>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	0719      	lsls	r1, r3, #28
 80034ae:	d502      	bpl.n	80034b6 <_puts_r+0x2e>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d135      	bne.n	8003522 <_puts_r+0x9a>
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f8e5 	bl	8003688 <__swsetup_r>
 80034be:	b380      	cbz	r0, 8003522 <_puts_r+0x9a>
 80034c0:	f04f 35ff 	mov.w	r5, #4294967295
 80034c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034c6:	07da      	lsls	r2, r3, #31
 80034c8:	d405      	bmi.n	80034d6 <_puts_r+0x4e>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	059b      	lsls	r3, r3, #22
 80034ce:	d402      	bmi.n	80034d6 <_puts_r+0x4e>
 80034d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034d2:	f000 f9e7 	bl	80038a4 <__retarget_lock_release_recursive>
 80034d6:	4628      	mov	r0, r5
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da04      	bge.n	80034e8 <_puts_r+0x60>
 80034de:	69a2      	ldr	r2, [r4, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dc17      	bgt.n	8003514 <_puts_r+0x8c>
 80034e4:	290a      	cmp	r1, #10
 80034e6:	d015      	beq.n	8003514 <_puts_r+0x8c>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	6022      	str	r2, [r4, #0]
 80034ee:	7019      	strb	r1, [r3, #0]
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60a3      	str	r3, [r4, #8]
 80034fa:	2900      	cmp	r1, #0
 80034fc:	d1ed      	bne.n	80034da <_puts_r+0x52>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da11      	bge.n	8003526 <_puts_r+0x9e>
 8003502:	4622      	mov	r2, r4
 8003504:	210a      	movs	r1, #10
 8003506:	4628      	mov	r0, r5
 8003508:	f000 f87f 	bl	800360a <__swbuf_r>
 800350c:	3001      	adds	r0, #1
 800350e:	d0d7      	beq.n	80034c0 <_puts_r+0x38>
 8003510:	250a      	movs	r5, #10
 8003512:	e7d7      	b.n	80034c4 <_puts_r+0x3c>
 8003514:	4622      	mov	r2, r4
 8003516:	4628      	mov	r0, r5
 8003518:	f000 f877 	bl	800360a <__swbuf_r>
 800351c:	3001      	adds	r0, #1
 800351e:	d1e7      	bne.n	80034f0 <_puts_r+0x68>
 8003520:	e7ce      	b.n	80034c0 <_puts_r+0x38>
 8003522:	3e01      	subs	r6, #1
 8003524:	e7e4      	b.n	80034f0 <_puts_r+0x68>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	6022      	str	r2, [r4, #0]
 800352c:	220a      	movs	r2, #10
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e7ee      	b.n	8003510 <_puts_r+0x88>
	...

08003534 <puts>:
 8003534:	4b02      	ldr	r3, [pc, #8]	@ (8003540 <puts+0xc>)
 8003536:	4601      	mov	r1, r0
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f7ff bfa5 	b.w	8003488 <_puts_r>
 800353e:	bf00      	nop
 8003540:	2000001c 	.word	0x2000001c

08003544 <siprintf>:
 8003544:	b40e      	push	{r1, r2, r3}
 8003546:	b500      	push	{lr}
 8003548:	b09c      	sub	sp, #112	@ 0x70
 800354a:	ab1d      	add	r3, sp, #116	@ 0x74
 800354c:	9002      	str	r0, [sp, #8]
 800354e:	9006      	str	r0, [sp, #24]
 8003550:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003554:	4809      	ldr	r0, [pc, #36]	@ (800357c <siprintf+0x38>)
 8003556:	9107      	str	r1, [sp, #28]
 8003558:	9104      	str	r1, [sp, #16]
 800355a:	4909      	ldr	r1, [pc, #36]	@ (8003580 <siprintf+0x3c>)
 800355c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003560:	9105      	str	r1, [sp, #20]
 8003562:	6800      	ldr	r0, [r0, #0]
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	a902      	add	r1, sp, #8
 8003568:	f000 fa62 	bl	8003a30 <_svfiprintf_r>
 800356c:	9b02      	ldr	r3, [sp, #8]
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	b01c      	add	sp, #112	@ 0x70
 8003574:	f85d eb04 	ldr.w	lr, [sp], #4
 8003578:	b003      	add	sp, #12
 800357a:	4770      	bx	lr
 800357c:	2000001c 	.word	0x2000001c
 8003580:	ffff0208 	.word	0xffff0208

08003584 <__sread>:
 8003584:	b510      	push	{r4, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	f000 f92a 	bl	80037e4 <_read_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	bfab      	itete	ge
 8003594:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003596:	89a3      	ldrhlt	r3, [r4, #12]
 8003598:	181b      	addge	r3, r3, r0
 800359a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800359e:	bfac      	ite	ge
 80035a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035a2:	81a3      	strhlt	r3, [r4, #12]
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <__swrite>:
 80035a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035aa:	461f      	mov	r7, r3
 80035ac:	898b      	ldrh	r3, [r1, #12]
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	4605      	mov	r5, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4616      	mov	r6, r2
 80035b6:	d505      	bpl.n	80035c4 <__swrite+0x1e>
 80035b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035bc:	2302      	movs	r3, #2
 80035be:	2200      	movs	r2, #0
 80035c0:	f000 f8fe 	bl	80037c0 <_lseek_r>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	4632      	mov	r2, r6
 80035d2:	463b      	mov	r3, r7
 80035d4:	4628      	mov	r0, r5
 80035d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035da:	f000 b925 	b.w	8003828 <_write_r>

080035de <__sseek>:
 80035de:	b510      	push	{r4, lr}
 80035e0:	460c      	mov	r4, r1
 80035e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e6:	f000 f8eb 	bl	80037c0 <_lseek_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	bf15      	itete	ne
 80035f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035fa:	81a3      	strheq	r3, [r4, #12]
 80035fc:	bf18      	it	ne
 80035fe:	81a3      	strhne	r3, [r4, #12]
 8003600:	bd10      	pop	{r4, pc}

08003602 <__sclose>:
 8003602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003606:	f000 b8b9 	b.w	800377c <_close_r>

0800360a <__swbuf_r>:
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	460e      	mov	r6, r1
 800360e:	4614      	mov	r4, r2
 8003610:	4605      	mov	r5, r0
 8003612:	b118      	cbz	r0, 800361c <__swbuf_r+0x12>
 8003614:	6a03      	ldr	r3, [r0, #32]
 8003616:	b90b      	cbnz	r3, 800361c <__swbuf_r+0x12>
 8003618:	f7ff ff00 	bl	800341c <__sinit>
 800361c:	69a3      	ldr	r3, [r4, #24]
 800361e:	60a3      	str	r3, [r4, #8]
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	071a      	lsls	r2, r3, #28
 8003624:	d501      	bpl.n	800362a <__swbuf_r+0x20>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	b943      	cbnz	r3, 800363c <__swbuf_r+0x32>
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	f000 f82b 	bl	8003688 <__swsetup_r>
 8003632:	b118      	cbz	r0, 800363c <__swbuf_r+0x32>
 8003634:	f04f 37ff 	mov.w	r7, #4294967295
 8003638:	4638      	mov	r0, r7
 800363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	6922      	ldr	r2, [r4, #16]
 8003640:	1a98      	subs	r0, r3, r2
 8003642:	6963      	ldr	r3, [r4, #20]
 8003644:	b2f6      	uxtb	r6, r6
 8003646:	4283      	cmp	r3, r0
 8003648:	4637      	mov	r7, r6
 800364a:	dc05      	bgt.n	8003658 <__swbuf_r+0x4e>
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	f000 fcfc 	bl	800404c <_fflush_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	d1ed      	bne.n	8003634 <__swbuf_r+0x2a>
 8003658:	68a3      	ldr	r3, [r4, #8]
 800365a:	3b01      	subs	r3, #1
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	701e      	strb	r6, [r3, #0]
 8003666:	6962      	ldr	r2, [r4, #20]
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	429a      	cmp	r2, r3
 800366c:	d004      	beq.n	8003678 <__swbuf_r+0x6e>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	07db      	lsls	r3, r3, #31
 8003672:	d5e1      	bpl.n	8003638 <__swbuf_r+0x2e>
 8003674:	2e0a      	cmp	r6, #10
 8003676:	d1df      	bne.n	8003638 <__swbuf_r+0x2e>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 fce6 	bl	800404c <_fflush_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d0d9      	beq.n	8003638 <__swbuf_r+0x2e>
 8003684:	e7d6      	b.n	8003634 <__swbuf_r+0x2a>
	...

08003688 <__swsetup_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <__swsetup_r+0xa8>)
 800368c:	4605      	mov	r5, r0
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	460c      	mov	r4, r1
 8003692:	b118      	cbz	r0, 800369c <__swsetup_r+0x14>
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b90b      	cbnz	r3, 800369c <__swsetup_r+0x14>
 8003698:	f7ff fec0 	bl	800341c <__sinit>
 800369c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a0:	0719      	lsls	r1, r3, #28
 80036a2:	d422      	bmi.n	80036ea <__swsetup_r+0x62>
 80036a4:	06da      	lsls	r2, r3, #27
 80036a6:	d407      	bmi.n	80036b8 <__swsetup_r+0x30>
 80036a8:	2209      	movs	r2, #9
 80036aa:	602a      	str	r2, [r5, #0]
 80036ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	e033      	b.n	8003720 <__swsetup_r+0x98>
 80036b8:	0758      	lsls	r0, r3, #29
 80036ba:	d512      	bpl.n	80036e2 <__swsetup_r+0x5a>
 80036bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036be:	b141      	cbz	r1, 80036d2 <__swsetup_r+0x4a>
 80036c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036c4:	4299      	cmp	r1, r3
 80036c6:	d002      	beq.n	80036ce <__swsetup_r+0x46>
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 f90b 	bl	80038e4 <_free_r>
 80036ce:	2300      	movs	r3, #0
 80036d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	b94b      	cbnz	r3, 8003702 <__swsetup_r+0x7a>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f8:	d003      	beq.n	8003702 <__swsetup_r+0x7a>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 fd05 	bl	800410c <__smakebuf_r>
 8003702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003706:	f013 0201 	ands.w	r2, r3, #1
 800370a:	d00a      	beq.n	8003722 <__swsetup_r+0x9a>
 800370c:	2200      	movs	r2, #0
 800370e:	60a2      	str	r2, [r4, #8]
 8003710:	6962      	ldr	r2, [r4, #20]
 8003712:	4252      	negs	r2, r2
 8003714:	61a2      	str	r2, [r4, #24]
 8003716:	6922      	ldr	r2, [r4, #16]
 8003718:	b942      	cbnz	r2, 800372c <__swsetup_r+0xa4>
 800371a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800371e:	d1c5      	bne.n	80036ac <__swsetup_r+0x24>
 8003720:	bd38      	pop	{r3, r4, r5, pc}
 8003722:	0799      	lsls	r1, r3, #30
 8003724:	bf58      	it	pl
 8003726:	6962      	ldrpl	r2, [r4, #20]
 8003728:	60a2      	str	r2, [r4, #8]
 800372a:	e7f4      	b.n	8003716 <__swsetup_r+0x8e>
 800372c:	2000      	movs	r0, #0
 800372e:	e7f7      	b.n	8003720 <__swsetup_r+0x98>
 8003730:	2000001c 	.word	0x2000001c

08003734 <memset>:
 8003734:	4402      	add	r2, r0
 8003736:	4603      	mov	r3, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	d100      	bne.n	800373e <memset+0xa>
 800373c:	4770      	bx	lr
 800373e:	f803 1b01 	strb.w	r1, [r3], #1
 8003742:	e7f9      	b.n	8003738 <memset+0x4>

08003744 <time>:
 8003744:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003746:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <time+0x34>)
 8003748:	f04f 36ff 	mov.w	r6, #4294967295
 800374c:	f04f 37ff 	mov.w	r7, #4294967295
 8003750:	4669      	mov	r1, sp
 8003752:	4604      	mov	r4, r0
 8003754:	2200      	movs	r2, #0
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	e9cd 6700 	strd	r6, r7, [sp]
 800375c:	f000 f81e 	bl	800379c <_gettimeofday_r>
 8003760:	2800      	cmp	r0, #0
 8003762:	bfb8      	it	lt
 8003764:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800376c:	b10c      	cbz	r4, 8003772 <time+0x2e>
 800376e:	e9c4 0100 	strd	r0, r1, [r4]
 8003772:	b004      	add	sp, #16
 8003774:	bdd0      	pop	{r4, r6, r7, pc}
 8003776:	bf00      	nop
 8003778:	2000001c 	.word	0x2000001c

0800377c <_close_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4d06      	ldr	r5, [pc, #24]	@ (8003798 <_close_r+0x1c>)
 8003780:	2300      	movs	r3, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	f7fe f82d 	bl	80017e6 <_close>
 800378c:	1c43      	adds	r3, r0, #1
 800378e:	d102      	bne.n	8003796 <_close_r+0x1a>
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	b103      	cbz	r3, 8003796 <_close_r+0x1a>
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000264 	.word	0x20000264

0800379c <_gettimeofday_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	4d07      	ldr	r5, [pc, #28]	@ (80037bc <_gettimeofday_r+0x20>)
 80037a0:	2300      	movs	r3, #0
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	602b      	str	r3, [r5, #0]
 80037aa:	f000 fef7 	bl	800459c <_gettimeofday>
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	d102      	bne.n	80037b8 <_gettimeofday_r+0x1c>
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	b103      	cbz	r3, 80037b8 <_gettimeofday_r+0x1c>
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
 80037ba:	bf00      	nop
 80037bc:	20000264 	.word	0x20000264

080037c0 <_lseek_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d07      	ldr	r5, [pc, #28]	@ (80037e0 <_lseek_r+0x20>)
 80037c4:	4604      	mov	r4, r0
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	602a      	str	r2, [r5, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f7fe f830 	bl	8001834 <_lseek>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_lseek_r+0x1e>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_lseek_r+0x1e>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	20000264 	.word	0x20000264

080037e4 <_read_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d07      	ldr	r5, [pc, #28]	@ (8003804 <_read_r+0x20>)
 80037e8:	4604      	mov	r4, r0
 80037ea:	4608      	mov	r0, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	602a      	str	r2, [r5, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7fd ffbe 	bl	8001774 <_read>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_read_r+0x1e>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_read_r+0x1e>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000264 	.word	0x20000264

08003808 <_sbrk_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d06      	ldr	r5, [pc, #24]	@ (8003824 <_sbrk_r+0x1c>)
 800380c:	2300      	movs	r3, #0
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	f7fe f81c 	bl	8001850 <_sbrk>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d102      	bne.n	8003822 <_sbrk_r+0x1a>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b103      	cbz	r3, 8003822 <_sbrk_r+0x1a>
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	20000264 	.word	0x20000264

08003828 <_write_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	4d07      	ldr	r5, [pc, #28]	@ (8003848 <_write_r+0x20>)
 800382c:	4604      	mov	r4, r0
 800382e:	4608      	mov	r0, r1
 8003830:	4611      	mov	r1, r2
 8003832:	2200      	movs	r2, #0
 8003834:	602a      	str	r2, [r5, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	f7fd ffb9 	bl	80017ae <_write>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_write_r+0x1e>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_write_r+0x1e>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	20000264 	.word	0x20000264

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	@ (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000001c 	.word	0x2000001c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4d0d      	ldr	r5, [pc, #52]	@ (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	@ (8003894 <__libc_init_array+0x3c>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2600      	movs	r6, #0
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4d0b      	ldr	r5, [pc, #44]	@ (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	@ (800389c <__libc_init_array+0x44>)
 800386c:	f000 fe9e 	bl	80045ac <_init>
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2600      	movs	r6, #0
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080047c8 	.word	0x080047c8
 8003894:	080047c8 	.word	0x080047c8
 8003898:	080047c8 	.word	0x080047c8
 800389c:	080047cc 	.word	0x080047cc

080038a0 <__retarget_lock_init_recursive>:
 80038a0:	4770      	bx	lr

080038a2 <__retarget_lock_acquire_recursive>:
 80038a2:	4770      	bx	lr

080038a4 <__retarget_lock_release_recursive>:
 80038a4:	4770      	bx	lr
	...

080038a8 <__assert_func>:
 80038a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038aa:	4614      	mov	r4, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <__assert_func+0x2c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4605      	mov	r5, r0
 80038b4:	68d8      	ldr	r0, [r3, #12]
 80038b6:	b954      	cbnz	r4, 80038ce <__assert_func+0x26>
 80038b8:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <__assert_func+0x30>)
 80038ba:	461c      	mov	r4, r3
 80038bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80038c0:	9100      	str	r1, [sp, #0]
 80038c2:	462b      	mov	r3, r5
 80038c4:	4905      	ldr	r1, [pc, #20]	@ (80038dc <__assert_func+0x34>)
 80038c6:	f000 fbe9 	bl	800409c <fiprintf>
 80038ca:	f000 fca5 	bl	8004218 <abort>
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <__assert_func+0x38>)
 80038d0:	e7f4      	b.n	80038bc <__assert_func+0x14>
 80038d2:	bf00      	nop
 80038d4:	2000001c 	.word	0x2000001c
 80038d8:	0800478a 	.word	0x0800478a
 80038dc:	0800475c 	.word	0x0800475c
 80038e0:	0800474f 	.word	0x0800474f

080038e4 <_free_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4605      	mov	r5, r0
 80038e8:	2900      	cmp	r1, #0
 80038ea:	d041      	beq.n	8003970 <_free_r+0x8c>
 80038ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f0:	1f0c      	subs	r4, r1, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfb8      	it	lt
 80038f6:	18e4      	addlt	r4, r4, r3
 80038f8:	f7ff fc8c 	bl	8003214 <__malloc_lock>
 80038fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <_free_r+0x90>)
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	b933      	cbnz	r3, 8003910 <_free_r+0x2c>
 8003902:	6063      	str	r3, [r4, #4]
 8003904:	6014      	str	r4, [r2, #0]
 8003906:	4628      	mov	r0, r5
 8003908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800390c:	f7ff bc88 	b.w	8003220 <__malloc_unlock>
 8003910:	42a3      	cmp	r3, r4
 8003912:	d908      	bls.n	8003926 <_free_r+0x42>
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	1821      	adds	r1, r4, r0
 8003918:	428b      	cmp	r3, r1
 800391a:	bf01      	itttt	eq
 800391c:	6819      	ldreq	r1, [r3, #0]
 800391e:	685b      	ldreq	r3, [r3, #4]
 8003920:	1809      	addeq	r1, r1, r0
 8003922:	6021      	streq	r1, [r4, #0]
 8003924:	e7ed      	b.n	8003902 <_free_r+0x1e>
 8003926:	461a      	mov	r2, r3
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b10b      	cbz	r3, 8003930 <_free_r+0x4c>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d9fa      	bls.n	8003926 <_free_r+0x42>
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	1850      	adds	r0, r2, r1
 8003934:	42a0      	cmp	r0, r4
 8003936:	d10b      	bne.n	8003950 <_free_r+0x6c>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	4401      	add	r1, r0
 800393c:	1850      	adds	r0, r2, r1
 800393e:	4283      	cmp	r3, r0
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	d1e0      	bne.n	8003906 <_free_r+0x22>
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	6053      	str	r3, [r2, #4]
 800394a:	4408      	add	r0, r1
 800394c:	6010      	str	r0, [r2, #0]
 800394e:	e7da      	b.n	8003906 <_free_r+0x22>
 8003950:	d902      	bls.n	8003958 <_free_r+0x74>
 8003952:	230c      	movs	r3, #12
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	e7d6      	b.n	8003906 <_free_r+0x22>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	1821      	adds	r1, r4, r0
 800395c:	428b      	cmp	r3, r1
 800395e:	bf04      	itt	eq
 8003960:	6819      	ldreq	r1, [r3, #0]
 8003962:	685b      	ldreq	r3, [r3, #4]
 8003964:	6063      	str	r3, [r4, #4]
 8003966:	bf04      	itt	eq
 8003968:	1809      	addeq	r1, r1, r0
 800396a:	6021      	streq	r1, [r4, #0]
 800396c:	6054      	str	r4, [r2, #4]
 800396e:	e7ca      	b.n	8003906 <_free_r+0x22>
 8003970:	bd38      	pop	{r3, r4, r5, pc}
 8003972:	bf00      	nop
 8003974:	20000124 	.word	0x20000124

08003978 <__ssputs_r>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	688e      	ldr	r6, [r1, #8]
 800397e:	461f      	mov	r7, r3
 8003980:	42be      	cmp	r6, r7
 8003982:	680b      	ldr	r3, [r1, #0]
 8003984:	4682      	mov	sl, r0
 8003986:	460c      	mov	r4, r1
 8003988:	4690      	mov	r8, r2
 800398a:	d82d      	bhi.n	80039e8 <__ssputs_r+0x70>
 800398c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003990:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003994:	d026      	beq.n	80039e4 <__ssputs_r+0x6c>
 8003996:	6965      	ldr	r5, [r4, #20]
 8003998:	6909      	ldr	r1, [r1, #16]
 800399a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800399e:	eba3 0901 	sub.w	r9, r3, r1
 80039a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039a6:	1c7b      	adds	r3, r7, #1
 80039a8:	444b      	add	r3, r9
 80039aa:	106d      	asrs	r5, r5, #1
 80039ac:	429d      	cmp	r5, r3
 80039ae:	bf38      	it	cc
 80039b0:	461d      	movcc	r5, r3
 80039b2:	0553      	lsls	r3, r2, #21
 80039b4:	d527      	bpl.n	8003a06 <__ssputs_r+0x8e>
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7ff fbac 	bl	8003114 <_malloc_r>
 80039bc:	4606      	mov	r6, r0
 80039be:	b360      	cbz	r0, 8003a1a <__ssputs_r+0xa2>
 80039c0:	6921      	ldr	r1, [r4, #16]
 80039c2:	464a      	mov	r2, r9
 80039c4:	f000 fc1a 	bl	80041fc <memcpy>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	6126      	str	r6, [r4, #16]
 80039d6:	6165      	str	r5, [r4, #20]
 80039d8:	444e      	add	r6, r9
 80039da:	eba5 0509 	sub.w	r5, r5, r9
 80039de:	6026      	str	r6, [r4, #0]
 80039e0:	60a5      	str	r5, [r4, #8]
 80039e2:	463e      	mov	r6, r7
 80039e4:	42be      	cmp	r6, r7
 80039e6:	d900      	bls.n	80039ea <__ssputs_r+0x72>
 80039e8:	463e      	mov	r6, r7
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	4632      	mov	r2, r6
 80039ee:	4641      	mov	r1, r8
 80039f0:	f000 fbc8 	bl	8004184 <memmove>
 80039f4:	68a3      	ldr	r3, [r4, #8]
 80039f6:	1b9b      	subs	r3, r3, r6
 80039f8:	60a3      	str	r3, [r4, #8]
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	4433      	add	r3, r6
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	2000      	movs	r0, #0
 8003a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a06:	462a      	mov	r2, r5
 8003a08:	f000 fc0d 	bl	8004226 <_realloc_r>
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d1e0      	bne.n	80039d4 <__ssputs_r+0x5c>
 8003a12:	6921      	ldr	r1, [r4, #16]
 8003a14:	4650      	mov	r0, sl
 8003a16:	f7ff ff65 	bl	80038e4 <_free_r>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	f8ca 3000 	str.w	r3, [sl]
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	e7e9      	b.n	8003a02 <__ssputs_r+0x8a>
	...

08003a30 <_svfiprintf_r>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	4698      	mov	r8, r3
 8003a36:	898b      	ldrh	r3, [r1, #12]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	b09d      	sub	sp, #116	@ 0x74
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	460d      	mov	r5, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	d510      	bpl.n	8003a66 <_svfiprintf_r+0x36>
 8003a44:	690b      	ldr	r3, [r1, #16]
 8003a46:	b973      	cbnz	r3, 8003a66 <_svfiprintf_r+0x36>
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	f7ff fb63 	bl	8003114 <_malloc_r>
 8003a4e:	6028      	str	r0, [r5, #0]
 8003a50:	6128      	str	r0, [r5, #16]
 8003a52:	b930      	cbnz	r0, 8003a62 <_svfiprintf_r+0x32>
 8003a54:	230c      	movs	r3, #12
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	b01d      	add	sp, #116	@ 0x74
 8003a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a62:	2340      	movs	r3, #64	@ 0x40
 8003a64:	616b      	str	r3, [r5, #20]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a74:	2330      	movs	r3, #48	@ 0x30
 8003a76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c14 <_svfiprintf_r+0x1e4>
 8003a7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a7e:	f04f 0901 	mov.w	r9, #1
 8003a82:	4623      	mov	r3, r4
 8003a84:	469a      	mov	sl, r3
 8003a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8a:	b10a      	cbz	r2, 8003a90 <_svfiprintf_r+0x60>
 8003a8c:	2a25      	cmp	r2, #37	@ 0x25
 8003a8e:	d1f9      	bne.n	8003a84 <_svfiprintf_r+0x54>
 8003a90:	ebba 0b04 	subs.w	fp, sl, r4
 8003a94:	d00b      	beq.n	8003aae <_svfiprintf_r+0x7e>
 8003a96:	465b      	mov	r3, fp
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f7ff ff6b 	bl	8003978 <__ssputs_r>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f000 80a7 	beq.w	8003bf6 <_svfiprintf_r+0x1c6>
 8003aa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aaa:	445a      	add	r2, fp
 8003aac:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aae:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 809f 	beq.w	8003bf6 <_svfiprintf_r+0x1c6>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295
 8003abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac2:	f10a 0a01 	add.w	sl, sl, #1
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ace:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ad0:	4654      	mov	r4, sl
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad8:	484e      	ldr	r0, [pc, #312]	@ (8003c14 <_svfiprintf_r+0x1e4>)
 8003ada:	f7fc fb81 	bl	80001e0 <memchr>
 8003ade:	9a04      	ldr	r2, [sp, #16]
 8003ae0:	b9d8      	cbnz	r0, 8003b1a <_svfiprintf_r+0xea>
 8003ae2:	06d0      	lsls	r0, r2, #27
 8003ae4:	bf44      	itt	mi
 8003ae6:	2320      	movmi	r3, #32
 8003ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aec:	0711      	lsls	r1, r2, #28
 8003aee:	bf44      	itt	mi
 8003af0:	232b      	movmi	r3, #43	@ 0x2b
 8003af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af6:	f89a 3000 	ldrb.w	r3, [sl]
 8003afa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003afc:	d015      	beq.n	8003b2a <_svfiprintf_r+0xfa>
 8003afe:	9a07      	ldr	r2, [sp, #28]
 8003b00:	4654      	mov	r4, sl
 8003b02:	2000      	movs	r0, #0
 8003b04:	f04f 0c0a 	mov.w	ip, #10
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0e:	3b30      	subs	r3, #48	@ 0x30
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d94b      	bls.n	8003bac <_svfiprintf_r+0x17c>
 8003b14:	b1b0      	cbz	r0, 8003b44 <_svfiprintf_r+0x114>
 8003b16:	9207      	str	r2, [sp, #28]
 8003b18:	e014      	b.n	8003b44 <_svfiprintf_r+0x114>
 8003b1a:	eba0 0308 	sub.w	r3, r0, r8
 8003b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b22:	4313      	orrs	r3, r2
 8003b24:	9304      	str	r3, [sp, #16]
 8003b26:	46a2      	mov	sl, r4
 8003b28:	e7d2      	b.n	8003ad0 <_svfiprintf_r+0xa0>
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	1d19      	adds	r1, r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	9103      	str	r1, [sp, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbb      	ittet	lt
 8003b36:	425b      	neglt	r3, r3
 8003b38:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3c:	9307      	strge	r3, [sp, #28]
 8003b3e:	9307      	strlt	r3, [sp, #28]
 8003b40:	bfb8      	it	lt
 8003b42:	9204      	strlt	r2, [sp, #16]
 8003b44:	7823      	ldrb	r3, [r4, #0]
 8003b46:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b48:	d10a      	bne.n	8003b60 <_svfiprintf_r+0x130>
 8003b4a:	7863      	ldrb	r3, [r4, #1]
 8003b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4e:	d132      	bne.n	8003bb6 <_svfiprintf_r+0x186>
 8003b50:	9b03      	ldr	r3, [sp, #12]
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	9203      	str	r2, [sp, #12]
 8003b58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b5c:	3402      	adds	r4, #2
 8003b5e:	9305      	str	r3, [sp, #20]
 8003b60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c24 <_svfiprintf_r+0x1f4>
 8003b64:	7821      	ldrb	r1, [r4, #0]
 8003b66:	2203      	movs	r2, #3
 8003b68:	4650      	mov	r0, sl
 8003b6a:	f7fc fb39 	bl	80001e0 <memchr>
 8003b6e:	b138      	cbz	r0, 8003b80 <_svfiprintf_r+0x150>
 8003b70:	9b04      	ldr	r3, [sp, #16]
 8003b72:	eba0 000a 	sub.w	r0, r0, sl
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	4082      	lsls	r2, r0
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	3401      	adds	r4, #1
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b84:	4824      	ldr	r0, [pc, #144]	@ (8003c18 <_svfiprintf_r+0x1e8>)
 8003b86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b8a:	2206      	movs	r2, #6
 8003b8c:	f7fc fb28 	bl	80001e0 <memchr>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d036      	beq.n	8003c02 <_svfiprintf_r+0x1d2>
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <_svfiprintf_r+0x1ec>)
 8003b96:	bb1b      	cbnz	r3, 8003be0 <_svfiprintf_r+0x1b0>
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	3307      	adds	r3, #7
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	9303      	str	r3, [sp, #12]
 8003ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba6:	4433      	add	r3, r6
 8003ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003baa:	e76a      	b.n	8003a82 <_svfiprintf_r+0x52>
 8003bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	e7a8      	b.n	8003b08 <_svfiprintf_r+0xd8>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	3401      	adds	r4, #1
 8003bba:	9305      	str	r3, [sp, #20]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f04f 0c0a 	mov.w	ip, #10
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bc8:	3a30      	subs	r2, #48	@ 0x30
 8003bca:	2a09      	cmp	r2, #9
 8003bcc:	d903      	bls.n	8003bd6 <_svfiprintf_r+0x1a6>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0c6      	beq.n	8003b60 <_svfiprintf_r+0x130>
 8003bd2:	9105      	str	r1, [sp, #20]
 8003bd4:	e7c4      	b.n	8003b60 <_svfiprintf_r+0x130>
 8003bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bda:	4604      	mov	r4, r0
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e7f0      	b.n	8003bc2 <_svfiprintf_r+0x192>
 8003be0:	ab03      	add	r3, sp, #12
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	462a      	mov	r2, r5
 8003be6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <_svfiprintf_r+0x1f0>)
 8003be8:	a904      	add	r1, sp, #16
 8003bea:	4638      	mov	r0, r7
 8003bec:	f3af 8000 	nop.w
 8003bf0:	1c42      	adds	r2, r0, #1
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	d1d6      	bne.n	8003ba4 <_svfiprintf_r+0x174>
 8003bf6:	89ab      	ldrh	r3, [r5, #12]
 8003bf8:	065b      	lsls	r3, r3, #25
 8003bfa:	f53f af2d 	bmi.w	8003a58 <_svfiprintf_r+0x28>
 8003bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c00:	e72c      	b.n	8003a5c <_svfiprintf_r+0x2c>
 8003c02:	ab03      	add	r3, sp, #12
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	462a      	mov	r2, r5
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <_svfiprintf_r+0x1f0>)
 8003c0a:	a904      	add	r1, sp, #16
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	f000 f879 	bl	8003d04 <_printf_i>
 8003c12:	e7ed      	b.n	8003bf0 <_svfiprintf_r+0x1c0>
 8003c14:	0800478b 	.word	0x0800478b
 8003c18:	08004795 	.word	0x08004795
 8003c1c:	00000000 	.word	0x00000000
 8003c20:	08003979 	.word	0x08003979
 8003c24:	08004791 	.word	0x08004791

08003c28 <_printf_common>:
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	4698      	mov	r8, r3
 8003c30:	688a      	ldr	r2, [r1, #8]
 8003c32:	690b      	ldr	r3, [r1, #16]
 8003c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	bfb8      	it	lt
 8003c3c:	4613      	movlt	r3, r2
 8003c3e:	6033      	str	r3, [r6, #0]
 8003c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c44:	4607      	mov	r7, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	b10a      	cbz	r2, 8003c4e <_printf_common+0x26>
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	0699      	lsls	r1, r3, #26
 8003c52:	bf42      	ittt	mi
 8003c54:	6833      	ldrmi	r3, [r6, #0]
 8003c56:	3302      	addmi	r3, #2
 8003c58:	6033      	strmi	r3, [r6, #0]
 8003c5a:	6825      	ldr	r5, [r4, #0]
 8003c5c:	f015 0506 	ands.w	r5, r5, #6
 8003c60:	d106      	bne.n	8003c70 <_printf_common+0x48>
 8003c62:	f104 0a19 	add.w	sl, r4, #25
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	6832      	ldr	r2, [r6, #0]
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	dc26      	bgt.n	8003cbe <_printf_common+0x96>
 8003c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	3b00      	subs	r3, #0
 8003c78:	bf18      	it	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	0692      	lsls	r2, r2, #26
 8003c7e:	d42b      	bmi.n	8003cd8 <_printf_common+0xb0>
 8003c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c84:	4641      	mov	r1, r8
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c8      	blx	r9
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d01e      	beq.n	8003ccc <_printf_common+0xa4>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	6922      	ldr	r2, [r4, #16]
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	bf02      	ittt	eq
 8003c9a:	68e5      	ldreq	r5, [r4, #12]
 8003c9c:	6833      	ldreq	r3, [r6, #0]
 8003c9e:	1aed      	subeq	r5, r5, r3
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	bf0c      	ite	eq
 8003ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ca8:	2500      	movne	r5, #0
 8003caa:	4293      	cmp	r3, r2
 8003cac:	bfc4      	itt	gt
 8003cae:	1a9b      	subgt	r3, r3, r2
 8003cb0:	18ed      	addgt	r5, r5, r3
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	341a      	adds	r4, #26
 8003cb6:	42b5      	cmp	r5, r6
 8003cb8:	d11a      	bne.n	8003cf0 <_printf_common+0xc8>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e008      	b.n	8003cd0 <_printf_common+0xa8>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4652      	mov	r2, sl
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	47c8      	blx	r9
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d103      	bne.n	8003cd4 <_printf_common+0xac>
 8003ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	e7c6      	b.n	8003c66 <_printf_common+0x3e>
 8003cd8:	18e1      	adds	r1, r4, r3
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	2030      	movs	r0, #48	@ 0x30
 8003cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ce2:	4422      	add	r2, r4
 8003ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cec:	3302      	adds	r3, #2
 8003cee:	e7c7      	b.n	8003c80 <_printf_common+0x58>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c8      	blx	r9
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d0e6      	beq.n	8003ccc <_printf_common+0xa4>
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7d9      	b.n	8003cb6 <_printf_common+0x8e>
	...

08003d04 <_printf_i>:
 8003d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	7e0f      	ldrb	r7, [r1, #24]
 8003d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d0c:	2f78      	cmp	r7, #120	@ 0x78
 8003d0e:	4691      	mov	r9, r2
 8003d10:	4680      	mov	r8, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	469a      	mov	sl, r3
 8003d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d1a:	d807      	bhi.n	8003d2c <_printf_i+0x28>
 8003d1c:	2f62      	cmp	r7, #98	@ 0x62
 8003d1e:	d80a      	bhi.n	8003d36 <_printf_i+0x32>
 8003d20:	2f00      	cmp	r7, #0
 8003d22:	f000 80d2 	beq.w	8003eca <_printf_i+0x1c6>
 8003d26:	2f58      	cmp	r7, #88	@ 0x58
 8003d28:	f000 80b9 	beq.w	8003e9e <_printf_i+0x19a>
 8003d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d34:	e03a      	b.n	8003dac <_printf_i+0xa8>
 8003d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d3a:	2b15      	cmp	r3, #21
 8003d3c:	d8f6      	bhi.n	8003d2c <_printf_i+0x28>
 8003d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d44 <_printf_i+0x40>)
 8003d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d44:	08003d9d 	.word	0x08003d9d
 8003d48:	08003db1 	.word	0x08003db1
 8003d4c:	08003d2d 	.word	0x08003d2d
 8003d50:	08003d2d 	.word	0x08003d2d
 8003d54:	08003d2d 	.word	0x08003d2d
 8003d58:	08003d2d 	.word	0x08003d2d
 8003d5c:	08003db1 	.word	0x08003db1
 8003d60:	08003d2d 	.word	0x08003d2d
 8003d64:	08003d2d 	.word	0x08003d2d
 8003d68:	08003d2d 	.word	0x08003d2d
 8003d6c:	08003d2d 	.word	0x08003d2d
 8003d70:	08003eb1 	.word	0x08003eb1
 8003d74:	08003ddb 	.word	0x08003ddb
 8003d78:	08003e6b 	.word	0x08003e6b
 8003d7c:	08003d2d 	.word	0x08003d2d
 8003d80:	08003d2d 	.word	0x08003d2d
 8003d84:	08003ed3 	.word	0x08003ed3
 8003d88:	08003d2d 	.word	0x08003d2d
 8003d8c:	08003ddb 	.word	0x08003ddb
 8003d90:	08003d2d 	.word	0x08003d2d
 8003d94:	08003d2d 	.word	0x08003d2d
 8003d98:	08003e73 	.word	0x08003e73
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6032      	str	r2, [r6, #0]
 8003da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dac:	2301      	movs	r3, #1
 8003dae:	e09d      	b.n	8003eec <_printf_i+0x1e8>
 8003db0:	6833      	ldr	r3, [r6, #0]
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	1d19      	adds	r1, r3, #4
 8003db6:	6031      	str	r1, [r6, #0]
 8003db8:	0606      	lsls	r6, r0, #24
 8003dba:	d501      	bpl.n	8003dc0 <_printf_i+0xbc>
 8003dbc:	681d      	ldr	r5, [r3, #0]
 8003dbe:	e003      	b.n	8003dc8 <_printf_i+0xc4>
 8003dc0:	0645      	lsls	r5, r0, #25
 8003dc2:	d5fb      	bpl.n	8003dbc <_printf_i+0xb8>
 8003dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	da03      	bge.n	8003dd4 <_printf_i+0xd0>
 8003dcc:	232d      	movs	r3, #45	@ 0x2d
 8003dce:	426d      	negs	r5, r5
 8003dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd4:	4859      	ldr	r0, [pc, #356]	@ (8003f3c <_printf_i+0x238>)
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e011      	b.n	8003dfe <_printf_i+0xfa>
 8003dda:	6821      	ldr	r1, [r4, #0]
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	0608      	lsls	r0, r1, #24
 8003de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003de4:	d402      	bmi.n	8003dec <_printf_i+0xe8>
 8003de6:	0649      	lsls	r1, r1, #25
 8003de8:	bf48      	it	mi
 8003dea:	b2ad      	uxthmi	r5, r5
 8003dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dee:	4853      	ldr	r0, [pc, #332]	@ (8003f3c <_printf_i+0x238>)
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	bf14      	ite	ne
 8003df4:	230a      	movne	r3, #10
 8003df6:	2308      	moveq	r3, #8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dfe:	6866      	ldr	r6, [r4, #4]
 8003e00:	60a6      	str	r6, [r4, #8]
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	bfa2      	ittt	ge
 8003e06:	6821      	ldrge	r1, [r4, #0]
 8003e08:	f021 0104 	bicge.w	r1, r1, #4
 8003e0c:	6021      	strge	r1, [r4, #0]
 8003e0e:	b90d      	cbnz	r5, 8003e14 <_printf_i+0x110>
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	d04b      	beq.n	8003eac <_printf_i+0x1a8>
 8003e14:	4616      	mov	r6, r2
 8003e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8003e1e:	5dc7      	ldrb	r7, [r0, r7]
 8003e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e24:	462f      	mov	r7, r5
 8003e26:	42bb      	cmp	r3, r7
 8003e28:	460d      	mov	r5, r1
 8003e2a:	d9f4      	bls.n	8003e16 <_printf_i+0x112>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d10b      	bne.n	8003e48 <_printf_i+0x144>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	07df      	lsls	r7, r3, #31
 8003e34:	d508      	bpl.n	8003e48 <_printf_i+0x144>
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	6861      	ldr	r1, [r4, #4]
 8003e3a:	4299      	cmp	r1, r3
 8003e3c:	bfde      	ittt	le
 8003e3e:	2330      	movle	r3, #48	@ 0x30
 8003e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e48:	1b92      	subs	r2, r2, r6
 8003e4a:	6122      	str	r2, [r4, #16]
 8003e4c:	f8cd a000 	str.w	sl, [sp]
 8003e50:	464b      	mov	r3, r9
 8003e52:	aa03      	add	r2, sp, #12
 8003e54:	4621      	mov	r1, r4
 8003e56:	4640      	mov	r0, r8
 8003e58:	f7ff fee6 	bl	8003c28 <_printf_common>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d14a      	bne.n	8003ef6 <_printf_i+0x1f2>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	b004      	add	sp, #16
 8003e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f043 0320 	orr.w	r3, r3, #32
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	4833      	ldr	r0, [pc, #204]	@ (8003f40 <_printf_i+0x23c>)
 8003e74:	2778      	movs	r7, #120	@ 0x78
 8003e76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	6831      	ldr	r1, [r6, #0]
 8003e7e:	061f      	lsls	r7, r3, #24
 8003e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e84:	d402      	bmi.n	8003e8c <_printf_i+0x188>
 8003e86:	065f      	lsls	r7, r3, #25
 8003e88:	bf48      	it	mi
 8003e8a:	b2ad      	uxthmi	r5, r5
 8003e8c:	6031      	str	r1, [r6, #0]
 8003e8e:	07d9      	lsls	r1, r3, #31
 8003e90:	bf44      	itt	mi
 8003e92:	f043 0320 	orrmi.w	r3, r3, #32
 8003e96:	6023      	strmi	r3, [r4, #0]
 8003e98:	b11d      	cbz	r5, 8003ea2 <_printf_i+0x19e>
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	e7ac      	b.n	8003df8 <_printf_i+0xf4>
 8003e9e:	4827      	ldr	r0, [pc, #156]	@ (8003f3c <_printf_i+0x238>)
 8003ea0:	e7e9      	b.n	8003e76 <_printf_i+0x172>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	f023 0320 	bic.w	r3, r3, #32
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	e7f6      	b.n	8003e9a <_printf_i+0x196>
 8003eac:	4616      	mov	r6, r2
 8003eae:	e7bd      	b.n	8003e2c <_printf_i+0x128>
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	6825      	ldr	r5, [r4, #0]
 8003eb4:	6961      	ldr	r1, [r4, #20]
 8003eb6:	1d18      	adds	r0, r3, #4
 8003eb8:	6030      	str	r0, [r6, #0]
 8003eba:	062e      	lsls	r6, r5, #24
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	d501      	bpl.n	8003ec4 <_printf_i+0x1c0>
 8003ec0:	6019      	str	r1, [r3, #0]
 8003ec2:	e002      	b.n	8003eca <_printf_i+0x1c6>
 8003ec4:	0668      	lsls	r0, r5, #25
 8003ec6:	d5fb      	bpl.n	8003ec0 <_printf_i+0x1bc>
 8003ec8:	8019      	strh	r1, [r3, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	4616      	mov	r6, r2
 8003ed0:	e7bc      	b.n	8003e4c <_printf_i+0x148>
 8003ed2:	6833      	ldr	r3, [r6, #0]
 8003ed4:	1d1a      	adds	r2, r3, #4
 8003ed6:	6032      	str	r2, [r6, #0]
 8003ed8:	681e      	ldr	r6, [r3, #0]
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7fc f97e 	bl	80001e0 <memchr>
 8003ee4:	b108      	cbz	r0, 8003eea <_printf_i+0x1e6>
 8003ee6:	1b80      	subs	r0, r0, r6
 8003ee8:	6060      	str	r0, [r4, #4]
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	6123      	str	r3, [r4, #16]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef4:	e7aa      	b.n	8003e4c <_printf_i+0x148>
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	4632      	mov	r2, r6
 8003efa:	4649      	mov	r1, r9
 8003efc:	4640      	mov	r0, r8
 8003efe:	47d0      	blx	sl
 8003f00:	3001      	adds	r0, #1
 8003f02:	d0ad      	beq.n	8003e60 <_printf_i+0x15c>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	079b      	lsls	r3, r3, #30
 8003f08:	d413      	bmi.n	8003f32 <_printf_i+0x22e>
 8003f0a:	68e0      	ldr	r0, [r4, #12]
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	4298      	cmp	r0, r3
 8003f10:	bfb8      	it	lt
 8003f12:	4618      	movlt	r0, r3
 8003f14:	e7a6      	b.n	8003e64 <_printf_i+0x160>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4632      	mov	r2, r6
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	47d0      	blx	sl
 8003f20:	3001      	adds	r0, #1
 8003f22:	d09d      	beq.n	8003e60 <_printf_i+0x15c>
 8003f24:	3501      	adds	r5, #1
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	9903      	ldr	r1, [sp, #12]
 8003f2a:	1a5b      	subs	r3, r3, r1
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dcf2      	bgt.n	8003f16 <_printf_i+0x212>
 8003f30:	e7eb      	b.n	8003f0a <_printf_i+0x206>
 8003f32:	2500      	movs	r5, #0
 8003f34:	f104 0619 	add.w	r6, r4, #25
 8003f38:	e7f5      	b.n	8003f26 <_printf_i+0x222>
 8003f3a:	bf00      	nop
 8003f3c:	0800479c 	.word	0x0800479c
 8003f40:	080047ad 	.word	0x080047ad

08003f44 <__sflush_r>:
 8003f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4c:	0716      	lsls	r6, r2, #28
 8003f4e:	4605      	mov	r5, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	d454      	bmi.n	8003ffe <__sflush_r+0xba>
 8003f54:	684b      	ldr	r3, [r1, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dc02      	bgt.n	8003f60 <__sflush_r+0x1c>
 8003f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dd48      	ble.n	8003ff2 <__sflush_r+0xae>
 8003f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f62:	2e00      	cmp	r6, #0
 8003f64:	d045      	beq.n	8003ff2 <__sflush_r+0xae>
 8003f66:	2300      	movs	r3, #0
 8003f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f6c:	682f      	ldr	r7, [r5, #0]
 8003f6e:	6a21      	ldr	r1, [r4, #32]
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	d030      	beq.n	8003fd6 <__sflush_r+0x92>
 8003f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	0759      	lsls	r1, r3, #29
 8003f7a:	d505      	bpl.n	8003f88 <__sflush_r+0x44>
 8003f7c:	6863      	ldr	r3, [r4, #4]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f82:	b10b      	cbz	r3, 8003f88 <__sflush_r+0x44>
 8003f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f8c:	6a21      	ldr	r1, [r4, #32]
 8003f8e:	4628      	mov	r0, r5
 8003f90:	47b0      	blx	r6
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	d106      	bne.n	8003fa6 <__sflush_r+0x62>
 8003f98:	6829      	ldr	r1, [r5, #0]
 8003f9a:	291d      	cmp	r1, #29
 8003f9c:	d82b      	bhi.n	8003ff6 <__sflush_r+0xb2>
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <__sflush_r+0x104>)
 8003fa0:	410a      	asrs	r2, r1
 8003fa2:	07d6      	lsls	r6, r2, #31
 8003fa4:	d427      	bmi.n	8003ff6 <__sflush_r+0xb2>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	6062      	str	r2, [r4, #4]
 8003faa:	04d9      	lsls	r1, r3, #19
 8003fac:	6922      	ldr	r2, [r4, #16]
 8003fae:	6022      	str	r2, [r4, #0]
 8003fb0:	d504      	bpl.n	8003fbc <__sflush_r+0x78>
 8003fb2:	1c42      	adds	r2, r0, #1
 8003fb4:	d101      	bne.n	8003fba <__sflush_r+0x76>
 8003fb6:	682b      	ldr	r3, [r5, #0]
 8003fb8:	b903      	cbnz	r3, 8003fbc <__sflush_r+0x78>
 8003fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fbe:	602f      	str	r7, [r5, #0]
 8003fc0:	b1b9      	cbz	r1, 8003ff2 <__sflush_r+0xae>
 8003fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d002      	beq.n	8003fd0 <__sflush_r+0x8c>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7ff fc8a 	bl	80038e4 <_free_r>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fd4:	e00d      	b.n	8003ff2 <__sflush_r+0xae>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b0      	blx	r6
 8003fdc:	4602      	mov	r2, r0
 8003fde:	1c50      	adds	r0, r2, #1
 8003fe0:	d1c9      	bne.n	8003f76 <__sflush_r+0x32>
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0c6      	beq.n	8003f76 <__sflush_r+0x32>
 8003fe8:	2b1d      	cmp	r3, #29
 8003fea:	d001      	beq.n	8003ff0 <__sflush_r+0xac>
 8003fec:	2b16      	cmp	r3, #22
 8003fee:	d11e      	bne.n	800402e <__sflush_r+0xea>
 8003ff0:	602f      	str	r7, [r5, #0]
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e022      	b.n	800403c <__sflush_r+0xf8>
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	e01b      	b.n	8004036 <__sflush_r+0xf2>
 8003ffe:	690f      	ldr	r7, [r1, #16]
 8004000:	2f00      	cmp	r7, #0
 8004002:	d0f6      	beq.n	8003ff2 <__sflush_r+0xae>
 8004004:	0793      	lsls	r3, r2, #30
 8004006:	680e      	ldr	r6, [r1, #0]
 8004008:	bf08      	it	eq
 800400a:	694b      	ldreq	r3, [r1, #20]
 800400c:	600f      	str	r7, [r1, #0]
 800400e:	bf18      	it	ne
 8004010:	2300      	movne	r3, #0
 8004012:	eba6 0807 	sub.w	r8, r6, r7
 8004016:	608b      	str	r3, [r1, #8]
 8004018:	f1b8 0f00 	cmp.w	r8, #0
 800401c:	dde9      	ble.n	8003ff2 <__sflush_r+0xae>
 800401e:	6a21      	ldr	r1, [r4, #32]
 8004020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004022:	4643      	mov	r3, r8
 8004024:	463a      	mov	r2, r7
 8004026:	4628      	mov	r0, r5
 8004028:	47b0      	blx	r6
 800402a:	2800      	cmp	r0, #0
 800402c:	dc08      	bgt.n	8004040 <__sflush_r+0xfc>
 800402e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004040:	4407      	add	r7, r0
 8004042:	eba8 0800 	sub.w	r8, r8, r0
 8004046:	e7e7      	b.n	8004018 <__sflush_r+0xd4>
 8004048:	dfbffffe 	.word	0xdfbffffe

0800404c <_fflush_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	4605      	mov	r5, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b913      	cbnz	r3, 800405c <_fflush_r+0x10>
 8004056:	2500      	movs	r5, #0
 8004058:	4628      	mov	r0, r5
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	b118      	cbz	r0, 8004066 <_fflush_r+0x1a>
 800405e:	6a03      	ldr	r3, [r0, #32]
 8004060:	b90b      	cbnz	r3, 8004066 <_fflush_r+0x1a>
 8004062:	f7ff f9db 	bl	800341c <__sinit>
 8004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f3      	beq.n	8004056 <_fflush_r+0xa>
 800406e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004070:	07d0      	lsls	r0, r2, #31
 8004072:	d404      	bmi.n	800407e <_fflush_r+0x32>
 8004074:	0599      	lsls	r1, r3, #22
 8004076:	d402      	bmi.n	800407e <_fflush_r+0x32>
 8004078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800407a:	f7ff fc12 	bl	80038a2 <__retarget_lock_acquire_recursive>
 800407e:	4628      	mov	r0, r5
 8004080:	4621      	mov	r1, r4
 8004082:	f7ff ff5f 	bl	8003f44 <__sflush_r>
 8004086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004088:	07da      	lsls	r2, r3, #31
 800408a:	4605      	mov	r5, r0
 800408c:	d4e4      	bmi.n	8004058 <_fflush_r+0xc>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	059b      	lsls	r3, r3, #22
 8004092:	d4e1      	bmi.n	8004058 <_fflush_r+0xc>
 8004094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004096:	f7ff fc05 	bl	80038a4 <__retarget_lock_release_recursive>
 800409a:	e7dd      	b.n	8004058 <_fflush_r+0xc>

0800409c <fiprintf>:
 800409c:	b40e      	push	{r1, r2, r3}
 800409e:	b503      	push	{r0, r1, lr}
 80040a0:	4601      	mov	r1, r0
 80040a2:	ab03      	add	r3, sp, #12
 80040a4:	4805      	ldr	r0, [pc, #20]	@ (80040bc <fiprintf+0x20>)
 80040a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	f000 f911 	bl	80042d4 <_vfiprintf_r>
 80040b2:	b002      	add	sp, #8
 80040b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b8:	b003      	add	sp, #12
 80040ba:	4770      	bx	lr
 80040bc:	2000001c 	.word	0x2000001c

080040c0 <__swhatbuf_r>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	460c      	mov	r4, r1
 80040c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c8:	2900      	cmp	r1, #0
 80040ca:	b096      	sub	sp, #88	@ 0x58
 80040cc:	4615      	mov	r5, r2
 80040ce:	461e      	mov	r6, r3
 80040d0:	da0d      	bge.n	80040ee <__swhatbuf_r+0x2e>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	bf14      	ite	ne
 80040de:	2340      	movne	r3, #64	@ 0x40
 80040e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040e4:	2000      	movs	r0, #0
 80040e6:	6031      	str	r1, [r6, #0]
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	b016      	add	sp, #88	@ 0x58
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
 80040ee:	466a      	mov	r2, sp
 80040f0:	f000 f862 	bl	80041b8 <_fstat_r>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	dbec      	blt.n	80040d2 <__swhatbuf_r+0x12>
 80040f8:	9901      	ldr	r1, [sp, #4]
 80040fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004102:	4259      	negs	r1, r3
 8004104:	4159      	adcs	r1, r3
 8004106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800410a:	e7eb      	b.n	80040e4 <__swhatbuf_r+0x24>

0800410c <__smakebuf_r>:
 800410c:	898b      	ldrh	r3, [r1, #12]
 800410e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004110:	079d      	lsls	r5, r3, #30
 8004112:	4606      	mov	r6, r0
 8004114:	460c      	mov	r4, r1
 8004116:	d507      	bpl.n	8004128 <__smakebuf_r+0x1c>
 8004118:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	2301      	movs	r3, #1
 8004122:	6163      	str	r3, [r4, #20]
 8004124:	b003      	add	sp, #12
 8004126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004128:	ab01      	add	r3, sp, #4
 800412a:	466a      	mov	r2, sp
 800412c:	f7ff ffc8 	bl	80040c0 <__swhatbuf_r>
 8004130:	9f00      	ldr	r7, [sp, #0]
 8004132:	4605      	mov	r5, r0
 8004134:	4639      	mov	r1, r7
 8004136:	4630      	mov	r0, r6
 8004138:	f7fe ffec 	bl	8003114 <_malloc_r>
 800413c:	b948      	cbnz	r0, 8004152 <__smakebuf_r+0x46>
 800413e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004142:	059a      	lsls	r2, r3, #22
 8004144:	d4ee      	bmi.n	8004124 <__smakebuf_r+0x18>
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	e7e2      	b.n	8004118 <__smakebuf_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	6020      	str	r0, [r4, #0]
 8004156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	9b01      	ldr	r3, [sp, #4]
 800415e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004162:	b15b      	cbz	r3, 800417c <__smakebuf_r+0x70>
 8004164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004168:	4630      	mov	r0, r6
 800416a:	f000 f837 	bl	80041dc <_isatty_r>
 800416e:	b128      	cbz	r0, 800417c <__smakebuf_r+0x70>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	81a3      	strh	r3, [r4, #12]
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	431d      	orrs	r5, r3
 8004180:	81a5      	strh	r5, [r4, #12]
 8004182:	e7cf      	b.n	8004124 <__smakebuf_r+0x18>

08004184 <memmove>:
 8004184:	4288      	cmp	r0, r1
 8004186:	b510      	push	{r4, lr}
 8004188:	eb01 0402 	add.w	r4, r1, r2
 800418c:	d902      	bls.n	8004194 <memmove+0x10>
 800418e:	4284      	cmp	r4, r0
 8004190:	4623      	mov	r3, r4
 8004192:	d807      	bhi.n	80041a4 <memmove+0x20>
 8004194:	1e43      	subs	r3, r0, #1
 8004196:	42a1      	cmp	r1, r4
 8004198:	d008      	beq.n	80041ac <memmove+0x28>
 800419a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800419e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041a2:	e7f8      	b.n	8004196 <memmove+0x12>
 80041a4:	4402      	add	r2, r0
 80041a6:	4601      	mov	r1, r0
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d100      	bne.n	80041ae <memmove+0x2a>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041b6:	e7f7      	b.n	80041a8 <memmove+0x24>

080041b8 <_fstat_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d07      	ldr	r5, [pc, #28]	@ (80041d8 <_fstat_r+0x20>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	f7fd fb1a 	bl	80017fe <_fstat>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d102      	bne.n	80041d4 <_fstat_r+0x1c>
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	b103      	cbz	r3, 80041d4 <_fstat_r+0x1c>
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	bf00      	nop
 80041d8:	20000264 	.word	0x20000264

080041dc <_isatty_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	@ (80041f8 <_isatty_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fd fb19 	bl	800181e <_isatty>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_isatty_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_isatty_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000264 	.word	0x20000264

080041fc <memcpy>:
 80041fc:	440a      	add	r2, r1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f100 33ff 	add.w	r3, r0, #4294967295
 8004204:	d100      	bne.n	8004208 <memcpy+0xc>
 8004206:	4770      	bx	lr
 8004208:	b510      	push	{r4, lr}
 800420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004212:	4291      	cmp	r1, r2
 8004214:	d1f9      	bne.n	800420a <memcpy+0xe>
 8004216:	bd10      	pop	{r4, pc}

08004218 <abort>:
 8004218:	b508      	push	{r3, lr}
 800421a:	2006      	movs	r0, #6
 800421c:	f000 f99a 	bl	8004554 <raise>
 8004220:	2001      	movs	r0, #1
 8004222:	f7fd fa9c 	bl	800175e <_exit>

08004226 <_realloc_r>:
 8004226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800422a:	4680      	mov	r8, r0
 800422c:	4615      	mov	r5, r2
 800422e:	460c      	mov	r4, r1
 8004230:	b921      	cbnz	r1, 800423c <_realloc_r+0x16>
 8004232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004236:	4611      	mov	r1, r2
 8004238:	f7fe bf6c 	b.w	8003114 <_malloc_r>
 800423c:	b92a      	cbnz	r2, 800424a <_realloc_r+0x24>
 800423e:	f7ff fb51 	bl	80038e4 <_free_r>
 8004242:	2400      	movs	r4, #0
 8004244:	4620      	mov	r0, r4
 8004246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800424a:	f000 f99f 	bl	800458c <_malloc_usable_size_r>
 800424e:	4285      	cmp	r5, r0
 8004250:	4606      	mov	r6, r0
 8004252:	d802      	bhi.n	800425a <_realloc_r+0x34>
 8004254:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004258:	d8f4      	bhi.n	8004244 <_realloc_r+0x1e>
 800425a:	4629      	mov	r1, r5
 800425c:	4640      	mov	r0, r8
 800425e:	f7fe ff59 	bl	8003114 <_malloc_r>
 8004262:	4607      	mov	r7, r0
 8004264:	2800      	cmp	r0, #0
 8004266:	d0ec      	beq.n	8004242 <_realloc_r+0x1c>
 8004268:	42b5      	cmp	r5, r6
 800426a:	462a      	mov	r2, r5
 800426c:	4621      	mov	r1, r4
 800426e:	bf28      	it	cs
 8004270:	4632      	movcs	r2, r6
 8004272:	f7ff ffc3 	bl	80041fc <memcpy>
 8004276:	4621      	mov	r1, r4
 8004278:	4640      	mov	r0, r8
 800427a:	f7ff fb33 	bl	80038e4 <_free_r>
 800427e:	463c      	mov	r4, r7
 8004280:	e7e0      	b.n	8004244 <_realloc_r+0x1e>

08004282 <__sfputc_r>:
 8004282:	6893      	ldr	r3, [r2, #8]
 8004284:	3b01      	subs	r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	b410      	push	{r4}
 800428a:	6093      	str	r3, [r2, #8]
 800428c:	da08      	bge.n	80042a0 <__sfputc_r+0x1e>
 800428e:	6994      	ldr	r4, [r2, #24]
 8004290:	42a3      	cmp	r3, r4
 8004292:	db01      	blt.n	8004298 <__sfputc_r+0x16>
 8004294:	290a      	cmp	r1, #10
 8004296:	d103      	bne.n	80042a0 <__sfputc_r+0x1e>
 8004298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429c:	f7ff b9b5 	b.w	800360a <__swbuf_r>
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	1c58      	adds	r0, r3, #1
 80042a4:	6010      	str	r0, [r2, #0]
 80042a6:	7019      	strb	r1, [r3, #0]
 80042a8:	4608      	mov	r0, r1
 80042aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <__sfputs_r>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	4606      	mov	r6, r0
 80042b4:	460f      	mov	r7, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	18d5      	adds	r5, r2, r3
 80042ba:	42ac      	cmp	r4, r5
 80042bc:	d101      	bne.n	80042c2 <__sfputs_r+0x12>
 80042be:	2000      	movs	r0, #0
 80042c0:	e007      	b.n	80042d2 <__sfputs_r+0x22>
 80042c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c6:	463a      	mov	r2, r7
 80042c8:	4630      	mov	r0, r6
 80042ca:	f7ff ffda 	bl	8004282 <__sfputc_r>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	d1f3      	bne.n	80042ba <__sfputs_r+0xa>
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042d4 <_vfiprintf_r>:
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	460d      	mov	r5, r1
 80042da:	b09d      	sub	sp, #116	@ 0x74
 80042dc:	4614      	mov	r4, r2
 80042de:	4698      	mov	r8, r3
 80042e0:	4606      	mov	r6, r0
 80042e2:	b118      	cbz	r0, 80042ec <_vfiprintf_r+0x18>
 80042e4:	6a03      	ldr	r3, [r0, #32]
 80042e6:	b90b      	cbnz	r3, 80042ec <_vfiprintf_r+0x18>
 80042e8:	f7ff f898 	bl	800341c <__sinit>
 80042ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042ee:	07d9      	lsls	r1, r3, #31
 80042f0:	d405      	bmi.n	80042fe <_vfiprintf_r+0x2a>
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	059a      	lsls	r2, r3, #22
 80042f6:	d402      	bmi.n	80042fe <_vfiprintf_r+0x2a>
 80042f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042fa:	f7ff fad2 	bl	80038a2 <__retarget_lock_acquire_recursive>
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	d501      	bpl.n	8004308 <_vfiprintf_r+0x34>
 8004304:	692b      	ldr	r3, [r5, #16]
 8004306:	b99b      	cbnz	r3, 8004330 <_vfiprintf_r+0x5c>
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff f9bc 	bl	8003688 <__swsetup_r>
 8004310:	b170      	cbz	r0, 8004330 <_vfiprintf_r+0x5c>
 8004312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004314:	07dc      	lsls	r4, r3, #31
 8004316:	d504      	bpl.n	8004322 <_vfiprintf_r+0x4e>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b01d      	add	sp, #116	@ 0x74
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004322:	89ab      	ldrh	r3, [r5, #12]
 8004324:	0598      	lsls	r0, r3, #22
 8004326:	d4f7      	bmi.n	8004318 <_vfiprintf_r+0x44>
 8004328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800432a:	f7ff fabb 	bl	80038a4 <__retarget_lock_release_recursive>
 800432e:	e7f3      	b.n	8004318 <_vfiprintf_r+0x44>
 8004330:	2300      	movs	r3, #0
 8004332:	9309      	str	r3, [sp, #36]	@ 0x24
 8004334:	2320      	movs	r3, #32
 8004336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800433a:	f8cd 800c 	str.w	r8, [sp, #12]
 800433e:	2330      	movs	r3, #48	@ 0x30
 8004340:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044f0 <_vfiprintf_r+0x21c>
 8004344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004348:	f04f 0901 	mov.w	r9, #1
 800434c:	4623      	mov	r3, r4
 800434e:	469a      	mov	sl, r3
 8004350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004354:	b10a      	cbz	r2, 800435a <_vfiprintf_r+0x86>
 8004356:	2a25      	cmp	r2, #37	@ 0x25
 8004358:	d1f9      	bne.n	800434e <_vfiprintf_r+0x7a>
 800435a:	ebba 0b04 	subs.w	fp, sl, r4
 800435e:	d00b      	beq.n	8004378 <_vfiprintf_r+0xa4>
 8004360:	465b      	mov	r3, fp
 8004362:	4622      	mov	r2, r4
 8004364:	4629      	mov	r1, r5
 8004366:	4630      	mov	r0, r6
 8004368:	f7ff ffa2 	bl	80042b0 <__sfputs_r>
 800436c:	3001      	adds	r0, #1
 800436e:	f000 80a7 	beq.w	80044c0 <_vfiprintf_r+0x1ec>
 8004372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004374:	445a      	add	r2, fp
 8004376:	9209      	str	r2, [sp, #36]	@ 0x24
 8004378:	f89a 3000 	ldrb.w	r3, [sl]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 809f 	beq.w	80044c0 <_vfiprintf_r+0x1ec>
 8004382:	2300      	movs	r3, #0
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438c:	f10a 0a01 	add.w	sl, sl, #1
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004398:	931a      	str	r3, [sp, #104]	@ 0x68
 800439a:	4654      	mov	r4, sl
 800439c:	2205      	movs	r2, #5
 800439e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a2:	4853      	ldr	r0, [pc, #332]	@ (80044f0 <_vfiprintf_r+0x21c>)
 80043a4:	f7fb ff1c 	bl	80001e0 <memchr>
 80043a8:	9a04      	ldr	r2, [sp, #16]
 80043aa:	b9d8      	cbnz	r0, 80043e4 <_vfiprintf_r+0x110>
 80043ac:	06d1      	lsls	r1, r2, #27
 80043ae:	bf44      	itt	mi
 80043b0:	2320      	movmi	r3, #32
 80043b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043b6:	0713      	lsls	r3, r2, #28
 80043b8:	bf44      	itt	mi
 80043ba:	232b      	movmi	r3, #43	@ 0x2b
 80043bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c0:	f89a 3000 	ldrb.w	r3, [sl]
 80043c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80043c6:	d015      	beq.n	80043f4 <_vfiprintf_r+0x120>
 80043c8:	9a07      	ldr	r2, [sp, #28]
 80043ca:	4654      	mov	r4, sl
 80043cc:	2000      	movs	r0, #0
 80043ce:	f04f 0c0a 	mov.w	ip, #10
 80043d2:	4621      	mov	r1, r4
 80043d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043d8:	3b30      	subs	r3, #48	@ 0x30
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d94b      	bls.n	8004476 <_vfiprintf_r+0x1a2>
 80043de:	b1b0      	cbz	r0, 800440e <_vfiprintf_r+0x13a>
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	e014      	b.n	800440e <_vfiprintf_r+0x13a>
 80043e4:	eba0 0308 	sub.w	r3, r0, r8
 80043e8:	fa09 f303 	lsl.w	r3, r9, r3
 80043ec:	4313      	orrs	r3, r2
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	46a2      	mov	sl, r4
 80043f2:	e7d2      	b.n	800439a <_vfiprintf_r+0xc6>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	1d19      	adds	r1, r3, #4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	9103      	str	r1, [sp, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfbb      	ittet	lt
 8004400:	425b      	neglt	r3, r3
 8004402:	f042 0202 	orrlt.w	r2, r2, #2
 8004406:	9307      	strge	r3, [sp, #28]
 8004408:	9307      	strlt	r3, [sp, #28]
 800440a:	bfb8      	it	lt
 800440c:	9204      	strlt	r2, [sp, #16]
 800440e:	7823      	ldrb	r3, [r4, #0]
 8004410:	2b2e      	cmp	r3, #46	@ 0x2e
 8004412:	d10a      	bne.n	800442a <_vfiprintf_r+0x156>
 8004414:	7863      	ldrb	r3, [r4, #1]
 8004416:	2b2a      	cmp	r3, #42	@ 0x2a
 8004418:	d132      	bne.n	8004480 <_vfiprintf_r+0x1ac>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	9203      	str	r2, [sp, #12]
 8004422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004426:	3402      	adds	r4, #2
 8004428:	9305      	str	r3, [sp, #20]
 800442a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004500 <_vfiprintf_r+0x22c>
 800442e:	7821      	ldrb	r1, [r4, #0]
 8004430:	2203      	movs	r2, #3
 8004432:	4650      	mov	r0, sl
 8004434:	f7fb fed4 	bl	80001e0 <memchr>
 8004438:	b138      	cbz	r0, 800444a <_vfiprintf_r+0x176>
 800443a:	9b04      	ldr	r3, [sp, #16]
 800443c:	eba0 000a 	sub.w	r0, r0, sl
 8004440:	2240      	movs	r2, #64	@ 0x40
 8004442:	4082      	lsls	r2, r0
 8004444:	4313      	orrs	r3, r2
 8004446:	3401      	adds	r4, #1
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444e:	4829      	ldr	r0, [pc, #164]	@ (80044f4 <_vfiprintf_r+0x220>)
 8004450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004454:	2206      	movs	r2, #6
 8004456:	f7fb fec3 	bl	80001e0 <memchr>
 800445a:	2800      	cmp	r0, #0
 800445c:	d03f      	beq.n	80044de <_vfiprintf_r+0x20a>
 800445e:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <_vfiprintf_r+0x224>)
 8004460:	bb1b      	cbnz	r3, 80044aa <_vfiprintf_r+0x1d6>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	3308      	adds	r3, #8
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004470:	443b      	add	r3, r7
 8004472:	9309      	str	r3, [sp, #36]	@ 0x24
 8004474:	e76a      	b.n	800434c <_vfiprintf_r+0x78>
 8004476:	fb0c 3202 	mla	r2, ip, r2, r3
 800447a:	460c      	mov	r4, r1
 800447c:	2001      	movs	r0, #1
 800447e:	e7a8      	b.n	80043d2 <_vfiprintf_r+0xfe>
 8004480:	2300      	movs	r3, #0
 8004482:	3401      	adds	r4, #1
 8004484:	9305      	str	r3, [sp, #20]
 8004486:	4619      	mov	r1, r3
 8004488:	f04f 0c0a 	mov.w	ip, #10
 800448c:	4620      	mov	r0, r4
 800448e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004492:	3a30      	subs	r2, #48	@ 0x30
 8004494:	2a09      	cmp	r2, #9
 8004496:	d903      	bls.n	80044a0 <_vfiprintf_r+0x1cc>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0c6      	beq.n	800442a <_vfiprintf_r+0x156>
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	e7c4      	b.n	800442a <_vfiprintf_r+0x156>
 80044a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a4:	4604      	mov	r4, r0
 80044a6:	2301      	movs	r3, #1
 80044a8:	e7f0      	b.n	800448c <_vfiprintf_r+0x1b8>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <_vfiprintf_r+0x228>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4630      	mov	r0, r6
 80044b6:	f3af 8000 	nop.w
 80044ba:	4607      	mov	r7, r0
 80044bc:	1c78      	adds	r0, r7, #1
 80044be:	d1d6      	bne.n	800446e <_vfiprintf_r+0x19a>
 80044c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c2:	07d9      	lsls	r1, r3, #31
 80044c4:	d405      	bmi.n	80044d2 <_vfiprintf_r+0x1fe>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	059a      	lsls	r2, r3, #22
 80044ca:	d402      	bmi.n	80044d2 <_vfiprintf_r+0x1fe>
 80044cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ce:	f7ff f9e9 	bl	80038a4 <__retarget_lock_release_recursive>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	065b      	lsls	r3, r3, #25
 80044d6:	f53f af1f 	bmi.w	8004318 <_vfiprintf_r+0x44>
 80044da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044dc:	e71e      	b.n	800431c <_vfiprintf_r+0x48>
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	462a      	mov	r2, r5
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <_vfiprintf_r+0x228>)
 80044e6:	a904      	add	r1, sp, #16
 80044e8:	4630      	mov	r0, r6
 80044ea:	f7ff fc0b 	bl	8003d04 <_printf_i>
 80044ee:	e7e4      	b.n	80044ba <_vfiprintf_r+0x1e6>
 80044f0:	0800478b 	.word	0x0800478b
 80044f4:	08004795 	.word	0x08004795
 80044f8:	00000000 	.word	0x00000000
 80044fc:	080042b1 	.word	0x080042b1
 8004500:	08004791 	.word	0x08004791

08004504 <_raise_r>:
 8004504:	291f      	cmp	r1, #31
 8004506:	b538      	push	{r3, r4, r5, lr}
 8004508:	4605      	mov	r5, r0
 800450a:	460c      	mov	r4, r1
 800450c:	d904      	bls.n	8004518 <_raise_r+0x14>
 800450e:	2316      	movs	r3, #22
 8004510:	6003      	str	r3, [r0, #0]
 8004512:	f04f 30ff 	mov.w	r0, #4294967295
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800451a:	b112      	cbz	r2, 8004522 <_raise_r+0x1e>
 800451c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004520:	b94b      	cbnz	r3, 8004536 <_raise_r+0x32>
 8004522:	4628      	mov	r0, r5
 8004524:	f000 f830 	bl	8004588 <_getpid_r>
 8004528:	4622      	mov	r2, r4
 800452a:	4601      	mov	r1, r0
 800452c:	4628      	mov	r0, r5
 800452e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004532:	f000 b817 	b.w	8004564 <_kill_r>
 8004536:	2b01      	cmp	r3, #1
 8004538:	d00a      	beq.n	8004550 <_raise_r+0x4c>
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	d103      	bne.n	8004546 <_raise_r+0x42>
 800453e:	2316      	movs	r3, #22
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	2001      	movs	r0, #1
 8004544:	e7e7      	b.n	8004516 <_raise_r+0x12>
 8004546:	2100      	movs	r1, #0
 8004548:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800454c:	4620      	mov	r0, r4
 800454e:	4798      	blx	r3
 8004550:	2000      	movs	r0, #0
 8004552:	e7e0      	b.n	8004516 <_raise_r+0x12>

08004554 <raise>:
 8004554:	4b02      	ldr	r3, [pc, #8]	@ (8004560 <raise+0xc>)
 8004556:	4601      	mov	r1, r0
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	f7ff bfd3 	b.w	8004504 <_raise_r>
 800455e:	bf00      	nop
 8004560:	2000001c 	.word	0x2000001c

08004564 <_kill_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d07      	ldr	r5, [pc, #28]	@ (8004584 <_kill_r+0x20>)
 8004568:	2300      	movs	r3, #0
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	f7fd f8e4 	bl	800173e <_kill>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	d102      	bne.n	8004580 <_kill_r+0x1c>
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	b103      	cbz	r3, 8004580 <_kill_r+0x1c>
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	bd38      	pop	{r3, r4, r5, pc}
 8004582:	bf00      	nop
 8004584:	20000264 	.word	0x20000264

08004588 <_getpid_r>:
 8004588:	f7fd b8d1 	b.w	800172e <_getpid>

0800458c <_malloc_usable_size_r>:
 800458c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004590:	1f18      	subs	r0, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfbc      	itt	lt
 8004596:	580b      	ldrlt	r3, [r1, r0]
 8004598:	18c0      	addlt	r0, r0, r3
 800459a:	4770      	bx	lr

0800459c <_gettimeofday>:
 800459c:	4b02      	ldr	r3, [pc, #8]	@ (80045a8 <_gettimeofday+0xc>)
 800459e:	2258      	movs	r2, #88	@ 0x58
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295
 80045a6:	4770      	bx	lr
 80045a8:	20000264 	.word	0x20000264

080045ac <_init>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr

080045b8 <_fini>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr
