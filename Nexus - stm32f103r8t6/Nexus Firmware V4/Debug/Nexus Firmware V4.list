
Nexus Firmware V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004834  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00006078  2**0
                  CONTENTS
  4 .ARM          00000000  08004a98  08004a98  00006078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a98  08004a98  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004aa0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000078  08004b18  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004b18  000062d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc89  00000000  00000000  000060a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d15  00000000  00000000  00011d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00013a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000850  00000000  00000000  000144f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b56  00000000  00000000  00014d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e207  00000000  00000000  0002c896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008741e  00000000  00000000  0003aa9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003300  00000000  00000000  000c1f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000c5200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800492c 	.word	0x0800492c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800492c 	.word	0x0800492c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f000 fb1c 	bl	8001488 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f892 	bl	8000f78 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 f95a 	bl	800110c <MX_GPIO_Init>
  MX_CAN_Init();
 8000e58:	f000 f8ca 	bl	8000ff0 <MX_CAN_Init>
  MX_I2C1_Init();
 8000e5c:	f000 f8fe 	bl	800105c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e60:	f000 f92a 	bl	80010b8 <MX_USART3_UART_Init>

  //Inicializa comunicación CAN
  HAL_CAN_Start(&hcan);
 8000e64:	4839      	ldr	r0, [pc, #228]	@ (8000f4c <main+0x104>)
 8000e66:	f000 fc90 	bl	800178a <HAL_CAN_Start>

  // Activar notificaciones para manejar interrupciones cuando hay mensajes pendientes en el FIFO0 de recepción del controlador CAN
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4837      	ldr	r0, [pc, #220]	@ (8000f4c <main+0x104>)
 8000e6e:	f000 fcd0 	bl	8001812 <HAL_CAN_ActivateNotification>

  // Inicializa el sensor MPU-6050
  MPU_6050_init();
 8000e72:	f002 fef5 	bl	8003c60 <MPU_6050_init>

  // Configuración de los parámetros de envío CAN
  TxHeader.StdId = 0x446;
 8000e76:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <main+0x108>)
 8000e78:	f240 4246 	movw	r2, #1094	@ 0x446
 8000e7c:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;
 8000e7e:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <main+0x108>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000e84:	4b32      	ldr	r3, [pc, #200]	@ (8000f50 <main+0x108>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <main+0x108>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <main+0x108>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	@ (8000f50 <main+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	751a      	strb	r2, [r3, #20]

  //Mostrar landing page
  NEXTION_SendPageChange(&huart3,"page2");
 8000e9c:	492d      	ldr	r1, [pc, #180]	@ (8000f54 <main+0x10c>)
 8000e9e:	482e      	ldr	r0, [pc, #184]	@ (8000f58 <main+0x110>)
 8000ea0:	f003 f822 	bl	8003ee8 <NEXTION_SendPageChange>
  HAL_Delay(3400);
 8000ea4:	f640 5048 	movw	r0, #3400	@ 0xd48
 8000ea8:	f000 fb50 	bl	800154c <HAL_Delay>

  //Mostrar dashware page
  NEXTION_SendPageChange(&huart3,"page1");
 8000eac:	492b      	ldr	r1, [pc, #172]	@ (8000f5c <main+0x114>)
 8000eae:	482a      	ldr	r0, [pc, #168]	@ (8000f58 <main+0x110>)
 8000eb0:	f003 f81a 	bl	8003ee8 <NEXTION_SendPageChange>

  //Inicializar interfaz a negro (por si se quedó la página con estilos a rojo por alguna alerta provocada por NEXTION_Alert())
  NEXTION_Alert(&huart3, 0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <main+0x110>)
 8000eb8:	f003 f840 	bl	8003f3c <NEXTION_Alert>

  /* USER CODE BEGIN WHILE */
  while (1) {

	  // Lectura de datos del sensor MPU-6050
	  x_acceleration = MPU_6050_Get_Acc_X();
 8000ebc:	f002 ff70 	bl	8003da0 <MPU_6050_Get_Acc_X>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fe1c 	bl	8000b00 <__aeabi_i2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <main+0x118>)
 8000ecc:	6013      	str	r3, [r2, #0]
	  x_acceleration = x_acceleration / 1000;
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <main+0x118>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4924      	ldr	r1, [pc, #144]	@ (8000f64 <main+0x11c>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff1b 	bl	8000d10 <__aeabi_fdiv>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <main+0x118>)
 8000ee0:	601a      	str	r2, [r3, #0]

	  y_acceleration = MPU_6050_Get_Acc_Y();
 8000ee2:	f002 ff7d 	bl	8003de0 <MPU_6050_Get_Acc_Y>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe09 	bl	8000b00 <__aeabi_i2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f68 <main+0x120>)
 8000ef2:	6013      	str	r3, [r2, #0]
	  y_acceleration = y_acceleration / 1000;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <main+0x120>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	491a      	ldr	r1, [pc, #104]	@ (8000f64 <main+0x11c>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff08 	bl	8000d10 <__aeabi_fdiv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <main+0x120>)
 8000f06:	601a      	str	r2, [r3, #0]

	  z_acceleration = MPU_6050_Get_Acc_Z();
 8000f08:	f002 ff8a 	bl	8003e20 <MPU_6050_Get_Acc_Z>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fdf6 	bl	8000b00 <__aeabi_i2f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <main+0x124>)
 8000f18:	6013      	str	r3, [r2, #0]
	  z_acceleration = z_acceleration / 1000;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <main+0x124>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4911      	ldr	r1, [pc, #68]	@ (8000f64 <main+0x11c>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fef5 	bl	8000d10 <__aeabi_fdiv>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <main+0x124>)
 8000f2c:	601a      	str	r2, [r3, #0]

	  // Lectura sensor temperatura
	  temp = MPU_6050_Get_Temp();
 8000f2e:	f002 ff97 	bl	8003e60 <MPU_6050_Get_Temp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <main+0x128>)
 8000f36:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <main+0x12c>)
 8000f3e:	f000 ff0d 	bl	8001d5c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000f42:	2032      	movs	r0, #50	@ 0x32
 8000f44:	f000 fb02 	bl	800154c <HAL_Delay>
	  x_acceleration = MPU_6050_Get_Acc_X();
 8000f48:	bf00      	nop
 8000f4a:	e7b7      	b.n	8000ebc <main+0x74>
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	20000158 	.word	0x20000158
 8000f54:	08004994 	.word	0x08004994
 8000f58:	20000110 	.word	0x20000110
 8000f5c:	0800499c 	.word	0x0800499c
 8000f60:	20000170 	.word	0x20000170
 8000f64:	447a0000 	.word	0x447a0000
 8000f68:	20000174 	.word	0x20000174
 8000f6c:	20000178 	.word	0x20000178
 8000f70:	2000017c 	.word	0x2000017c
 8000f74:	40011000 	.word	0x40011000

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	@ 0x40
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2228      	movs	r2, #40	@ 0x28
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 f8ee 	bl	8004168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f876 	bl	80030a0 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fba:	f000 f8c9 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fae4 	bl	80035a4 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f8b5 	bl	8001150 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3740      	adds	r7, #64	@ 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_CAN_Init+0x64>)
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <MX_CAN_Init+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_CAN_Init+0x64>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_CAN_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_CAN_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_CAN_Init+0x64>)
 800100e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001012:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_CAN_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_CAN_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_CAN_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_CAN_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_CAN_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_CAN_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_CAN_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_CAN_Init+0x64>)
 8001040:	f000 faa8 	bl	8001594 <HAL_CAN_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800104a:	f000 f881 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000094 	.word	0x20000094
 8001058:	40006400 	.word	0x40006400

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f000 fe79 	bl	8001d90 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 f854 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000bc 	.word	0x200000bc
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_USART3_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART3_UART_Init+0x4c>)
 80010f0:	f002 fbe6 	bl	80038c0 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f829 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000110 	.word	0x20000110
 8001108:	40004800 	.word	0x40004800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_GPIO_Init+0x40>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <MX_GPIO_Init+0x40>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_GPIO_Init+0x40>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_GPIO_Init+0x40>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a07      	ldr	r2, [pc, #28]	@ (800114c <MX_GPIO_Init+0x40>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <MX_GPIO_Init+0x40>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <Error_Handler+0x8>

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_MspInit+0x5c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_MspInit+0x5c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_MspInit+0x5c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_MspInit+0x5c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_MspInit+0x60>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_MspInit+0x60>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <HAL_CAN_MspInit+0x8c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d131      	bne.n	8001244 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 80011e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_CAN_MspInit+0x90>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001210:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	480b      	ldr	r0, [pc, #44]	@ (8001254 <HAL_CAN_MspInit+0x94>)
 8001226:	f000 fbfd 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <HAL_CAN_MspInit+0x94>)
 8001240:	f000 fbf0 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40006400 	.word	0x40006400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <HAL_I2C_MspInit+0x70>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d123      	bne.n	80012c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001290:	23c0      	movs	r3, #192	@ 0xc0
 8001292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001294:	2312      	movs	r3, #18
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <HAL_I2C_MspInit+0x78>)
 80012a4:	f000 fbbe 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b2:	61d3      	str	r3, [r2, #28]
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_I2C_MspInit+0x74>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010c00 	.word	0x40010c00

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <HAL_UART_MspInit+0x8c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d131      	bne.n	8001358 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_UART_MspInit+0x90>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001364 <HAL_UART_MspInit+0x90>)
 80012fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fe:	61d3      	str	r3, [r2, #28]
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_UART_MspInit+0x90>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_UART_MspInit+0x90>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <HAL_UART_MspInit+0x90>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_UART_MspInit+0x90>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	@ (8001368 <HAL_UART_MspInit+0x94>)
 800133a:	f000 fb73 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800133e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <HAL_UART_MspInit+0x94>)
 8001354:	f000 fb66 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40004800 	.word	0x40004800
 8001364:	40021000 	.word	0x40021000
 8001368:	40010c00 	.word	0x40010c00

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8aa 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f002 fed0 	bl	8004198 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20005000 	.word	0x20005000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000180 	.word	0x20000180
 800142c:	200002d0 	.word	0x200002d0

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff fff8 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001442:	490c      	ldr	r1, [pc, #48]	@ (8001474 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001444:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a09      	ldr	r2, [pc, #36]	@ (800147c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001458:	4c09      	ldr	r4, [pc, #36]	@ (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 fe9d 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146a:	f7ff fced 	bl	8000e48 <main>
  bx lr
 800146e:	4770      	bx	lr
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001478:	08004aa0 	.word	0x08004aa0
  ldr r2, =_sbss
 800147c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001480:	200002d0 	.word	0x200002d0

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_Init+0x28>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_Init+0x28>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 fa8f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fe5a 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fa99 	bl	8001a0a <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 fa6f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_IncTick+0x1c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x20>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a03      	ldr	r2, [pc, #12]	@ (8001534 <HAL_IncTick+0x20>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000008 	.word	0x20000008
 8001534:	20000184 	.word	0x20000184

08001538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <HAL_GetTick+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000184 	.word	0x20000184

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fff0 	bl	8001538 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffe0 	bl	8001538 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0ed      	b.n	8001782 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe04 	bl	80011c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c8:	f7ff ffb6 	bl	8001538 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	e012      	b.n	80015f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d0:	f7ff ffb2 	bl	8001538 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d90b      	bls.n	80015f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0c5      	b.n	8001782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0e5      	beq.n	80015d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0202 	bic.w	r2, r2, #2
 8001612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff ff90 	bl	8001538 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161a:	e012      	b.n	8001642 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800161c:	f7ff ff8c 	bl	8001538 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b0a      	cmp	r3, #10
 8001628:	d90b      	bls.n	8001642 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2205      	movs	r2, #5
 800163a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e09f      	b.n	8001782 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e5      	bne.n	800161c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7e5b      	ldrb	r3, [r3, #25]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e9b      	ldrb	r3, [r3, #26]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0220 	bic.w	r2, r2, #32
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7edb      	ldrb	r3, [r3, #27]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0210 	bic.w	r2, r2, #16
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0210 	orr.w	r2, r2, #16
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7f5b      	ldrb	r3, [r3, #29]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0204 	orr.w	r2, r2, #4
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	ea42 0103 	orr.w	r1, r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d12e      	bne.n	80017fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017b6:	f7ff febf 	bl	8001538 <HAL_GetTick>
 80017ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017bc:	e012      	b.n	80017e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017be:	f7ff febb 	bl	8001538 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b0a      	cmp	r3, #10
 80017ca:	d90b      	bls.n	80017e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2205      	movs	r2, #5
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e012      	b.n	800180a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1e5      	bne.n	80017be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e006      	b.n	800180a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
  }
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001822:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d002      	beq.n	8001830 <HAL_CAN_ActivateNotification+0x1e>
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d109      	bne.n	8001844 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6959      	ldr	r1, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e006      	b.n	8001852 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	@ (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	@ (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	@ 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff90 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff49 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff90 	bl	8001914 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5f 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	@ 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e169      	b.n	8001d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8158 	bne.w	8001d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05e      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a60:	4a98      	ldr	r2, [pc, #608]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d875      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a66:	4a98      	ldr	r2, [pc, #608]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d058      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a6c:	4a96      	ldr	r2, [pc, #600]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d86f      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a72:	4a96      	ldr	r2, [pc, #600]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d052      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a78:	4a94      	ldr	r2, [pc, #592]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d869      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a94      	ldr	r2, [pc, #592]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d04c      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a84:	4a92      	ldr	r2, [pc, #584]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d863      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a92      	ldr	r2, [pc, #584]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d046      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a90:	4a90      	ldr	r2, [pc, #576]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d85d      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d82a      	bhi.n	8001af0 <HAL_GPIO_Init+0xcc>
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d859      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <HAL_GPIO_Init+0x80>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001af9 	.word	0x08001af9
 8001aac:	08001b0b 	.word	0x08001b0b
 8001ab0:	08001b4d 	.word	0x08001b4d
 8001ab4:	08001b53 	.word	0x08001b53
 8001ab8:	08001b53 	.word	0x08001b53
 8001abc:	08001b53 	.word	0x08001b53
 8001ac0:	08001b53 	.word	0x08001b53
 8001ac4:	08001b53 	.word	0x08001b53
 8001ac8:	08001b53 	.word	0x08001b53
 8001acc:	08001b53 	.word	0x08001b53
 8001ad0:	08001b53 	.word	0x08001b53
 8001ad4:	08001b53 	.word	0x08001b53
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b53 	.word	0x08001b53
 8001ae0:	08001b53 	.word	0x08001b53
 8001ae4:	08001b53 	.word	0x08001b53
 8001ae8:	08001b01 	.word	0x08001b01
 8001aec:	08001b15 	.word	0x08001b15
 8001af0:	4a79      	ldr	r2, [pc, #484]	@ (8001cd8 <HAL_GPIO_Init+0x2b4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e029      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e024      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01f      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e01a      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e013      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e009      	b.n	8001b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          break;
 8001b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2bff      	cmp	r3, #255	@ 0xff
 8001b58:	d801      	bhi.n	8001b5e <HAL_GPIO_Init+0x13a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_Init+0x13e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	@ 0xff
 8001b68:	d802      	bhi.n	8001b70 <HAL_GPIO_Init+0x14c>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x152>
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	3b08      	subs	r3, #8
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80b1 	beq.w	8001d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a40      	ldr	r2, [pc, #256]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x1ec>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cec <HAL_GPIO_Init+0x2c8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1e0>
 8001c00:	2303      	movs	r3, #3
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e004      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c10:	2300      	movs	r3, #0
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c22:	492f      	ldr	r1, [pc, #188]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	492c      	ldr	r1, [pc, #176]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4928      	ldr	r1, [pc, #160]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4922      	ldr	r1, [pc, #136]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	491e      	ldr	r1, [pc, #120]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4918      	ldr	r1, [pc, #96]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4914      	ldr	r1, [pc, #80]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d021      	beq.n	8001cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e021      	b.n	8001d06 <HAL_GPIO_Init+0x2e2>
 8001cc2:	bf00      	nop
 8001cc4:	10320000 	.word	0x10320000
 8001cc8:	10310000 	.word	0x10310000
 8001ccc:	10220000 	.word	0x10220000
 8001cd0:	10210000 	.word	0x10210000
 8001cd4:	10120000 	.word	0x10120000
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4909      	ldr	r1, [pc, #36]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	3301      	adds	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f47f ae8e 	bne.w	8001a38 <HAL_GPIO_Init+0x14>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	372c      	adds	r7, #44	@ 0x2c
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43d9      	mvns	r1, r3
 8001d7a:	887b      	ldrh	r3, [r7, #2]
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e12b      	b.n	8001ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fa4e 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	@ 0x24
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df4:	f001 fd1e 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8001df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a81      	ldr	r2, [pc, #516]	@ (8002004 <HAL_I2C_Init+0x274>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d807      	bhi.n	8001e14 <HAL_I2C_Init+0x84>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a80      	ldr	r2, [pc, #512]	@ (8002008 <HAL_I2C_Init+0x278>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bf94      	ite	ls
 8001e0c:	2301      	movls	r3, #1
 8001e0e:	2300      	movhi	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	e006      	b.n	8001e22 <HAL_I2C_Init+0x92>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a7d      	ldr	r2, [pc, #500]	@ (800200c <HAL_I2C_Init+0x27c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0e7      	b.n	8001ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a78      	ldr	r2, [pc, #480]	@ (8002010 <HAL_I2C_Init+0x280>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9b      	lsrs	r3, r3, #18
 8001e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a6a      	ldr	r2, [pc, #424]	@ (8002004 <HAL_I2C_Init+0x274>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d802      	bhi.n	8001e64 <HAL_I2C_Init+0xd4>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3301      	adds	r3, #1
 8001e62:	e009      	b.n	8001e78 <HAL_I2C_Init+0xe8>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a69      	ldr	r2, [pc, #420]	@ (8002014 <HAL_I2C_Init+0x284>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	3301      	adds	r3, #1
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	495c      	ldr	r1, [pc, #368]	@ (8002004 <HAL_I2C_Init+0x274>)
 8001e94:	428b      	cmp	r3, r1
 8001e96:	d819      	bhi.n	8001ecc <HAL_I2C_Init+0x13c>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1e59      	subs	r1, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea6:	1c59      	adds	r1, r3, #1
 8001ea8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eac:	400b      	ands	r3, r1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_I2C_Init+0x138>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1e59      	subs	r1, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec6:	e051      	b.n	8001f6c <HAL_I2C_Init+0x1dc>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e04f      	b.n	8001f6c <HAL_I2C_Init+0x1dc>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d111      	bne.n	8001ef8 <HAL_I2C_Init+0x168>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	440b      	add	r3, r1
 8001ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e012      	b.n	8001f1e <HAL_I2C_Init+0x18e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	0099      	lsls	r1, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Init+0x196>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e022      	b.n	8001f6c <HAL_I2C_Init+0x1dc>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10e      	bne.n	8001f4c <HAL_I2C_Init+0x1bc>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e58      	subs	r0, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	440b      	add	r3, r1
 8001f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4a:	e00f      	b.n	8001f6c <HAL_I2C_Init+0x1dc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	0099      	lsls	r1, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	6809      	ldr	r1, [r1, #0]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6911      	ldr	r1, [r2, #16]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68d2      	ldr	r2, [r2, #12]
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	000186a0 	.word	0x000186a0
 8002008:	001e847f 	.word	0x001e847f
 800200c:	003d08ff 	.word	0x003d08ff
 8002010:	431bde83 	.word	0x431bde83
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4603      	mov	r3, r0
 8002028:	817b      	strh	r3, [r7, #10]
 800202a:	460b      	mov	r3, r1
 800202c:	813b      	strh	r3, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002032:	f7ff fa81 	bl	8001538 <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b20      	cmp	r3, #32
 8002042:	f040 80d9 	bne.w	80021f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2319      	movs	r3, #25
 800204c:	2201      	movs	r2, #1
 800204e:	496d      	ldr	r1, [pc, #436]	@ (8002204 <HAL_I2C_Mem_Write+0x1ec>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fdef 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	e0cc      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_I2C_Mem_Write+0x56>
 800206a:	2302      	movs	r3, #2
 800206c:	e0c5      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d007      	beq.n	8002094 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2221      	movs	r2, #33	@ 0x21
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2240      	movs	r2, #64	@ 0x40
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a3a      	ldr	r2, [r7, #32]
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002208 <HAL_I2C_Mem_Write+0x1f0>)
 80020d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020d6:	88f8      	ldrh	r0, [r7, #6]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	8979      	ldrh	r1, [r7, #10]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4603      	mov	r3, r0
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fc26 	bl	8002938 <I2C_RequestMemoryWrite>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d052      	beq.n	8002198 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e081      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 feb4 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	2b04      	cmp	r3, #4
 800210c:	d107      	bne.n	800211e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800211c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b04      	cmp	r3, #4
 800215e:	d11b      	bne.n	8002198 <HAL_I2C_Mem_Write+0x180>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d017      	beq.n	8002198 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1aa      	bne.n	80020f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fea7 	bl	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d107      	bne.n	80021c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e016      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	00100002 	.word	0x00100002
 8002208:	ffff0000 	.word	0xffff0000

0800220c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	@ 0x30
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	460b      	mov	r3, r1
 8002220:	813b      	strh	r3, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222a:	f7ff f985 	bl	8001538 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b20      	cmp	r3, #32
 800223a:	f040 8244 	bne.w	80026c6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2319      	movs	r3, #25
 8002244:	2201      	movs	r2, #1
 8002246:	4982      	ldr	r1, [pc, #520]	@ (8002450 <HAL_I2C_Mem_Read+0x244>)
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fcf3 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
 8002256:	e237      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_I2C_Mem_Read+0x5a>
 8002262:	2302      	movs	r3, #2
 8002264:	e230      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d007      	beq.n	800228c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2222      	movs	r2, #34	@ 0x22
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a62      	ldr	r2, [pc, #392]	@ (8002454 <HAL_I2C_Mem_Read+0x248>)
 80022cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ce:	88f8      	ldrh	r0, [r7, #6]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	8979      	ldrh	r1, [r7, #10]
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fbc0 	bl	8002a64 <I2C_RequestMemoryRead>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1ec      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e1c0      	b.n	80026a0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11e      	bne.n	8002364 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002336:	b672      	cpsid	i
}
 8002338:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002360:	b662      	cpsie	i
}
 8002362:	e035      	b.n	80023d0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	2b02      	cmp	r3, #2
 800236a:	d11e      	bne.n	80023aa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023a6:	b662      	cpsie	i
}
 80023a8:	e012      	b.n	80023d0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023b8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80023d0:	e166      	b.n	80026a0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	f200 811f 	bhi.w	800261a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d123      	bne.n	800242c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fdcd 	bl	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e167      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800242a:	e139      	b.n	80026a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002430:	2b02      	cmp	r3, #2
 8002432:	d152      	bne.n	80024da <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243a:	2200      	movs	r2, #0
 800243c:	4906      	ldr	r1, [pc, #24]	@ (8002458 <HAL_I2C_Mem_Read+0x24c>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fbf8 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e13c      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
 800244e:	bf00      	nop
 8002450:	00100002 	.word	0x00100002
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800246e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024a2:	b662      	cpsie	i
}
 80024a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024d8:	e0e2      	b.n	80026a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e0:	2200      	movs	r2, #0
 80024e2:	497b      	ldr	r1, [pc, #492]	@ (80026d0 <HAL_I2C_Mem_Read+0x4c4>)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fba5 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0e9      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i
}
 8002506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800253a:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_I2C_Mem_Read+0x4c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	08db      	lsrs	r3, r3, #3
 8002540:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_I2C_Mem_Read+0x4cc>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0a1a      	lsrs	r2, r3, #8
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	3b01      	subs	r3, #1
 8002558:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d118      	bne.n	8002592 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002582:	b662      	cpsie	i
}
 8002584:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e09a      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d1d9      	bne.n	8002554 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025e2:	b662      	cpsie	i
}
 80025e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002618:	e042      	b.n	80026a0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fcb2 	bl	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e04c      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d118      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f ae94 	bne.w	80023d2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e000      	b.n	80026c8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
  }
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	@ 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	00010004 	.word	0x00010004
 80026d4:	20000000 	.word	0x20000000
 80026d8:	14f8b589 	.word	0x14f8b589

080026dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7fe ff24 	bl	8001538 <HAL_GetTick>
 80026f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	f040 8111 	bne.w	8002926 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	4988      	ldr	r1, [pc, #544]	@ (8002930 <HAL_I2C_IsDeviceReady+0x254>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa90 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	e104      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2C_IsDeviceReady+0x50>
 8002728:	2302      	movs	r3, #2
 800272a:	e0fd      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d007      	beq.n	8002752 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2224      	movs	r2, #36	@ 0x24
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a70      	ldr	r2, [pc, #448]	@ (8002934 <HAL_I2C_IsDeviceReady+0x258>)
 8002774:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002784:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fa4e 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ac:	d103      	bne.n	80027b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0b6      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe feb5 	bl	8001538 <HAL_GetTick>
 80027ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027fe:	e025      	b.n	800284c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002800:	f7fe fe9a 	bl	8001538 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d302      	bcc.n	8002816 <HAL_I2C_IsDeviceReady+0x13a>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22a0      	movs	r2, #160	@ 0xa0
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2ba0      	cmp	r3, #160	@ 0xa0
 8002856:	d005      	beq.n	8002864 <HAL_I2C_IsDeviceReady+0x188>
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_I2C_IsDeviceReady+0x188>
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0cd      	beq.n	8002800 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d129      	bne.n	80028ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002888:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	4921      	ldr	r1, [pc, #132]	@ (8002930 <HAL_I2C_IsDeviceReady+0x254>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9c2 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e036      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e02c      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	490f      	ldr	r1, [pc, #60]	@ (8002930 <HAL_I2C_IsDeviceReady+0x254>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f99e 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e012      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	3301      	adds	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	f4ff af32 	bcc.w	8002776 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	00100002 	.word	0x00100002
 8002934:	ffff0000 	.word	0xffff0000

08002938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002960:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f960 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002988:	d103      	bne.n	8002992 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e05f      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	492d      	ldr	r1, [pc, #180]	@ (8002a60 <I2C_RequestMemoryWrite+0x128>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f9bb 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e04c      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa46 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d107      	bne.n	80029fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e02b      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	e021      	b.n	8002a54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a10:	893b      	ldrh	r3, [r7, #8]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa20 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e005      	b.n	8002a56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	00010002 	.word	0x00010002

08002a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	817b      	strh	r3, [r7, #10]
 8002a76:	460b      	mov	r3, r1
 8002a78:	813b      	strh	r3, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f8c2 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac4:	d103      	bne.n	8002ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0aa      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	4952      	ldr	r1, [pc, #328]	@ (8002c30 <I2C_RequestMemoryRead+0x1cc>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f91d 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e097      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b10:	6a39      	ldr	r1, [r7, #32]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9a8 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e076      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	e021      	b.n	8002b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	6a39      	ldr	r1, [r7, #32]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f982 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d107      	bne.n	8002b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e050      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b86:	893b      	ldrh	r3, [r7, #8]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b92:	6a39      	ldr	r1, [r7, #32]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f967 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d107      	bne.n	8002bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e035      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f82b 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf2:	d103      	bne.n	8002bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e013      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	6a3a      	ldr	r2, [r7, #32]
 8002c14:	4906      	ldr	r1, [pc, #24]	@ (8002c30 <I2C_RequestMemoryRead+0x1cc>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f886 	bl	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e048      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d044      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fc73 	bl	8001538 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d139      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	e00c      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d116      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e023      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d093      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d36:	e071      	b.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	d123      	bne.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e067      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d041      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7fe fbce 	bl	8001538 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d136      	bne.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e00b      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e021      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10c      	bne.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e00b      	b.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af6d 	bne.w	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e034      	b.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8e3 	bl	8003042 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e034      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d028      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fb53 	bl	8001538 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11d      	bne.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eae:	2b80      	cmp	r3, #128	@ 0x80
 8002eb0:	d016      	beq.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b80      	cmp	r3, #128	@ 0x80
 8002eec:	d1c3      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f89b 	bl	8003042 <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d028      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe fb0b 	bl	8001538 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11d      	bne.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d016      	beq.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d1c3      	bne.n	8002f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f94:	e049      	b.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d119      	bne.n	8002fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0210 	mvn.w	r2, #16
 8002fac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e030      	b.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7fe faae 	bl	8001538 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d016      	beq.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d1ae      	bne.n	8002f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d11b      	bne.n	8003092 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003062:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e272      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8087 	beq.w	80031ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c0:	4b92      	ldr	r3, [pc, #584]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d00c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030cc:	4b8f      	ldr	r3, [pc, #572]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d112      	bne.n	80030fe <HAL_RCC_OscConfig+0x5e>
 80030d8:	4b8c      	ldr	r3, [pc, #560]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e4:	d10b      	bne.n	80030fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e6:	4b89      	ldr	r3, [pc, #548]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d06c      	beq.n	80031cc <HAL_RCC_OscConfig+0x12c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d168      	bne.n	80031cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e24c      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x76>
 8003108:	4b80      	ldr	r3, [pc, #512]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a7f      	ldr	r2, [pc, #508]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e02e      	b.n	8003174 <HAL_RCC_OscConfig+0xd4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b7b      	ldr	r3, [pc, #492]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7a      	ldr	r2, [pc, #488]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b78      	ldr	r3, [pc, #480]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a77      	ldr	r2, [pc, #476]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xd4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0xbc>
 8003142:	4b72      	ldr	r3, [pc, #456]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a71      	ldr	r2, [pc, #452]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xd4>
 800315c:	4b6b      	ldr	r3, [pc, #428]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6a      	ldr	r2, [pc, #424]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b68      	ldr	r3, [pc, #416]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a67      	ldr	r2, [pc, #412]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe f9dc 	bl	8001538 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe f9d8 	bl	8001538 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e200      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xe4>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe f9c8 	bl	8001538 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe f9c4 	bl	8001538 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1ec      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b53      	ldr	r3, [pc, #332]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x10c>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d063      	beq.n	80032a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031e6:	4b49      	ldr	r3, [pc, #292]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d11c      	bne.n	800322c <HAL_RCC_OscConfig+0x18c>
 80031f2:	4b46      	ldr	r3, [pc, #280]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	4b43      	ldr	r3, [pc, #268]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x176>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1c0      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b3d      	ldr	r3, [pc, #244]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4939      	ldr	r1, [pc, #228]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	e03a      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_RCC_OscConfig+0x270>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323a:	f7fe f97d 	bl	8001538 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe f979 	bl	8001538 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1a1      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4927      	ldr	r1, [pc, #156]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003276:	4b26      	ldr	r3, [pc, #152]	@ (8003310 <HAL_RCC_OscConfig+0x270>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe f95c 	bl	8001538 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe f958 	bl	8001538 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e180      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03a      	beq.n	8003324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d019      	beq.n	80032ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	4b17      	ldr	r3, [pc, #92]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe f93c 	bl	8001538 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fe f938 	bl	8001538 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e160      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <HAL_RCC_OscConfig+0x26c>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f000 face 	bl	8003884 <RCC_Delay>
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f0:	f7fe f922 	bl	8001538 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f6:	e00f      	b.n	8003318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe f91e 	bl	8001538 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d908      	bls.n	8003318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e146      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	42420000 	.word	0x42420000
 8003314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b92      	ldr	r3, [pc, #584]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e9      	bne.n	80032f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80a6 	beq.w	800347e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b8b      	ldr	r3, [pc, #556]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b88      	ldr	r3, [pc, #544]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a87      	ldr	r2, [pc, #540]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334c:	61d3      	str	r3, [r2, #28]
 800334e:	4b85      	ldr	r3, [pc, #532]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b82      	ldr	r3, [pc, #520]	@ (8003568 <HAL_RCC_OscConfig+0x4c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4b7f      	ldr	r3, [pc, #508]	@ (8003568 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7e      	ldr	r2, [pc, #504]	@ (8003568 <HAL_RCC_OscConfig+0x4c8>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fe f8df 	bl	8001538 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fe f8db 	bl	8001538 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	@ 0x64
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e103      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	4b75      	ldr	r3, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x4c8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x312>
 80033a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6213      	str	r3, [r2, #32]
 80033b0:	e02d      	b.n	800340e <HAL_RCC_OscConfig+0x36e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x334>
 80033ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a69      	ldr	r2, [pc, #420]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4b67      	ldr	r3, [pc, #412]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a66      	ldr	r2, [pc, #408]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	e01c      	b.n	800340e <HAL_RCC_OscConfig+0x36e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d10c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x356>
 80033dc:	4b61      	ldr	r3, [pc, #388]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a60      	ldr	r2, [pc, #384]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6213      	str	r3, [r2, #32]
 80033f4:	e00b      	b.n	800340e <HAL_RCC_OscConfig+0x36e>
 80033f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	4b58      	ldr	r3, [pc, #352]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a57      	ldr	r2, [pc, #348]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d015      	beq.n	8003442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fe f88f 	bl	8001538 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fe f88b 	bl	8001538 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0b1      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003434:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ee      	beq.n	800341e <HAL_RCC_OscConfig+0x37e>
 8003440:	e014      	b.n	800346c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe f879 	bl	8001538 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe f875 	bl	8001538 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e09b      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003460:	4b40      	ldr	r3, [pc, #256]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ee      	bne.n	800344a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	4a3b      	ldr	r2, [pc, #236]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003488:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d061      	beq.n	8003558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d146      	bne.n	800352a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b33      	ldr	r3, [pc, #204]	@ (800356c <HAL_RCC_OscConfig+0x4cc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe f849 	bl	8001538 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe f845 	bl	8001538 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e06d      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034bc:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d0:	d108      	bne.n	80034e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034d2:	4b24      	ldr	r3, [pc, #144]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4921      	ldr	r1, [pc, #132]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a19      	ldr	r1, [r3, #32]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	430b      	orrs	r3, r1
 80034f6:	491b      	ldr	r1, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	4b1b      	ldr	r3, [pc, #108]	@ (800356c <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fe f819 	bl	8001538 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe f815 	bl	8001538 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x46a>
 8003528:	e035      	b.n	8003596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_OscConfig+0x4cc>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe f802 	bl	8001538 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd fffe 	bl	8001538 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e026      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x498>
 8003556:	e01e      	b.n	8003596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e019      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
 800356c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_OscConfig+0x500>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	429a      	cmp	r2, r3
 8003582:	d106      	bne.n	8003592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0d0      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d910      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b67      	ldr	r3, [pc, #412]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0207 	bic.w	r2, r3, #7
 80035ce:	4965      	ldr	r1, [pc, #404]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b63      	ldr	r3, [pc, #396]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b8      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003600:	4b59      	ldr	r3, [pc, #356]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a58      	ldr	r2, [pc, #352]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800360a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a52      	ldr	r2, [pc, #328]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b50      	ldr	r3, [pc, #320]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	494d      	ldr	r1, [pc, #308]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d040      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d115      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07f      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b41      	ldr	r3, [pc, #260]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e073      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06b      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4936      	ldr	r1, [pc, #216]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fd ff50 	bl	8001538 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fd ff4c 	bl	8001538 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e053      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d210      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b24      	ldr	r3, [pc, #144]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4922      	ldr	r1, [pc, #136]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b20      	ldr	r3, [pc, #128]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e032      	b.n	800375a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4916      	ldr	r1, [pc, #88]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	490e      	ldr	r1, [pc, #56]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003732:	f000 f821 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003736:	4602      	mov	r2, r0
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	490a      	ldr	r1, [pc, #40]	@ (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	5ccb      	ldrb	r3, [r1, r3]
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <HAL_RCC_ClockConfig+0x1cc>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_ClockConfig+0x1d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd feae 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40022000 	.word	0x40022000
 8003768:	40021000 	.word	0x40021000
 800376c:	08004a34 	.word	0x08004a34
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003792:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <HAL_RCC_GetSysClockFreq+0x94>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x30>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x36>
 80037a6:	e027      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a8:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x98>)
 80037aa:	613b      	str	r3, [r7, #16]
      break;
 80037ac:	e027      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0c9b      	lsrs	r3, r3, #18
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	4a17      	ldr	r2, [pc, #92]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b8:	5cd3      	ldrb	r3, [r2, r3]
 80037ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_RCC_GetSysClockFreq+0x94>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0c5b      	lsrs	r3, r3, #17
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037d2:	5cd3      	ldrb	r3, [r2, r3]
 80037d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x98>)
 80037da:	fb03 f202 	mul.w	r2, r3, r2
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e004      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0c      	ldr	r2, [pc, #48]	@ (800381c <HAL_RCC_GetSysClockFreq+0xa4>)
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	613b      	str	r3, [r7, #16]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x98>)
 80037fa:	613b      	str	r3, [r7, #16]
      break;
 80037fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fe:	693b      	ldr	r3, [r7, #16]
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	007a1200 	.word	0x007a1200
 8003814:	08004a4c 	.word	0x08004a4c
 8003818:	08004a5c 	.word	0x08004a5c
 800381c:	003d0900 	.word	0x003d0900

08003820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <HAL_RCC_GetHCLKFreq+0x10>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	20000000 	.word	0x20000000

08003834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003838:	f7ff fff2 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	@ (8003858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	08004a44 	.word	0x08004a44

0800385c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003860:	f7ff ffde 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	0adb      	lsrs	r3, r3, #11
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4903      	ldr	r1, [pc, #12]	@ (8003880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000
 8003880:	08004a44 	.word	0x08004a44

08003884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800388c:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <RCC_Delay+0x34>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <RCC_Delay+0x38>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0a5b      	lsrs	r3, r3, #9
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038a0:	bf00      	nop
  }
  while (Delay --);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	60fa      	str	r2, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f9      	bne.n	80038a0 <RCC_Delay+0x1c>
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	20000000 	.word	0x20000000
 80038bc:	10624dd3 	.word	0x10624dd3

080038c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e042      	b.n	8003958 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fcf4 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f91d 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d16d      	bne.n	8003a5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Transmit+0x2c>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e066      	b.n	8003a5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2221      	movs	r2, #33	@ 0x21
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fd fdcb 	bl	8001538 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b8:	d108      	bne.n	80039cc <HAL_UART_Transmit+0x6c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d4:	e02a      	b.n	8003a2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	@ 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f840 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e036      	b.n	8003a5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	3302      	adds	r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e007      	b.n	8003a1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1cf      	bne.n	80039d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2140      	movs	r1, #64	@ 0x40
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f810 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e006      	b.n	8003a5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b090      	sub	sp, #64	@ 0x40
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	e050      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d04c      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a86:	f7fd fd57 	bl	8001538 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d241      	bcs.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ab6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3314      	adds	r3, #20
 8003ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aea:	623a      	str	r2, [r7, #32]
 8003aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	69f9      	ldr	r1, [r7, #28]
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e00f      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d09f      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3740      	adds	r7, #64	@ 0x40
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b7e:	f023 030c 	bic.w	r3, r3, #12
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <UART_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7ff fe56 	bl	800385c <HAL_RCC_GetPCLK2Freq>
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	e002      	b.n	8003bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7ff fe3e 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	4a22      	ldr	r2, [pc, #136]	@ (8003c5c <UART_SetConfig+0x118>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	0119      	lsls	r1, r3, #4
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <UART_SetConfig+0x118>)
 8003bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2064      	movs	r0, #100	@ 0x64
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	3332      	adds	r3, #50	@ 0x32
 8003c04:	4a15      	ldr	r2, [pc, #84]	@ (8003c5c <UART_SetConfig+0x118>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c10:	4419      	add	r1, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <UART_SetConfig+0x118>)
 8003c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2064      	movs	r0, #100	@ 0x64
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	@ 0x32
 8003c3c:	4a07      	ldr	r2, [pc, #28]	@ (8003c5c <UART_SetConfig+0x118>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	51eb851f 	.word	0x51eb851f

08003c60 <MPU_6050_init>:
#include <main.h>
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU_6050_init(){
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af04      	add	r7, sp, #16

	//Inicializamos la configuracion del MPU6050
	 HAL_StatusTypeDef check_connection = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1) + 0 , 1, 100); //Status check from the MPU6050
 8003c66:	2364      	movs	r3, #100	@ 0x64
 8003c68:	2201      	movs	r2, #1
 8003c6a:	21d0      	movs	r1, #208	@ 0xd0
 8003c6c:	484a      	ldr	r0, [pc, #296]	@ (8003d98 <MPU_6050_init+0x138>)
 8003c6e:	f7fe fd35 	bl	80026dc <HAL_I2C_IsDeviceReady>
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]

	if (check_connection == HAL_OK){
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d113      	bne.n	8003ca4 <MPU_6050_init+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c82:	4846      	ldr	r0, [pc, #280]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003c84:	f7fe f852 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003c88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c8c:	f7fd fc5e 	bl	800154c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c96:	4841      	ldr	r0, [pc, #260]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003c98:	f7fe f848 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003c9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ca0:	f7fd fc54 	bl	800154c <HAL_Delay>
	}
	uint8_t gyro_scale = FS_GYRO_500;
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef gyro_config = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &gyro_scale, 1, 100); //Gyroscope scale configuration (MAX)
 8003ca8:	2364      	movs	r3, #100	@ 0x64
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	2301      	movs	r3, #1
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	1cfb      	adds	r3, r7, #3
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	221b      	movs	r2, #27
 8003cb8:	21d0      	movs	r1, #208	@ 0xd0
 8003cba:	4837      	ldr	r0, [pc, #220]	@ (8003d98 <MPU_6050_init+0x138>)
 8003cbc:	f7fe f9ac 	bl	8002018 <HAL_I2C_Mem_Write>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71bb      	strb	r3, [r7, #6]

	if (gyro_config == HAL_OK){
 8003cc4:	79bb      	ldrb	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <MPU_6050_init+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cd0:	4832      	ldr	r0, [pc, #200]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003cd2:	f7fe f82b 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8003cd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cda:	f7fd fc37 	bl	800154c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ce4:	482d      	ldr	r0, [pc, #180]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003ce6:	f7fe f821 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003cea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cee:	f7fd fc2d 	bl	800154c <HAL_Delay>
	}

	uint8_t acc_scale = FS_ACC_4G;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef acc_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &acc_scale, 1, 100); //Accelerometer scale set up (+-4G)
 8003cf6:	2364      	movs	r3, #100	@ 0x64
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	1cbb      	adds	r3, r7, #2
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2301      	movs	r3, #1
 8003d04:	221c      	movs	r2, #28
 8003d06:	21d0      	movs	r1, #208	@ 0xd0
 8003d08:	4823      	ldr	r0, [pc, #140]	@ (8003d98 <MPU_6050_init+0x138>)
 8003d0a:	f7fe f985 	bl	8002018 <HAL_I2C_Mem_Write>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	717b      	strb	r3, [r7, #5]

	if (acc_config == HAL_OK){
 8003d12:	797b      	ldrb	r3, [r7, #5]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <MPU_6050_init+0xe0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d1e:	481f      	ldr	r0, [pc, #124]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003d20:	f7fe f804 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003d24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d28:	f7fd fc10 	bl	800154c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d32:	481a      	ldr	r0, [pc, #104]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003d34:	f7fd fffa 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003d38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d3c:	f7fd fc06 	bl	800154c <HAL_Delay>
	}

	uint8_t temp_activation = FS_TEMP;
 8003d40:	2300      	movs	r3, #0
 8003d42:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef temp_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp_activation, 1, 100); //Disable "Sleep Mode" and enable the internal temperature sensor
 8003d44:	2364      	movs	r3, #100	@ 0x64
 8003d46:	9302      	str	r3, [sp, #8]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	1c7b      	adds	r3, r7, #1
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2301      	movs	r3, #1
 8003d52:	226b      	movs	r2, #107	@ 0x6b
 8003d54:	21d0      	movs	r1, #208	@ 0xd0
 8003d56:	4810      	ldr	r0, [pc, #64]	@ (8003d98 <MPU_6050_init+0x138>)
 8003d58:	f7fe f95e 	bl	8002018 <HAL_I2C_Mem_Write>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	713b      	strb	r3, [r7, #4]

	if (temp_config == HAL_OK){
 8003d60:	793b      	ldrb	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <MPU_6050_init+0x12e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003d66:	2201      	movs	r2, #1
 8003d68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d6c:	480b      	ldr	r0, [pc, #44]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003d6e:	f7fd ffdd 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003d72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d76:	f7fd fbe9 	bl	800154c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d80:	4806      	ldr	r0, [pc, #24]	@ (8003d9c <MPU_6050_init+0x13c>)
 8003d82:	f7fd ffd3 	bl	8001d2c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003d86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d8a:	f7fd fbdf 	bl	800154c <HAL_Delay>
	}
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200000bc 	.word	0x200000bc
 8003d9c:	40011000 	.word	0x40011000

08003da0 <MPU_6050_Get_Acc_X>:

signed short int MPU_6050_Get_Acc_X(){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af04      	add	r7, sp, #16
	uint8_t raw_acc_x[2];
	int16_t acc_x = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_X, 1, raw_acc_x, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8003daa:	2364      	movs	r3, #100	@ 0x64
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	2302      	movs	r3, #2
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	223b      	movs	r2, #59	@ 0x3b
 8003dba:	21d1      	movs	r1, #209	@ 0xd1
 8003dbc:	4807      	ldr	r0, [pc, #28]	@ (8003ddc <MPU_6050_Get_Acc_X+0x3c>)
 8003dbe:	f7fe fa25 	bl	800220c <HAL_I2C_Mem_Read>
	acc_x = (((int16_t) raw_acc_x[0] << 8) + raw_acc_x[1]);
 8003dc2:	793b      	ldrb	r3, [r7, #4]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	797a      	ldrb	r2, [r7, #5]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	80fb      	strh	r3, [r7, #6]
    return acc_x;
 8003dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200000bc 	.word	0x200000bc

08003de0 <MPU_6050_Get_Acc_Y>:

signed short int MPU_6050_Get_Acc_Y(){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af04      	add	r7, sp, #16
	uint8_t raw_acc_y[2];
	int16_t acc_y = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Y, 1, raw_acc_y, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8003dea:	2364      	movs	r3, #100	@ 0x64
 8003dec:	9302      	str	r3, [sp, #8]
 8003dee:	2302      	movs	r3, #2
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2301      	movs	r3, #1
 8003df8:	223d      	movs	r2, #61	@ 0x3d
 8003dfa:	21d1      	movs	r1, #209	@ 0xd1
 8003dfc:	4807      	ldr	r0, [pc, #28]	@ (8003e1c <MPU_6050_Get_Acc_Y+0x3c>)
 8003dfe:	f7fe fa05 	bl	800220c <HAL_I2C_Mem_Read>
	acc_y = (((int16_t) raw_acc_y[0] << 8) + raw_acc_y[1]);
 8003e02:	793b      	ldrb	r3, [r7, #4]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	797a      	ldrb	r2, [r7, #5]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	80fb      	strh	r3, [r7, #6]
	return acc_y;
 8003e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	200000bc 	.word	0x200000bc

08003e20 <MPU_6050_Get_Acc_Z>:

signed short int MPU_6050_Get_Acc_Z(){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af04      	add	r7, sp, #16
	uint8_t raw_acc_z[2];
	int16_t acc_z = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Z, 1, raw_acc_z, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8003e2a:	2364      	movs	r3, #100	@ 0x64
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2301      	movs	r3, #1
 8003e38:	223f      	movs	r2, #63	@ 0x3f
 8003e3a:	21d1      	movs	r1, #209	@ 0xd1
 8003e3c:	4807      	ldr	r0, [pc, #28]	@ (8003e5c <MPU_6050_Get_Acc_Z+0x3c>)
 8003e3e:	f7fe f9e5 	bl	800220c <HAL_I2C_Mem_Read>
	acc_z = (((int16_t) raw_acc_z[0] << 8) + raw_acc_z[1]);
 8003e42:	793b      	ldrb	r3, [r7, #4]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	797a      	ldrb	r2, [r7, #5]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	80fb      	strh	r3, [r7, #6]
	return acc_z;
 8003e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200000bc 	.word	0x200000bc

08003e60 <MPU_6050_Get_Temp>:

float MPU_6050_Get_Temp(){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	81fb      	strh	r3, [r7, #14]
	float temp = 0;
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_TEMP, 1, temp_data, 2, 100);
 8003e70:	2364      	movs	r3, #100	@ 0x64
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	2302      	movs	r3, #2
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	2241      	movs	r2, #65	@ 0x41
 8003e80:	21d1      	movs	r1, #209	@ 0xd1
 8003e82:	4817      	ldr	r0, [pc, #92]	@ (8003ee0 <MPU_6050_Get_Temp+0x80>)
 8003e84:	f7fe f9c2 	bl	800220c <HAL_I2C_Mem_Read>
	raw_temp = (temp_data[0] << 8 | temp_data[1]);
 8003e88:	793b      	ldrb	r3, [r7, #4]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	b21a      	sxth	r2, r3
 8003e8e:	797b      	ldrb	r3, [r7, #5]
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	81fb      	strh	r3, [r7, #14]
	temp = (raw_temp/340.0) + 36.53;
 8003e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc faaa 	bl	80003f4 <__aeabi_i2d>
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <MPU_6050_Get_Temp+0x84>)
 8003ea6:	f7fc fc39 	bl	800071c <__aeabi_ddiv>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	a309      	add	r3, pc, #36	@ (adr r3, 8003ed8 <MPU_6050_Get_Temp+0x78>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f7fc f950 	bl	800015c <__adddf3>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f7fc fd12 	bl	80008ec <__aeabi_d2f>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60bb      	str	r3, [r7, #8]
	return temp;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	0a3d70a4 	.word	0x0a3d70a4
 8003edc:	404243d7 	.word	0x404243d7
 8003ee0:	200000bc 	.word	0x200000bc
 8003ee4:	40754000 	.word	0x40754000

08003ee8 <NEXTION_SendPageChange>:
    NEXTION_SendNumber(huart, "led2", resultado2);
    NEXTION_SendNumber(huart, "led3", resultado3);
}

// Función para realizar la transición de la landing view al dash
void NEXTION_SendPageChange(UART_HandleTypeDef *huart, char *page_name) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    // Reserva memoria para un buffer de 50 bytes
    uint8_t *buffer = malloc(50 * sizeof(char));
 8003ef2:	2032      	movs	r0, #50	@ 0x32
 8003ef4:	f000 f85a 	bl	8003fac <malloc>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
    // Inicializa el buffer con la instrucción para cambiar de página
    int len = sprintf((char *)buffer, "page %s", page_name);
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	490d      	ldr	r1, [pc, #52]	@ (8003f34 <NEXTION_SendPageChange+0x4c>)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f911 	bl	8004128 <siprintf>
 8003f06:	60b8      	str	r0, [r7, #8]
    // Transmite el buffer a través de UART
    HAL_UART_Transmit(huart, buffer, len, 1000);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fd24 	bl	8003960 <HAL_UART_Transmit>
    // Transmite un comando para indicar el final del mensaje
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 8003f18:	2364      	movs	r3, #100	@ 0x64
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	4906      	ldr	r1, [pc, #24]	@ (8003f38 <NEXTION_SendPageChange+0x50>)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fd1e 	bl	8003960 <HAL_UART_Transmit>
    // Libera la memoria asignada al buffer
    free(buffer);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f849 	bl	8003fbc <free>
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004a20 	.word	0x08004a20
 8003f38:	08004a60 	.word	0x08004a60

08003f3c <NEXTION_Alert>:

// Función para actualizar todos los colores de los elementos a rojo por temperatura del motor o voltaje batería elevados
void NEXTION_Alert(UART_HandleTypeDef *huart, int color) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8003f46:	2032      	movs	r0, #50	@ 0x32
 8003f48:	f000 f830 	bl	8003fac <malloc>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 7; i++) {
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e01a      	b.n	8003f8c <NEXTION_Alert+0x50>
        // Formatea y transmite el mensaje para el elemento actual
        int len = sprintf((char *)buffer, "%s.bco=%d", array_elementos_a_poner_rojo_por_alerta[i], color);
 8003f56:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <NEXTION_Alert+0x64>)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4910      	ldr	r1, [pc, #64]	@ (8003fa4 <NEXTION_Alert+0x68>)
 8003f62:	6938      	ldr	r0, [r7, #16]
 8003f64:	f000 f8e0 	bl	8004128 <siprintf>
 8003f68:	60f8      	str	r0, [r7, #12]
        HAL_UART_Transmit(huart, buffer, len, 1000);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fcf3 	bl	8003960 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 8003f7a:	2364      	movs	r3, #100	@ 0x64
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	490a      	ldr	r1, [pc, #40]	@ (8003fa8 <NEXTION_Alert+0x6c>)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fced 	bl	8003960 <HAL_UART_Transmit>
    for (int i = 0; i < 7; i++) {
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	dde1      	ble.n	8003f56 <NEXTION_Alert+0x1a>
    }

    free(buffer); // Libera el buffer al final del bucle
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f000 f812 	bl	8003fbc <free>
}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	08004a28 	.word	0x08004a28
 8003fa8:	08004a60 	.word	0x08004a60

08003fac <malloc>:
 8003fac:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <malloc+0xc>)
 8003fae:	4601      	mov	r1, r0
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f000 b82d 	b.w	8004010 <_malloc_r>
 8003fb6:	bf00      	nop
 8003fb8:	20000028 	.word	0x20000028

08003fbc <free>:
 8003fbc:	4b02      	ldr	r3, [pc, #8]	@ (8003fc8 <free+0xc>)
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f000 b915 	b.w	80041f0 <_free_r>
 8003fc6:	bf00      	nop
 8003fc8:	20000028 	.word	0x20000028

08003fcc <sbrk_aligned>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4e0f      	ldr	r6, [pc, #60]	@ (800400c <sbrk_aligned+0x40>)
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	6831      	ldr	r1, [r6, #0]
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	b911      	cbnz	r1, 8003fde <sbrk_aligned+0x12>
 8003fd8:	f000 f8ce 	bl	8004178 <_sbrk_r>
 8003fdc:	6030      	str	r0, [r6, #0]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f8c9 	bl	8004178 <_sbrk_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d103      	bne.n	8003ff2 <sbrk_aligned+0x26>
 8003fea:	f04f 34ff 	mov.w	r4, #4294967295
 8003fee:	4620      	mov	r0, r4
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	1cc4      	adds	r4, r0, #3
 8003ff4:	f024 0403 	bic.w	r4, r4, #3
 8003ff8:	42a0      	cmp	r0, r4
 8003ffa:	d0f8      	beq.n	8003fee <sbrk_aligned+0x22>
 8003ffc:	1a21      	subs	r1, r4, r0
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f8ba 	bl	8004178 <_sbrk_r>
 8004004:	3001      	adds	r0, #1
 8004006:	d1f2      	bne.n	8003fee <sbrk_aligned+0x22>
 8004008:	e7ef      	b.n	8003fea <sbrk_aligned+0x1e>
 800400a:	bf00      	nop
 800400c:	20000188 	.word	0x20000188

08004010 <_malloc_r>:
 8004010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004014:	1ccd      	adds	r5, r1, #3
 8004016:	f025 0503 	bic.w	r5, r5, #3
 800401a:	3508      	adds	r5, #8
 800401c:	2d0c      	cmp	r5, #12
 800401e:	bf38      	it	cc
 8004020:	250c      	movcc	r5, #12
 8004022:	2d00      	cmp	r5, #0
 8004024:	4606      	mov	r6, r0
 8004026:	db01      	blt.n	800402c <_malloc_r+0x1c>
 8004028:	42a9      	cmp	r1, r5
 800402a:	d904      	bls.n	8004036 <_malloc_r+0x26>
 800402c:	230c      	movs	r3, #12
 800402e:	6033      	str	r3, [r6, #0]
 8004030:	2000      	movs	r0, #0
 8004032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800410c <_malloc_r+0xfc>
 800403a:	f000 f869 	bl	8004110 <__malloc_lock>
 800403e:	f8d8 3000 	ldr.w	r3, [r8]
 8004042:	461c      	mov	r4, r3
 8004044:	bb44      	cbnz	r4, 8004098 <_malloc_r+0x88>
 8004046:	4629      	mov	r1, r5
 8004048:	4630      	mov	r0, r6
 800404a:	f7ff ffbf 	bl	8003fcc <sbrk_aligned>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	4604      	mov	r4, r0
 8004052:	d158      	bne.n	8004106 <_malloc_r+0xf6>
 8004054:	f8d8 4000 	ldr.w	r4, [r8]
 8004058:	4627      	mov	r7, r4
 800405a:	2f00      	cmp	r7, #0
 800405c:	d143      	bne.n	80040e6 <_malloc_r+0xd6>
 800405e:	2c00      	cmp	r4, #0
 8004060:	d04b      	beq.n	80040fa <_malloc_r+0xea>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	4639      	mov	r1, r7
 8004066:	4630      	mov	r0, r6
 8004068:	eb04 0903 	add.w	r9, r4, r3
 800406c:	f000 f884 	bl	8004178 <_sbrk_r>
 8004070:	4581      	cmp	r9, r0
 8004072:	d142      	bne.n	80040fa <_malloc_r+0xea>
 8004074:	6821      	ldr	r1, [r4, #0]
 8004076:	4630      	mov	r0, r6
 8004078:	1a6d      	subs	r5, r5, r1
 800407a:	4629      	mov	r1, r5
 800407c:	f7ff ffa6 	bl	8003fcc <sbrk_aligned>
 8004080:	3001      	adds	r0, #1
 8004082:	d03a      	beq.n	80040fa <_malloc_r+0xea>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	442b      	add	r3, r5
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	f8d8 3000 	ldr.w	r3, [r8]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	bb62      	cbnz	r2, 80040ec <_malloc_r+0xdc>
 8004092:	f8c8 7000 	str.w	r7, [r8]
 8004096:	e00f      	b.n	80040b8 <_malloc_r+0xa8>
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	1b52      	subs	r2, r2, r5
 800409c:	d420      	bmi.n	80040e0 <_malloc_r+0xd0>
 800409e:	2a0b      	cmp	r2, #11
 80040a0:	d917      	bls.n	80040d2 <_malloc_r+0xc2>
 80040a2:	1961      	adds	r1, r4, r5
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	6025      	str	r5, [r4, #0]
 80040a8:	bf18      	it	ne
 80040aa:	6059      	strne	r1, [r3, #4]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	bf08      	it	eq
 80040b0:	f8c8 1000 	streq.w	r1, [r8]
 80040b4:	5162      	str	r2, [r4, r5]
 80040b6:	604b      	str	r3, [r1, #4]
 80040b8:	4630      	mov	r0, r6
 80040ba:	f000 f82f 	bl	800411c <__malloc_unlock>
 80040be:	f104 000b 	add.w	r0, r4, #11
 80040c2:	1d23      	adds	r3, r4, #4
 80040c4:	f020 0007 	bic.w	r0, r0, #7
 80040c8:	1ac2      	subs	r2, r0, r3
 80040ca:	bf1c      	itt	ne
 80040cc:	1a1b      	subne	r3, r3, r0
 80040ce:	50a3      	strne	r3, [r4, r2]
 80040d0:	e7af      	b.n	8004032 <_malloc_r+0x22>
 80040d2:	6862      	ldr	r2, [r4, #4]
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	bf0c      	ite	eq
 80040d8:	f8c8 2000 	streq.w	r2, [r8]
 80040dc:	605a      	strne	r2, [r3, #4]
 80040de:	e7eb      	b.n	80040b8 <_malloc_r+0xa8>
 80040e0:	4623      	mov	r3, r4
 80040e2:	6864      	ldr	r4, [r4, #4]
 80040e4:	e7ae      	b.n	8004044 <_malloc_r+0x34>
 80040e6:	463c      	mov	r4, r7
 80040e8:	687f      	ldr	r7, [r7, #4]
 80040ea:	e7b6      	b.n	800405a <_malloc_r+0x4a>
 80040ec:	461a      	mov	r2, r3
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d1fb      	bne.n	80040ec <_malloc_r+0xdc>
 80040f4:	2300      	movs	r3, #0
 80040f6:	6053      	str	r3, [r2, #4]
 80040f8:	e7de      	b.n	80040b8 <_malloc_r+0xa8>
 80040fa:	230c      	movs	r3, #12
 80040fc:	4630      	mov	r0, r6
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f000 f80c 	bl	800411c <__malloc_unlock>
 8004104:	e794      	b.n	8004030 <_malloc_r+0x20>
 8004106:	6005      	str	r5, [r0, #0]
 8004108:	e7d6      	b.n	80040b8 <_malloc_r+0xa8>
 800410a:	bf00      	nop
 800410c:	2000018c 	.word	0x2000018c

08004110 <__malloc_lock>:
 8004110:	4801      	ldr	r0, [pc, #4]	@ (8004118 <__malloc_lock+0x8>)
 8004112:	f000 b86b 	b.w	80041ec <__retarget_lock_acquire_recursive>
 8004116:	bf00      	nop
 8004118:	200002cc 	.word	0x200002cc

0800411c <__malloc_unlock>:
 800411c:	4801      	ldr	r0, [pc, #4]	@ (8004124 <__malloc_unlock+0x8>)
 800411e:	f000 b866 	b.w	80041ee <__retarget_lock_release_recursive>
 8004122:	bf00      	nop
 8004124:	200002cc 	.word	0x200002cc

08004128 <siprintf>:
 8004128:	b40e      	push	{r1, r2, r3}
 800412a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800412e:	b500      	push	{lr}
 8004130:	b09c      	sub	sp, #112	@ 0x70
 8004132:	ab1d      	add	r3, sp, #116	@ 0x74
 8004134:	9002      	str	r0, [sp, #8]
 8004136:	9006      	str	r0, [sp, #24]
 8004138:	9107      	str	r1, [sp, #28]
 800413a:	9104      	str	r1, [sp, #16]
 800413c:	4808      	ldr	r0, [pc, #32]	@ (8004160 <siprintf+0x38>)
 800413e:	4909      	ldr	r1, [pc, #36]	@ (8004164 <siprintf+0x3c>)
 8004140:	f853 2b04 	ldr.w	r2, [r3], #4
 8004144:	9105      	str	r1, [sp, #20]
 8004146:	6800      	ldr	r0, [r0, #0]
 8004148:	a902      	add	r1, sp, #8
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	f000 f8f4 	bl	8004338 <_svfiprintf_r>
 8004150:	2200      	movs	r2, #0
 8004152:	9b02      	ldr	r3, [sp, #8]
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	b01c      	add	sp, #112	@ 0x70
 8004158:	f85d eb04 	ldr.w	lr, [sp], #4
 800415c:	b003      	add	sp, #12
 800415e:	4770      	bx	lr
 8004160:	20000028 	.word	0x20000028
 8004164:	ffff0208 	.word	0xffff0208

08004168 <memset>:
 8004168:	4603      	mov	r3, r0
 800416a:	4402      	add	r2, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <_sbrk_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	2300      	movs	r3, #0
 800417c:	4d05      	ldr	r5, [pc, #20]	@ (8004194 <_sbrk_r+0x1c>)
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	f7fd f91e 	bl	80013c4 <_sbrk>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_sbrk_r+0x1a>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	b103      	cbz	r3, 8004192 <_sbrk_r+0x1a>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	200002c8 	.word	0x200002c8

08004198 <__errno>:
 8004198:	4b01      	ldr	r3, [pc, #4]	@ (80041a0 <__errno+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000028 	.word	0x20000028

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	2600      	movs	r6, #0
 80041a8:	4d0c      	ldr	r5, [pc, #48]	@ (80041dc <__libc_init_array+0x38>)
 80041aa:	4c0d      	ldr	r4, [pc, #52]	@ (80041e0 <__libc_init_array+0x3c>)
 80041ac:	1b64      	subs	r4, r4, r5
 80041ae:	10a4      	asrs	r4, r4, #2
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	f000 fbba 	bl	800492c <_init>
 80041b8:	2600      	movs	r6, #0
 80041ba:	4d0a      	ldr	r5, [pc, #40]	@ (80041e4 <__libc_init_array+0x40>)
 80041bc:	4c0a      	ldr	r4, [pc, #40]	@ (80041e8 <__libc_init_array+0x44>)
 80041be:	1b64      	subs	r4, r4, r5
 80041c0:	10a4      	asrs	r4, r4, #2
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08004a98 	.word	0x08004a98
 80041e0:	08004a98 	.word	0x08004a98
 80041e4:	08004a98 	.word	0x08004a98
 80041e8:	08004a9c 	.word	0x08004a9c

080041ec <__retarget_lock_acquire_recursive>:
 80041ec:	4770      	bx	lr

080041ee <__retarget_lock_release_recursive>:
 80041ee:	4770      	bx	lr

080041f0 <_free_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4605      	mov	r5, r0
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d040      	beq.n	800427a <_free_r+0x8a>
 80041f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fc:	1f0c      	subs	r4, r1, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bfb8      	it	lt
 8004202:	18e4      	addlt	r4, r4, r3
 8004204:	f7ff ff84 	bl	8004110 <__malloc_lock>
 8004208:	4a1c      	ldr	r2, [pc, #112]	@ (800427c <_free_r+0x8c>)
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	b933      	cbnz	r3, 800421c <_free_r+0x2c>
 800420e:	6063      	str	r3, [r4, #4]
 8004210:	6014      	str	r4, [r2, #0]
 8004212:	4628      	mov	r0, r5
 8004214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004218:	f7ff bf80 	b.w	800411c <__malloc_unlock>
 800421c:	42a3      	cmp	r3, r4
 800421e:	d908      	bls.n	8004232 <_free_r+0x42>
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	1821      	adds	r1, r4, r0
 8004224:	428b      	cmp	r3, r1
 8004226:	bf01      	itttt	eq
 8004228:	6819      	ldreq	r1, [r3, #0]
 800422a:	685b      	ldreq	r3, [r3, #4]
 800422c:	1809      	addeq	r1, r1, r0
 800422e:	6021      	streq	r1, [r4, #0]
 8004230:	e7ed      	b.n	800420e <_free_r+0x1e>
 8004232:	461a      	mov	r2, r3
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b10b      	cbz	r3, 800423c <_free_r+0x4c>
 8004238:	42a3      	cmp	r3, r4
 800423a:	d9fa      	bls.n	8004232 <_free_r+0x42>
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	1850      	adds	r0, r2, r1
 8004240:	42a0      	cmp	r0, r4
 8004242:	d10b      	bne.n	800425c <_free_r+0x6c>
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	4401      	add	r1, r0
 8004248:	1850      	adds	r0, r2, r1
 800424a:	4283      	cmp	r3, r0
 800424c:	6011      	str	r1, [r2, #0]
 800424e:	d1e0      	bne.n	8004212 <_free_r+0x22>
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4408      	add	r0, r1
 8004256:	6010      	str	r0, [r2, #0]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	e7da      	b.n	8004212 <_free_r+0x22>
 800425c:	d902      	bls.n	8004264 <_free_r+0x74>
 800425e:	230c      	movs	r3, #12
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	e7d6      	b.n	8004212 <_free_r+0x22>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	1821      	adds	r1, r4, r0
 8004268:	428b      	cmp	r3, r1
 800426a:	bf01      	itttt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	6054      	str	r4, [r2, #4]
 8004278:	e7cb      	b.n	8004212 <_free_r+0x22>
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	2000018c 	.word	0x2000018c

08004280 <__ssputs_r>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	461f      	mov	r7, r3
 8004286:	688e      	ldr	r6, [r1, #8]
 8004288:	4682      	mov	sl, r0
 800428a:	42be      	cmp	r6, r7
 800428c:	460c      	mov	r4, r1
 800428e:	4690      	mov	r8, r2
 8004290:	680b      	ldr	r3, [r1, #0]
 8004292:	d82d      	bhi.n	80042f0 <__ssputs_r+0x70>
 8004294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004298:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800429c:	d026      	beq.n	80042ec <__ssputs_r+0x6c>
 800429e:	6965      	ldr	r5, [r4, #20]
 80042a0:	6909      	ldr	r1, [r1, #16]
 80042a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a6:	eba3 0901 	sub.w	r9, r3, r1
 80042aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042ae:	1c7b      	adds	r3, r7, #1
 80042b0:	444b      	add	r3, r9
 80042b2:	106d      	asrs	r5, r5, #1
 80042b4:	429d      	cmp	r5, r3
 80042b6:	bf38      	it	cc
 80042b8:	461d      	movcc	r5, r3
 80042ba:	0553      	lsls	r3, r2, #21
 80042bc:	d527      	bpl.n	800430e <__ssputs_r+0x8e>
 80042be:	4629      	mov	r1, r5
 80042c0:	f7ff fea6 	bl	8004010 <_malloc_r>
 80042c4:	4606      	mov	r6, r0
 80042c6:	b360      	cbz	r0, 8004322 <__ssputs_r+0xa2>
 80042c8:	464a      	mov	r2, r9
 80042ca:	6921      	ldr	r1, [r4, #16]
 80042cc:	f000 faea 	bl	80048a4 <memcpy>
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	6126      	str	r6, [r4, #16]
 80042de:	444e      	add	r6, r9
 80042e0:	6026      	str	r6, [r4, #0]
 80042e2:	463e      	mov	r6, r7
 80042e4:	6165      	str	r5, [r4, #20]
 80042e6:	eba5 0509 	sub.w	r5, r5, r9
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	42be      	cmp	r6, r7
 80042ee:	d900      	bls.n	80042f2 <__ssputs_r+0x72>
 80042f0:	463e      	mov	r6, r7
 80042f2:	4632      	mov	r2, r6
 80042f4:	4641      	mov	r1, r8
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	f000 faac 	bl	8004854 <memmove>
 80042fc:	2000      	movs	r0, #0
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	1b9b      	subs	r3, r3, r6
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4433      	add	r3, r6
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430e:	462a      	mov	r2, r5
 8004310:	f000 fad6 	bl	80048c0 <_realloc_r>
 8004314:	4606      	mov	r6, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	d1e0      	bne.n	80042dc <__ssputs_r+0x5c>
 800431a:	4650      	mov	r0, sl
 800431c:	6921      	ldr	r1, [r4, #16]
 800431e:	f7ff ff67 	bl	80041f0 <_free_r>
 8004322:	230c      	movs	r3, #12
 8004324:	f8ca 3000 	str.w	r3, [sl]
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f04f 30ff 	mov.w	r0, #4294967295
 800432e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	e7e9      	b.n	800430a <__ssputs_r+0x8a>
	...

08004338 <_svfiprintf_r>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	4698      	mov	r8, r3
 800433e:	898b      	ldrh	r3, [r1, #12]
 8004340:	4607      	mov	r7, r0
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	460d      	mov	r5, r1
 8004346:	4614      	mov	r4, r2
 8004348:	b09d      	sub	sp, #116	@ 0x74
 800434a:	d510      	bpl.n	800436e <_svfiprintf_r+0x36>
 800434c:	690b      	ldr	r3, [r1, #16]
 800434e:	b973      	cbnz	r3, 800436e <_svfiprintf_r+0x36>
 8004350:	2140      	movs	r1, #64	@ 0x40
 8004352:	f7ff fe5d 	bl	8004010 <_malloc_r>
 8004356:	6028      	str	r0, [r5, #0]
 8004358:	6128      	str	r0, [r5, #16]
 800435a:	b930      	cbnz	r0, 800436a <_svfiprintf_r+0x32>
 800435c:	230c      	movs	r3, #12
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	b01d      	add	sp, #116	@ 0x74
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	2340      	movs	r3, #64	@ 0x40
 800436c:	616b      	str	r3, [r5, #20]
 800436e:	2300      	movs	r3, #0
 8004370:	9309      	str	r3, [sp, #36]	@ 0x24
 8004372:	2320      	movs	r3, #32
 8004374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004378:	2330      	movs	r3, #48	@ 0x30
 800437a:	f04f 0901 	mov.w	r9, #1
 800437e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004382:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800451c <_svfiprintf_r+0x1e4>
 8004386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800438a:	4623      	mov	r3, r4
 800438c:	469a      	mov	sl, r3
 800438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004392:	b10a      	cbz	r2, 8004398 <_svfiprintf_r+0x60>
 8004394:	2a25      	cmp	r2, #37	@ 0x25
 8004396:	d1f9      	bne.n	800438c <_svfiprintf_r+0x54>
 8004398:	ebba 0b04 	subs.w	fp, sl, r4
 800439c:	d00b      	beq.n	80043b6 <_svfiprintf_r+0x7e>
 800439e:	465b      	mov	r3, fp
 80043a0:	4622      	mov	r2, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ff6b 	bl	8004280 <__ssputs_r>
 80043aa:	3001      	adds	r0, #1
 80043ac:	f000 80a7 	beq.w	80044fe <_svfiprintf_r+0x1c6>
 80043b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043b2:	445a      	add	r2, fp
 80043b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80043b6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 809f 	beq.w	80044fe <_svfiprintf_r+0x1c6>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ca:	f10a 0a01 	add.w	sl, sl, #1
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	9307      	str	r3, [sp, #28]
 80043d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80043d8:	4654      	mov	r4, sl
 80043da:	2205      	movs	r2, #5
 80043dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e0:	484e      	ldr	r0, [pc, #312]	@ (800451c <_svfiprintf_r+0x1e4>)
 80043e2:	f000 fa51 	bl	8004888 <memchr>
 80043e6:	9a04      	ldr	r2, [sp, #16]
 80043e8:	b9d8      	cbnz	r0, 8004422 <_svfiprintf_r+0xea>
 80043ea:	06d0      	lsls	r0, r2, #27
 80043ec:	bf44      	itt	mi
 80043ee:	2320      	movmi	r3, #32
 80043f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043f4:	0711      	lsls	r1, r2, #28
 80043f6:	bf44      	itt	mi
 80043f8:	232b      	movmi	r3, #43	@ 0x2b
 80043fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b2a      	cmp	r3, #42	@ 0x2a
 8004404:	d015      	beq.n	8004432 <_svfiprintf_r+0xfa>
 8004406:	4654      	mov	r4, sl
 8004408:	2000      	movs	r0, #0
 800440a:	f04f 0c0a 	mov.w	ip, #10
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	4621      	mov	r1, r4
 8004412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004416:	3b30      	subs	r3, #48	@ 0x30
 8004418:	2b09      	cmp	r3, #9
 800441a:	d94b      	bls.n	80044b4 <_svfiprintf_r+0x17c>
 800441c:	b1b0      	cbz	r0, 800444c <_svfiprintf_r+0x114>
 800441e:	9207      	str	r2, [sp, #28]
 8004420:	e014      	b.n	800444c <_svfiprintf_r+0x114>
 8004422:	eba0 0308 	sub.w	r3, r0, r8
 8004426:	fa09 f303 	lsl.w	r3, r9, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	46a2      	mov	sl, r4
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	e7d2      	b.n	80043d8 <_svfiprintf_r+0xa0>
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	1d19      	adds	r1, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9103      	str	r1, [sp, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfbb      	ittet	lt
 800443e:	425b      	neglt	r3, r3
 8004440:	f042 0202 	orrlt.w	r2, r2, #2
 8004444:	9307      	strge	r3, [sp, #28]
 8004446:	9307      	strlt	r3, [sp, #28]
 8004448:	bfb8      	it	lt
 800444a:	9204      	strlt	r2, [sp, #16]
 800444c:	7823      	ldrb	r3, [r4, #0]
 800444e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004450:	d10a      	bne.n	8004468 <_svfiprintf_r+0x130>
 8004452:	7863      	ldrb	r3, [r4, #1]
 8004454:	2b2a      	cmp	r3, #42	@ 0x2a
 8004456:	d132      	bne.n	80044be <_svfiprintf_r+0x186>
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	3402      	adds	r4, #2
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	9203      	str	r2, [sp, #12]
 8004462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004466:	9305      	str	r3, [sp, #20]
 8004468:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004520 <_svfiprintf_r+0x1e8>
 800446c:	2203      	movs	r2, #3
 800446e:	4650      	mov	r0, sl
 8004470:	7821      	ldrb	r1, [r4, #0]
 8004472:	f000 fa09 	bl	8004888 <memchr>
 8004476:	b138      	cbz	r0, 8004488 <_svfiprintf_r+0x150>
 8004478:	2240      	movs	r2, #64	@ 0x40
 800447a:	9b04      	ldr	r3, [sp, #16]
 800447c:	eba0 000a 	sub.w	r0, r0, sl
 8004480:	4082      	lsls	r2, r0
 8004482:	4313      	orrs	r3, r2
 8004484:	3401      	adds	r4, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448c:	2206      	movs	r2, #6
 800448e:	4825      	ldr	r0, [pc, #148]	@ (8004524 <_svfiprintf_r+0x1ec>)
 8004490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004494:	f000 f9f8 	bl	8004888 <memchr>
 8004498:	2800      	cmp	r0, #0
 800449a:	d036      	beq.n	800450a <_svfiprintf_r+0x1d2>
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <_svfiprintf_r+0x1f0>)
 800449e:	bb1b      	cbnz	r3, 80044e8 <_svfiprintf_r+0x1b0>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	3307      	adds	r3, #7
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	3308      	adds	r3, #8
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ae:	4433      	add	r3, r6
 80044b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044b2:	e76a      	b.n	800438a <_svfiprintf_r+0x52>
 80044b4:	460c      	mov	r4, r1
 80044b6:	2001      	movs	r0, #1
 80044b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044bc:	e7a8      	b.n	8004410 <_svfiprintf_r+0xd8>
 80044be:	2300      	movs	r3, #0
 80044c0:	f04f 0c0a 	mov.w	ip, #10
 80044c4:	4619      	mov	r1, r3
 80044c6:	3401      	adds	r4, #1
 80044c8:	9305      	str	r3, [sp, #20]
 80044ca:	4620      	mov	r0, r4
 80044cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d0:	3a30      	subs	r2, #48	@ 0x30
 80044d2:	2a09      	cmp	r2, #9
 80044d4:	d903      	bls.n	80044de <_svfiprintf_r+0x1a6>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0c6      	beq.n	8004468 <_svfiprintf_r+0x130>
 80044da:	9105      	str	r1, [sp, #20]
 80044dc:	e7c4      	b.n	8004468 <_svfiprintf_r+0x130>
 80044de:	4604      	mov	r4, r0
 80044e0:	2301      	movs	r3, #1
 80044e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044e6:	e7f0      	b.n	80044ca <_svfiprintf_r+0x192>
 80044e8:	ab03      	add	r3, sp, #12
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4638      	mov	r0, r7
 80044f0:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <_svfiprintf_r+0x1f4>)
 80044f2:	a904      	add	r1, sp, #16
 80044f4:	f3af 8000 	nop.w
 80044f8:	1c42      	adds	r2, r0, #1
 80044fa:	4606      	mov	r6, r0
 80044fc:	d1d6      	bne.n	80044ac <_svfiprintf_r+0x174>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	065b      	lsls	r3, r3, #25
 8004502:	f53f af2d 	bmi.w	8004360 <_svfiprintf_r+0x28>
 8004506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004508:	e72c      	b.n	8004364 <_svfiprintf_r+0x2c>
 800450a:	ab03      	add	r3, sp, #12
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	462a      	mov	r2, r5
 8004510:	4638      	mov	r0, r7
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <_svfiprintf_r+0x1f4>)
 8004514:	a904      	add	r1, sp, #16
 8004516:	f000 f87d 	bl	8004614 <_printf_i>
 800451a:	e7ed      	b.n	80044f8 <_svfiprintf_r+0x1c0>
 800451c:	08004a63 	.word	0x08004a63
 8004520:	08004a69 	.word	0x08004a69
 8004524:	08004a6d 	.word	0x08004a6d
 8004528:	00000000 	.word	0x00000000
 800452c:	08004281 	.word	0x08004281

08004530 <_printf_common>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	4616      	mov	r6, r2
 8004536:	4698      	mov	r8, r3
 8004538:	688a      	ldr	r2, [r1, #8]
 800453a:	690b      	ldr	r3, [r1, #16]
 800453c:	4607      	mov	r7, r0
 800453e:	4293      	cmp	r3, r2
 8004540:	bfb8      	it	lt
 8004542:	4613      	movlt	r3, r2
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800454a:	460c      	mov	r4, r1
 800454c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004550:	b10a      	cbz	r2, 8004556 <_printf_common+0x26>
 8004552:	3301      	adds	r3, #1
 8004554:	6033      	str	r3, [r6, #0]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	0699      	lsls	r1, r3, #26
 800455a:	bf42      	ittt	mi
 800455c:	6833      	ldrmi	r3, [r6, #0]
 800455e:	3302      	addmi	r3, #2
 8004560:	6033      	strmi	r3, [r6, #0]
 8004562:	6825      	ldr	r5, [r4, #0]
 8004564:	f015 0506 	ands.w	r5, r5, #6
 8004568:	d106      	bne.n	8004578 <_printf_common+0x48>
 800456a:	f104 0a19 	add.w	sl, r4, #25
 800456e:	68e3      	ldr	r3, [r4, #12]
 8004570:	6832      	ldr	r2, [r6, #0]
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	42ab      	cmp	r3, r5
 8004576:	dc2b      	bgt.n	80045d0 <_printf_common+0xa0>
 8004578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800457c:	6822      	ldr	r2, [r4, #0]
 800457e:	3b00      	subs	r3, #0
 8004580:	bf18      	it	ne
 8004582:	2301      	movne	r3, #1
 8004584:	0692      	lsls	r2, r2, #26
 8004586:	d430      	bmi.n	80045ea <_printf_common+0xba>
 8004588:	4641      	mov	r1, r8
 800458a:	4638      	mov	r0, r7
 800458c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004590:	47c8      	blx	r9
 8004592:	3001      	adds	r0, #1
 8004594:	d023      	beq.n	80045de <_printf_common+0xae>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	6922      	ldr	r2, [r4, #16]
 800459a:	f003 0306 	and.w	r3, r3, #6
 800459e:	2b04      	cmp	r3, #4
 80045a0:	bf14      	ite	ne
 80045a2:	2500      	movne	r5, #0
 80045a4:	6833      	ldreq	r3, [r6, #0]
 80045a6:	f04f 0600 	mov.w	r6, #0
 80045aa:	bf08      	it	eq
 80045ac:	68e5      	ldreq	r5, [r4, #12]
 80045ae:	f104 041a 	add.w	r4, r4, #26
 80045b2:	bf08      	it	eq
 80045b4:	1aed      	subeq	r5, r5, r3
 80045b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045ba:	bf08      	it	eq
 80045bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c0:	4293      	cmp	r3, r2
 80045c2:	bfc4      	itt	gt
 80045c4:	1a9b      	subgt	r3, r3, r2
 80045c6:	18ed      	addgt	r5, r5, r3
 80045c8:	42b5      	cmp	r5, r6
 80045ca:	d11a      	bne.n	8004602 <_printf_common+0xd2>
 80045cc:	2000      	movs	r0, #0
 80045ce:	e008      	b.n	80045e2 <_printf_common+0xb2>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4652      	mov	r2, sl
 80045d4:	4641      	mov	r1, r8
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d103      	bne.n	80045e6 <_printf_common+0xb6>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	3501      	adds	r5, #1
 80045e8:	e7c1      	b.n	800456e <_printf_common+0x3e>
 80045ea:	2030      	movs	r0, #48	@ 0x30
 80045ec:	18e1      	adds	r1, r4, r3
 80045ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045f8:	4422      	add	r2, r4
 80045fa:	3302      	adds	r3, #2
 80045fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004600:	e7c2      	b.n	8004588 <_printf_common+0x58>
 8004602:	2301      	movs	r3, #1
 8004604:	4622      	mov	r2, r4
 8004606:	4641      	mov	r1, r8
 8004608:	4638      	mov	r0, r7
 800460a:	47c8      	blx	r9
 800460c:	3001      	adds	r0, #1
 800460e:	d0e6      	beq.n	80045de <_printf_common+0xae>
 8004610:	3601      	adds	r6, #1
 8004612:	e7d9      	b.n	80045c8 <_printf_common+0x98>

08004614 <_printf_i>:
 8004614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	7e0f      	ldrb	r7, [r1, #24]
 800461a:	4691      	mov	r9, r2
 800461c:	2f78      	cmp	r7, #120	@ 0x78
 800461e:	4680      	mov	r8, r0
 8004620:	460c      	mov	r4, r1
 8004622:	469a      	mov	sl, r3
 8004624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800462a:	d807      	bhi.n	800463c <_printf_i+0x28>
 800462c:	2f62      	cmp	r7, #98	@ 0x62
 800462e:	d80a      	bhi.n	8004646 <_printf_i+0x32>
 8004630:	2f00      	cmp	r7, #0
 8004632:	f000 80d3 	beq.w	80047dc <_printf_i+0x1c8>
 8004636:	2f58      	cmp	r7, #88	@ 0x58
 8004638:	f000 80ba 	beq.w	80047b0 <_printf_i+0x19c>
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004644:	e03a      	b.n	80046bc <_printf_i+0xa8>
 8004646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800464a:	2b15      	cmp	r3, #21
 800464c:	d8f6      	bhi.n	800463c <_printf_i+0x28>
 800464e:	a101      	add	r1, pc, #4	@ (adr r1, 8004654 <_printf_i+0x40>)
 8004650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004654:	080046ad 	.word	0x080046ad
 8004658:	080046c1 	.word	0x080046c1
 800465c:	0800463d 	.word	0x0800463d
 8004660:	0800463d 	.word	0x0800463d
 8004664:	0800463d 	.word	0x0800463d
 8004668:	0800463d 	.word	0x0800463d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800463d 	.word	0x0800463d
 8004674:	0800463d 	.word	0x0800463d
 8004678:	0800463d 	.word	0x0800463d
 800467c:	0800463d 	.word	0x0800463d
 8004680:	080047c3 	.word	0x080047c3
 8004684:	080046eb 	.word	0x080046eb
 8004688:	0800477d 	.word	0x0800477d
 800468c:	0800463d 	.word	0x0800463d
 8004690:	0800463d 	.word	0x0800463d
 8004694:	080047e5 	.word	0x080047e5
 8004698:	0800463d 	.word	0x0800463d
 800469c:	080046eb 	.word	0x080046eb
 80046a0:	0800463d 	.word	0x0800463d
 80046a4:	0800463d 	.word	0x0800463d
 80046a8:	08004785 	.word	0x08004785
 80046ac:	6833      	ldr	r3, [r6, #0]
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6032      	str	r2, [r6, #0]
 80046b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046bc:	2301      	movs	r3, #1
 80046be:	e09e      	b.n	80047fe <_printf_i+0x1ea>
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6031      	str	r1, [r6, #0]
 80046c8:	0606      	lsls	r6, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xbc>
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	e003      	b.n	80046d8 <_printf_i+0xc4>
 80046d0:	0645      	lsls	r5, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xb8>
 80046d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046d8:	2d00      	cmp	r5, #0
 80046da:	da03      	bge.n	80046e4 <_printf_i+0xd0>
 80046dc:	232d      	movs	r3, #45	@ 0x2d
 80046de:	426d      	negs	r5, r5
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046e4:	230a      	movs	r3, #10
 80046e6:	4859      	ldr	r0, [pc, #356]	@ (800484c <_printf_i+0x238>)
 80046e8:	e011      	b.n	800470e <_printf_i+0xfa>
 80046ea:	6821      	ldr	r1, [r4, #0]
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	0608      	lsls	r0, r1, #24
 80046f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046f4:	d402      	bmi.n	80046fc <_printf_i+0xe8>
 80046f6:	0649      	lsls	r1, r1, #25
 80046f8:	bf48      	it	mi
 80046fa:	b2ad      	uxthmi	r5, r5
 80046fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046fe:	6033      	str	r3, [r6, #0]
 8004700:	bf14      	ite	ne
 8004702:	230a      	movne	r3, #10
 8004704:	2308      	moveq	r3, #8
 8004706:	4851      	ldr	r0, [pc, #324]	@ (800484c <_printf_i+0x238>)
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800470e:	6866      	ldr	r6, [r4, #4]
 8004710:	2e00      	cmp	r6, #0
 8004712:	bfa8      	it	ge
 8004714:	6821      	ldrge	r1, [r4, #0]
 8004716:	60a6      	str	r6, [r4, #8]
 8004718:	bfa4      	itt	ge
 800471a:	f021 0104 	bicge.w	r1, r1, #4
 800471e:	6021      	strge	r1, [r4, #0]
 8004720:	b90d      	cbnz	r5, 8004726 <_printf_i+0x112>
 8004722:	2e00      	cmp	r6, #0
 8004724:	d04b      	beq.n	80047be <_printf_i+0x1aa>
 8004726:	4616      	mov	r6, r2
 8004728:	fbb5 f1f3 	udiv	r1, r5, r3
 800472c:	fb03 5711 	mls	r7, r3, r1, r5
 8004730:	5dc7      	ldrb	r7, [r0, r7]
 8004732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004736:	462f      	mov	r7, r5
 8004738:	42bb      	cmp	r3, r7
 800473a:	460d      	mov	r5, r1
 800473c:	d9f4      	bls.n	8004728 <_printf_i+0x114>
 800473e:	2b08      	cmp	r3, #8
 8004740:	d10b      	bne.n	800475a <_printf_i+0x146>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	07df      	lsls	r7, r3, #31
 8004746:	d508      	bpl.n	800475a <_printf_i+0x146>
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	6861      	ldr	r1, [r4, #4]
 800474c:	4299      	cmp	r1, r3
 800474e:	bfde      	ittt	le
 8004750:	2330      	movle	r3, #48	@ 0x30
 8004752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800475a:	1b92      	subs	r2, r2, r6
 800475c:	6122      	str	r2, [r4, #16]
 800475e:	464b      	mov	r3, r9
 8004760:	4621      	mov	r1, r4
 8004762:	4640      	mov	r0, r8
 8004764:	f8cd a000 	str.w	sl, [sp]
 8004768:	aa03      	add	r2, sp, #12
 800476a:	f7ff fee1 	bl	8004530 <_printf_common>
 800476e:	3001      	adds	r0, #1
 8004770:	d14a      	bne.n	8004808 <_printf_i+0x1f4>
 8004772:	f04f 30ff 	mov.w	r0, #4294967295
 8004776:	b004      	add	sp, #16
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2778      	movs	r7, #120	@ 0x78
 8004786:	4832      	ldr	r0, [pc, #200]	@ (8004850 <_printf_i+0x23c>)
 8004788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	6831      	ldr	r1, [r6, #0]
 8004790:	061f      	lsls	r7, r3, #24
 8004792:	f851 5b04 	ldr.w	r5, [r1], #4
 8004796:	d402      	bmi.n	800479e <_printf_i+0x18a>
 8004798:	065f      	lsls	r7, r3, #25
 800479a:	bf48      	it	mi
 800479c:	b2ad      	uxthmi	r5, r5
 800479e:	6031      	str	r1, [r6, #0]
 80047a0:	07d9      	lsls	r1, r3, #31
 80047a2:	bf44      	itt	mi
 80047a4:	f043 0320 	orrmi.w	r3, r3, #32
 80047a8:	6023      	strmi	r3, [r4, #0]
 80047aa:	b11d      	cbz	r5, 80047b4 <_printf_i+0x1a0>
 80047ac:	2310      	movs	r3, #16
 80047ae:	e7ab      	b.n	8004708 <_printf_i+0xf4>
 80047b0:	4826      	ldr	r0, [pc, #152]	@ (800484c <_printf_i+0x238>)
 80047b2:	e7e9      	b.n	8004788 <_printf_i+0x174>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	f023 0320 	bic.w	r3, r3, #32
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	e7f6      	b.n	80047ac <_printf_i+0x198>
 80047be:	4616      	mov	r6, r2
 80047c0:	e7bd      	b.n	800473e <_printf_i+0x12a>
 80047c2:	6833      	ldr	r3, [r6, #0]
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	1d18      	adds	r0, r3, #4
 80047c8:	6961      	ldr	r1, [r4, #20]
 80047ca:	6030      	str	r0, [r6, #0]
 80047cc:	062e      	lsls	r6, r5, #24
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	d501      	bpl.n	80047d6 <_printf_i+0x1c2>
 80047d2:	6019      	str	r1, [r3, #0]
 80047d4:	e002      	b.n	80047dc <_printf_i+0x1c8>
 80047d6:	0668      	lsls	r0, r5, #25
 80047d8:	d5fb      	bpl.n	80047d2 <_printf_i+0x1be>
 80047da:	8019      	strh	r1, [r3, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	4616      	mov	r6, r2
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	e7bc      	b.n	800475e <_printf_i+0x14a>
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	2100      	movs	r1, #0
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	6032      	str	r2, [r6, #0]
 80047ec:	681e      	ldr	r6, [r3, #0]
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f849 	bl	8004888 <memchr>
 80047f6:	b108      	cbz	r0, 80047fc <_printf_i+0x1e8>
 80047f8:	1b80      	subs	r0, r0, r6
 80047fa:	6060      	str	r0, [r4, #4]
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	2300      	movs	r3, #0
 8004802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004806:	e7aa      	b.n	800475e <_printf_i+0x14a>
 8004808:	4632      	mov	r2, r6
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	47d0      	blx	sl
 8004812:	3001      	adds	r0, #1
 8004814:	d0ad      	beq.n	8004772 <_printf_i+0x15e>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	079b      	lsls	r3, r3, #30
 800481a:	d413      	bmi.n	8004844 <_printf_i+0x230>
 800481c:	68e0      	ldr	r0, [r4, #12]
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	4298      	cmp	r0, r3
 8004822:	bfb8      	it	lt
 8004824:	4618      	movlt	r0, r3
 8004826:	e7a6      	b.n	8004776 <_printf_i+0x162>
 8004828:	2301      	movs	r3, #1
 800482a:	4632      	mov	r2, r6
 800482c:	4649      	mov	r1, r9
 800482e:	4640      	mov	r0, r8
 8004830:	47d0      	blx	sl
 8004832:	3001      	adds	r0, #1
 8004834:	d09d      	beq.n	8004772 <_printf_i+0x15e>
 8004836:	3501      	adds	r5, #1
 8004838:	68e3      	ldr	r3, [r4, #12]
 800483a:	9903      	ldr	r1, [sp, #12]
 800483c:	1a5b      	subs	r3, r3, r1
 800483e:	42ab      	cmp	r3, r5
 8004840:	dcf2      	bgt.n	8004828 <_printf_i+0x214>
 8004842:	e7eb      	b.n	800481c <_printf_i+0x208>
 8004844:	2500      	movs	r5, #0
 8004846:	f104 0619 	add.w	r6, r4, #25
 800484a:	e7f5      	b.n	8004838 <_printf_i+0x224>
 800484c:	08004a74 	.word	0x08004a74
 8004850:	08004a85 	.word	0x08004a85

08004854 <memmove>:
 8004854:	4288      	cmp	r0, r1
 8004856:	b510      	push	{r4, lr}
 8004858:	eb01 0402 	add.w	r4, r1, r2
 800485c:	d902      	bls.n	8004864 <memmove+0x10>
 800485e:	4284      	cmp	r4, r0
 8004860:	4623      	mov	r3, r4
 8004862:	d807      	bhi.n	8004874 <memmove+0x20>
 8004864:	1e43      	subs	r3, r0, #1
 8004866:	42a1      	cmp	r1, r4
 8004868:	d008      	beq.n	800487c <memmove+0x28>
 800486a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004872:	e7f8      	b.n	8004866 <memmove+0x12>
 8004874:	4601      	mov	r1, r0
 8004876:	4402      	add	r2, r0
 8004878:	428a      	cmp	r2, r1
 800487a:	d100      	bne.n	800487e <memmove+0x2a>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004886:	e7f7      	b.n	8004878 <memmove+0x24>

08004888 <memchr>:
 8004888:	4603      	mov	r3, r0
 800488a:	b510      	push	{r4, lr}
 800488c:	b2c9      	uxtb	r1, r1
 800488e:	4402      	add	r2, r0
 8004890:	4293      	cmp	r3, r2
 8004892:	4618      	mov	r0, r3
 8004894:	d101      	bne.n	800489a <memchr+0x12>
 8004896:	2000      	movs	r0, #0
 8004898:	e003      	b.n	80048a2 <memchr+0x1a>
 800489a:	7804      	ldrb	r4, [r0, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	428c      	cmp	r4, r1
 80048a0:	d1f6      	bne.n	8004890 <memchr+0x8>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <memcpy>:
 80048a4:	440a      	add	r2, r1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048ac:	d100      	bne.n	80048b0 <memcpy+0xc>
 80048ae:	4770      	bx	lr
 80048b0:	b510      	push	{r4, lr}
 80048b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b6:	4291      	cmp	r1, r2
 80048b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048bc:	d1f9      	bne.n	80048b2 <memcpy+0xe>
 80048be:	bd10      	pop	{r4, pc}

080048c0 <_realloc_r>:
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	4680      	mov	r8, r0
 80048c6:	4615      	mov	r5, r2
 80048c8:	460c      	mov	r4, r1
 80048ca:	b921      	cbnz	r1, 80048d6 <_realloc_r+0x16>
 80048cc:	4611      	mov	r1, r2
 80048ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	f7ff bb9d 	b.w	8004010 <_malloc_r>
 80048d6:	b92a      	cbnz	r2, 80048e4 <_realloc_r+0x24>
 80048d8:	f7ff fc8a 	bl	80041f0 <_free_r>
 80048dc:	2400      	movs	r4, #0
 80048de:	4620      	mov	r0, r4
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e4:	f000 f81a 	bl	800491c <_malloc_usable_size_r>
 80048e8:	4285      	cmp	r5, r0
 80048ea:	4606      	mov	r6, r0
 80048ec:	d802      	bhi.n	80048f4 <_realloc_r+0x34>
 80048ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048f2:	d8f4      	bhi.n	80048de <_realloc_r+0x1e>
 80048f4:	4629      	mov	r1, r5
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff fb8a 	bl	8004010 <_malloc_r>
 80048fc:	4607      	mov	r7, r0
 80048fe:	2800      	cmp	r0, #0
 8004900:	d0ec      	beq.n	80048dc <_realloc_r+0x1c>
 8004902:	42b5      	cmp	r5, r6
 8004904:	462a      	mov	r2, r5
 8004906:	4621      	mov	r1, r4
 8004908:	bf28      	it	cs
 800490a:	4632      	movcs	r2, r6
 800490c:	f7ff ffca 	bl	80048a4 <memcpy>
 8004910:	4621      	mov	r1, r4
 8004912:	4640      	mov	r0, r8
 8004914:	f7ff fc6c 	bl	80041f0 <_free_r>
 8004918:	463c      	mov	r4, r7
 800491a:	e7e0      	b.n	80048de <_realloc_r+0x1e>

0800491c <_malloc_usable_size_r>:
 800491c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004920:	1f18      	subs	r0, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	bfbc      	itt	lt
 8004926:	580b      	ldrlt	r3, [r1, r0]
 8004928:	18c0      	addlt	r0, r0, r3
 800492a:	4770      	bx	lr

0800492c <_init>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr

08004938 <_fini>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr
