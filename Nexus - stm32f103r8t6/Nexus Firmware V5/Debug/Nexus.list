
Nexus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08009c98  08009c98  0000ac98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a190  0800a190  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a190  0800a190  0000b190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a198  0800a198  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a198  0800a198  0000b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a19c  0800a19c  0000b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a1a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001ec  0800a38c  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800a38c  0000c534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ad5  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003024  00000000  00000000  0001dcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00020d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  00021d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7bd  00000000  00000000  00022a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001568d  00000000  00000000  0003d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e43b  00000000  00000000  00052899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0cd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  000e0d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e62a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c80 	.word	0x08009c80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009c80 	.word	0x08009c80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MPU_6050_init>:
#include <main.h>
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU_6050_init(){
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16

	//Inicializamos la configuracion del MPU6050
	 HAL_StatusTypeDef check_connection = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1) + 0 , 1, 100); //Status check from the MPU6050
 800102a:	2364      	movs	r3, #100	@ 0x64
 800102c:	2201      	movs	r2, #1
 800102e:	21d0      	movs	r1, #208	@ 0xd0
 8001030:	4846      	ldr	r0, [pc, #280]	@ (800114c <MPU_6050_init+0x128>)
 8001032:	f003 fb27 	bl	8004684 <HAL_I2C_IsDeviceReady>
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]

	if (check_connection == HAL_OK){
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d111      	bne.n	8001064 <MPU_6050_init+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001046:	4842      	ldr	r0, [pc, #264]	@ (8001150 <MPU_6050_init+0x12c>)
 8001048:	f002 fe44 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f001 fe19 	bl	8002c84 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001058:	483d      	ldr	r0, [pc, #244]	@ (8001150 <MPU_6050_init+0x12c>)
 800105a:	f002 fe3b 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	@ 0x64
 8001060:	f001 fe10 	bl	8002c84 <HAL_Delay>
	}
	uint8_t gyro_scale = FS_GYRO_500;
 8001064:	2308      	movs	r3, #8
 8001066:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef gyro_config = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &gyro_scale, 1, 100); //Gyroscope scale configuration (MAX)
 8001068:	2364      	movs	r3, #100	@ 0x64
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	1cfb      	adds	r3, r7, #3
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	221b      	movs	r2, #27
 8001078:	21d0      	movs	r1, #208	@ 0xd0
 800107a:	4834      	ldr	r0, [pc, #208]	@ (800114c <MPU_6050_init+0x128>)
 800107c:	f002 ffa0 	bl	8003fc0 <HAL_I2C_Mem_Write>
 8001080:	4603      	mov	r3, r0
 8001082:	71bb      	strb	r3, [r7, #6]

	if (gyro_config == HAL_OK){
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d111      	bne.n	80010ae <MPU_6050_init+0x8a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001090:	482f      	ldr	r0, [pc, #188]	@ (8001150 <MPU_6050_init+0x12c>)
 8001092:	f002 fe1f 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	@ 0x64
 8001098:	f001 fdf4 	bl	8002c84 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a2:	482b      	ldr	r0, [pc, #172]	@ (8001150 <MPU_6050_init+0x12c>)
 80010a4:	f002 fe16 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80010a8:	2064      	movs	r0, #100	@ 0x64
 80010aa:	f001 fdeb 	bl	8002c84 <HAL_Delay>
	}

	uint8_t acc_scale = FS_ACC_4G;
 80010ae:	2308      	movs	r3, #8
 80010b0:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef acc_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &acc_scale, 1, 100); //Accelerometer scale set up (+-4G)
 80010b2:	2364      	movs	r3, #100	@ 0x64
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2301      	movs	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	1cbb      	adds	r3, r7, #2
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	221c      	movs	r2, #28
 80010c2:	21d0      	movs	r1, #208	@ 0xd0
 80010c4:	4821      	ldr	r0, [pc, #132]	@ (800114c <MPU_6050_init+0x128>)
 80010c6:	f002 ff7b 	bl	8003fc0 <HAL_I2C_Mem_Write>
 80010ca:	4603      	mov	r3, r0
 80010cc:	717b      	strb	r3, [r7, #5]

	if (acc_config == HAL_OK){
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d111      	bne.n	80010f8 <MPU_6050_init+0xd4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <MPU_6050_init+0x12c>)
 80010dc:	f002 fdfa 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f001 fdcf 	bl	8002c84 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ec:	4818      	ldr	r0, [pc, #96]	@ (8001150 <MPU_6050_init+0x12c>)
 80010ee:	f002 fdf1 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f001 fdc6 	bl	8002c84 <HAL_Delay>
	}

	uint8_t temp_activation = FS_TEMP;
 80010f8:	2300      	movs	r3, #0
 80010fa:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef temp_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp_activation, 1, 100); //Disable "Sleep Mode" and enable the internal temperature sensor
 80010fc:	2364      	movs	r3, #100	@ 0x64
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	226b      	movs	r2, #107	@ 0x6b
 800110c:	21d0      	movs	r1, #208	@ 0xd0
 800110e:	480f      	ldr	r0, [pc, #60]	@ (800114c <MPU_6050_init+0x128>)
 8001110:	f002 ff56 	bl	8003fc0 <HAL_I2C_Mem_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	713b      	strb	r3, [r7, #4]

	if (temp_config == HAL_OK){
 8001118:	793b      	ldrb	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d111      	bne.n	8001142 <MPU_6050_init+0x11e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MPU_6050_init+0x12c>)
 8001126:	f002 fdd5 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f001 fdaa 	bl	8002c84 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <MPU_6050_init+0x12c>)
 8001138:	f002 fdcc 	bl	8003cd4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f001 fda1 	bl	8002c84 <HAL_Delay>
	}
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000238 	.word	0x20000238
 8001150:	40010800 	.word	0x40010800
 8001154:	00000000 	.word	0x00000000

08001158 <MPU_6050_Get_Temp>:
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Z, 1, raw_acc_z, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
	acc_z = (((int16_t) raw_acc_z[0] << 8) + raw_acc_z[1]);
	return acc_z;
}

float MPU_6050_Get_Temp(){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	81fb      	strh	r3, [r7, #14]
	float temp = 0;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_TEMP, 1, temp_data, 2, 100);
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2302      	movs	r3, #2
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2241      	movs	r2, #65	@ 0x41
 8001178:	21d1      	movs	r1, #209	@ 0xd1
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <MPU_6050_Get_Temp+0x80>)
 800117c:	f003 f81a 	bl	80041b4 <HAL_I2C_Mem_Read>
	raw_temp = (temp_data[0] << 8 | temp_data[1]);
 8001180:	793b      	ldrb	r3, [r7, #4]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	81fb      	strh	r3, [r7, #14]
	temp = (raw_temp/340.0) + 36.53;
 800118e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f936 	bl	8000404 <__aeabi_i2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MPU_6050_Get_Temp+0x84>)
 800119e:	f7ff fac5 	bl	800072c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	a309      	add	r3, pc, #36	@ (adr r3, 80011d0 <MPU_6050_Get_Temp+0x78>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7fe ffdc 	bl	800016c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]
	return temp;
 80011c4:	68bb      	ldr	r3, [r7, #8]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	0a3d70a4 	.word	0x0a3d70a4
 80011d4:	404243d7 	.word	0x404243d7
 80011d8:	20000238 	.word	0x20000238
 80011dc:	40754000 	.word	0x40754000

080011e0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <SELECT+0x18>)
 80011ea:	f002 fd73 	bl	8003cd4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f001 fd48 	bl	8002c84 <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010800 	.word	0x40010800

080011fc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	4803      	ldr	r0, [pc, #12]	@ (8001214 <DESELECT+0x18>)
 8001206:	f002 fd65 	bl	8003cd4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f001 fd3a 	bl	8002c84 <HAL_Delay>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010800 	.word	0x40010800

08001218 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001222:	bf00      	nop
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <SPI_TxByte+0x30>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d1f8      	bne.n	8001224 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001232:	1df9      	adds	r1, r7, #7
 8001234:	2364      	movs	r3, #100	@ 0x64
 8001236:	2201      	movs	r2, #1
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <SPI_TxByte+0x30>)
 800123a:	f005 f895 	bl	8006368 <HAL_SPI_Transmit>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002a0 	.word	0x200002a0

0800124c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001258:	bf00      	nop
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <SPI_TxBuffer+0x30>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b02      	cmp	r3, #2
 8001266:	d1f8      	bne.n	800125a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	2364      	movs	r3, #100	@ 0x64
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <SPI_TxBuffer+0x30>)
 8001270:	f005 f87a 	bl	8006368 <HAL_SPI_Transmit>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002a0 	.word	0x200002a0

08001280 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800128a:	bf00      	nop
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <SPI_RxByte+0x34>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b02      	cmp	r3, #2
 8001298:	d1f8      	bne.n	800128c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800129a:	1dba      	adds	r2, r7, #6
 800129c:	1df9      	adds	r1, r7, #7
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <SPI_RxByte+0x34>)
 80012a6:	f005 f9a2 	bl	80065ee <HAL_SPI_TransmitReceive>

	return data;
 80012aa:	79bb      	ldrb	r3, [r7, #6]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002a0 	.word	0x200002a0

080012b8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80012c0:	f7ff ffde 	bl	8001280 <SPI_RxByte>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	701a      	strb	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <SD_ReadyWait+0x30>)
 80012dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012e0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80012e2:	f7ff ffcd 	bl	8001280 <SPI_RxByte>
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2bff      	cmp	r3, #255	@ 0xff
 80012ee:	d003      	beq.n	80012f8 <SD_ReadyWait+0x24>
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SD_ReadyWait+0x30>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f4      	bne.n	80012e2 <SD_ReadyWait+0xe>

	return res;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000020a 	.word	0x2000020a

08001308 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800130e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001312:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001314:	f7ff ff72 	bl	80011fc <DESELECT>
	for(int i = 0; i < 10; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	e005      	b.n	800132a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800131e:	20ff      	movs	r0, #255	@ 0xff
 8001320:	f7ff ff7a 	bl	8001218 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3301      	adds	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b09      	cmp	r3, #9
 800132e:	ddf6      	ble.n	800131e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001330:	f7ff ff56 	bl	80011e0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001334:	2340      	movs	r3, #64	@ 0x40
 8001336:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001348:	2395      	movs	r3, #149	@ 0x95
 800134a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800134c:	463b      	mov	r3, r7
 800134e:	2106      	movs	r1, #6
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff7b 	bl	800124c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001356:	e002      	b.n	800135e <SD_PowerOn+0x56>
	{
		cnt--;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3b01      	subs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800135e:	f7ff ff8f 	bl	8001280 <SPI_RxByte>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <SD_PowerOn+0x66>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f4      	bne.n	8001358 <SD_PowerOn+0x50>
	}

	DESELECT();
 800136e:	f7ff ff45 	bl	80011fc <DESELECT>
	SPI_TxByte(0XFF);
 8001372:	20ff      	movs	r0, #255	@ 0xff
 8001374:	f7ff ff50 	bl	8001218 <SPI_TxByte>

	PowerFlag = 1;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <SD_PowerOn+0x80>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000020d 	.word	0x2000020d

0800138c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <SD_PowerOff+0x14>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000020d 	.word	0x2000020d

080013a4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80013a8:	4b02      	ldr	r3, [pc, #8]	@ (80013b4 <SD_CheckPower+0x10>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	2000020d 	.word	0x2000020d

080013b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013c4:	22c8      	movs	r2, #200	@ 0xc8
 80013c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80013c8:	f7ff ff5a 	bl	8001280 <SPI_RxByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d103      	bne.n	80013de <SD_RxDataBlock+0x26>
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <SD_RxDataBlock+0x58>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f4      	bne.n	80013c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80013e2:	d001      	beq.n	80013e8 <SD_RxDataBlock+0x30>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e00f      	b.n	8001408 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff62 	bl	80012b8 <SPI_RxBytePtr>
	} while(len--);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	1e5a      	subs	r2, r3, #1
 80013f8:	603a      	str	r2, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f4      	bne.n	80013e8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80013fe:	f7ff ff3f 	bl	8001280 <SPI_RxByte>
	SPI_RxByte();
 8001402:	f7ff ff3d 	bl	8001280 <SPI_RxByte>

	return TRUE;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000208 	.word	0x20000208

08001414 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001424:	f7ff ff56 	bl	80012d4 <SD_ReadyWait>
 8001428:	4603      	mov	r3, r0
 800142a:	2bff      	cmp	r3, #255	@ 0xff
 800142c:	d001      	beq.n	8001432 <SD_TxDataBlock+0x1e>
 800142e:	2300      	movs	r3, #0
 8001430:	e02f      	b.n	8001492 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff feef 	bl	8001218 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2bfd      	cmp	r3, #253	@ 0xfd
 800143e:	d020      	beq.n	8001482 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff01 	bl	800124c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800144a:	f7ff ff19 	bl	8001280 <SPI_RxByte>
		SPI_RxByte();
 800144e:	f7ff ff17 	bl	8001280 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001452:	e00b      	b.n	800146c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001454:	f7ff ff14 	bl	8001280 <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2b05      	cmp	r3, #5
 8001464:	d006      	beq.n	8001474 <SD_TxDataBlock+0x60>
			i++;
 8001466:	7bbb      	ldrb	r3, [r7, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	2b40      	cmp	r3, #64	@ 0x40
 8001470:	d9f0      	bls.n	8001454 <SD_TxDataBlock+0x40>
 8001472:	e000      	b.n	8001476 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001474:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001476:	bf00      	nop
 8001478:	f7ff ff02 	bl	8001280 <SPI_RxByte>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0fa      	beq.n	8001478 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2b05      	cmp	r3, #5
 800148a:	d101      	bne.n	8001490 <SD_TxDataBlock+0x7c>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014a6:	f7ff ff15 	bl	80012d4 <SD_ReadyWait>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2bff      	cmp	r3, #255	@ 0xff
 80014ae:	d001      	beq.n	80014b4 <SD_SendCmd+0x1a>
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	e042      	b.n	800153a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff feae 	bl	8001218 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	0e1b      	lsrs	r3, r3, #24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fea8 	bl	8001218 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fea2 	bl	8001218 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe9c 	bl	8001218 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe97 	bl	8001218 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d102      	bne.n	80014f6 <SD_SendCmd+0x5c>
 80014f0:	2395      	movs	r3, #149	@ 0x95
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e007      	b.n	8001506 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b48      	cmp	r3, #72	@ 0x48
 80014fa:	d102      	bne.n	8001502 <SD_SendCmd+0x68>
 80014fc:	2387      	movs	r3, #135	@ 0x87
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e001      	b.n	8001506 <SD_SendCmd+0x6c>
	else crc = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe85 	bl	8001218 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b4c      	cmp	r3, #76	@ 0x4c
 8001512:	d101      	bne.n	8001518 <SD_SendCmd+0x7e>
 8001514:	f7ff feb4 	bl	8001280 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001518:	230a      	movs	r3, #10
 800151a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800151c:	f7ff feb0 	bl	8001280 <SPI_RxByte>
 8001520:	4603      	mov	r3, r0
 8001522:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001524:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da05      	bge.n	8001538 <SD_SendCmd+0x9e>
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	3b01      	subs	r3, #1
 8001530:	73bb      	strb	r3, [r7, #14]
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f1      	bne.n	800151c <SD_SendCmd+0x82>

	return res;
 8001538:	7b7b      	ldrb	r3, [r7, #13]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_initialize+0x14>
 8001554:	2301      	movs	r3, #1
 8001556:	e0d1      	b.n	80016fc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <SD_disk_initialize+0x1c0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <SD_disk_initialize+0x2a>
 8001566:	4b67      	ldr	r3, [pc, #412]	@ (8001704 <SD_disk_initialize+0x1c0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	e0c6      	b.n	80016fc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800156e:	f7ff fecb 	bl	8001308 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001572:	f7ff fe35 	bl	80011e0 <SELECT>

	/* check disk type */
	type = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800157a:	2100      	movs	r1, #0
 800157c:	2040      	movs	r0, #64	@ 0x40
 800157e:	f7ff ff8c 	bl	800149a <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 80a1 	bne.w	80016cc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800158a:	4b5f      	ldr	r3, [pc, #380]	@ (8001708 <SD_disk_initialize+0x1c4>)
 800158c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001590:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001592:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001596:	2048      	movs	r0, #72	@ 0x48
 8001598:	f7ff ff7f 	bl	800149a <SD_SendCmd>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d155      	bne.n	800164e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e00c      	b.n	80015c2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80015a8:	7bfc      	ldrb	r4, [r7, #15]
 80015aa:	f7ff fe69 	bl	8001280 <SPI_RxByte>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	f104 0310 	add.w	r3, r4, #16
 80015b6:	443b      	add	r3, r7
 80015b8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d9ef      	bls.n	80015a8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d17e      	bne.n	80016cc <SD_disk_initialize+0x188>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2baa      	cmp	r3, #170	@ 0xaa
 80015d2:	d17b      	bne.n	80016cc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015d4:	2100      	movs	r1, #0
 80015d6:	2077      	movs	r0, #119	@ 0x77
 80015d8:	f7ff ff5f 	bl	800149a <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d807      	bhi.n	80015f2 <SD_disk_initialize+0xae>
 80015e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015e6:	2069      	movs	r0, #105	@ 0x69
 80015e8:	f7ff ff57 	bl	800149a <SD_SendCmd>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ec      	bne.n	80015d4 <SD_disk_initialize+0x90>
 80015fa:	e000      	b.n	80015fe <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015fc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <SD_disk_initialize+0x1c4>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d062      	beq.n	80016cc <SD_disk_initialize+0x188>
 8001606:	2100      	movs	r1, #0
 8001608:	207a      	movs	r0, #122	@ 0x7a
 800160a:	f7ff ff46 	bl	800149a <SD_SendCmd>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15b      	bne.n	80016cc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e00c      	b.n	8001634 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800161a:	7bfc      	ldrb	r4, [r7, #15]
 800161c:	f7ff fe30 	bl	8001280 <SPI_RxByte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	f104 0310 	add.w	r3, r4, #16
 8001628:	443b      	add	r3, r7
 800162a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d9ef      	bls.n	800161a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800163a:	7a3b      	ldrb	r3, [r7, #8]
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SD_disk_initialize+0x104>
 8001644:	230c      	movs	r3, #12
 8001646:	e000      	b.n	800164a <SD_disk_initialize+0x106>
 8001648:	2304      	movs	r3, #4
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e03e      	b.n	80016cc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800164e:	2100      	movs	r1, #0
 8001650:	2077      	movs	r0, #119	@ 0x77
 8001652:	f7ff ff22 	bl	800149a <SD_SendCmd>
 8001656:	4603      	mov	r3, r0
 8001658:	2b01      	cmp	r3, #1
 800165a:	d808      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800165c:	2100      	movs	r1, #0
 800165e:	2069      	movs	r0, #105	@ 0x69
 8001660:	f7ff ff1b 	bl	800149a <SD_SendCmd>
 8001664:	4603      	mov	r3, r0
 8001666:	2b01      	cmp	r3, #1
 8001668:	d801      	bhi.n	800166e <SD_disk_initialize+0x12a>
 800166a:	2302      	movs	r3, #2
 800166c:	e000      	b.n	8001670 <SD_disk_initialize+0x12c>
 800166e:	2301      	movs	r3, #1
 8001670:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d10e      	bne.n	8001696 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001678:	2100      	movs	r1, #0
 800167a:	2077      	movs	r0, #119	@ 0x77
 800167c:	f7ff ff0d 	bl	800149a <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d80e      	bhi.n	80016a4 <SD_disk_initialize+0x160>
 8001686:	2100      	movs	r1, #0
 8001688:	2069      	movs	r0, #105	@ 0x69
 800168a:	f7ff ff06 	bl	800149a <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <SD_disk_initialize+0x160>
 8001694:	e00c      	b.n	80016b0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001696:	2100      	movs	r1, #0
 8001698:	2041      	movs	r0, #65	@ 0x41
 800169a:	f7ff fefe 	bl	800149a <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e2      	bne.n	8001672 <SD_disk_initialize+0x12e>
 80016ac:	e000      	b.n	80016b0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ae:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <SD_disk_initialize+0x1c4>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <SD_disk_initialize+0x184>
 80016b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016bc:	2050      	movs	r0, #80	@ 0x50
 80016be:	f7ff feec 	bl	800149a <SD_SendCmd>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SD_disk_initialize+0x188>
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <SD_disk_initialize+0x1c8>)
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80016d2:	f7ff fd93 	bl	80011fc <DESELECT>
	SPI_RxByte();
 80016d6:	f7ff fdd3 	bl	8001280 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e001      	b.n	80016f6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80016f2:	f7ff fe4b 	bl	800138c <SD_PowerOff>
	}

	return Stat;
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <SD_disk_initialize+0x1c0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000208 	.word	0x20000208
 800170c:	2000020c 	.word	0x2000020c

08001710 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_status+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e002      	b.n	800172a <SD_disk_status+0x1a>
	return Stat;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <SD_disk_status+0x24>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000000 	.word	0x20000000

08001738 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <SD_disk_read+0x1c>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <SD_disk_read+0x20>
 8001754:	2304      	movs	r3, #4
 8001756:	e051      	b.n	80017fc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <SD_disk_read+0xcc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SD_disk_read+0x32>
 8001766:	2303      	movs	r3, #3
 8001768:	e048      	b.n	80017fc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <SD_disk_read+0xd0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <SD_disk_read+0x44>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	607b      	str	r3, [r7, #4]

	SELECT();
 800177c:	f7ff fd30 	bl	80011e0 <SELECT>

	if (count == 1)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d111      	bne.n	80017aa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	2051      	movs	r0, #81	@ 0x51
 800178a:	f7ff fe86 	bl	800149a <SD_SendCmd>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d129      	bne.n	80017e8 <SD_disk_read+0xb0>
 8001794:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001798:	68b8      	ldr	r0, [r7, #8]
 800179a:	f7ff fe0d 	bl	80013b8 <SD_RxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <SD_disk_read+0xb0>
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	e01e      	b.n	80017e8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2052      	movs	r0, #82	@ 0x52
 80017ae:	f7ff fe74 	bl	800149a <SD_SendCmd>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d117      	bne.n	80017e8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017bc:	68b8      	ldr	r0, [r7, #8]
 80017be:	f7ff fdfb 	bl	80013b8 <SD_RxDataBlock>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <SD_disk_read+0xa6>
				buff += 512;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ed      	bne.n	80017b8 <SD_disk_read+0x80>
 80017dc:	e000      	b.n	80017e0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80017de:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80017e0:	2100      	movs	r1, #0
 80017e2:	204c      	movs	r0, #76	@ 0x4c
 80017e4:	f7ff fe59 	bl	800149a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80017e8:	f7ff fd08 	bl	80011fc <DESELECT>
	SPI_RxByte();
 80017ec:	f7ff fd48 	bl	8001280 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000
 8001808:	2000020c 	.word	0x2000020c

0800180c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <SD_disk_write+0x1c>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <SD_disk_write+0x20>
 8001828:	2304      	movs	r3, #4
 800182a:	e06b      	b.n	8001904 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800182c:	4b37      	ldr	r3, [pc, #220]	@ (800190c <SD_disk_write+0x100>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SD_disk_write+0x32>
 800183a:	2303      	movs	r3, #3
 800183c:	e062      	b.n	8001904 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800183e:	4b33      	ldr	r3, [pc, #204]	@ (800190c <SD_disk_write+0x100>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SD_disk_write+0x44>
 800184c:	2302      	movs	r3, #2
 800184e:	e059      	b.n	8001904 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <SD_disk_write+0x104>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <SD_disk_write+0x56>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	607b      	str	r3, [r7, #4]

	SELECT();
 8001862:	f7ff fcbd 	bl	80011e0 <SELECT>

	if (count == 1)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d110      	bne.n	800188e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	2058      	movs	r0, #88	@ 0x58
 8001870:	f7ff fe13 	bl	800149a <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d13a      	bne.n	80018f0 <SD_disk_write+0xe4>
 800187a:	21fe      	movs	r1, #254	@ 0xfe
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7ff fdc9 	bl	8001414 <SD_TxDataBlock>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d033      	beq.n	80018f0 <SD_disk_write+0xe4>
			count = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e030      	b.n	80018f0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <SD_disk_write+0x104>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	2077      	movs	r0, #119	@ 0x77
 800189e:	f7ff fdfc 	bl	800149a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	2057      	movs	r0, #87	@ 0x57
 80018a6:	f7ff fdf8 	bl	800149a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	2059      	movs	r0, #89	@ 0x59
 80018ae:	f7ff fdf4 	bl	800149a <SD_SendCmd>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11b      	bne.n	80018f0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018b8:	21fc      	movs	r1, #252	@ 0xfc
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f7ff fdaa 	bl	8001414 <SD_TxDataBlock>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <SD_disk_write+0xd0>
				buff += 512;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018cc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ee      	bne.n	80018b8 <SD_disk_write+0xac>
 80018da:	e000      	b.n	80018de <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018dc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80018de:	21fd      	movs	r1, #253	@ 0xfd
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fd97 	bl	8001414 <SD_TxDataBlock>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <SD_disk_write+0xe4>
			{
				count = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80018f0:	f7ff fc84 	bl	80011fc <DESELECT>
	SPI_RxByte();
 80018f4:	f7ff fcc4 	bl	8001280 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	2000020c 	.word	0x2000020c

08001914 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b08b      	sub	sp, #44	@ 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	603a      	str	r2, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	460b      	mov	r3, r1
 8001922:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SD_disk_ioctl+0x1e>
 800192e:	2304      	movs	r3, #4
 8001930:	e113      	b.n	8001b5a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d124      	bne.n	8001988 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d012      	beq.n	800196c <SD_disk_ioctl+0x58>
 8001946:	2b02      	cmp	r3, #2
 8001948:	dc1a      	bgt.n	8001980 <SD_disk_ioctl+0x6c>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <SD_disk_ioctl+0x40>
 800194e:	2b01      	cmp	r3, #1
 8001950:	d006      	beq.n	8001960 <SD_disk_ioctl+0x4c>
 8001952:	e015      	b.n	8001980 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001954:	f7ff fd1a 	bl	800138c <SD_PowerOff>
			res = RES_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800195e:	e0fa      	b.n	8001b56 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001960:	f7ff fcd2 	bl	8001308 <SD_PowerOn>
			res = RES_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800196a:	e0f4      	b.n	8001b56 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	1c5c      	adds	r4, r3, #1
 8001970:	f7ff fd18 	bl	80013a4 <SD_CheckPower>
 8001974:	4603      	mov	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800197e:	e0ea      	b.n	8001b56 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001980:	2304      	movs	r3, #4
 8001982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001986:	e0e6      	b.n	8001b56 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001988:	4b76      	ldr	r3, [pc, #472]	@ (8001b64 <SD_disk_ioctl+0x250>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SD_disk_ioctl+0x86>
 8001996:	2303      	movs	r3, #3
 8001998:	e0df      	b.n	8001b5a <SD_disk_ioctl+0x246>

		SELECT();
 800199a:	f7ff fc21 	bl	80011e0 <SELECT>

		switch (ctrl)
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	2b0d      	cmp	r3, #13
 80019a2:	f200 80c9 	bhi.w	8001b38 <SD_disk_ioctl+0x224>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <SD_disk_ioctl+0x98>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001aa3 	.word	0x08001aa3
 80019b0:	080019e5 	.word	0x080019e5
 80019b4:	08001a93 	.word	0x08001a93
 80019b8:	08001b39 	.word	0x08001b39
 80019bc:	08001b39 	.word	0x08001b39
 80019c0:	08001b39 	.word	0x08001b39
 80019c4:	08001b39 	.word	0x08001b39
 80019c8:	08001b39 	.word	0x08001b39
 80019cc:	08001b39 	.word	0x08001b39
 80019d0:	08001b39 	.word	0x08001b39
 80019d4:	08001b39 	.word	0x08001b39
 80019d8:	08001ab5 	.word	0x08001ab5
 80019dc:	08001ad9 	.word	0x08001ad9
 80019e0:	08001afd 	.word	0x08001afd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019e4:	2100      	movs	r1, #0
 80019e6:	2049      	movs	r0, #73	@ 0x49
 80019e8:	f7ff fd57 	bl	800149a <SD_SendCmd>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80a6 	bne.w	8001b40 <SD_disk_ioctl+0x22c>
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2110      	movs	r1, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fcdc 	bl	80013b8 <SD_RxDataBlock>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 809c 	beq.w	8001b40 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10d      	bne.n	8001a2e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a12:	7d7b      	ldrb	r3, [r7, #21]
 8001a14:	461a      	mov	r2, r3
 8001a16:	7d3b      	ldrb	r3, [r7, #20]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a24:	8bfb      	ldrh	r3, [r7, #30]
 8001a26:	029a      	lsls	r2, r3, #10
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e02d      	b.n	8001a8a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a2e:	7c7b      	ldrb	r3, [r7, #17]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	7dbb      	ldrb	r3, [r7, #22]
 8001a38:	09db      	lsrs	r3, r3, #7
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	7d7b      	ldrb	r3, [r7, #21]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f003 0306 	and.w	r3, r3, #6
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3302      	adds	r3, #2
 8001a52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a56:	7d3b      	ldrb	r3, [r7, #20]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	7cfb      	ldrb	r3, [r7, #19]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	7cbb      	ldrb	r3, [r7, #18]
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a7c:	8bfa      	ldrh	r2, [r7, #30]
 8001a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a82:	3b09      	subs	r3, #9
 8001a84:	409a      	lsls	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001a90:	e056      	b.n	8001b40 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001aa0:	e055      	b.n	8001b4e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001aa2:	f7ff fc17 	bl	80012d4 <SD_ReadyWait>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2bff      	cmp	r3, #255	@ 0xff
 8001aaa:	d14b      	bne.n	8001b44 <SD_disk_ioctl+0x230>
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ab2:	e047      	b.n	8001b44 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2049      	movs	r0, #73	@ 0x49
 8001ab8:	f7ff fcef 	bl	800149a <SD_SendCmd>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d142      	bne.n	8001b48 <SD_disk_ioctl+0x234>
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	6a38      	ldr	r0, [r7, #32]
 8001ac6:	f7ff fc77 	bl	80013b8 <SD_RxDataBlock>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03b      	beq.n	8001b48 <SD_disk_ioctl+0x234>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ad6:	e037      	b.n	8001b48 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ad8:	2100      	movs	r1, #0
 8001ada:	204a      	movs	r0, #74	@ 0x4a
 8001adc:	f7ff fcdd 	bl	800149a <SD_SendCmd>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d132      	bne.n	8001b4c <SD_disk_ioctl+0x238>
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f7ff fc65 	bl	80013b8 <SD_RxDataBlock>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d02b      	beq.n	8001b4c <SD_disk_ioctl+0x238>
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001afa:	e027      	b.n	8001b4c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001afc:	2100      	movs	r1, #0
 8001afe:	207a      	movs	r0, #122	@ 0x7a
 8001b00:	f7ff fccb 	bl	800149a <SD_SendCmd>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b10:	e00b      	b.n	8001b2a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001b12:	6a3c      	ldr	r4, [r7, #32]
 8001b14:	1c63      	adds	r3, r4, #1
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	f7ff fbb2 	bl	8001280 <SPI_RxByte>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b24:	3301      	adds	r3, #1
 8001b26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d9ef      	bls.n	8001b12 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b3e:	e006      	b.n	8001b4e <SD_disk_ioctl+0x23a>
			break;
 8001b40:	bf00      	nop
 8001b42:	e004      	b.n	8001b4e <SD_disk_ioctl+0x23a>
			break;
 8001b44:	bf00      	nop
 8001b46:	e002      	b.n	8001b4e <SD_disk_ioctl+0x23a>
			break;
 8001b48:	bf00      	nop
 8001b4a:	e000      	b.n	8001b4e <SD_disk_ioctl+0x23a>
			break;
 8001b4c:	bf00      	nop
		}

		DESELECT();
 8001b4e:	f7ff fb55 	bl	80011fc <DESELECT>
		SPI_RxByte();
 8001b52:	f7ff fb95 	bl	8001280 <SPI_RxByte>
	}

	return res;
 8001b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	372c      	adds	r7, #44	@ 0x2c
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_CAN_RxFifo0MsgPendingCallback>:

const char *array_elementos[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b70:	4b9e      	ldr	r3, [pc, #632]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001b72:	4a9f      	ldr	r2, [pc, #636]	@ (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f001 fab0 	bl	80030dc <HAL_CAN_GetRxMessage>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b82:	489c      	ldr	r0, [pc, #624]	@ (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001b84:	f002 f8a6 	bl	8003cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001b88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8c:	4899      	ldr	r0, [pc, #612]	@ (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001b8e:	f002 f8b9 	bl	8003d04 <HAL_GPIO_TogglePin>
	switch (RxHeader.StdId){
 8001b92:	4b97      	ldr	r3, [pc, #604]	@ (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001b9a:	d005      	beq.n	8001ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001b9c:	f240 5221 	movw	r2, #1313	@ 0x521
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f000 80e2 	beq.w	8001d6a <HAL_CAN_RxFifo0MsgPendingCallback+0x202>
	}

//	if (RxHeader.StdId == 0x118){
//	Message_Ready118 = 1;
//	}
}
 8001ba6:	e196      	b.n	8001ed6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36e>
			CAN_Status = 1;
 8001ba8:	4b93      	ldr	r3, [pc, #588]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
			Engine_Speed = (uint8_t)RxData[0];
 8001bae:	4b8f      	ldr	r3, [pc, #572]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b91      	ldr	r3, [pc, #580]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001bb6:	601a      	str	r2, [r3, #0]
			Engine_Speed = (int)Engine_Speed *100;
 8001bb8:	4b90      	ldr	r3, [pc, #576]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2264      	movs	r2, #100	@ 0x64
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a8e      	ldr	r2, [pc, #568]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001bc4:	6013      	str	r3, [r2, #0]
			Throttle_Pos = (uint8_t)RxData[1];
 8001bc6:	4b89      	ldr	r3, [pc, #548]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001bc8:	785a      	ldrb	r2, [r3, #1]
 8001bca:	4b8d      	ldr	r3, [pc, #564]	@ (8001e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001bcc:	701a      	strb	r2, [r3, #0]
			Coolant_Temp = (uint8_t)RxData[2];
 8001bce:	4b87      	ldr	r3, [pc, #540]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001bd0:	789a      	ldrb	r2, [r3, #2]
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
			Battery_Voltage = (uint8_t)RxData[3];
 8001bd6:	4b85      	ldr	r3, [pc, #532]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001bd8:	78da      	ldrb	r2, [r3, #3]
 8001bda:	4b8b      	ldr	r3, [pc, #556]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001bdc:	701a      	strb	r2, [r3, #0]
			Battery_Voltage_Float = (float)Battery_Voltage/10;
 8001bde:	4b8a      	ldr	r3, [pc, #552]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f856 	bl	8000c94 <__aeabi_ui2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4988      	ldr	r1, [pc, #544]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f95d 	bl	8000eac <__aeabi_fdiv>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b86      	ldr	r3, [pc, #536]	@ (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001bf8:	601a      	str	r2, [r3, #0]
			Brake_Pressure = (int16_t)RxData[4]<<8 | RxData[5];
 8001bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001bfc:	791b      	ldrb	r3, [r3, #4]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001c04:	795b      	ldrb	r3, [r3, #5]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4b81      	ldr	r3, [pc, #516]	@ (8001e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001c0e:	801a      	strh	r2, [r3, #0]
			Gear = (uint8_t)RxData[6];
 8001c10:	4b76      	ldr	r3, [pc, #472]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001c12:	799a      	ldrb	r2, [r3, #6]
 8001c14:	4b80      	ldr	r3, [pc, #512]	@ (8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001c16:	701a      	strb	r2, [r3, #0]
			MPU_6050_Temp = MPU_6050_Get_Temp();
 8001c18:	f7ff fa9e 	bl	8001158 <MPU_6050_Get_Temp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f9e0 	bl	8000fe4 <__aeabi_f2uiz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b7c      	ldr	r3, [pc, #496]	@ (8001e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001c2a:	701a      	strb	r2, [r3, #0]
			sprintf(RPM_text, "%d", Engine_Speed);
 8001c2c:	4b73      	ldr	r3, [pc, #460]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	497b      	ldr	r1, [pc, #492]	@ (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001c34:	487b      	ldr	r0, [pc, #492]	@ (8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001c36:	f005 ffa3 	bl	8007b80 <siprintf>
			NEXTION_SendText(&huart1, "revValue", RPM_text, "RPM");
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001c3c:	4a79      	ldr	r2, [pc, #484]	@ (8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001c3e:	497b      	ldr	r1, [pc, #492]	@ (8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001c40:	487b      	ldr	r0, [pc, #492]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001c42:	f000 fb91 	bl	8002368 <NEXTION_SendText>
			NEXTION_Send_Revs(&huart1, Engine_Speed);
 8001c46:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4878      	ldr	r0, [pc, #480]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001c4e:	f000 fbf9 	bl	8002444 <NEXTION_Send_Revs>
			NEXTION_SendNumber(&huart1, "acePedal", Throttle_Pos);
 8001c52:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4976      	ldr	r1, [pc, #472]	@ (8001e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001c5a:	4875      	ldr	r0, [pc, #468]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001c5c:	f000 fbc6 	bl	80023ec <NEXTION_SendNumber>
			sprintf(Coolant_Text, "%d", Coolant_Temp);
 8001c60:	4b68      	ldr	r3, [pc, #416]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	496e      	ldr	r1, [pc, #440]	@ (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001c68:	4873      	ldr	r0, [pc, #460]	@ (8001e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001c6a:	f005 ff89 	bl	8007b80 <siprintf>
			NEXTION_SendText(&huart1,"engineTemp",Coolant_Text,"\xB0");
 8001c6e:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001c70:	4a71      	ldr	r2, [pc, #452]	@ (8001e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001c72:	4973      	ldr	r1, [pc, #460]	@ (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001c74:	486e      	ldr	r0, [pc, #440]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001c76:	f000 fb77 	bl	8002368 <NEXTION_SendText>
			sprintf(Ambient_Temperature_Text, "%d", MPU_6050_Temp);
 8001c7a:	4b68      	ldr	r3, [pc, #416]	@ (8001e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4967      	ldr	r1, [pc, #412]	@ (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001c82:	4870      	ldr	r0, [pc, #448]	@ (8001e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001c84:	f005 ff7c 	bl	8007b80 <siprintf>
			NEXTION_SendText(&huart1,"ambtemperature",Ambient_Temperature_Text,"\xB0");
 8001c88:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001c8c:	496e      	ldr	r1, [pc, #440]	@ (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 8001c8e:	4868      	ldr	r0, [pc, #416]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001c90:	f000 fb6a 	bl	8002368 <NEXTION_SendText>
			if (CAN_Status == 1){
 8001c94:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_CAN_RxFifo0MsgPendingCallback+0x142>
				NEXTION_estado_color(&huart1, "can", 1024);
 8001c9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca0:	496a      	ldr	r1, [pc, #424]	@ (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 8001ca2:	4863      	ldr	r0, [pc, #396]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001ca4:	f000 fc7e 	bl	80025a4 <NEXTION_estado_color>
 8001ca8:	e005      	b.n	8001cb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				NEXTION_estado_color(&huart1, "can", 63488);
 8001caa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cae:	4967      	ldr	r1, [pc, #412]	@ (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 8001cb0:	485f      	ldr	r0, [pc, #380]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001cb2:	f000 fc77 	bl	80025a4 <NEXTION_estado_color>
			if (Coolant_Temp<95){
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b5e      	cmp	r3, #94	@ 0x5e
 8001cbc:	d806      	bhi.n	8001ccc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				NEXTION_estado_color(&huart1, "engineTemp", 36609);
 8001cbe:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8001cc2:	495f      	ldr	r1, [pc, #380]	@ (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001cc4:	485a      	ldr	r0, [pc, #360]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001cc6:	f000 fc6d 	bl	80025a4 <NEXTION_estado_color>
 8001cca:	e014      	b.n	8001cf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
			else if((Coolant_Temp>=95)&&(Coolant_Temp<=99)){
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b5e      	cmp	r3, #94	@ 0x5e
 8001cd2:	d90a      	bls.n	8001cea <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b63      	cmp	r3, #99	@ 0x63
 8001cda:	d806      	bhi.n	8001cea <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
				NEXTION_estado_color(&huart1, "engineTemp", 64520);
 8001cdc:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 8001ce0:	4957      	ldr	r1, [pc, #348]	@ (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001ce2:	4853      	ldr	r0, [pc, #332]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001ce4:	f000 fc5e 	bl	80025a4 <NEXTION_estado_color>
 8001ce8:	e005      	b.n	8001cf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
				NEXTION_estado_color(&huart1, "engineTemp", 63488);
 8001cea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cee:	4954      	ldr	r1, [pc, #336]	@ (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001cf0:	484f      	ldr	r0, [pc, #316]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001cf2:	f000 fc57 	bl	80025a4 <NEXTION_estado_color>
			sprintf(Battery_Text, "%f",Battery_Voltage_Float);
 8001cf6:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb94 	bl	8000428 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4952      	ldr	r1, [pc, #328]	@ (8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 8001d06:	4853      	ldr	r0, [pc, #332]	@ (8001e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8001d08:	f005 ff3a 	bl	8007b80 <siprintf>
			NEXTION_SendText(&huart1,"voltage",Battery_Text,"V");
 8001d0c:	4b52      	ldr	r3, [pc, #328]	@ (8001e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8001d0e:	4a51      	ldr	r2, [pc, #324]	@ (8001e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8001d10:	4952      	ldr	r1, [pc, #328]	@ (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001d12:	4847      	ldr	r0, [pc, #284]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001d14:	f000 fb28 	bl	8002368 <NEXTION_SendText>
			if (Battery_Voltage>=12.5){
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d906      	bls.n	8001d2e <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>
				NEXTION_estado_color(&huart1, "voltage", 36609);
 8001d20:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8001d24:	494d      	ldr	r1, [pc, #308]	@ (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001d26:	4842      	ldr	r0, [pc, #264]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001d28:	f000 fc3c 	bl	80025a4 <NEXTION_estado_color>
 8001d2c:	e014      	b.n	8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
			else if((Battery_Voltage<12.5)&&(Battery_Voltage>=12)){
 8001d2e:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d80a      	bhi.n	8001d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
 8001d36:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b0b      	cmp	r3, #11
 8001d3c:	d906      	bls.n	8001d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>
				NEXTION_estado_color(&huart1, "voltage", 64520);
 8001d3e:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 8001d42:	4946      	ldr	r1, [pc, #280]	@ (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001d44:	483a      	ldr	r0, [pc, #232]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001d46:	f000 fc2d 	bl	80025a4 <NEXTION_estado_color>
 8001d4a:	e005      	b.n	8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
				NEXTION_estado_color(&huart1, "voltage", 63488);
 8001d4c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d50:	4942      	ldr	r1, [pc, #264]	@ (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001d52:	4837      	ldr	r0, [pc, #220]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001d54:	f000 fc26 	bl	80025a4 <NEXTION_estado_color>
			NEXTION_SendNumber(&huart1, "brakePedal", Brake_Pressure);
 8001d58:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	493f      	ldr	r1, [pc, #252]	@ (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8001d62:	4833      	ldr	r0, [pc, #204]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001d64:	f000 fb42 	bl	80023ec <NEXTION_SendNumber>
			break;
 8001d68:	e0b5      	b.n	8001ed6 <HAL_CAN_RxFifo0MsgPendingCallback+0x36e>
			Ignition = (uint8_t)RxData[0];
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8001d70:	701a      	strb	r2, [r3, #0]
			SDC = (uint8_t)RxData[1];
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001d74:	785a      	ldrb	r2, [r3, #1]
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8001d78:	701a      	strb	r2, [r3, #0]
			Sw_Starter = (uint8_t)RxData[2];
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001d7c:	789a      	ldrb	r2, [r3, #2]
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 8001d80:	701a      	strb	r2, [r3, #0]
			Left_Fan = (uint8_t)RxData[3];
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001d84:	78da      	ldrb	r2, [r3, #3]
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8001d88:	701a      	strb	r2, [r3, #0]
			Right_Fan = (uint8_t)RxData[4];
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001d8c:	791a      	ldrb	r2, [r3, #4]
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 8001d90:	701a      	strb	r2, [r3, #0]
						if (Ignition == 1){
 8001d92:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>
							NEXTION_estado_color(&huart1, "ignition", 1024);
 8001d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9e:	4936      	ldr	r1, [pc, #216]	@ (8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8001da0:	4823      	ldr	r0, [pc, #140]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001da2:	f000 fbff 	bl	80025a4 <NEXTION_estado_color>
 8001da6:	e005      	b.n	8001db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
							NEXTION_estado_color(&huart1, "ignition", 63488);
 8001da8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dac:	4932      	ldr	r1, [pc, #200]	@ (8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8001dae:	4820      	ldr	r0, [pc, #128]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001db0:	f000 fbf8 	bl	80025a4 <NEXTION_estado_color>
						if (SDC == 0){
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
							NEXTION_estado_color(&huart1, "sdc", 1024);
 8001dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc0:	492e      	ldr	r1, [pc, #184]	@ (8001e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 8001dc2:	481b      	ldr	r0, [pc, #108]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001dc4:	f000 fbee 	bl	80025a4 <NEXTION_estado_color>
 8001dc8:	e005      	b.n	8001dd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
							NEXTION_estado_color(&huart1, "sdc", 63488 );
 8001dca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dce:	492b      	ldr	r1, [pc, #172]	@ (8001e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 8001dd0:	4817      	ldr	r0, [pc, #92]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001dd2:	f000 fbe7 	bl	80025a4 <NEXTION_estado_color>
						if (Sw_Starter == 1){
 8001dd6:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d152      	bne.n	8001e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>
							NEXTION_estado_color(&huart1, "str", 1024);
 8001dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de2:	4927      	ldr	r1, [pc, #156]	@ (8001e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>)
 8001de4:	4812      	ldr	r0, [pc, #72]	@ (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001de6:	f000 fbdd 	bl	80025a4 <NEXTION_estado_color>
 8001dea:	e051      	b.n	8001e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>
 8001dec:	2000035c 	.word	0x2000035c
 8001df0:	20000340 	.word	0x20000340
 8001df4:	40011000 	.word	0x40011000
 8001df8:	20000378 	.word	0x20000378
 8001dfc:	20000364 	.word	0x20000364
 8001e00:	20000368 	.word	0x20000368
 8001e04:	20000369 	.word	0x20000369
 8001e08:	2000036a 	.word	0x2000036a
 8001e0c:	41200000 	.word	0x41200000
 8001e10:	2000036c 	.word	0x2000036c
 8001e14:	20000370 	.word	0x20000370
 8001e18:	20000372 	.word	0x20000372
 8001e1c:	20000379 	.word	0x20000379
 8001e20:	08009cd4 	.word	0x08009cd4
 8001e24:	2000037c 	.word	0x2000037c
 8001e28:	08009cd8 	.word	0x08009cd8
 8001e2c:	08009ca0 	.word	0x08009ca0
 8001e30:	200002f8 	.word	0x200002f8
 8001e34:	08009cdc 	.word	0x08009cdc
 8001e38:	20000390 	.word	0x20000390
 8001e3c:	08009ce8 	.word	0x08009ce8
 8001e40:	08009cec 	.word	0x08009cec
 8001e44:	200003b8 	.word	0x200003b8
 8001e48:	08009cf8 	.word	0x08009cf8
 8001e4c:	08009d08 	.word	0x08009d08
 8001e50:	08009d0c 	.word	0x08009d0c
 8001e54:	200003a4 	.word	0x200003a4
 8001e58:	08009d10 	.word	0x08009d10
 8001e5c:	08009d14 	.word	0x08009d14
 8001e60:	08009d1c 	.word	0x08009d1c
 8001e64:	20000373 	.word	0x20000373
 8001e68:	20000374 	.word	0x20000374
 8001e6c:	20000375 	.word	0x20000375
 8001e70:	20000376 	.word	0x20000376
 8001e74:	20000377 	.word	0x20000377
 8001e78:	08009d28 	.word	0x08009d28
 8001e7c:	08009d34 	.word	0x08009d34
 8001e80:	08009d38 	.word	0x08009d38
							NEXTION_estado_color(&huart1, "str", 63488);
 8001e84:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e88:	4915      	ldr	r1, [pc, #84]	@ (8001ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 8001e8a:	4816      	ldr	r0, [pc, #88]	@ (8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001e8c:	f000 fb8a 	bl	80025a4 <NEXTION_estado_color>
						if (Left_Fan == 1){
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0x33e>
							NEXTION_estado_color(&huart1, "fanLeft", 1024);
 8001e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e9c:	4913      	ldr	r1, [pc, #76]	@ (8001eec <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001ea0:	f000 fb80 	bl	80025a4 <NEXTION_estado_color>
 8001ea4:	e005      	b.n	8001eb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x34a>
							NEXTION_estado_color(&huart1, "fanLeft", 63488);
 8001ea6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001eaa:	4910      	ldr	r1, [pc, #64]	@ (8001eec <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 8001eac:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001eae:	f000 fb79 	bl	80025a4 <NEXTION_estado_color>
						if (Right_Fan == 1){
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>
							NEXTION_estado_color(&huart1, "fanRight", 1024);
 8001eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 8001ec0:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001ec2:	f000 fb6f 	bl	80025a4 <NEXTION_estado_color>
			break;
 8001ec6:	e005      	b.n	8001ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>
							NEXTION_estado_color(&huart1, "fanRight", 63488);
 8001ec8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ecc:	4909      	ldr	r1, [pc, #36]	@ (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 8001ed0:	f000 fb68 	bl	80025a4 <NEXTION_estado_color>
			break;
 8001ed4:	bf00      	nop
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08009d38 	.word	0x08009d38
 8001ee4:	200002f8 	.word	0x200002f8
 8001ee8:	20000376 	.word	0x20000376
 8001eec:	08009d3c 	.word	0x08009d3c
 8001ef0:	20000377 	.word	0x20000377
 8001ef4:	08009d44 	.word	0x08009d44

08001ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001efc:	f000 fe60 	bl	8002bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f00:	f000 f82e 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f04:	f000 f9b2 	bl	800226c <MX_GPIO_Init>
  MX_CAN_Init();
 8001f08:	f000 f884 	bl	8002014 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001f0c:	f000 f984 	bl	8002218 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001f10:	f000 f902 	bl	8002118 <MX_RTC_Init>
  MX_SPI2_Init();
 8001f14:	f000 f94a 	bl	80021ac <MX_SPI2_Init>
  MX_FATFS_Init();
 8001f18:	f004 ff90 	bl	8006e3c <MX_FATFS_Init>
  MX_I2C1_Init();
 8001f1c:	f000 f8ce 	bl	80020bc <MX_I2C1_Init>
 // NEXTION_SendPageChange(&huart1,"page1");

             //Inicializar interfaz a negro (por si se quedó la página con estilos a rojo por alguna alerta provocada por NEXTION_Alert())
  //NEXTION_Alert(&huart1, 0);

  HAL_CAN_Start(&hcan);
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <main+0x5c>)
 8001f22:	f001 f897 	bl	8003054 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f26:	2102      	movs	r1, #2
 8001f28:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <main+0x5c>)
 8001f2a:	f001 f9f8 	bl	800331e <HAL_CAN_ActivateNotification>

  MPU_6050_init();
 8001f2e:	f7ff f879 	bl	8001024 <MPU_6050_init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <main+0x60>)
 8001f3a:	f001 fecb 	bl	8003cd4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU_6050_Temp = MPU_6050_Get_Temp();
 8001f3e:	f7ff f90b 	bl	8001158 <MPU_6050_Get_Temp>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f84d 	bl	8000fe4 <__aeabi_f2uiz>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <main+0x64>)
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	e7f4      	b.n	8001f3e <main+0x46>
 8001f54:	20000210 	.word	0x20000210
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	20000379 	.word	0x20000379

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	@ 0x50
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6a:	2228      	movs	r2, #40	@ 0x28
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fe69 	bl	8007c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f90:	230a      	movs	r3, #10
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f94:	2301      	movs	r3, #1
 8001f96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f98:	2310      	movs	r3, #16
 8001f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001fa8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f854 	bl	8005060 <HAL_RCC_OscConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001fbe:	f000 f9cd 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fac0 	bl	8005564 <HAL_RCC_ClockConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001fea:	f000 f9b7 	bl	800235c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fc40 	bl	8005880 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002006:	f000 f9a9 	bl	800235c <Error_Handler>
  }
}
 800200a:	bf00      	nop
 800200c:	3750      	adds	r7, #80	@ 0x50
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <MX_CAN_Init+0xa0>)
 800201c:	4a26      	ldr	r2, [pc, #152]	@ (80020b8 <MX_CAN_Init+0xa4>)
 800201e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002022:	2204      	movs	r2, #4
 8002024:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <MX_CAN_Init+0xa0>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002034:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8002038:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <MX_CAN_Init+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002042:	2200      	movs	r2, #0
 8002044:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002048:	2200      	movs	r2, #0
 800204a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <MX_CAN_Init+0xa0>)
 800204e:	2200      	movs	r2, #0
 8002050:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002054:	2200      	movs	r2, #0
 8002056:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <MX_CAN_Init+0xa0>)
 800205a:	2200      	movs	r2, #0
 800205c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002060:	2200      	movs	r2, #0
 8002062:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002064:	4813      	ldr	r0, [pc, #76]	@ (80020b4 <MX_CAN_Init+0xa0>)
 8002066:	f000 fe31 	bl	8002ccc <HAL_CAN_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002070:	f000 f974 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE; //It is needed to enable the filters
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // A filter bank is a FILTER used to classify different messages.Select the filter bank we are going to use and we are going to configure.
 8002078:	230a      	movs	r3, #10
 800207a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Bank to recieve or send data(FIFO0 or FIFO1).We assing the CAN FIFO we are going to use to recieve the income data
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]

  canfilterconfig.FilterIdHigh = 0x200; //We select the MAXIMUM ID allowed to be recieved
 8002080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002084:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0; //We select the MINIMUM ID allowed to be recieved. In case it is under the range it will be restricted
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  										// In case we use STD ID we need to move 5 bits to the left staring from the lower value bits.
  canfilterconfig.FilterMaskIdHigh = 0x140 ; //Sirve para comparar con entre el ID de filtro par que despues sea comparado el ID con el mensaje de entrada. Si la mascara no compara en un bit se tomara como bueno.
 800208a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800208e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x100;
 8002090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002094:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK; // This is the type of ID Filter we want to use. You can look up the types by looking in it directory
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  													// It works identifying the ID to let it pass through the filter
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; //We choose the width of the Filter Register we are going to use.
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  //It choose a range of bank filters dedicated to the slave(If write 13 it will use 13 to 27 to the CAN_2)
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  											//if there is only one peripheral available (CAN1 or CAN2) It is unuseless
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80020a2:	463b      	mov	r3, r7
 80020a4:	4619      	mov	r1, r3
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <MX_CAN_Init+0xa0>)
 80020a8:	f000 ff0b 	bl	8002ec2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	@ 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000210 	.word	0x20000210
 80020b8:	40006400 	.word	0x40006400

080020bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <MX_I2C1_Init+0x50>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <MX_I2C1_Init+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_I2C1_Init+0x50>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_I2C1_Init+0x58>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_I2C1_Init+0x50>)
 80020da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e6:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <MX_I2C1_Init+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_I2C1_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_I2C1_Init+0x50>)
 80020fa:	f001 fe1d 	bl	8003d38 <HAL_I2C_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002104:	f000 f92a 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000238 	.word	0x20000238
 8002110:	40005400 	.word	0x40005400
 8002114:	000186a0 	.word	0x000186a0

08002118 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2100      	movs	r1, #0
 8002122:	460a      	mov	r2, r1
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	460a      	mov	r2, r1
 8002128:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800212e:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <MX_RTC_Init+0x8c>)
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <MX_RTC_Init+0x90>)
 8002132:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <MX_RTC_Init+0x8c>)
 8002136:	f04f 32ff 	mov.w	r2, #4294967295
 800213a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_RTC_Init+0x8c>)
 800213e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002142:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002144:	4817      	ldr	r0, [pc, #92]	@ (80021a4 <MX_RTC_Init+0x8c>)
 8002146:	f003 fd07 	bl	8005b58 <HAL_RTC_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002150:	f000 f904 	bl	800235c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002154:	2300      	movs	r3, #0
 8002156:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002158:	2300      	movs	r3, #0
 800215a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800215c:	2300      	movs	r3, #0
 800215e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2201      	movs	r2, #1
 8002164:	4619      	mov	r1, r3
 8002166:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <MX_RTC_Init+0x8c>)
 8002168:	f003 fd82 	bl	8005c70 <HAL_RTC_SetTime>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002172:	f000 f8f3 	bl	800235c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002176:	2302      	movs	r3, #2
 8002178:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 800217a:	2307      	movs	r3, #7
 800217c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x9;
 800217e:	2309      	movs	r3, #9
 8002180:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8002182:	2324      	movs	r3, #36	@ 0x24
 8002184:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002186:	463b      	mov	r3, r7
 8002188:	2201      	movs	r2, #1
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_RTC_Init+0x8c>)
 800218e:	f003 fe07 	bl	8005da0 <HAL_RTC_SetDate>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002198:	f000 f8e0 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000028c 	.word	0x2000028c
 80021a8:	40002800 	.word	0x40002800

080021ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021b2:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <MX_SPI2_Init+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021b6:	4b16      	ldr	r3, [pc, #88]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021be:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021de:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021f8:	220a      	movs	r2, #10
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <MX_SPI2_Init+0x64>)
 80021fe:	f004 f82f 	bl	8006260 <HAL_SPI_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002208:	f000 f8a8 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200002a0 	.word	0x200002a0
 8002214:	40003800 	.word	0x40003800

08002218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <MX_USART1_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <MX_USART1_UART_Init+0x4c>)
 8002250:	f004 fc24 	bl	8006a9c <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f000 f87f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200002f8 	.word	0x200002f8
 8002268:	40013800 	.word	0x40013800

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b32      	ldr	r3, [pc, #200]	@ (800234c <MX_GPIO_Init+0xe0>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a31      	ldr	r2, [pc, #196]	@ (800234c <MX_GPIO_Init+0xe0>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <MX_GPIO_Init+0xe0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	4b2c      	ldr	r3, [pc, #176]	@ (800234c <MX_GPIO_Init+0xe0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a2b      	ldr	r2, [pc, #172]	@ (800234c <MX_GPIO_Init+0xe0>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b29      	ldr	r3, [pc, #164]	@ (800234c <MX_GPIO_Init+0xe0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b26      	ldr	r3, [pc, #152]	@ (800234c <MX_GPIO_Init+0xe0>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a25      	ldr	r2, [pc, #148]	@ (800234c <MX_GPIO_Init+0xe0>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <MX_GPIO_Init+0xe0>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2104      	movs	r1, #4
 80022cc:	4820      	ldr	r0, [pc, #128]	@ (8002350 <MX_GPIO_Init+0xe4>)
 80022ce:	f001 fd01 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_8|LED_Amarillo_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80022d8:	481e      	ldr	r0, [pc, #120]	@ (8002354 <MX_GPIO_Init+0xe8>)
 80022da:	f001 fcfb 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e4:	481c      	ldr	r0, [pc, #112]	@ (8002358 <MX_GPIO_Init+0xec>)
 80022e6:	f001 fcf5 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ea:	2304      	movs	r3, #4
 80022ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4619      	mov	r1, r3
 8002300:	4813      	ldr	r0, [pc, #76]	@ (8002350 <MX_GPIO_Init+0xe4>)
 8002302:	f001 fb63 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PC8 LED_Amarillo_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_8|LED_Amarillo_Pin;
 8002306:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800230a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2302      	movs	r3, #2
 8002316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	480d      	ldr	r0, [pc, #52]	@ (8002354 <MX_GPIO_Init+0xe8>)
 8002320:	f001 fb54 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2302      	movs	r3, #2
 8002334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4619      	mov	r1, r3
 800233c:	4806      	ldr	r0, [pc, #24]	@ (8002358 <MX_GPIO_Init+0xec>)
 800233e:	f001 fb45 	bl	80039cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002342:	bf00      	nop
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40010800 	.word	0x40010800

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <Error_Handler+0x8>

08002368 <NEXTION_SendText>:
const char *array_elementos_a_poner_rojo_por_alerta[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};
const uint8_t Cmd_End[3] = {0xff, 0xff, 0xff};


// Función para actualizar objeto obj de la interfaz con un valor text
void NEXTION_SendText(UART_HandleTypeDef *huart, char *obj, char *text, char *units) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8002376:	2032      	movs	r0, #50	@ 0x32
 8002378:	f004 fe26 	bl	8006fc8 <malloc>
 800237c:	4603      	mov	r3, r0
 800237e:	613b      	str	r3, [r7, #16]
    int len = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

    if (units == NULL || units[0] == '\0') {
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <NEXTION_SendText+0x2a>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <NEXTION_SendText+0x3a>
        len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, text);  // Agregar el texto al objeto
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4912      	ldr	r1, [pc, #72]	@ (80023e0 <NEXTION_SendText+0x78>)
 8002398:	6938      	ldr	r0, [r7, #16]
 800239a:	f005 fbf1 	bl	8007b80 <siprintf>
 800239e:	6178      	str	r0, [r7, #20]
 80023a0:	e008      	b.n	80023b4 <NEXTION_SendText+0x4c>
    } else {
        len = sprintf((char *)buffer, "%s.txt=\"%s%s\"", obj, text, units); // Agrega las unidades al texto del objeto
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	490e      	ldr	r1, [pc, #56]	@ (80023e4 <NEXTION_SendText+0x7c>)
 80023ac:	6938      	ldr	r0, [r7, #16]
 80023ae:	f005 fbe7 	bl	8007b80 <siprintf>
 80023b2:	6178      	str	r0, [r7, #20]
    }

    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f004 fbbc 	bl	8006b3c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 80023c4:	2364      	movs	r3, #100	@ 0x64
 80023c6:	2203      	movs	r2, #3
 80023c8:	4907      	ldr	r1, [pc, #28]	@ (80023e8 <NEXTION_SendText+0x80>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f004 fbb6 	bl	8006b3c <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 80023d0:	6938      	ldr	r0, [r7, #16]
 80023d2:	f004 fe01 	bl	8006fd8 <free>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	08009d8c 	.word	0x08009d8c
 80023e4:	08009d98 	.word	0x08009d98
 80023e8:	08009de0 	.word	0x08009de0

080023ec <NEXTION_SendNumber>:

// Actualiza valores de las barras de frenado, aceleración y revoluciones
void NEXTION_SendNumber(UART_HandleTypeDef *huart, char *obj, int number) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 80023f8:	2032      	movs	r0, #50	@ 0x32
 80023fa:	f004 fde5 	bl	8006fc8 <malloc>
 80023fe:	4603      	mov	r3, r0
 8002400:	617b      	str	r3, [r7, #20]
    int len = sprintf((char *)buffer, "%s.val=%d", obj, number); // Inicializa el buffer con el objeto y el valor a inicializar
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	490d      	ldr	r1, [pc, #52]	@ (800243c <NEXTION_SendNumber+0x50>)
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f005 fbb9 	bl	8007b80 <siprintf>
 800240e:	6138      	str	r0, [r7, #16]
    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	b29a      	uxth	r2, r3
 8002414:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f004 fb8e 	bl	8006b3c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8002420:	2364      	movs	r3, #100	@ 0x64
 8002422:	2203      	movs	r2, #3
 8002424:	4906      	ldr	r1, [pc, #24]	@ (8002440 <NEXTION_SendNumber+0x54>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f004 fb88 	bl	8006b3c <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 800242c:	6978      	ldr	r0, [r7, #20]
 800242e:	f004 fdd3 	bl	8006fd8 <free>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08009da8 	.word	0x08009da8
 8002440:	08009de0 	.word	0x08009de0

08002444 <NEXTION_Send_Revs>:

// Función para actualizar los indicadores de revoluviones del dash
void NEXTION_Send_Revs(UART_HandleTypeDef *huart, int val) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
    int resultado1 = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
    int resultado2 = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
    int resultado3 = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]

    if (val >= 0 && val < 3000) {
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db26      	blt.n	80024ae <NEXTION_Send_Revs+0x6a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002466:	4293      	cmp	r3, r2
 8002468:	dc21      	bgt.n	80024ae <NEXTION_Send_Revs+0x6a>
        resultado1 = val / 30.0; // Rango 0-3000
 800246a:	6838      	ldr	r0, [r7, #0]
 800246c:	f7fd ffca 	bl	8000404 <__aeabi_i2d>
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b46      	ldr	r3, [pc, #280]	@ (8002590 <NEXTION_Send_Revs+0x14c>)
 8002476:	f7fe f959 	bl	800072c <__aeabi_ddiv>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fad9 	bl	8000a38 <__aeabi_d2iz>
 8002486:	4603      	mov	r3, r0
 8002488:	617b      	str	r3, [r7, #20]
        resultado1 = (resultado1 + 10) / 20 * 20;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	330a      	adds	r3, #10
 800248e:	4a41      	ldr	r2, [pc, #260]	@ (8002594 <NEXTION_Send_Revs+0x150>)
 8002490:	fb82 1203 	smull	r1, r2, r2, r3
 8002494:	10d2      	asrs	r2, r2, #3
 8002496:	17db      	asrs	r3, r3, #31
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	617b      	str	r3, [r7, #20]
        resultado2 = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e05d      	b.n	800256a <NEXTION_Send_Revs+0x126>
    } else if (val >= 3000 && val < 6000) {
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80024b4:	4293      	cmp	r3, r2
 80024b6:	dd29      	ble.n	800250c <NEXTION_Send_Revs+0xc8>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f241 726f 	movw	r2, #5999	@ 0x176f
 80024be:	4293      	cmp	r3, r2
 80024c0:	dc24      	bgt.n	800250c <NEXTION_Send_Revs+0xc8>
        resultado1 = 100;
 80024c2:	2364      	movs	r3, #100	@ 0x64
 80024c4:	617b      	str	r3, [r7, #20]
        resultado2 = (val - 3000) / 30.0; // Rango 3000-6000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd ff99 	bl	8000404 <__aeabi_i2d>
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002590 <NEXTION_Send_Revs+0x14c>)
 80024d8:	f7fe f928 	bl	800072c <__aeabi_ddiv>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe faa8 	bl	8000a38 <__aeabi_d2iz>
 80024e8:	4603      	mov	r3, r0
 80024ea:	613b      	str	r3, [r7, #16]
        resultado2 = (resultado2 + 10) / 20 * 20;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	330a      	adds	r3, #10
 80024f0:	4a28      	ldr	r2, [pc, #160]	@ (8002594 <NEXTION_Send_Revs+0x150>)
 80024f2:	fb82 1203 	smull	r1, r2, r2, r3
 80024f6:	10d2      	asrs	r2, r2, #3
 80024f8:	17db      	asrs	r3, r3, #31
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	613b      	str	r3, [r7, #16]

        resultado3 = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e02e      	b.n	800256a <NEXTION_Send_Revs+0x126>
    } else if (val >= 6000 && val <= 9000) {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002512:	4293      	cmp	r3, r2
 8002514:	dd29      	ble.n	800256a <NEXTION_Send_Revs+0x126>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f242 3228 	movw	r2, #9000	@ 0x2328
 800251c:	4293      	cmp	r3, r2
 800251e:	dc24      	bgt.n	800256a <NEXTION_Send_Revs+0x126>
        resultado1 = 100;
 8002520:	2364      	movs	r3, #100	@ 0x64
 8002522:	617b      	str	r3, [r7, #20]
        resultado2 = 100;
 8002524:	2364      	movs	r3, #100	@ 0x64
 8002526:	613b      	str	r3, [r7, #16]
        resultado3 = (val - 6000) / 30.0; // Rango 6000-9000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f5a3 53bb 	sub.w	r3, r3, #5984	@ 0x1760
 800252e:	3b10      	subs	r3, #16
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ff67 	bl	8000404 <__aeabi_i2d>
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <NEXTION_Send_Revs+0x14c>)
 800253c:	f7fe f8f6 	bl	800072c <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fa76 	bl	8000a38 <__aeabi_d2iz>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
        resultado3 = (resultado3 + 10) / 20 * 20;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	330a      	adds	r3, #10
 8002554:	4a0f      	ldr	r2, [pc, #60]	@ (8002594 <NEXTION_Send_Revs+0x150>)
 8002556:	fb82 1203 	smull	r1, r2, r2, r3
 800255a:	10d2      	asrs	r2, r2, #3
 800255c:	17db      	asrs	r3, r3, #31
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	60fb      	str	r3, [r7, #12]

    }

    // Envía los resultados a las barras correspondientes
    NEXTION_SendNumber(huart,"led1", resultado1);
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	490a      	ldr	r1, [pc, #40]	@ (8002598 <NEXTION_Send_Revs+0x154>)
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff3c 	bl	80023ec <NEXTION_SendNumber>
    NEXTION_SendNumber(huart,"led2", resultado2);
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4909      	ldr	r1, [pc, #36]	@ (800259c <NEXTION_Send_Revs+0x158>)
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff37 	bl	80023ec <NEXTION_SendNumber>
    NEXTION_SendNumber(huart,"led3", resultado3);
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4907      	ldr	r1, [pc, #28]	@ (80025a0 <NEXTION_Send_Revs+0x15c>)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff32 	bl	80023ec <NEXTION_SendNumber>
}
 8002588:	bf00      	nop
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	403e0000 	.word	0x403e0000
 8002594:	66666667 	.word	0x66666667
 8002598:	08009db4 	.word	0x08009db4
 800259c:	08009dbc 	.word	0x08009dbc
 80025a0:	08009dc4 	.word	0x08009dc4

080025a4 <NEXTION_estado_color>:
        free(buffer);
    }
}

//Función para actualizar color estado de voltaje bateria y temperatura del motor
void NEXTION_estado_color(UART_HandleTypeDef *huart, char *obj, int color) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]

	uint8_t *buffer = malloc(50 * sizeof(char));
 80025b0:	2032      	movs	r0, #50	@ 0x32
 80025b2:	f004 fd09 	bl	8006fc8 <malloc>
 80025b6:	4603      	mov	r3, r0
 80025b8:	617b      	str	r3, [r7, #20]

	// Formatea y transmite el mensaje para el elemento actual
	int len = sprintf((char *)buffer, "%s.bco=%d", obj, color);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	490d      	ldr	r1, [pc, #52]	@ (80025f4 <NEXTION_estado_color+0x50>)
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f005 fadd 	bl	8007b80 <siprintf>
 80025c6:	6138      	str	r0, [r7, #16]

    HAL_UART_Transmit(huart, buffer, len, 1000);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f004 fab2 	bl	8006b3c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 80025d8:	2364      	movs	r3, #100	@ 0x64
 80025da:	2203      	movs	r2, #3
 80025dc:	4906      	ldr	r1, [pc, #24]	@ (80025f8 <NEXTION_estado_color+0x54>)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f004 faac 	bl	8006b3c <HAL_UART_Transmit>

    // Libera el buffer
    free(buffer);
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f004 fcf7 	bl	8006fd8 <free>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	08009dd4 	.word	0x08009dd4
 80025f8:	08009de0 	.word	0x08009de0

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_MspInit+0x5c>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <HAL_MspInit+0x5c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6193      	str	r3, [r2, #24]
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_MspInit+0x5c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <HAL_MspInit+0x5c>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <HAL_MspInit+0x5c>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_MspInit+0x5c>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_MspInit+0x60>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4a04      	ldr	r2, [pc, #16]	@ (800265c <HAL_MspInit+0x60>)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000

08002660 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	@ 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2d      	ldr	r2, [pc, #180]	@ (8002730 <HAL_CAN_MspInit+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d153      	bne.n	8002728 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 8002686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800268a:	61d3      	str	r3, [r2, #28]
 800268c:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_CAN_MspInit+0xd4>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	481c      	ldr	r0, [pc, #112]	@ (8002738 <HAL_CAN_MspInit+0xd8>)
 80026c6:	f001 f981 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4816      	ldr	r0, [pc, #88]	@ (8002738 <HAL_CAN_MspInit+0xd8>)
 80026e0:	f001 f974 	bl	80039cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80026e4:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_CAN_MspInit+0xdc>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
 8002702:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <HAL_CAN_MspInit+0xdc>)
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2014      	movs	r0, #20
 800270e:	f001 f926 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002712:	2014      	movs	r0, #20
 8002714:	f001 f93f 	bl	8003996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	2100      	movs	r1, #0
 800271c:	2015      	movs	r0, #21
 800271e:	f001 f91e 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002722:	2015      	movs	r0, #21
 8002724:	f001 f937 	bl	8003996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40006400 	.word	0x40006400
 8002734:	40021000 	.word	0x40021000
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40010000 	.word	0x40010000

08002740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_I2C_MspInit+0x70>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d123      	bne.n	80027a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002778:	23c0      	movs	r3, #192	@ 0xc0
 800277a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277c:	2312      	movs	r3, #18
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4619      	mov	r1, r3
 800278a:	480b      	ldr	r0, [pc, #44]	@ (80027b8 <HAL_I2C_MspInit+0x78>)
 800278c:	f001 f91e 	bl	80039cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 8002796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800279a:	61d3      	str	r3, [r2, #28]
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_I2C_MspInit+0x74>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40005400 	.word	0x40005400
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010c00 	.word	0x40010c00

080027bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_RTC_MspInit+0x3c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d110      	bne.n	80027f0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80027ce:	f002 fc3b 	bl	8005048 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <HAL_RTC_MspInit+0x40>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RTC_MspInit+0x40>)
 80027d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <HAL_RTC_MspInit+0x40>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RTC_MspInit+0x44>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40002800 	.word	0x40002800
 80027fc:	40021000 	.word	0x40021000
 8002800:	4242043c 	.word	0x4242043c

08002804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	@ (8002890 <HAL_SPI_MspInit+0x8c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d131      	bne.n	8002888 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 800282a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282e:	61d3      	str	r3, [r2, #28]
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_SPI_MspInit+0x90>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002854:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	4619      	mov	r1, r3
 8002868:	480b      	ldr	r0, [pc, #44]	@ (8002898 <HAL_SPI_MspInit+0x94>)
 800286a:	f001 f8af 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800286e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4619      	mov	r1, r3
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <HAL_SPI_MspInit+0x94>)
 8002884:	f001 f8a2 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40003800 	.word	0x40003800
 8002894:	40021000 	.word	0x40021000
 8002898:	40010c00 	.word	0x40010c00

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <HAL_UART_MspInit+0x8c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d131      	bne.n	8002920 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a14      	ldr	r2, [pc, #80]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_UART_MspInit+0x90>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	4619      	mov	r1, r3
 8002900:	480b      	ldr	r0, [pc, #44]	@ (8002930 <HAL_UART_MspInit+0x94>)
 8002902:	f001 f863 	bl	80039cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800290a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4619      	mov	r1, r3
 800291a:	4805      	ldr	r0, [pc, #20]	@ (8002930 <HAL_UART_MspInit+0x94>)
 800291c:	f001 f856 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40013800 	.word	0x40013800
 800292c:	40021000 	.word	0x40021000
 8002930:	40010800 	.word	0x40010800

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <NMI_Handler+0x4>

0800293c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <MemManage_Handler+0x4>

0800294c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <UsageFault_Handler+0x4>

0800295c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
		if(Timer1 > 0)
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <SysTick_Handler+0x34>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <SysTick_Handler+0x18>
			Timer1--;
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <SysTick_Handler+0x34>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <SysTick_Handler+0x34>)
 8002996:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8002998:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <SysTick_Handler+0x38>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <SysTick_Handler+0x2c>
			Timer2--;
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <SysTick_Handler+0x38>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <SysTick_Handler+0x38>)
 80029aa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ac:	f000 f94e 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000208 	.word	0x20000208
 80029b8:	2000020a 	.word	0x2000020a

080029bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80029c0:	4802      	ldr	r0, [pc, #8]	@ (80029cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80029c2:	f000 fcd1 	bl	8003368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000210 	.word	0x20000210

080029d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <CAN1_RX1_IRQHandler+0x10>)
 80029d6:	f000 fcc7 	bl	8003368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000210 	.word	0x20000210

080029e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return 1;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <_kill>:

int _kill(int pid, int sig)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029fc:	f005 f986 	bl	8007d0c <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2216      	movs	r2, #22
 8002a04:	601a      	str	r2, [r3, #0]
  return -1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_exit>:

void _exit (int status)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffe7 	bl	80029f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <_exit+0x12>

08002a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e00a      	b.n	8002a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3a:	f3af 8000 	nop.w
 8002a3e:	4601      	mov	r1, r0
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	60ba      	str	r2, [r7, #8]
 8002a46:	b2ca      	uxtb	r2, r1
 8002a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dbf0      	blt.n	8002a3a <_read+0x12>
  }

  return len;
 8002a58:	687b      	ldr	r3, [r7, #4]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e009      	b.n	8002a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dbf1      	blt.n	8002a74 <_write+0x12>
  }
  return len;
 8002a90:	687b      	ldr	r3, [r7, #4]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_close>:

int _close(int file)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <_isatty>:

int _isatty(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <_sbrk+0x5c>)
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <_sbrk+0x60>)
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <_sbrk+0x64>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <_sbrk+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d207      	bcs.n	8002b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b2c:	f005 f8ee 	bl	8007d0c <__errno>
 8002b30:	4603      	mov	r3, r0
 8002b32:	220c      	movs	r2, #12
 8002b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e009      	b.n	8002b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <_sbrk+0x64>)
 8002b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20005000 	.word	0x20005000
 8002b5c:	00000400 	.word	0x00000400
 8002b60:	200003cc 	.word	0x200003cc
 8002b64:	20000538 	.word	0x20000538

08002b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b74:	f7ff fff8 	bl	8002b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b78:	480b      	ldr	r0, [pc, #44]	@ (8002ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b7a:	490c      	ldr	r1, [pc, #48]	@ (8002bac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b80:	e002      	b.n	8002b88 <LoopCopyDataInit>

08002b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b86:	3304      	adds	r3, #4

08002b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b8c:	d3f9      	bcc.n	8002b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8e:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b90:	4c09      	ldr	r4, [pc, #36]	@ (8002bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b94:	e001      	b.n	8002b9a <LoopFillZerobss>

08002b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b98:	3204      	adds	r2, #4

08002b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b9c:	d3fb      	bcc.n	8002b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b9e:	f005 f8bb 	bl	8007d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ba2:	f7ff f9a9 	bl	8001ef8 <main>
  bx lr
 8002ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bac:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002bb0:	0800a1a0 	.word	0x0800a1a0
  ldr r2, =_sbss
 8002bb4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002bb8:	20000534 	.word	0x20000534

08002bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC1_2_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <HAL_Init+0x28>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <HAL_Init+0x28>)
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 feb9 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f000 f808 	bl	8002bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff fd0e 	bl	80025fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40022000 	.word	0x40022000

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0x54>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_InitTick+0x58>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fed1 	bl	80039b2 <HAL_SYSTICK_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00e      	b.n	8002c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d80a      	bhi.n	8002c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f000 fe99 	bl	800395e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	@ (8002c48 <HAL_InitTick+0x5c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000004 	.word	0x20000004
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c50:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_IncTick+0x1c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_IncTick+0x20>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a03      	ldr	r2, [pc, #12]	@ (8002c6c <HAL_IncTick+0x20>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	200003d0 	.word	0x200003d0

08002c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return uwTick;
 8002c74:	4b02      	ldr	r3, [pc, #8]	@ (8002c80 <HAL_GetTick+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	200003d0 	.word	0x200003d0

08002c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff fff0 	bl	8002c70 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d005      	beq.n	8002caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <HAL_Delay+0x44>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002caa:	bf00      	nop
 8002cac:	f7ff ffe0 	bl	8002c70 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d8f7      	bhi.n	8002cac <HAL_Delay+0x28>
  {
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0ed      	b.n	8002eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fcb8 	bl	8002660 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d00:	f7ff ffb6 	bl	8002c70 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d06:	e012      	b.n	8002d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d08:	f7ff ffb2 	bl	8002c70 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	d90b      	bls.n	8002d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2205      	movs	r2, #5
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0c5      	b.n	8002eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0e5      	beq.n	8002d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0202 	bic.w	r2, r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d4c:	f7ff ff90 	bl	8002c70 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d52:	e012      	b.n	8002d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d54:	f7ff ff8c 	bl	8002c70 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d90b      	bls.n	8002d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e09f      	b.n	8002eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7e1b      	ldrb	r3, [r3, #24]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d108      	bne.n	8002da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e007      	b.n	8002db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7e5b      	ldrb	r3, [r3, #25]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e007      	b.n	8002ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e9b      	ldrb	r3, [r3, #26]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0220 	orr.w	r2, r2, #32
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e007      	b.n	8002e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0220 	bic.w	r2, r2, #32
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7edb      	ldrb	r3, [r3, #27]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d108      	bne.n	8002e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0210 	bic.w	r2, r2, #16
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e007      	b.n	8002e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0210 	orr.w	r2, r2, #16
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d108      	bne.n	8002e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e007      	b.n	8002e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7f5b      	ldrb	r3, [r3, #29]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d108      	bne.n	8002e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0204 	orr.w	r2, r2, #4
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e007      	b.n	8002e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	ea42 0103 	orr.w	r1, r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d003      	beq.n	8002ee8 <HAL_CAN_ConfigFilter+0x26>
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f040 80aa 	bne.w	800303c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2201      	movs	r2, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d123      	bne.n	8002f6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3248      	adds	r2, #72	@ 0x48
 8002f4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	3348      	adds	r3, #72	@ 0x48
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d122      	bne.n	8002fb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3248      	adds	r2, #72	@ 0x48
 8002f98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	3348      	adds	r3, #72	@ 0x48
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002fd2:	e007      	b.n	8002fe4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002ffe:	e007      	b.n	8003010 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	431a      	orrs	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	431a      	orrs	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e006      	b.n	800304a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d12e      	bne.n	80030c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003080:	f7ff fdf6 	bl	8002c70 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003086:	e012      	b.n	80030ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003088:	f7ff fdf2 	bl	8002c70 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b0a      	cmp	r3, #10
 8003094:	d90b      	bls.n	80030ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2205      	movs	r2, #5
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e012      	b.n	80030d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e006      	b.n	80030d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d003      	beq.n	8003100 <HAL_CAN_GetRxMessage+0x24>
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	f040 8103 	bne.w	8003306 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d116      	bne.n	8003142 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0f7      	b.n	8003314 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0e8      	b.n	8003314 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	331b      	adds	r3, #27
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	4413      	add	r3, r2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0204 	and.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	331b      	adds	r3, #27
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4413      	add	r3, r2
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0d5b      	lsrs	r3, r3, #21
 8003170:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e00b      	b.n	8003192 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	331b      	adds	r3, #27
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	4413      	add	r3, r2
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	331b      	adds	r3, #27
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	4413      	add	r3, r2
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0202 	and.w	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	331b      	adds	r3, #27
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2208      	movs	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e00b      	b.n	80031e0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	331b      	adds	r3, #27
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	331b      	adds	r3, #27
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	331b      	adds	r3, #27
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0a1a      	lsrs	r2, r3, #8
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	3301      	adds	r3, #1
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0c1a      	lsrs	r2, r3, #16
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3302      	adds	r3, #2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0e1a      	lsrs	r2, r3, #24
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	3303      	adds	r3, #3
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4413      	add	r3, r2
 800327e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3304      	adds	r3, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0a1a      	lsrs	r2, r3, #8
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	3305      	adds	r3, #5
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0c1a      	lsrs	r2, r3, #16
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	3306      	adds	r3, #6
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e1a      	lsrs	r2, r3, #24
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	3307      	adds	r3, #7
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d108      	bne.n	80032f2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	e007      	b.n	8003302 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e006      	b.n	8003314 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d002      	beq.n	800333c <HAL_CAN_ActivateNotification+0x1e>
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d109      	bne.n	8003350 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e006      	b.n	800335e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d07c      	beq.n	80034a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f983 	bl	80036d6 <HAL_CAN_TxMailbox0CompleteCallback>
 80033d0:	e016      	b.n	8003400 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e4:	e00c      	b.n	8003400 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f8:	e002      	b.n	8003400 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f986 	bl	800370c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f962 	bl	80036e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003424:	e016      	b.n	8003454 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
 8003438:	e00c      	b.n	8003454 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	e002      	b.n	8003454 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f965 	bl	800371e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d024      	beq.n	80034a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003466:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f941 	bl	80036fa <HAL_CAN_TxMailbox2CompleteCallback>
 8003478:	e016      	b.n	80034a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	e00c      	b.n	80034a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a0:	e002      	b.n	80034a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f944 	bl	8003730 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2208      	movs	r2, #8
 80034e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f92a 	bl	8003742 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe fb2e 	bl	8001b68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f90a 	bl	8003766 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8f2 	bl	8003754 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2210      	movs	r2, #16
 800358a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8f3 	bl	8003778 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2208      	movs	r2, #8
 80035ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8eb 	bl	800378a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d07b      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d072      	beq.n	80036ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003622:	2b00      	cmp	r3, #0
 8003624:	d043      	beq.n	80036ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03e      	beq.n	80036ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003636:	2b60      	cmp	r3, #96	@ 0x60
 8003638:	d02b      	beq.n	8003692 <HAL_CAN_IRQHandler+0x32a>
 800363a:	2b60      	cmp	r3, #96	@ 0x60
 800363c:	d82e      	bhi.n	800369c <HAL_CAN_IRQHandler+0x334>
 800363e:	2b50      	cmp	r3, #80	@ 0x50
 8003640:	d022      	beq.n	8003688 <HAL_CAN_IRQHandler+0x320>
 8003642:	2b50      	cmp	r3, #80	@ 0x50
 8003644:	d82a      	bhi.n	800369c <HAL_CAN_IRQHandler+0x334>
 8003646:	2b40      	cmp	r3, #64	@ 0x40
 8003648:	d019      	beq.n	800367e <HAL_CAN_IRQHandler+0x316>
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d826      	bhi.n	800369c <HAL_CAN_IRQHandler+0x334>
 800364e:	2b30      	cmp	r3, #48	@ 0x30
 8003650:	d010      	beq.n	8003674 <HAL_CAN_IRQHandler+0x30c>
 8003652:	2b30      	cmp	r3, #48	@ 0x30
 8003654:	d822      	bhi.n	800369c <HAL_CAN_IRQHandler+0x334>
 8003656:	2b10      	cmp	r3, #16
 8003658:	d002      	beq.n	8003660 <HAL_CAN_IRQHandler+0x2f8>
 800365a:	2b20      	cmp	r3, #32
 800365c:	d005      	beq.n	800366a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800365e:	e01d      	b.n	800369c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	f043 0308 	orr.w	r3, r3, #8
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003668:	e019      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	f043 0310 	orr.w	r3, r3, #16
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003672:	e014      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800367c:	e00f      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003686:	e00a      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003690:	e005      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800369a:	e000      	b.n	800369e <HAL_CAN_IRQHandler+0x336>
            break;
 800369c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80036ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2204      	movs	r2, #4
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f867 	bl	800379c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	@ 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
	...

080037b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c0:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037cc:	4013      	ands	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e2:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <__NVIC_SetPriorityGrouping+0x44>)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	60d3      	str	r3, [r2, #12]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__NVIC_GetPriorityGrouping+0x18>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	f003 0307 	and.w	r3, r3, #7
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	db0b      	blt.n	800383e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	4906      	ldr	r1, [pc, #24]	@ (8003848 <__NVIC_EnableIRQ+0x34>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	2001      	movs	r0, #1
 8003836:	fa00 f202 	lsl.w	r2, r0, r2
 800383a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	@ (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	@ (800389c <__NVIC_SetPriority+0x50>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff90 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff2d 	bl	80037b0 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff42 	bl	80037f8 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff35 	bl	8003814 <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa2 	bl	8003904 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b08b      	sub	sp, #44	@ 0x2c
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	e169      	b.n	8003cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039e0:	2201      	movs	r2, #1
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 8158 	bne.w	8003cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a9a      	ldr	r2, [pc, #616]	@ (8003c6c <HAL_GPIO_Init+0x2a0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d05e      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
 8003a08:	4a98      	ldr	r2, [pc, #608]	@ (8003c6c <HAL_GPIO_Init+0x2a0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d875      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a0e:	4a98      	ldr	r2, [pc, #608]	@ (8003c70 <HAL_GPIO_Init+0x2a4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d058      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
 8003a14:	4a96      	ldr	r2, [pc, #600]	@ (8003c70 <HAL_GPIO_Init+0x2a4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d86f      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a1a:	4a96      	ldr	r2, [pc, #600]	@ (8003c74 <HAL_GPIO_Init+0x2a8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d052      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
 8003a20:	4a94      	ldr	r2, [pc, #592]	@ (8003c74 <HAL_GPIO_Init+0x2a8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d869      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a26:	4a94      	ldr	r2, [pc, #592]	@ (8003c78 <HAL_GPIO_Init+0x2ac>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d04c      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
 8003a2c:	4a92      	ldr	r2, [pc, #584]	@ (8003c78 <HAL_GPIO_Init+0x2ac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d863      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a32:	4a92      	ldr	r2, [pc, #584]	@ (8003c7c <HAL_GPIO_Init+0x2b0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d046      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
 8003a38:	4a90      	ldr	r2, [pc, #576]	@ (8003c7c <HAL_GPIO_Init+0x2b0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d85d      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a3e:	2b12      	cmp	r3, #18
 8003a40:	d82a      	bhi.n	8003a98 <HAL_GPIO_Init+0xcc>
 8003a42:	2b12      	cmp	r3, #18
 8003a44:	d859      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_GPIO_Init+0x80>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003ac7 	.word	0x08003ac7
 8003a50:	08003aa1 	.word	0x08003aa1
 8003a54:	08003ab3 	.word	0x08003ab3
 8003a58:	08003af5 	.word	0x08003af5
 8003a5c:	08003afb 	.word	0x08003afb
 8003a60:	08003afb 	.word	0x08003afb
 8003a64:	08003afb 	.word	0x08003afb
 8003a68:	08003afb 	.word	0x08003afb
 8003a6c:	08003afb 	.word	0x08003afb
 8003a70:	08003afb 	.word	0x08003afb
 8003a74:	08003afb 	.word	0x08003afb
 8003a78:	08003afb 	.word	0x08003afb
 8003a7c:	08003afb 	.word	0x08003afb
 8003a80:	08003afb 	.word	0x08003afb
 8003a84:	08003afb 	.word	0x08003afb
 8003a88:	08003afb 	.word	0x08003afb
 8003a8c:	08003afb 	.word	0x08003afb
 8003a90:	08003aa9 	.word	0x08003aa9
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	4a79      	ldr	r2, [pc, #484]	@ (8003c80 <HAL_GPIO_Init+0x2b4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a9e:	e02c      	b.n	8003afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	623b      	str	r3, [r7, #32]
          break;
 8003aa6:	e029      	b.n	8003afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	3304      	adds	r3, #4
 8003aae:	623b      	str	r3, [r7, #32]
          break;
 8003ab0:	e024      	b.n	8003afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	623b      	str	r3, [r7, #32]
          break;
 8003aba:	e01f      	b.n	8003afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	623b      	str	r3, [r7, #32]
          break;
 8003ac4:	e01a      	b.n	8003afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ace:	2304      	movs	r3, #4
 8003ad0:	623b      	str	r3, [r7, #32]
          break;
 8003ad2:	e013      	b.n	8003afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003adc:	2308      	movs	r3, #8
 8003ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	611a      	str	r2, [r3, #16]
          break;
 8003ae6:	e009      	b.n	8003afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ae8:	2308      	movs	r3, #8
 8003aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	615a      	str	r2, [r3, #20]
          break;
 8003af2:	e003      	b.n	8003afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
          break;
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_Init+0x130>
          break;
 8003afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2bff      	cmp	r3, #255	@ 0xff
 8003b00:	d801      	bhi.n	8003b06 <HAL_GPIO_Init+0x13a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	e001      	b.n	8003b0a <HAL_GPIO_Init+0x13e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2bff      	cmp	r3, #255	@ 0xff
 8003b10:	d802      	bhi.n	8003b18 <HAL_GPIO_Init+0x14c>
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	e002      	b.n	8003b1e <HAL_GPIO_Init+0x152>
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	3b08      	subs	r3, #8
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	210f      	movs	r1, #15
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	401a      	ands	r2, r3
 8003b30:	6a39      	ldr	r1, [r7, #32]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80b1 	beq.w	8003cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c84 <HAL_GPIO_Init+0x2b8>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	4a4c      	ldr	r2, [pc, #304]	@ (8003c84 <HAL_GPIO_Init+0x2b8>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6193      	str	r3, [r2, #24]
 8003b58:	4b4a      	ldr	r3, [pc, #296]	@ (8003c84 <HAL_GPIO_Init+0x2b8>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b64:	4a48      	ldr	r2, [pc, #288]	@ (8003c88 <HAL_GPIO_Init+0x2bc>)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a40      	ldr	r2, [pc, #256]	@ (8003c8c <HAL_GPIO_Init+0x2c0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a3f      	ldr	r2, [pc, #252]	@ (8003c90 <HAL_GPIO_Init+0x2c4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00d      	beq.n	8003bb4 <HAL_GPIO_Init+0x1e8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c94 <HAL_GPIO_Init+0x2c8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <HAL_GPIO_Init+0x1e4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8003c98 <HAL_GPIO_Init+0x2cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_GPIO_Init+0x1e0>
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e004      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_GPIO_Init+0x1ee>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bca:	492f      	ldr	r1, [pc, #188]	@ (8003c88 <HAL_GPIO_Init+0x2bc>)
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	492c      	ldr	r1, [pc, #176]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4928      	ldr	r1, [pc, #160]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d006      	beq.n	8003c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c0c:	4b23      	ldr	r3, [pc, #140]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	4922      	ldr	r1, [pc, #136]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60cb      	str	r3, [r1, #12]
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c1a:	4b20      	ldr	r3, [pc, #128]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	491e      	ldr	r1, [pc, #120]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c34:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4918      	ldr	r1, [pc, #96]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	4914      	ldr	r1, [pc, #80]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d021      	beq.n	8003ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	490e      	ldr	r1, [pc, #56]	@ (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	e021      	b.n	8003cae <HAL_GPIO_Init+0x2e2>
 8003c6a:	bf00      	nop
 8003c6c:	10320000 	.word	0x10320000
 8003c70:	10310000 	.word	0x10310000
 8003c74:	10220000 	.word	0x10220000
 8003c78:	10210000 	.word	0x10210000
 8003c7c:	10120000 	.word	0x10120000
 8003c80:	10110000 	.word	0x10110000
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40010800 	.word	0x40010800
 8003c90:	40010c00 	.word	0x40010c00
 8003c94:	40011000 	.word	0x40011000
 8003c98:	40011400 	.word	0x40011400
 8003c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	4909      	ldr	r1, [pc, #36]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f47f ae8e 	bne.w	80039e0 <HAL_GPIO_Init+0x14>
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	372c      	adds	r7, #44	@ 0x2c
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ce4:	787b      	ldrb	r3, [r7, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cf0:	e003      	b.n	8003cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	041a      	lsls	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43d9      	mvns	r1, r3
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	400b      	ands	r3, r1
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	611a      	str	r2, [r3, #16]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e12b      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe fcee 	bl	8002740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	@ 0x24
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f001 fd2a 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8003da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4a81      	ldr	r2, [pc, #516]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d807      	bhi.n	8003dbc <HAL_I2C_Init+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a80      	ldr	r2, [pc, #512]	@ (8003fb0 <HAL_I2C_Init+0x278>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e006      	b.n	8003dca <HAL_I2C_Init+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb4 <HAL_I2C_Init+0x27c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0e7      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a78      	ldr	r2, [pc, #480]	@ (8003fb8 <HAL_I2C_Init+0x280>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9b      	lsrs	r3, r3, #18
 8003ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a6a      	ldr	r2, [pc, #424]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d802      	bhi.n	8003e0c <HAL_I2C_Init+0xd4>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	e009      	b.n	8003e20 <HAL_I2C_Init+0xe8>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_I2C_Init+0x284>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	3301      	adds	r3, #1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	495c      	ldr	r1, [pc, #368]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	d819      	bhi.n	8003e74 <HAL_I2C_Init+0x13c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1e59      	subs	r1, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e54:	400b      	ands	r3, r1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_I2C_Init+0x138>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e59      	subs	r1, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	e051      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e70:	2304      	movs	r3, #4
 8003e72:	e04f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <HAL_I2C_Init+0x168>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e012      	b.n	8003ec6 <HAL_I2C_Init+0x18e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e58      	subs	r0, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	0099      	lsls	r1, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x196>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_I2C_Init+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e58      	subs	r0, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	440b      	add	r3, r1
 8003ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef2:	e00f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e58      	subs	r0, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	0099      	lsls	r1, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6911      	ldr	r1, [r2, #16]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	000186a0 	.word	0x000186a0
 8003fb0:	001e847f 	.word	0x001e847f
 8003fb4:	003d08ff 	.word	0x003d08ff
 8003fb8:	431bde83 	.word	0x431bde83
 8003fbc:	10624dd3 	.word	0x10624dd3

08003fc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fda:	f7fe fe49 	bl	8002c70 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	f040 80d9 	bne.w	80041a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2319      	movs	r3, #25
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	496d      	ldr	r1, [pc, #436]	@ (80041ac <HAL_I2C_Mem_Write+0x1ec>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fdef 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
 8004006:	e0cc      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Mem_Write+0x56>
 8004012:	2302      	movs	r3, #2
 8004014:	e0c5      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d007      	beq.n	800403c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2221      	movs	r2, #33	@ 0x21
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a4d      	ldr	r2, [pc, #308]	@ (80041b0 <HAL_I2C_Mem_Write+0x1f0>)
 800407c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407e:	88f8      	ldrh	r0, [r7, #6]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4603      	mov	r3, r0
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fc26 	bl	80048e0 <I2C_RequestMemoryWrite>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d052      	beq.n	8004140 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e081      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 feb4 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d11b      	bne.n	8004140 <HAL_I2C_Mem_Write+0x180>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1aa      	bne.n	800409e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fea7 	bl	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e016      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00100002 	.word	0x00100002
 80041b0:	ffff0000 	.word	0xffff0000

080041b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	@ 0x30
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	817b      	strh	r3, [r7, #10]
 80041c6:	460b      	mov	r3, r1
 80041c8:	813b      	strh	r3, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d2:	f7fe fd4d 	bl	8002c70 <HAL_GetTick>
 80041d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	f040 8244 	bne.w	800466e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	2319      	movs	r3, #25
 80041ec:	2201      	movs	r2, #1
 80041ee:	4982      	ldr	r1, [pc, #520]	@ (80043f8 <HAL_I2C_Mem_Read+0x244>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fcf3 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	e237      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_I2C_Mem_Read+0x5a>
 800420a:	2302      	movs	r3, #2
 800420c:	e230      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d007      	beq.n	8004234 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004242:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2222      	movs	r2, #34	@ 0x22
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2240      	movs	r2, #64	@ 0x40
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a62      	ldr	r2, [pc, #392]	@ (80043fc <HAL_I2C_Mem_Read+0x248>)
 8004274:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004276:	88f8      	ldrh	r0, [r7, #6]
 8004278:	893a      	ldrh	r2, [r7, #8]
 800427a:	8979      	ldrh	r1, [r7, #10]
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4603      	mov	r3, r0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fbc0 	bl	8004a0c <I2C_RequestMemoryRead>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e1ec      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d113      	bne.n	80042c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e1c0      	b.n	8004648 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d11e      	bne.n	800430c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042de:	b672      	cpsid	i
}
 80042e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004308:	b662      	cpsie	i
}
 800430a:	e035      	b.n	8004378 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004310:	2b02      	cmp	r3, #2
 8004312:	d11e      	bne.n	8004352 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004324:	b672      	cpsid	i
}
 8004326:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800434e:	b662      	cpsie	i
}
 8004350:	e012      	b.n	8004378 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004360:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004378:	e166      	b.n	8004648 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	2b03      	cmp	r3, #3
 8004380:	f200 811f 	bhi.w	80045c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	2b01      	cmp	r3, #1
 800438a:	d123      	bne.n	80043d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fdcd 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e167      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043d2:	e139      	b.n	8004648 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d152      	bne.n	8004482 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	2200      	movs	r2, #0
 80043e4:	4906      	ldr	r1, [pc, #24]	@ (8004400 <HAL_I2C_Mem_Read+0x24c>)
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fbf8 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e13c      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
 80043f6:	bf00      	nop
 80043f8:	00100002 	.word	0x00100002
 80043fc:	ffff0000 	.word	0xffff0000
 8004400:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004404:	b672      	cpsid	i
}
 8004406:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800444a:	b662      	cpsie	i
}
 800444c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004480:	e0e2      	b.n	8004648 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	497b      	ldr	r1, [pc, #492]	@ (8004678 <HAL_I2C_Mem_Read+0x4c4>)
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fba5 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0e9      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ac:	b672      	cpsid	i
}
 80044ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044e2:	4b66      	ldr	r3, [pc, #408]	@ (800467c <HAL_I2C_Mem_Read+0x4c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	08db      	lsrs	r3, r3, #3
 80044e8:	4a65      	ldr	r2, [pc, #404]	@ (8004680 <HAL_I2C_Mem_Read+0x4cc>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0a1a      	lsrs	r2, r3, #8
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00da      	lsls	r2, r3, #3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	3b01      	subs	r3, #1
 8004500:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d118      	bne.n	800453a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800452a:	b662      	cpsie	i
}
 800452c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e09a      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d1d9      	bne.n	80044fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800458a:	b662      	cpsie	i
}
 800458c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c0:	e042      	b.n	8004648 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fcb2 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e04c      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b04      	cmp	r3, #4
 8004614:	d118      	bne.n	8004648 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	f47f ae94 	bne.w	800437a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3728      	adds	r7, #40	@ 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00010004 	.word	0x00010004
 800467c:	20000004 	.word	0x20000004
 8004680:	14f8b589 	.word	0x14f8b589

08004684 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	460b      	mov	r3, r1
 8004692:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7fe faec 	bl	8002c70 <HAL_GetTick>
 8004698:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 8111 	bne.w	80048ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2319      	movs	r3, #25
 80046b2:	2201      	movs	r2, #1
 80046b4:	4988      	ldr	r1, [pc, #544]	@ (80048d8 <HAL_I2C_IsDeviceReady+0x254>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa90 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e104      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_I2C_IsDeviceReady+0x50>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0fd      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d007      	beq.n	80046fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004708:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2224      	movs	r2, #36	@ 0x24
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a70      	ldr	r2, [pc, #448]	@ (80048dc <HAL_I2C_IsDeviceReady+0x258>)
 800471c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800472c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fa4e 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004754:	d103      	bne.n	800475e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0b6      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004770:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004772:	f7fe fa7d 	bl	8002c70 <HAL_GetTick>
 8004776:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047a6:	e025      	b.n	80047f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fe fa62 	bl	8002c70 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <HAL_I2C_IsDeviceReady+0x13a>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	22a0      	movs	r2, #160	@ 0xa0
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80047fe:	d005      	beq.n	800480c <HAL_I2C_IsDeviceReady+0x188>
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_I2C_IsDeviceReady+0x188>
 8004806:	7dbb      	ldrb	r3, [r7, #22]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0cd      	beq.n	80047a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d129      	bne.n	8004876 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004830:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2319      	movs	r3, #25
 800484e:	2201      	movs	r2, #1
 8004850:	4921      	ldr	r1, [pc, #132]	@ (80048d8 <HAL_I2C_IsDeviceReady+0x254>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f9c2 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e036      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e02c      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004884:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800488e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2319      	movs	r3, #25
 8004896:	2201      	movs	r2, #1
 8004898:	490f      	ldr	r1, [pc, #60]	@ (80048d8 <HAL_I2C_IsDeviceReady+0x254>)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f99e 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e012      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f4ff af32 	bcc.w	800471e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	00100002 	.word	0x00100002
 80048dc:	ffff0000 	.word	0xffff0000

080048e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2200      	movs	r2, #0
 8004912:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f960 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004930:	d103      	bne.n	800493a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e05f      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800494c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	492d      	ldr	r1, [pc, #180]	@ (8004a08 <I2C_RequestMemoryWrite+0x128>)
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f9bb 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e04c      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497c:	6a39      	ldr	r1, [r7, #32]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fa46 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	2b04      	cmp	r3, #4
 8004990:	d107      	bne.n	80049a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02b      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ac:	893b      	ldrh	r3, [r7, #8]
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]
 80049b6:	e021      	b.n	80049fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c8:	6a39      	ldr	r1, [r7, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa20 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00d      	beq.n	80049f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d107      	bne.n	80049ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e005      	b.n	80049fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049f2:	893b      	ldrh	r3, [r7, #8]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	00010002 	.word	0x00010002

08004a0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f8c2 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a6c:	d103      	bne.n	8004a76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0aa      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	4952      	ldr	r1, [pc, #328]	@ (8004bd8 <I2C_RequestMemoryRead+0x1cc>)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f91d 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e097      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f9a8 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d107      	bne.n	8004ade <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e076      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]
 8004af2:	e021      	b.n	8004b38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	6a39      	ldr	r1, [r7, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f982 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d107      	bne.n	8004b2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e050      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2e:	893b      	ldrh	r3, [r7, #8]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b3a:	6a39      	ldr	r1, [r7, #32]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f967 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d107      	bne.n	8004b60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e035      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f82b 	bl	8004bdc <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9a:	d103      	bne.n	8004ba4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e013      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba8:	897b      	ldrh	r3, [r7, #10]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	4906      	ldr	r1, [pc, #24]	@ (8004bd8 <I2C_RequestMemoryRead+0x1cc>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f886 	bl	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	00010002 	.word	0x00010002

08004bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bec:	e048      	b.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d044      	beq.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fe f83b 	bl	8002c70 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d139      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10d      	bne.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	e00c      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d116      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e023      	b.n	8004cc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10d      	bne.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	e00c      	b.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d093      	beq.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cde:	e071      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cee:	d123      	bne.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e067      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d041      	beq.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fd ff96 	bl	8002c70 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d136      	bne.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10c      	bne.n	8004d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	43da      	mvns	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e00b      	b.n	8004d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	43da      	mvns	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4013      	ands	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e021      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10c      	bne.n	8004de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e00b      	b.n	8004e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	43da      	mvns	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f af6d 	bne.w	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8e3 	bl	8004fea <I2C_IsAcknowledgeFailed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e034      	b.n	8004e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d028      	beq.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fd ff1b 	bl	8002c70 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d11d      	bne.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d016      	beq.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e007      	b.n	8004e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d1c3      	bne.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eac:	e034      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f89b 	bl	8004fea <I2C_IsAcknowledgeFailed>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e034      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d028      	beq.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fd fed3 	bl	8002c70 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11d      	bne.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d016      	beq.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e007      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d1c3      	bne.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3c:	e049      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d119      	bne.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e030      	b.n	8004fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fd fe76 	bl	8002c70 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11d      	bne.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d016      	beq.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e007      	b.n	8004fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b40      	cmp	r3, #64	@ 0x40
 8004fde:	d1ae      	bne.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005000:	d11b      	bne.n	800503a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800500a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
	...

08005048 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800504c:	4b03      	ldr	r3, [pc, #12]	@ (800505c <HAL_PWR_EnableBkUpAccess+0x14>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	420e0020 	.word	0x420e0020

08005060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e272      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8087 	beq.w	800518e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005080:	4b92      	ldr	r3, [pc, #584]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b04      	cmp	r3, #4
 800508a:	d00c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800508c:	4b8f      	ldr	r3, [pc, #572]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d112      	bne.n	80050be <HAL_RCC_OscConfig+0x5e>
 8005098:	4b8c      	ldr	r3, [pc, #560]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a4:	d10b      	bne.n	80050be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a6:	4b89      	ldr	r3, [pc, #548]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d06c      	beq.n	800518c <HAL_RCC_OscConfig+0x12c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d168      	bne.n	800518c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e24c      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x76>
 80050c8:	4b80      	ldr	r3, [pc, #512]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7f      	ldr	r2, [pc, #508]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e02e      	b.n	8005134 <HAL_RCC_OscConfig+0xd4>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x98>
 80050de:	4b7b      	ldr	r3, [pc, #492]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7a      	ldr	r2, [pc, #488]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	4b78      	ldr	r3, [pc, #480]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a77      	ldr	r2, [pc, #476]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80050f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e01d      	b.n	8005134 <HAL_RCC_OscConfig+0xd4>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0xbc>
 8005102:	4b72      	ldr	r3, [pc, #456]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a71      	ldr	r2, [pc, #452]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b6f      	ldr	r3, [pc, #444]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a6e      	ldr	r2, [pc, #440]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0xd4>
 800511c:	4b6b      	ldr	r3, [pc, #428]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a6a      	ldr	r2, [pc, #424]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b68      	ldr	r3, [pc, #416]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a67      	ldr	r2, [pc, #412]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd fd98 	bl	8002c70 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fd94 	bl	8002c70 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e200      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b5d      	ldr	r3, [pc, #372]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0xe4>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fd fd84 	bl	8002c70 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fd fd80 	bl	8002c70 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1ec      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517e:	4b53      	ldr	r3, [pc, #332]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x10c>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d063      	beq.n	8005262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519a:	4b4c      	ldr	r3, [pc, #304]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051a6:	4b49      	ldr	r3, [pc, #292]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d11c      	bne.n	80051ec <HAL_RCC_OscConfig+0x18c>
 80051b2:	4b46      	ldr	r3, [pc, #280]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	4b43      	ldr	r3, [pc, #268]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x176>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1c0      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d6:	4b3d      	ldr	r3, [pc, #244]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4939      	ldr	r1, [pc, #228]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	e03a      	b.n	8005262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d020      	beq.n	8005236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f4:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <HAL_RCC_OscConfig+0x270>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fd fd39 	bl	8002c70 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005202:	f7fd fd35 	bl	8002c70 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e1a1      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005214:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4927      	ldr	r1, [pc, #156]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
 8005234:	e015      	b.n	8005262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005236:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <HAL_RCC_OscConfig+0x270>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fd fd18 	bl	8002c70 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005244:	f7fd fd14 	bl	8002c70 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e180      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005256:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d03a      	beq.n	80052e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d019      	beq.n	80052aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005276:	4b17      	ldr	r3, [pc, #92]	@ (80052d4 <HAL_RCC_OscConfig+0x274>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527c:	f7fd fcf8 	bl	8002c70 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005284:	f7fd fcf4 	bl	8002c70 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e160      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <HAL_RCC_OscConfig+0x26c>)
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f000 face 	bl	8005844 <RCC_Delay>
 80052a8:	e01c      	b.n	80052e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052aa:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <HAL_RCC_OscConfig+0x274>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b0:	f7fd fcde 	bl	8002c70 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b6:	e00f      	b.n	80052d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fd fcda 	bl	8002c70 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d908      	bls.n	80052d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e146      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	42420000 	.word	0x42420000
 80052d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	4b92      	ldr	r3, [pc, #584]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e9      	bne.n	80052b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80a6 	beq.w	800543e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b8b      	ldr	r3, [pc, #556]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10d      	bne.n	800531e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	4b88      	ldr	r3, [pc, #544]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	4a87      	ldr	r2, [pc, #540]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530c:	61d3      	str	r3, [r2, #28]
 800530e:	4b85      	ldr	r3, [pc, #532]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531e:	4b82      	ldr	r3, [pc, #520]	@ (8005528 <HAL_RCC_OscConfig+0x4c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d118      	bne.n	800535c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532a:	4b7f      	ldr	r3, [pc, #508]	@ (8005528 <HAL_RCC_OscConfig+0x4c8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a7e      	ldr	r2, [pc, #504]	@ (8005528 <HAL_RCC_OscConfig+0x4c8>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005336:	f7fd fc9b 	bl	8002c70 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533e:	f7fd fc97 	bl	8002c70 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b64      	cmp	r3, #100	@ 0x64
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e103      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	4b75      	ldr	r3, [pc, #468]	@ (8005528 <HAL_RCC_OscConfig+0x4c8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <HAL_RCC_OscConfig+0x312>
 8005364:	4b6f      	ldr	r3, [pc, #444]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	4a6e      	ldr	r2, [pc, #440]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6213      	str	r3, [r2, #32]
 8005370:	e02d      	b.n	80053ce <HAL_RCC_OscConfig+0x36e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10c      	bne.n	8005394 <HAL_RCC_OscConfig+0x334>
 800537a:	4b6a      	ldr	r3, [pc, #424]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4a69      	ldr	r2, [pc, #420]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	6213      	str	r3, [r2, #32]
 8005386:	4b67      	ldr	r3, [pc, #412]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4a66      	ldr	r2, [pc, #408]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	6213      	str	r3, [r2, #32]
 8005392:	e01c      	b.n	80053ce <HAL_RCC_OscConfig+0x36e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b05      	cmp	r3, #5
 800539a:	d10c      	bne.n	80053b6 <HAL_RCC_OscConfig+0x356>
 800539c:	4b61      	ldr	r3, [pc, #388]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a60      	ldr	r2, [pc, #384]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6213      	str	r3, [r2, #32]
 80053b4:	e00b      	b.n	80053ce <HAL_RCC_OscConfig+0x36e>
 80053b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	6213      	str	r3, [r2, #32]
 80053c2:	4b58      	ldr	r3, [pc, #352]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	4a57      	ldr	r2, [pc, #348]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	f023 0304 	bic.w	r3, r3, #4
 80053cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d015      	beq.n	8005402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fd fc4b 	bl	8002c70 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fd fc47 	bl	8002c70 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0b1      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ee      	beq.n	80053de <HAL_RCC_OscConfig+0x37e>
 8005400:	e014      	b.n	800542c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7fd fc35 	bl	8002c70 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fc31 	bl	8002c70 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e09b      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	4b40      	ldr	r3, [pc, #256]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1ee      	bne.n	800540a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005432:	4b3c      	ldr	r3, [pc, #240]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4a3b      	ldr	r2, [pc, #236]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005438:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800543c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8087 	beq.w	8005556 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005448:	4b36      	ldr	r3, [pc, #216]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d061      	beq.n	8005518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d146      	bne.n	80054ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545c:	4b33      	ldr	r3, [pc, #204]	@ (800552c <HAL_RCC_OscConfig+0x4cc>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005462:	f7fd fc05 	bl	8002c70 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546a:	f7fd fc01 	bl	8002c70 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e06d      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547c:	4b29      	ldr	r3, [pc, #164]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005490:	d108      	bne.n	80054a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4921      	ldr	r1, [pc, #132]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a19      	ldr	r1, [r3, #32]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	430b      	orrs	r3, r1
 80054b6:	491b      	ldr	r1, [pc, #108]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054bc:	4b1b      	ldr	r3, [pc, #108]	@ (800552c <HAL_RCC_OscConfig+0x4cc>)
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fd fbd5 	bl	8002c70 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ca:	f7fd fbd1 	bl	8002c70 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e03d      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054dc:	4b11      	ldr	r3, [pc, #68]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x46a>
 80054e8:	e035      	b.n	8005556 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ea:	4b10      	ldr	r3, [pc, #64]	@ (800552c <HAL_RCC_OscConfig+0x4cc>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fd fbbe 	bl	8002c70 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fd fbba 	bl	8002c70 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e026      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x498>
 8005516:	e01e      	b.n	8005556 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e019      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
 8005524:	40021000 	.word	0x40021000
 8005528:	40007000 	.word	0x40007000
 800552c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCC_OscConfig+0x500>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	429a      	cmp	r2, r3
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000

08005564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0d0      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005578:	4b6a      	ldr	r3, [pc, #424]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d910      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	4b67      	ldr	r3, [pc, #412]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 0207 	bic.w	r2, r3, #7
 800558e:	4965      	ldr	r1, [pc, #404]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b63      	ldr	r3, [pc, #396]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0b8      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c0:	4b59      	ldr	r3, [pc, #356]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a58      	ldr	r2, [pc, #352]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d8:	4b53      	ldr	r3, [pc, #332]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a52      	ldr	r2, [pc, #328]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b50      	ldr	r3, [pc, #320]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	494d      	ldr	r1, [pc, #308]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d040      	beq.n	8005684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d107      	bne.n	800561a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b47      	ldr	r3, [pc, #284]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d115      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07f      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005622:	4b41      	ldr	r3, [pc, #260]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e073      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005632:	4b3d      	ldr	r3, [pc, #244]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e06b      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005642:	4b39      	ldr	r3, [pc, #228]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f023 0203 	bic.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4936      	ldr	r1, [pc, #216]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005654:	f7fd fb0c 	bl	8002c70 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	e00a      	b.n	8005672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565c:	f7fd fb08 	bl	8002c70 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e053      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	4b2d      	ldr	r3, [pc, #180]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 020c 	and.w	r2, r3, #12
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	429a      	cmp	r2, r3
 8005682:	d1eb      	bne.n	800565c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005684:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d210      	bcs.n	80056b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 0207 	bic.w	r2, r3, #7
 800569a:	4922      	ldr	r1, [pc, #136]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a2:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e032      	b.n	800571a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c0:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4916      	ldr	r1, [pc, #88]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056de:	4b12      	ldr	r3, [pc, #72]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	490e      	ldr	r1, [pc, #56]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056f2:	f000 f821 	bl	8005738 <HAL_RCC_GetSysClockFreq>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	490a      	ldr	r1, [pc, #40]	@ (800572c <HAL_RCC_ClockConfig+0x1c8>)
 8005704:	5ccb      	ldrb	r3, [r1, r3]
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <HAL_RCC_ClockConfig+0x1cc>)
 800570c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800570e:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <HAL_RCC_ClockConfig+0x1d0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd fa6a 	bl	8002bec <HAL_InitTick>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40022000 	.word	0x40022000
 8005728:	40021000 	.word	0x40021000
 800572c:	08009de4 	.word	0x08009de4
 8005730:	20000004 	.word	0x20000004
 8005734:	20000008 	.word	0x20000008

08005738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005752:	4b1e      	ldr	r3, [pc, #120]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d002      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x30>
 8005762:	2b08      	cmp	r3, #8
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x36>
 8005766:	e027      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005768:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800576a:	613b      	str	r3, [r7, #16]
      break;
 800576c:	e027      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0c9b      	lsrs	r3, r3, #18
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	4a17      	ldr	r2, [pc, #92]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d010      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005786:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	0c5b      	lsrs	r3, r3, #17
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	4a11      	ldr	r2, [pc, #68]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800579a:	fb03 f202 	mul.w	r2, r3, r2
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e004      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0c      	ldr	r2, [pc, #48]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	613b      	str	r3, [r7, #16]
      break;
 80057b6:	e002      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80057ba:	613b      	str	r3, [r7, #16]
      break;
 80057bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057be:	693b      	ldr	r3, [r7, #16]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	007a1200 	.word	0x007a1200
 80057d4:	08009dfc 	.word	0x08009dfc
 80057d8:	08009e0c 	.word	0x08009e0c
 80057dc:	003d0900 	.word	0x003d0900

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b02      	ldr	r3, [pc, #8]	@ (80057f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	20000004 	.word	0x20000004

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057f8:	f7ff fff2 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	0a1b      	lsrs	r3, r3, #8
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000
 8005818:	08009df4 	.word	0x08009df4

0800581c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005820:	f7ff ffde 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b05      	ldr	r3, [pc, #20]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	0adb      	lsrs	r3, r3, #11
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4903      	ldr	r1, [pc, #12]	@ (8005840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000
 8005840:	08009df4 	.word	0x08009df4

08005844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <RCC_Delay+0x34>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a0a      	ldr	r2, [pc, #40]	@ (800587c <RCC_Delay+0x38>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0a5b      	lsrs	r3, r3, #9
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005860:	bf00      	nop
  }
  while (Delay --);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f9      	bne.n	8005860 <RCC_Delay+0x1c>
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr
 8005878:	20000004 	.word	0x20000004
 800587c:	10624dd3 	.word	0x10624dd3

08005880 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d07d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a0:	4b4f      	ldr	r3, [pc, #316]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ac:	4b4c      	ldr	r3, [pc, #304]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4a4b      	ldr	r2, [pc, #300]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b6:	61d3      	str	r3, [r2, #28]
 80058b8:	4b49      	ldr	r3, [pc, #292]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	4b46      	ldr	r3, [pc, #280]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d118      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d4:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a42      	ldr	r2, [pc, #264]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e0:	f7fd f9c6 	bl	8002c70 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e6:	e008      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e8:	f7fd f9c2 	bl	8002c70 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	@ 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e06d      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4b3a      	ldr	r3, [pc, #232]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005906:	4b36      	ldr	r3, [pc, #216]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800590e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02e      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	429a      	cmp	r2, r3
 8005922:	d027      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005924:	4b2e      	ldr	r3, [pc, #184]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800592e:	4b2e      	ldr	r3, [pc, #184]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005934:	4b2c      	ldr	r3, [pc, #176]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800593a:	4a29      	ldr	r2, [pc, #164]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594a:	f7fd f991 	bl	8002c70 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fd f98d 	bl	8002c70 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e036      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ee      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005974:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4917      	ldr	r1, [pc, #92]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005982:	4313      	orrs	r3, r2
 8005984:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005986:	7dfb      	ldrb	r3, [r7, #23]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d105      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598c:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	4a13      	ldr	r2, [pc, #76]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005996:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059a4:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	490b      	ldr	r1, [pc, #44]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4904      	ldr	r1, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40007000 	.word	0x40007000
 80059e8:	42420440 	.word	0x42420440

080059ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	f200 808a 	bhi.w	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d045      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d075      	beq.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a22:	e082      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a24:	4b46      	ldr	r3, [pc, #280]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a2a:	4b45      	ldr	r3, [pc, #276]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d07b      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0c9b      	lsrs	r3, r3, #18
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a41      	ldr	r2, [pc, #260]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	0c5b      	lsrs	r3, r3, #17
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	4a3b      	ldr	r2, [pc, #236]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a5a:	5cd3      	ldrb	r3, [r2, r3]
 8005a5c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a68:	4a38      	ldr	r2, [pc, #224]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e004      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4a34      	ldr	r2, [pc, #208]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a84:	4b2e      	ldr	r3, [pc, #184]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	61bb      	str	r3, [r7, #24]
      break;
 8005a96:	e04a      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
      break;
 8005aa6:	e042      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab8:	d108      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e01f      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad6:	d109      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ad8:	4b19      	ldr	r3, [pc, #100]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ae4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e00f      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af6:	d11c      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005b04:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005b08:	61bb      	str	r3, [r7, #24]
      break;
 8005b0a:	e012      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b0c:	e011      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b0e:	f7ff fe85 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8005b12:	4602      	mov	r2, r0
 8005b14:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	0b9b      	lsrs	r3, r3, #14
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	61bb      	str	r3, [r7, #24]
      break;
 8005b28:	e004      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b32:	bf00      	nop
    }
  }
  return (frequency);
 8005b34:	69bb      	ldr	r3, [r7, #24]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	08009e10 	.word	0x08009e10
 8005b48:	08009e20 	.word	0x08009e20
 8005b4c:	007a1200 	.word	0x007a1200
 8005b50:	003d0900 	.word	0x003d0900
 8005b54:	aaaaaaab 	.word	0xaaaaaaab

08005b58 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07a      	b.n	8005c64 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	7c5b      	ldrb	r3, [r3, #17]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fe1c 	bl	80027bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9be 	bl	8005f0c <HAL_RTC_WaitForSynchro>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e061      	b.n	8005c64 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa77 	bl	8006094 <RTC_EnterInitMode>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e056      	b.n	8005c64 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0207 	bic.w	r2, r2, #7
 8005bc4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005bce:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <HAL_RTC_Init+0x114>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <HAL_RTC_Init+0x114>)
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005bda:	4b24      	ldr	r3, [pc, #144]	@ (8005c6c <HAL_RTC_Init+0x114>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4921      	ldr	r1, [pc, #132]	@ (8005c6c <HAL_RTC_Init+0x114>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d003      	beq.n	8005bfe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e00e      	b.n	8005c1c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7ff fef4 	bl	80059ec <HAL_RCCEx_GetPeriphCLKFreq>
 8005c04:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e026      	b.n	8005c64 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0c1a      	lsrs	r2, r3, #16
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f002 020f 	and.w	r2, r2, #15
 8005c28:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	b292      	uxth	r2, r2
 8005c32:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa55 	bl	80060e4 <RTC_ExitInitMode>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e00c      	b.n	8005c64 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40006c00 	.word	0x40006c00

08005c70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c70:	b590      	push	{r4, r7, lr}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_RTC_SetTime+0x20>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e080      	b.n	8005d96 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RTC_SetTime+0x30>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e07a      	b.n	8005d96 <HAL_RTC_SetTime+0x126>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d113      	bne.n	8005cda <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cbc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a5b      	subs	r3, r3, r1
 8005ccc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005cd4:	4413      	add	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e01e      	b.n	8005d18 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fa28 	bl	8006134 <RTC_Bcd2ToByte>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005cec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fa1d 	bl	8006134 <RTC_Bcd2ToByte>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d06:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	789b      	ldrb	r3, [r3, #2]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fa11 	bl	8006134 <RTC_Bcd2ToByte>
 8005d12:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005d14:	4423      	add	r3, r4
 8005d16:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f953 	bl	8005fc6 <RTC_WriteTimeCounter>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e02f      	b.n	8005d96 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0205 	bic.w	r2, r2, #5
 8005d44:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f964 	bl	8006014 <RTC_ReadAlarmCounter>
 8005d4c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d018      	beq.n	8005d88 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d214      	bcs.n	8005d88 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005d64:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005d68:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d6a:	6939      	ldr	r1, [r7, #16]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f96a 	bl	8006046 <RTC_WriteAlarmCounter>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e006      	b.n	8005d96 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
	...

08005da0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_RTC_SetDate+0x24>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e097      	b.n	8005ef8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	7c1b      	ldrb	r3, [r3, #16]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_RTC_SetDate+0x34>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e091      	b.n	8005ef8 <HAL_RTC_SetDate+0x158>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10c      	bne.n	8005e00 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	78da      	ldrb	r2, [r3, #3]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	785a      	ldrb	r2, [r3, #1]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	789a      	ldrb	r2, [r3, #2]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	739a      	strb	r2, [r3, #14]
 8005dfe:	e01a      	b.n	8005e36 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f995 	bl	8006134 <RTC_Bcd2ToByte>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f98c 	bl	8006134 <RTC_Bcd2ToByte>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	789b      	ldrb	r3, [r3, #2]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f983 	bl	8006134 <RTC_Bcd2ToByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	7bdb      	ldrb	r3, [r3, #15]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	7b59      	ldrb	r1, [r3, #13]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	7b9b      	ldrb	r3, [r3, #14]
 8005e44:	461a      	mov	r2, r3
 8005e46:	f000 f993 	bl	8006170 <RTC_WeekDayNum>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	7b1a      	ldrb	r2, [r3, #12]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f883 	bl	8005f66 <RTC_ReadTimeCounter>
 8005e60:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4a26      	ldr	r2, [pc, #152]	@ (8005f00 <HAL_RTC_SetDate+0x160>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0adb      	lsrs	r3, r3, #11
 8005e6c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b18      	cmp	r3, #24
 8005e72:	d93a      	bls.n	8005eea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4a23      	ldr	r2, [pc, #140]	@ (8005f04 <HAL_RTC_SetDate+0x164>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	4a22      	ldr	r2, [pc, #136]	@ (8005f08 <HAL_RTC_SetDate+0x168>)
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f89a 	bl	8005fc6 <RTC_WriteTimeCounter>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e027      	b.n	8005ef8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f8b3 	bl	8006014 <RTC_ReadAlarmCounter>
 8005eae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d018      	beq.n	8005eea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d214      	bcs.n	8005eea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005ec6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005eca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f8b9 	bl	8006046 <RTC_WriteAlarmCounter>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2204      	movs	r2, #4
 8005ede:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e006      	b.n	8005ef8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	91a2b3c5 	.word	0x91a2b3c5
 8005f04:	aaaaaaab 	.word	0xaaaaaaab
 8005f08:	00015180 	.word	0x00015180

08005f0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e01d      	b.n	8005f5e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0208 	bic.w	r2, r2, #8
 8005f30:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005f32:	f7fc fe9d 	bl	8002c70 <HAL_GetTick>
 8005f36:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f38:	e009      	b.n	8005f4e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f3a:	f7fc fe99 	bl	8002c70 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f48:	d901      	bls.n	8005f4e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e007      	b.n	8005f5e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0ee      	beq.n	8005f3a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b087      	sub	sp, #28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	827b      	strh	r3, [r7, #18]
 8005f72:	2300      	movs	r3, #0
 8005f74:	823b      	strh	r3, [r7, #16]
 8005f76:	2300      	movs	r3, #0
 8005f78:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005f96:	8a7a      	ldrh	r2, [r7, #18]
 8005f98:	8a3b      	ldrh	r3, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d008      	beq.n	8005fb0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005f9e:	8a3b      	ldrh	r3, [r7, #16]
 8005fa0:	041a      	lsls	r2, r3, #16
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e004      	b.n	8005fba <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005fb0:	8a7b      	ldrh	r3, [r7, #18]
 8005fb2:	041a      	lsls	r2, r3, #16
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f85d 	bl	8006094 <RTC_EnterInitMode>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
 8005fe4:	e011      	b.n	800600a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	0c12      	lsrs	r2, r2, #16
 8005fee:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b292      	uxth	r2, r2
 8005ff8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f872 	bl	80060e4 <RTC_ExitInitMode>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	81fb      	strh	r3, [r7, #14]
 8006020:	2300      	movs	r3, #0
 8006022:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	041a      	lsls	r2, r3, #16
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	4313      	orrs	r3, r2
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f81d 	bl	8006094 <RTC_EnterInitMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	e011      	b.n	800608a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	0c12      	lsrs	r2, r2, #16
 800606e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	b292      	uxth	r2, r2
 8006078:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f832 	bl	80060e4 <RTC_ExitInitMode>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800608a:	7bfb      	ldrb	r3, [r7, #15]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80060a0:	f7fc fde6 	bl	8002c70 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060a6:	e009      	b.n	80060bc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80060a8:	f7fc fde2 	bl	8002c70 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060b6:	d901      	bls.n	80060bc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e00f      	b.n	80060dc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ee      	beq.n	80060a8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0210 	orr.w	r2, r2, #16
 80060d8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0210 	bic.w	r2, r2, #16
 80060fe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006100:	f7fc fdb6 	bl	8002c70 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006106:	e009      	b.n	800611c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006108:	f7fc fdb2 	bl	8002c70 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006116:	d901      	bls.n	800611c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e007      	b.n	800612c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0ee      	beq.n	8006108 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	4413      	add	r3, r2
 8006162:	b2db      	uxtb	r3, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
	...

08006170 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
 800617c:	4613      	mov	r3, r2
 800617e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800618e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d82d      	bhi.n	80061f2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006254 <RTC_WeekDayNum+0xe4>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	085a      	lsrs	r2, r3, #1
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	441a      	add	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	441a      	add	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4926      	ldr	r1, [pc, #152]	@ (8006258 <RTC_WeekDayNum+0xe8>)
 80061c0:	fba1 1303 	umull	r1, r3, r1, r3
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	1ad2      	subs	r2, r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	4922      	ldr	r1, [pc, #136]	@ (8006258 <RTC_WeekDayNum+0xe8>)
 80061ce:	fba1 1303 	umull	r1, r3, r1, r3
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	4413      	add	r3, r2
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	4b20      	ldr	r3, [pc, #128]	@ (800625c <RTC_WeekDayNum+0xec>)
 80061da:	fba3 1302 	umull	r1, r3, r3, r2
 80061de:	1ad1      	subs	r1, r2, r3
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	440b      	add	r3, r1
 80061e4:	0899      	lsrs	r1, r3, #2
 80061e6:	460b      	mov	r3, r1
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	1a5b      	subs	r3, r3, r1
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e029      	b.n	8006246 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	4a15      	ldr	r2, [pc, #84]	@ (8006254 <RTC_WeekDayNum+0xe4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	085a      	lsrs	r2, r3, #1
 8006206:	78bb      	ldrb	r3, [r7, #2]
 8006208:	441a      	add	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	441a      	add	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	089b      	lsrs	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4910      	ldr	r1, [pc, #64]	@ (8006258 <RTC_WeekDayNum+0xe8>)
 8006218:	fba1 1303 	umull	r1, r3, r1, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	490d      	ldr	r1, [pc, #52]	@ (8006258 <RTC_WeekDayNum+0xe8>)
 8006224:	fba1 1303 	umull	r1, r3, r1, r3
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	4413      	add	r3, r2
 800622c:	1c9a      	adds	r2, r3, #2
 800622e:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <RTC_WeekDayNum+0xec>)
 8006230:	fba3 1302 	umull	r1, r3, r3, r2
 8006234:	1ad1      	subs	r1, r2, r3
 8006236:	0849      	lsrs	r1, r1, #1
 8006238:	440b      	add	r3, r1
 800623a:	0899      	lsrs	r1, r3, #2
 800623c:	460b      	mov	r3, r1
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	1a5b      	subs	r3, r3, r1
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	b2db      	uxtb	r3, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	38e38e39 	.word	0x38e38e39
 8006258:	51eb851f 	.word	0x51eb851f
 800625c:	24924925 	.word	0x24924925

08006260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e076      	b.n	8006360 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006282:	d009      	beq.n	8006298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]
 800628a:	e005      	b.n	8006298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc faa6 	bl	8002804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631c:	ea42 0103 	orr.w	r1, r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	0c1a      	lsrs	r2, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f002 0204 	and.w	r2, r2, #4
 800633e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69da      	ldr	r2, [r3, #28]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800634e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_SPI_Transmit+0x22>
 8006386:	2302      	movs	r3, #2
 8006388:	e12d      	b.n	80065e6 <HAL_SPI_Transmit+0x27e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006392:	f7fc fc6d 	bl	8002c70 <HAL_GetTick>
 8006396:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ac:	e116      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_SPI_Transmit+0x52>
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063be:	e10d      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006406:	d10f      	bne.n	8006428 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006426:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d007      	beq.n	8006446 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d14f      	bne.n	80064f0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_Transmit+0xf6>
 8006458:	8afb      	ldrh	r3, [r7, #22]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d142      	bne.n	80064e4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006482:	e02f      	b.n	80064e4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d112      	bne.n	80064b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064b6:	e015      	b.n	80064e4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b8:	f7fc fbda 	bl	8002c70 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_Transmit+0x168>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Transmit+0x16e>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064e2:	e07b      	b.n	80065dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ca      	bne.n	8006484 <HAL_SPI_Transmit+0x11c>
 80064ee:	e050      	b.n	8006592 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x196>
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d144      	bne.n	8006588 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006524:	e030      	b.n	8006588 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d113      	bne.n	800655c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	@ 0x36
 800655a:	e015      	b.n	8006588 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655c:	f7fc fb88 	bl	8002c70 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d803      	bhi.n	8006574 <HAL_SPI_Transmit+0x20c>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d102      	bne.n	800657a <HAL_SPI_Transmit+0x212>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006586:	e029      	b.n	80065dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1c9      	bne.n	8006526 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fa62 	bl	8006a60 <SPI_EndRxTxTransaction>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e003      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08c      	sub	sp, #48	@ 0x30
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065fc:	2301      	movs	r3, #1
 80065fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x26>
 8006610:	2302      	movs	r3, #2
 8006612:	e198      	b.n	8006946 <HAL_SPI_TransmitReceive+0x358>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800661c:	f7fc fb28 	bl	8002c70 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006632:	887b      	ldrh	r3, [r7, #2]
 8006634:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006636:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800663a:	2b01      	cmp	r3, #1
 800663c:	d00f      	beq.n	800665e <HAL_SPI_TransmitReceive+0x70>
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006644:	d107      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x68>
 800664e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006652:	2b04      	cmp	r3, #4
 8006654:	d003      	beq.n	800665e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800665c:	e16d      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_SPI_TransmitReceive+0x82>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_SPI_TransmitReceive+0x82>
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006676:	e160      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b04      	cmp	r3, #4
 8006682:	d003      	beq.n	800668c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2205      	movs	r2, #5
 8006688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	887a      	ldrh	r2, [r7, #2]
 80066ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b40      	cmp	r3, #64	@ 0x40
 80066ce:	d007      	beq.n	80066e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e8:	d17c      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x10a>
 80066f2:	8b7b      	ldrh	r3, [r7, #26]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d16a      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	881a      	ldrh	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	1c9a      	adds	r2, r3, #2
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671c:	e057      	b.n	80067ce <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d11b      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x176>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x176>
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d113      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	1c9a      	adds	r2, r3, #2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d119      	bne.n	80067a6 <HAL_SPI_TransmitReceive+0x1b8>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d014      	beq.n	80067a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	b292      	uxth	r2, r2
 8006788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	1c9a      	adds	r2, r3, #2
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067a6:	f7fc fa63 	bl	8002c70 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d80b      	bhi.n	80067ce <HAL_SPI_TransmitReceive+0x1e0>
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d007      	beq.n	80067ce <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80067cc:	e0b5      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1a2      	bne.n	800671e <HAL_SPI_TransmitReceive+0x130>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d19d      	bne.n	800671e <HAL_SPI_TransmitReceive+0x130>
 80067e2:	e080      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0x204>
 80067ec:	8b7b      	ldrh	r3, [r7, #26]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d16f      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006818:	e05b      	b.n	80068d2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d11c      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x274>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d017      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x274>
 8006832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d114      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d119      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2b6>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a0:	2301      	movs	r3, #1
 80068a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068a4:	f7fc f9e4 	bl	8002c70 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d803      	bhi.n	80068bc <HAL_SPI_TransmitReceive+0x2ce>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d102      	bne.n	80068c2 <HAL_SPI_TransmitReceive+0x2d4>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80068d0:	e033      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d19e      	bne.n	800681a <HAL_SPI_TransmitReceive+0x22c>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d199      	bne.n	800681a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f8b8 	bl	8006a60 <SPI_EndRxTxTransaction>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006902:	e01a      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006930:	e003      	b.n	800693a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006942:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	@ 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4613      	mov	r3, r2
 800695e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006960:	f7fc f986 	bl	8002c70 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	4413      	add	r3, r2
 800696e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006970:	f7fc f97e 	bl	8002c70 <HAL_GetTick>
 8006974:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006976:	4b39      	ldr	r3, [pc, #228]	@ (8006a5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	015b      	lsls	r3, r3, #5
 800697c:	0d1b      	lsrs	r3, r3, #20
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	fb02 f303 	mul.w	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006986:	e054      	b.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d050      	beq.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006990:	f7fc f96e 	bl	8002c70 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	429a      	cmp	r2, r3
 800699e:	d902      	bls.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d13d      	bne.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069be:	d111      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c8:	d004      	beq.n	80069d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d2:	d107      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ec:	d10f      	bne.n	8006a0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e017      	b.n	8006a52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d19b      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000004 	.word	0x20000004

08006a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	2180      	movs	r1, #128	@ 0x80
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff6a 	bl	8006950 <SPI_WaitFlagStateUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e000      	b.n	8006a94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e042      	b.n	8006b34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb feea 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	@ 0x24
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f91d 	bl	8006d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d16d      	bne.n	8006c38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <HAL_UART_Transmit+0x2c>
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e066      	b.n	8006c3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2221      	movs	r2, #33	@ 0x21
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b7a:	f7fc f879 	bl	8002c70 <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Transmit+0x6c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bb0:	e02a      	b.n	8006c08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2180      	movs	r1, #128	@ 0x80
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f840 	bl	8006c42 <UART_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e036      	b.n	8006c3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10b      	bne.n	8006bea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3302      	adds	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e007      	b.n	8006bfa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1cf      	bne.n	8006bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2140      	movs	r1, #64	@ 0x40
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f810 	bl	8006c42 <UART_WaitOnFlagUntilTimeout>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e006      	b.n	8006c3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e000      	b.n	8006c3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
  }
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b090      	sub	sp, #64	@ 0x40
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c52:	e050      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d04c      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c62:	f7fc f805 	bl	8002c70 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d241      	bcs.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c92:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e5      	bne.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc6:	623a      	str	r2, [r7, #32]
 8006cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	6a3a      	ldr	r2, [r7, #32]
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e00f      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d09f      	beq.n	8006c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3740      	adds	r7, #64	@ 0x40
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d5a:	f023 030c 	bic.w	r3, r3, #12
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	430b      	orrs	r3, r1
 8006d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2c      	ldr	r2, [pc, #176]	@ (8006e34 <UART_SetConfig+0x114>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7fe fd48 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	e002      	b.n	8006d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d90:	f7fe fd30 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8006d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009a      	lsls	r2, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	4a22      	ldr	r2, [pc, #136]	@ (8006e38 <UART_SetConfig+0x118>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	0119      	lsls	r1, r3, #4
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009a      	lsls	r2, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <UART_SetConfig+0x118>)
 8006dce:	fba3 0302 	umull	r0, r3, r3, r2
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2064      	movs	r0, #100	@ 0x64
 8006dd6:	fb00 f303 	mul.w	r3, r0, r3
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	3332      	adds	r3, #50	@ 0x32
 8006de0:	4a15      	ldr	r2, [pc, #84]	@ (8006e38 <UART_SetConfig+0x118>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dec:	4419      	add	r1, r3
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009a      	lsls	r2, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <UART_SetConfig+0x118>)
 8006e06:	fba3 0302 	umull	r0, r3, r3, r2
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	2064      	movs	r0, #100	@ 0x64
 8006e0e:	fb00 f303 	mul.w	r3, r0, r3
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	3332      	adds	r3, #50	@ 0x32
 8006e18:	4a07      	ldr	r2, [pc, #28]	@ (8006e38 <UART_SetConfig+0x118>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	440a      	add	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40013800 	.word	0x40013800
 8006e38:	51eb851f 	.word	0x51eb851f

08006e3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e40:	4904      	ldr	r1, [pc, #16]	@ (8006e54 <MX_FATFS_Init+0x18>)
 8006e42:	4805      	ldr	r0, [pc, #20]	@ (8006e58 <MX_FATFS_Init+0x1c>)
 8006e44:	f000 f8b0 	bl	8006fa8 <FATFS_LinkDriver>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b03      	ldr	r3, [pc, #12]	@ (8006e5c <MX_FATFS_Init+0x20>)
 8006e4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e50:	bf00      	nop
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200003d8 	.word	0x200003d8
 8006e58:	20000010 	.word	0x20000010
 8006e5c:	200003d4 	.word	0x200003d4

08006e60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fa fb69 	bl	8001544 <SD_disk_initialize>
 8006e72:	4603      	mov	r3, r0
 8006e74:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	4603      	mov	r3, r0
 8006e86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa fc40 	bl	8001710 <SD_disk_status>
 8006e90:	4603      	mov	r3, r0
 8006e92:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006eac:	7bf8      	ldrb	r0, [r7, #15]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	f7fa fc40 	bl	8001738 <SD_disk_read>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006ed4:	7bf8      	ldrb	r0, [r7, #15]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	f7fa fc96 	bl	800180c <SD_disk_write>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	603a      	str	r2, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	79b9      	ldrb	r1, [r7, #6]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fa fd06 	bl	8001914 <SD_disk_ioctl>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f2c:	7a5b      	ldrb	r3, [r3, #9]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d831      	bhi.n	8006f98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f34:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f36:	7a5b      	ldrb	r3, [r3, #9]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f3e:	2100      	movs	r1, #0
 8006f40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006f42:	4b18      	ldr	r3, [pc, #96]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f44:	7a5b      	ldrb	r3, [r3, #9]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4a16      	ldr	r2, [pc, #88]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f54:	7a5b      	ldrb	r3, [r3, #9]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4b12      	ldr	r3, [pc, #72]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f5c:	4413      	add	r3, r2
 8006f5e:	79fa      	ldrb	r2, [r7, #7]
 8006f60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f62:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f64:	7a5b      	ldrb	r3, [r3, #9]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	b2d1      	uxtb	r1, r2
 8006f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006fa4 <FATFS_LinkDriverEx+0x90>)
 8006f6e:	7251      	strb	r1, [r2, #9]
 8006f70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f72:	7dbb      	ldrb	r3, [r7, #22]
 8006f74:	3330      	adds	r3, #48	@ 0x30
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	223a      	movs	r2, #58	@ 0x3a
 8006f82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3302      	adds	r3, #2
 8006f88:	222f      	movs	r2, #47	@ 0x2f
 8006f8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3303      	adds	r3, #3
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr
 8006fa4:	200003dc 	.word	0x200003dc

08006fa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ffac 	bl	8006f14 <FATFS_LinkDriverEx>
 8006fbc:	4603      	mov	r3, r0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <malloc>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	@ (8006fd4 <malloc+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f000 b82d 	b.w	800702c <_malloc_r>
 8006fd2:	bf00      	nop
 8006fd4:	20000030 	.word	0x20000030

08006fd8 <free>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	@ (8006fe4 <free+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f001 bd23 	b.w	8008a28 <_free_r>
 8006fe2:	bf00      	nop
 8006fe4:	20000030 	.word	0x20000030

08006fe8 <sbrk_aligned>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0f      	ldr	r6, [pc, #60]	@ (8007028 <sbrk_aligned+0x40>)
 8006fec:	460c      	mov	r4, r1
 8006fee:	6831      	ldr	r1, [r6, #0]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	b911      	cbnz	r1, 8006ffa <sbrk_aligned+0x12>
 8006ff4:	f000 fe68 	bl	8007cc8 <_sbrk_r>
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 fe63 	bl	8007cc8 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d103      	bne.n	800700e <sbrk_aligned+0x26>
 8007006:	f04f 34ff 	mov.w	r4, #4294967295
 800700a:	4620      	mov	r0, r4
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	1cc4      	adds	r4, r0, #3
 8007010:	f024 0403 	bic.w	r4, r4, #3
 8007014:	42a0      	cmp	r0, r4
 8007016:	d0f8      	beq.n	800700a <sbrk_aligned+0x22>
 8007018:	1a21      	subs	r1, r4, r0
 800701a:	4628      	mov	r0, r5
 800701c:	f000 fe54 	bl	8007cc8 <_sbrk_r>
 8007020:	3001      	adds	r0, #1
 8007022:	d1f2      	bne.n	800700a <sbrk_aligned+0x22>
 8007024:	e7ef      	b.n	8007006 <sbrk_aligned+0x1e>
 8007026:	bf00      	nop
 8007028:	200003e8 	.word	0x200003e8

0800702c <_malloc_r>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	1ccd      	adds	r5, r1, #3
 8007032:	f025 0503 	bic.w	r5, r5, #3
 8007036:	3508      	adds	r5, #8
 8007038:	2d0c      	cmp	r5, #12
 800703a:	bf38      	it	cc
 800703c:	250c      	movcc	r5, #12
 800703e:	2d00      	cmp	r5, #0
 8007040:	4606      	mov	r6, r0
 8007042:	db01      	blt.n	8007048 <_malloc_r+0x1c>
 8007044:	42a9      	cmp	r1, r5
 8007046:	d904      	bls.n	8007052 <_malloc_r+0x26>
 8007048:	230c      	movs	r3, #12
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007128 <_malloc_r+0xfc>
 8007056:	f000 f869 	bl	800712c <__malloc_lock>
 800705a:	f8d8 3000 	ldr.w	r3, [r8]
 800705e:	461c      	mov	r4, r3
 8007060:	bb44      	cbnz	r4, 80070b4 <_malloc_r+0x88>
 8007062:	4629      	mov	r1, r5
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff ffbf 	bl	8006fe8 <sbrk_aligned>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	4604      	mov	r4, r0
 800706e:	d158      	bne.n	8007122 <_malloc_r+0xf6>
 8007070:	f8d8 4000 	ldr.w	r4, [r8]
 8007074:	4627      	mov	r7, r4
 8007076:	2f00      	cmp	r7, #0
 8007078:	d143      	bne.n	8007102 <_malloc_r+0xd6>
 800707a:	2c00      	cmp	r4, #0
 800707c:	d04b      	beq.n	8007116 <_malloc_r+0xea>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	4639      	mov	r1, r7
 8007082:	4630      	mov	r0, r6
 8007084:	eb04 0903 	add.w	r9, r4, r3
 8007088:	f000 fe1e 	bl	8007cc8 <_sbrk_r>
 800708c:	4581      	cmp	r9, r0
 800708e:	d142      	bne.n	8007116 <_malloc_r+0xea>
 8007090:	6821      	ldr	r1, [r4, #0]
 8007092:	4630      	mov	r0, r6
 8007094:	1a6d      	subs	r5, r5, r1
 8007096:	4629      	mov	r1, r5
 8007098:	f7ff ffa6 	bl	8006fe8 <sbrk_aligned>
 800709c:	3001      	adds	r0, #1
 800709e:	d03a      	beq.n	8007116 <_malloc_r+0xea>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	442b      	add	r3, r5
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	f8d8 3000 	ldr.w	r3, [r8]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	bb62      	cbnz	r2, 8007108 <_malloc_r+0xdc>
 80070ae:	f8c8 7000 	str.w	r7, [r8]
 80070b2:	e00f      	b.n	80070d4 <_malloc_r+0xa8>
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	1b52      	subs	r2, r2, r5
 80070b8:	d420      	bmi.n	80070fc <_malloc_r+0xd0>
 80070ba:	2a0b      	cmp	r2, #11
 80070bc:	d917      	bls.n	80070ee <_malloc_r+0xc2>
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	6025      	str	r5, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	6059      	strne	r1, [r3, #4]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	bf08      	it	eq
 80070cc:	f8c8 1000 	streq.w	r1, [r8]
 80070d0:	5162      	str	r2, [r4, r5]
 80070d2:	604b      	str	r3, [r1, #4]
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 f82f 	bl	8007138 <__malloc_unlock>
 80070da:	f104 000b 	add.w	r0, r4, #11
 80070de:	1d23      	adds	r3, r4, #4
 80070e0:	f020 0007 	bic.w	r0, r0, #7
 80070e4:	1ac2      	subs	r2, r0, r3
 80070e6:	bf1c      	itt	ne
 80070e8:	1a1b      	subne	r3, r3, r0
 80070ea:	50a3      	strne	r3, [r4, r2]
 80070ec:	e7af      	b.n	800704e <_malloc_r+0x22>
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	bf0c      	ite	eq
 80070f4:	f8c8 2000 	streq.w	r2, [r8]
 80070f8:	605a      	strne	r2, [r3, #4]
 80070fa:	e7eb      	b.n	80070d4 <_malloc_r+0xa8>
 80070fc:	4623      	mov	r3, r4
 80070fe:	6864      	ldr	r4, [r4, #4]
 8007100:	e7ae      	b.n	8007060 <_malloc_r+0x34>
 8007102:	463c      	mov	r4, r7
 8007104:	687f      	ldr	r7, [r7, #4]
 8007106:	e7b6      	b.n	8007076 <_malloc_r+0x4a>
 8007108:	461a      	mov	r2, r3
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	42a3      	cmp	r3, r4
 800710e:	d1fb      	bne.n	8007108 <_malloc_r+0xdc>
 8007110:	2300      	movs	r3, #0
 8007112:	6053      	str	r3, [r2, #4]
 8007114:	e7de      	b.n	80070d4 <_malloc_r+0xa8>
 8007116:	230c      	movs	r3, #12
 8007118:	4630      	mov	r0, r6
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f000 f80c 	bl	8007138 <__malloc_unlock>
 8007120:	e794      	b.n	800704c <_malloc_r+0x20>
 8007122:	6005      	str	r5, [r0, #0]
 8007124:	e7d6      	b.n	80070d4 <_malloc_r+0xa8>
 8007126:	bf00      	nop
 8007128:	200003ec 	.word	0x200003ec

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	@ (8007134 <__malloc_lock+0x8>)
 800712e:	f000 be18 	b.w	8007d62 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	20000530 	.word	0x20000530

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_unlock+0x8>)
 800713a:	f000 be13 	b.w	8007d64 <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	20000530 	.word	0x20000530

08007144 <__cvt>:
 8007144:	2b00      	cmp	r3, #0
 8007146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714a:	461d      	mov	r5, r3
 800714c:	bfbb      	ittet	lt
 800714e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007152:	461d      	movlt	r5, r3
 8007154:	2300      	movge	r3, #0
 8007156:	232d      	movlt	r3, #45	@ 0x2d
 8007158:	b088      	sub	sp, #32
 800715a:	4614      	mov	r4, r2
 800715c:	bfb8      	it	lt
 800715e:	4614      	movlt	r4, r2
 8007160:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007162:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007164:	7013      	strb	r3, [r2, #0]
 8007166:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007168:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800716c:	f023 0820 	bic.w	r8, r3, #32
 8007170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007174:	d005      	beq.n	8007182 <__cvt+0x3e>
 8007176:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800717a:	d100      	bne.n	800717e <__cvt+0x3a>
 800717c:	3601      	adds	r6, #1
 800717e:	2302      	movs	r3, #2
 8007180:	e000      	b.n	8007184 <__cvt+0x40>
 8007182:	2303      	movs	r3, #3
 8007184:	aa07      	add	r2, sp, #28
 8007186:	9204      	str	r2, [sp, #16]
 8007188:	aa06      	add	r2, sp, #24
 800718a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800718e:	e9cd 3600 	strd	r3, r6, [sp]
 8007192:	4622      	mov	r2, r4
 8007194:	462b      	mov	r3, r5
 8007196:	f000 fe7f 	bl	8007e98 <_dtoa_r>
 800719a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800719e:	4607      	mov	r7, r0
 80071a0:	d119      	bne.n	80071d6 <__cvt+0x92>
 80071a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071a4:	07db      	lsls	r3, r3, #31
 80071a6:	d50e      	bpl.n	80071c6 <__cvt+0x82>
 80071a8:	eb00 0906 	add.w	r9, r0, r6
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
 80071b0:	4620      	mov	r0, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	f7f9 fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80071b8:	b108      	cbz	r0, 80071be <__cvt+0x7a>
 80071ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80071be:	2230      	movs	r2, #48	@ 0x30
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	454b      	cmp	r3, r9
 80071c4:	d31e      	bcc.n	8007204 <__cvt+0xc0>
 80071c6:	4638      	mov	r0, r7
 80071c8:	9b07      	ldr	r3, [sp, #28]
 80071ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80071cc:	1bdb      	subs	r3, r3, r7
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	b008      	add	sp, #32
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071da:	eb00 0906 	add.w	r9, r0, r6
 80071de:	d1e5      	bne.n	80071ac <__cvt+0x68>
 80071e0:	7803      	ldrb	r3, [r0, #0]
 80071e2:	2b30      	cmp	r3, #48	@ 0x30
 80071e4:	d10a      	bne.n	80071fc <__cvt+0xb8>
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80071f2:	b918      	cbnz	r0, 80071fc <__cvt+0xb8>
 80071f4:	f1c6 0601 	rsb	r6, r6, #1
 80071f8:	f8ca 6000 	str.w	r6, [sl]
 80071fc:	f8da 3000 	ldr.w	r3, [sl]
 8007200:	4499      	add	r9, r3
 8007202:	e7d3      	b.n	80071ac <__cvt+0x68>
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	9107      	str	r1, [sp, #28]
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e7d9      	b.n	80071c0 <__cvt+0x7c>

0800720c <__exponent>:
 800720c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800720e:	2900      	cmp	r1, #0
 8007210:	bfb6      	itet	lt
 8007212:	232d      	movlt	r3, #45	@ 0x2d
 8007214:	232b      	movge	r3, #43	@ 0x2b
 8007216:	4249      	neglt	r1, r1
 8007218:	2909      	cmp	r1, #9
 800721a:	7002      	strb	r2, [r0, #0]
 800721c:	7043      	strb	r3, [r0, #1]
 800721e:	dd29      	ble.n	8007274 <__exponent+0x68>
 8007220:	f10d 0307 	add.w	r3, sp, #7
 8007224:	461d      	mov	r5, r3
 8007226:	270a      	movs	r7, #10
 8007228:	fbb1 f6f7 	udiv	r6, r1, r7
 800722c:	461a      	mov	r2, r3
 800722e:	fb07 1416 	mls	r4, r7, r6, r1
 8007232:	3430      	adds	r4, #48	@ 0x30
 8007234:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007238:	460c      	mov	r4, r1
 800723a:	2c63      	cmp	r4, #99	@ 0x63
 800723c:	4631      	mov	r1, r6
 800723e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007242:	dcf1      	bgt.n	8007228 <__exponent+0x1c>
 8007244:	3130      	adds	r1, #48	@ 0x30
 8007246:	1e94      	subs	r4, r2, #2
 8007248:	f803 1c01 	strb.w	r1, [r3, #-1]
 800724c:	4623      	mov	r3, r4
 800724e:	1c41      	adds	r1, r0, #1
 8007250:	42ab      	cmp	r3, r5
 8007252:	d30a      	bcc.n	800726a <__exponent+0x5e>
 8007254:	f10d 0309 	add.w	r3, sp, #9
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	42ac      	cmp	r4, r5
 800725c:	bf88      	it	hi
 800725e:	2300      	movhi	r3, #0
 8007260:	3302      	adds	r3, #2
 8007262:	4403      	add	r3, r0
 8007264:	1a18      	subs	r0, r3, r0
 8007266:	b003      	add	sp, #12
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800726e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007272:	e7ed      	b.n	8007250 <__exponent+0x44>
 8007274:	2330      	movs	r3, #48	@ 0x30
 8007276:	3130      	adds	r1, #48	@ 0x30
 8007278:	7083      	strb	r3, [r0, #2]
 800727a:	70c1      	strb	r1, [r0, #3]
 800727c:	1d03      	adds	r3, r0, #4
 800727e:	e7f1      	b.n	8007264 <__exponent+0x58>

08007280 <_printf_float>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	b091      	sub	sp, #68	@ 0x44
 8007286:	460c      	mov	r4, r1
 8007288:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800728c:	4616      	mov	r6, r2
 800728e:	461f      	mov	r7, r3
 8007290:	4605      	mov	r5, r0
 8007292:	f000 fce1 	bl	8007c58 <_localeconv_r>
 8007296:	6803      	ldr	r3, [r0, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	9308      	str	r3, [sp, #32]
 800729c:	f7f8 ff58 	bl	8000150 <strlen>
 80072a0:	2300      	movs	r3, #0
 80072a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80072a4:	f8d8 3000 	ldr.w	r3, [r8]
 80072a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80072aa:	3307      	adds	r3, #7
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	f103 0208 	add.w	r2, r3, #8
 80072b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80072b8:	f8d4 b000 	ldr.w	fp, [r4]
 80072bc:	f8c8 2000 	str.w	r2, [r8]
 80072c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80072c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80072da:	4b9c      	ldr	r3, [pc, #624]	@ (800754c <_printf_float+0x2cc>)
 80072dc:	f7f9 fb96 	bl	8000a0c <__aeabi_dcmpun>
 80072e0:	bb70      	cbnz	r0, 8007340 <_printf_float+0xc0>
 80072e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ea:	4b98      	ldr	r3, [pc, #608]	@ (800754c <_printf_float+0x2cc>)
 80072ec:	f7f9 fb70 	bl	80009d0 <__aeabi_dcmple>
 80072f0:	bb30      	cbnz	r0, 8007340 <_printf_float+0xc0>
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f9 fb5f 	bl	80009bc <__aeabi_dcmplt>
 80072fe:	b110      	cbz	r0, 8007306 <_printf_float+0x86>
 8007300:	232d      	movs	r3, #45	@ 0x2d
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007306:	4a92      	ldr	r2, [pc, #584]	@ (8007550 <_printf_float+0x2d0>)
 8007308:	4b92      	ldr	r3, [pc, #584]	@ (8007554 <_printf_float+0x2d4>)
 800730a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800730e:	bf94      	ite	ls
 8007310:	4690      	movls	r8, r2
 8007312:	4698      	movhi	r8, r3
 8007314:	2303      	movs	r3, #3
 8007316:	f04f 0900 	mov.w	r9, #0
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	f02b 0304 	bic.w	r3, fp, #4
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	4633      	mov	r3, r6
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	9700      	str	r7, [sp, #0]
 800732a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800732c:	f000 f9d4 	bl	80076d8 <_printf_common>
 8007330:	3001      	adds	r0, #1
 8007332:	f040 8090 	bne.w	8007456 <_printf_float+0x1d6>
 8007336:	f04f 30ff 	mov.w	r0, #4294967295
 800733a:	b011      	add	sp, #68	@ 0x44
 800733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007340:	4642      	mov	r2, r8
 8007342:	464b      	mov	r3, r9
 8007344:	4640      	mov	r0, r8
 8007346:	4649      	mov	r1, r9
 8007348:	f7f9 fb60 	bl	8000a0c <__aeabi_dcmpun>
 800734c:	b148      	cbz	r0, 8007362 <_printf_float+0xe2>
 800734e:	464b      	mov	r3, r9
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfb8      	it	lt
 8007354:	232d      	movlt	r3, #45	@ 0x2d
 8007356:	4a80      	ldr	r2, [pc, #512]	@ (8007558 <_printf_float+0x2d8>)
 8007358:	bfb8      	it	lt
 800735a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800735e:	4b7f      	ldr	r3, [pc, #508]	@ (800755c <_printf_float+0x2dc>)
 8007360:	e7d3      	b.n	800730a <_printf_float+0x8a>
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	d13f      	bne.n	80073ec <_printf_float+0x16c>
 800736c:	2306      	movs	r3, #6
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	9206      	str	r2, [sp, #24]
 800737a:	aa0e      	add	r2, sp, #56	@ 0x38
 800737c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007380:	aa0d      	add	r2, sp, #52	@ 0x34
 8007382:	9203      	str	r2, [sp, #12]
 8007384:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007388:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	4642      	mov	r2, r8
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4628      	mov	r0, r5
 8007394:	464b      	mov	r3, r9
 8007396:	910a      	str	r1, [sp, #40]	@ 0x28
 8007398:	f7ff fed4 	bl	8007144 <__cvt>
 800739c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800739e:	4680      	mov	r8, r0
 80073a0:	2947      	cmp	r1, #71	@ 0x47
 80073a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80073a4:	d128      	bne.n	80073f8 <_printf_float+0x178>
 80073a6:	1cc8      	adds	r0, r1, #3
 80073a8:	db02      	blt.n	80073b0 <_printf_float+0x130>
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	4299      	cmp	r1, r3
 80073ae:	dd40      	ble.n	8007432 <_printf_float+0x1b2>
 80073b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80073b4:	fa5f fa8a 	uxtb.w	sl, sl
 80073b8:	4652      	mov	r2, sl
 80073ba:	3901      	subs	r1, #1
 80073bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80073c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80073c2:	f7ff ff23 	bl	800720c <__exponent>
 80073c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c8:	4681      	mov	r9, r0
 80073ca:	1813      	adds	r3, r2, r0
 80073cc:	2a01      	cmp	r2, #1
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	dc02      	bgt.n	80073d8 <_printf_float+0x158>
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	07d2      	lsls	r2, r2, #31
 80073d6:	d501      	bpl.n	80073dc <_printf_float+0x15c>
 80073d8:	3301      	adds	r3, #1
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d09e      	beq.n	8007322 <_printf_float+0xa2>
 80073e4:	232d      	movs	r3, #45	@ 0x2d
 80073e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ea:	e79a      	b.n	8007322 <_printf_float+0xa2>
 80073ec:	2947      	cmp	r1, #71	@ 0x47
 80073ee:	d1bf      	bne.n	8007370 <_printf_float+0xf0>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1bd      	bne.n	8007370 <_printf_float+0xf0>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e7ba      	b.n	800736e <_printf_float+0xee>
 80073f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073fc:	d9dc      	bls.n	80073b8 <_printf_float+0x138>
 80073fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007402:	d118      	bne.n	8007436 <_printf_float+0x1b6>
 8007404:	2900      	cmp	r1, #0
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	dd0b      	ble.n	8007422 <_printf_float+0x1a2>
 800740a:	6121      	str	r1, [r4, #16]
 800740c:	b913      	cbnz	r3, 8007414 <_printf_float+0x194>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	07d0      	lsls	r0, r2, #31
 8007412:	d502      	bpl.n	800741a <_printf_float+0x19a>
 8007414:	3301      	adds	r3, #1
 8007416:	440b      	add	r3, r1
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	f04f 0900 	mov.w	r9, #0
 800741e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007420:	e7dc      	b.n	80073dc <_printf_float+0x15c>
 8007422:	b913      	cbnz	r3, 800742a <_printf_float+0x1aa>
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	07d2      	lsls	r2, r2, #31
 8007428:	d501      	bpl.n	800742e <_printf_float+0x1ae>
 800742a:	3302      	adds	r3, #2
 800742c:	e7f4      	b.n	8007418 <_printf_float+0x198>
 800742e:	2301      	movs	r3, #1
 8007430:	e7f2      	b.n	8007418 <_printf_float+0x198>
 8007432:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007438:	4299      	cmp	r1, r3
 800743a:	db05      	blt.n	8007448 <_printf_float+0x1c8>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	6121      	str	r1, [r4, #16]
 8007440:	07d8      	lsls	r0, r3, #31
 8007442:	d5ea      	bpl.n	800741a <_printf_float+0x19a>
 8007444:	1c4b      	adds	r3, r1, #1
 8007446:	e7e7      	b.n	8007418 <_printf_float+0x198>
 8007448:	2900      	cmp	r1, #0
 800744a:	bfcc      	ite	gt
 800744c:	2201      	movgt	r2, #1
 800744e:	f1c1 0202 	rsble	r2, r1, #2
 8007452:	4413      	add	r3, r2
 8007454:	e7e0      	b.n	8007418 <_printf_float+0x198>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	055a      	lsls	r2, r3, #21
 800745a:	d407      	bmi.n	800746c <_printf_float+0x1ec>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	4642      	mov	r2, r8
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	d12b      	bne.n	80074c2 <_printf_float+0x242>
 800746a:	e764      	b.n	8007336 <_printf_float+0xb6>
 800746c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007470:	f240 80dc 	bls.w	800762c <_printf_float+0x3ac>
 8007474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007478:	2200      	movs	r2, #0
 800747a:	2300      	movs	r3, #0
 800747c:	f7f9 fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8007480:	2800      	cmp	r0, #0
 8007482:	d033      	beq.n	80074ec <_printf_float+0x26c>
 8007484:	2301      	movs	r3, #1
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	4a35      	ldr	r2, [pc, #212]	@ (8007560 <_printf_float+0x2e0>)
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af51 	beq.w	8007336 <_printf_float+0xb6>
 8007494:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007498:	4543      	cmp	r3, r8
 800749a:	db02      	blt.n	80074a2 <_printf_float+0x222>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	07d8      	lsls	r0, r3, #31
 80074a0:	d50f      	bpl.n	80074c2 <_printf_float+0x242>
 80074a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f af42 	beq.w	8007336 <_printf_float+0xb6>
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80074ba:	f104 0a1a 	add.w	sl, r4, #26
 80074be:	45c8      	cmp	r8, r9
 80074c0:	dc09      	bgt.n	80074d6 <_printf_float+0x256>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	079b      	lsls	r3, r3, #30
 80074c6:	f100 8102 	bmi.w	80076ce <_printf_float+0x44e>
 80074ca:	68e0      	ldr	r0, [r4, #12]
 80074cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074ce:	4298      	cmp	r0, r3
 80074d0:	bfb8      	it	lt
 80074d2:	4618      	movlt	r0, r3
 80074d4:	e731      	b.n	800733a <_printf_float+0xba>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4652      	mov	r2, sl
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	f43f af28 	beq.w	8007336 <_printf_float+0xb6>
 80074e6:	f109 0901 	add.w	r9, r9, #1
 80074ea:	e7e8      	b.n	80074be <_printf_float+0x23e>
 80074ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dc38      	bgt.n	8007564 <_printf_float+0x2e4>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	4a19      	ldr	r2, [pc, #100]	@ (8007560 <_printf_float+0x2e0>)
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f af1a 	beq.w	8007336 <_printf_float+0xb6>
 8007502:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007506:	ea59 0303 	orrs.w	r3, r9, r3
 800750a:	d102      	bne.n	8007512 <_printf_float+0x292>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	07d9      	lsls	r1, r3, #31
 8007510:	d5d7      	bpl.n	80074c2 <_printf_float+0x242>
 8007512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f af0a 	beq.w	8007336 <_printf_float+0xb6>
 8007522:	f04f 0a00 	mov.w	sl, #0
 8007526:	f104 0b1a 	add.w	fp, r4, #26
 800752a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800752c:	425b      	negs	r3, r3
 800752e:	4553      	cmp	r3, sl
 8007530:	dc01      	bgt.n	8007536 <_printf_float+0x2b6>
 8007532:	464b      	mov	r3, r9
 8007534:	e793      	b.n	800745e <_printf_float+0x1de>
 8007536:	2301      	movs	r3, #1
 8007538:	465a      	mov	r2, fp
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f aef8 	beq.w	8007336 <_printf_float+0xb6>
 8007546:	f10a 0a01 	add.w	sl, sl, #1
 800754a:	e7ee      	b.n	800752a <_printf_float+0x2aa>
 800754c:	7fefffff 	.word	0x7fefffff
 8007550:	08009e22 	.word	0x08009e22
 8007554:	08009e26 	.word	0x08009e26
 8007558:	08009e2a 	.word	0x08009e2a
 800755c:	08009e2e 	.word	0x08009e2e
 8007560:	08009e32 	.word	0x08009e32
 8007564:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007566:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800756a:	4553      	cmp	r3, sl
 800756c:	bfa8      	it	ge
 800756e:	4653      	movge	r3, sl
 8007570:	2b00      	cmp	r3, #0
 8007572:	4699      	mov	r9, r3
 8007574:	dc36      	bgt.n	80075e4 <_printf_float+0x364>
 8007576:	f04f 0b00 	mov.w	fp, #0
 800757a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800757e:	f104 021a 	add.w	r2, r4, #26
 8007582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007584:	930a      	str	r3, [sp, #40]	@ 0x28
 8007586:	eba3 0309 	sub.w	r3, r3, r9
 800758a:	455b      	cmp	r3, fp
 800758c:	dc31      	bgt.n	80075f2 <_printf_float+0x372>
 800758e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007590:	459a      	cmp	sl, r3
 8007592:	dc3a      	bgt.n	800760a <_printf_float+0x38a>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	07da      	lsls	r2, r3, #31
 8007598:	d437      	bmi.n	800760a <_printf_float+0x38a>
 800759a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800759c:	ebaa 0903 	sub.w	r9, sl, r3
 80075a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a2:	ebaa 0303 	sub.w	r3, sl, r3
 80075a6:	4599      	cmp	r9, r3
 80075a8:	bfa8      	it	ge
 80075aa:	4699      	movge	r9, r3
 80075ac:	f1b9 0f00 	cmp.w	r9, #0
 80075b0:	dc33      	bgt.n	800761a <_printf_float+0x39a>
 80075b2:	f04f 0800 	mov.w	r8, #0
 80075b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ba:	f104 0b1a 	add.w	fp, r4, #26
 80075be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075c0:	ebaa 0303 	sub.w	r3, sl, r3
 80075c4:	eba3 0309 	sub.w	r3, r3, r9
 80075c8:	4543      	cmp	r3, r8
 80075ca:	f77f af7a 	ble.w	80074c2 <_printf_float+0x242>
 80075ce:	2301      	movs	r3, #1
 80075d0:	465a      	mov	r2, fp
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f aeac 	beq.w	8007336 <_printf_float+0xb6>
 80075de:	f108 0801 	add.w	r8, r8, #1
 80075e2:	e7ec      	b.n	80075be <_printf_float+0x33e>
 80075e4:	4642      	mov	r2, r8
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	d1c2      	bne.n	8007576 <_printf_float+0x2f6>
 80075f0:	e6a1      	b.n	8007336 <_printf_float+0xb6>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f ae9a 	beq.w	8007336 <_printf_float+0xb6>
 8007602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007604:	f10b 0b01 	add.w	fp, fp, #1
 8007608:	e7bb      	b.n	8007582 <_printf_float+0x302>
 800760a:	4631      	mov	r1, r6
 800760c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	d1c0      	bne.n	800759a <_printf_float+0x31a>
 8007618:	e68d      	b.n	8007336 <_printf_float+0xb6>
 800761a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800761c:	464b      	mov	r3, r9
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	4442      	add	r2, r8
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	d1c3      	bne.n	80075b2 <_printf_float+0x332>
 800762a:	e684      	b.n	8007336 <_printf_float+0xb6>
 800762c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007630:	f1ba 0f01 	cmp.w	sl, #1
 8007634:	dc01      	bgt.n	800763a <_printf_float+0x3ba>
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	d536      	bpl.n	80076a8 <_printf_float+0x428>
 800763a:	2301      	movs	r3, #1
 800763c:	4642      	mov	r2, r8
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	f43f ae76 	beq.w	8007336 <_printf_float+0xb6>
 800764a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae6e 	beq.w	8007336 <_printf_float+0xb6>
 800765a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800765e:	2200      	movs	r2, #0
 8007660:	2300      	movs	r3, #0
 8007662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007666:	f7f9 f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800766a:	b9c0      	cbnz	r0, 800769e <_printf_float+0x41e>
 800766c:	4653      	mov	r3, sl
 800766e:	f108 0201 	add.w	r2, r8, #1
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	d10c      	bne.n	8007696 <_printf_float+0x416>
 800767c:	e65b      	b.n	8007336 <_printf_float+0xb6>
 800767e:	2301      	movs	r3, #1
 8007680:	465a      	mov	r2, fp
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f ae54 	beq.w	8007336 <_printf_float+0xb6>
 800768e:	f108 0801 	add.w	r8, r8, #1
 8007692:	45d0      	cmp	r8, sl
 8007694:	dbf3      	blt.n	800767e <_printf_float+0x3fe>
 8007696:	464b      	mov	r3, r9
 8007698:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800769c:	e6e0      	b.n	8007460 <_printf_float+0x1e0>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	f104 0b1a 	add.w	fp, r4, #26
 80076a6:	e7f4      	b.n	8007692 <_printf_float+0x412>
 80076a8:	2301      	movs	r3, #1
 80076aa:	4642      	mov	r2, r8
 80076ac:	e7e1      	b.n	8007672 <_printf_float+0x3f2>
 80076ae:	2301      	movs	r3, #1
 80076b0:	464a      	mov	r2, r9
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	f43f ae3c 	beq.w	8007336 <_printf_float+0xb6>
 80076be:	f108 0801 	add.w	r8, r8, #1
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80076c6:	1a5b      	subs	r3, r3, r1
 80076c8:	4543      	cmp	r3, r8
 80076ca:	dcf0      	bgt.n	80076ae <_printf_float+0x42e>
 80076cc:	e6fd      	b.n	80074ca <_printf_float+0x24a>
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	f104 0919 	add.w	r9, r4, #25
 80076d6:	e7f4      	b.n	80076c2 <_printf_float+0x442>

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4698      	mov	r8, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	4607      	mov	r7, r0
 80076e6:	4293      	cmp	r3, r2
 80076e8:	bfb8      	it	lt
 80076ea:	4613      	movlt	r3, r2
 80076ec:	6033      	str	r3, [r6, #0]
 80076ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076f2:	460c      	mov	r4, r1
 80076f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc2b      	bgt.n	8007778 <_printf_common+0xa0>
 8007720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	3b00      	subs	r3, #0
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d430      	bmi.n	8007792 <_printf_common+0xba>
 8007730:	4641      	mov	r1, r8
 8007732:	4638      	mov	r0, r7
 8007734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007738:	47c8      	blx	r9
 800773a:	3001      	adds	r0, #1
 800773c:	d023      	beq.n	8007786 <_printf_common+0xae>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	6922      	ldr	r2, [r4, #16]
 8007742:	f003 0306 	and.w	r3, r3, #6
 8007746:	2b04      	cmp	r3, #4
 8007748:	bf14      	ite	ne
 800774a:	2500      	movne	r5, #0
 800774c:	6833      	ldreq	r3, [r6, #0]
 800774e:	f04f 0600 	mov.w	r6, #0
 8007752:	bf08      	it	eq
 8007754:	68e5      	ldreq	r5, [r4, #12]
 8007756:	f104 041a 	add.w	r4, r4, #26
 800775a:	bf08      	it	eq
 800775c:	1aed      	subeq	r5, r5, r3
 800775e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007762:	bf08      	it	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	4293      	cmp	r3, r2
 800776a:	bfc4      	itt	gt
 800776c:	1a9b      	subgt	r3, r3, r2
 800776e:	18ed      	addgt	r5, r5, r3
 8007770:	42b5      	cmp	r5, r6
 8007772:	d11a      	bne.n	80077aa <_printf_common+0xd2>
 8007774:	2000      	movs	r0, #0
 8007776:	e008      	b.n	800778a <_printf_common+0xb2>
 8007778:	2301      	movs	r3, #1
 800777a:	4652      	mov	r2, sl
 800777c:	4641      	mov	r1, r8
 800777e:	4638      	mov	r0, r7
 8007780:	47c8      	blx	r9
 8007782:	3001      	adds	r0, #1
 8007784:	d103      	bne.n	800778e <_printf_common+0xb6>
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778e:	3501      	adds	r5, #1
 8007790:	e7c1      	b.n	8007716 <_printf_common+0x3e>
 8007792:	2030      	movs	r0, #48	@ 0x30
 8007794:	18e1      	adds	r1, r4, r3
 8007796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077a0:	4422      	add	r2, r4
 80077a2:	3302      	adds	r3, #2
 80077a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077a8:	e7c2      	b.n	8007730 <_printf_common+0x58>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4622      	mov	r2, r4
 80077ae:	4641      	mov	r1, r8
 80077b0:	4638      	mov	r0, r7
 80077b2:	47c8      	blx	r9
 80077b4:	3001      	adds	r0, #1
 80077b6:	d0e6      	beq.n	8007786 <_printf_common+0xae>
 80077b8:	3601      	adds	r6, #1
 80077ba:	e7d9      	b.n	8007770 <_printf_common+0x98>

080077bc <_printf_i>:
 80077bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	7e0f      	ldrb	r7, [r1, #24]
 80077c2:	4691      	mov	r9, r2
 80077c4:	2f78      	cmp	r7, #120	@ 0x78
 80077c6:	4680      	mov	r8, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	469a      	mov	sl, r3
 80077cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077d2:	d807      	bhi.n	80077e4 <_printf_i+0x28>
 80077d4:	2f62      	cmp	r7, #98	@ 0x62
 80077d6:	d80a      	bhi.n	80077ee <_printf_i+0x32>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f000 80d3 	beq.w	8007984 <_printf_i+0x1c8>
 80077de:	2f58      	cmp	r7, #88	@ 0x58
 80077e0:	f000 80ba 	beq.w	8007958 <_printf_i+0x19c>
 80077e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077ec:	e03a      	b.n	8007864 <_printf_i+0xa8>
 80077ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077f2:	2b15      	cmp	r3, #21
 80077f4:	d8f6      	bhi.n	80077e4 <_printf_i+0x28>
 80077f6:	a101      	add	r1, pc, #4	@ (adr r1, 80077fc <_printf_i+0x40>)
 80077f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077fc:	08007855 	.word	0x08007855
 8007800:	08007869 	.word	0x08007869
 8007804:	080077e5 	.word	0x080077e5
 8007808:	080077e5 	.word	0x080077e5
 800780c:	080077e5 	.word	0x080077e5
 8007810:	080077e5 	.word	0x080077e5
 8007814:	08007869 	.word	0x08007869
 8007818:	080077e5 	.word	0x080077e5
 800781c:	080077e5 	.word	0x080077e5
 8007820:	080077e5 	.word	0x080077e5
 8007824:	080077e5 	.word	0x080077e5
 8007828:	0800796b 	.word	0x0800796b
 800782c:	08007893 	.word	0x08007893
 8007830:	08007925 	.word	0x08007925
 8007834:	080077e5 	.word	0x080077e5
 8007838:	080077e5 	.word	0x080077e5
 800783c:	0800798d 	.word	0x0800798d
 8007840:	080077e5 	.word	0x080077e5
 8007844:	08007893 	.word	0x08007893
 8007848:	080077e5 	.word	0x080077e5
 800784c:	080077e5 	.word	0x080077e5
 8007850:	0800792d 	.word	0x0800792d
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	1d1a      	adds	r2, r3, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6032      	str	r2, [r6, #0]
 800785c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007864:	2301      	movs	r3, #1
 8007866:	e09e      	b.n	80079a6 <_printf_i+0x1ea>
 8007868:	6833      	ldr	r3, [r6, #0]
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	1d19      	adds	r1, r3, #4
 800786e:	6031      	str	r1, [r6, #0]
 8007870:	0606      	lsls	r6, r0, #24
 8007872:	d501      	bpl.n	8007878 <_printf_i+0xbc>
 8007874:	681d      	ldr	r5, [r3, #0]
 8007876:	e003      	b.n	8007880 <_printf_i+0xc4>
 8007878:	0645      	lsls	r5, r0, #25
 800787a:	d5fb      	bpl.n	8007874 <_printf_i+0xb8>
 800787c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007880:	2d00      	cmp	r5, #0
 8007882:	da03      	bge.n	800788c <_printf_i+0xd0>
 8007884:	232d      	movs	r3, #45	@ 0x2d
 8007886:	426d      	negs	r5, r5
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800788c:	230a      	movs	r3, #10
 800788e:	4859      	ldr	r0, [pc, #356]	@ (80079f4 <_printf_i+0x238>)
 8007890:	e011      	b.n	80078b6 <_printf_i+0xfa>
 8007892:	6821      	ldr	r1, [r4, #0]
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	0608      	lsls	r0, r1, #24
 8007898:	f853 5b04 	ldr.w	r5, [r3], #4
 800789c:	d402      	bmi.n	80078a4 <_printf_i+0xe8>
 800789e:	0649      	lsls	r1, r1, #25
 80078a0:	bf48      	it	mi
 80078a2:	b2ad      	uxthmi	r5, r5
 80078a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078a6:	6033      	str	r3, [r6, #0]
 80078a8:	bf14      	ite	ne
 80078aa:	230a      	movne	r3, #10
 80078ac:	2308      	moveq	r3, #8
 80078ae:	4851      	ldr	r0, [pc, #324]	@ (80079f4 <_printf_i+0x238>)
 80078b0:	2100      	movs	r1, #0
 80078b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078b6:	6866      	ldr	r6, [r4, #4]
 80078b8:	2e00      	cmp	r6, #0
 80078ba:	bfa8      	it	ge
 80078bc:	6821      	ldrge	r1, [r4, #0]
 80078be:	60a6      	str	r6, [r4, #8]
 80078c0:	bfa4      	itt	ge
 80078c2:	f021 0104 	bicge.w	r1, r1, #4
 80078c6:	6021      	strge	r1, [r4, #0]
 80078c8:	b90d      	cbnz	r5, 80078ce <_printf_i+0x112>
 80078ca:	2e00      	cmp	r6, #0
 80078cc:	d04b      	beq.n	8007966 <_printf_i+0x1aa>
 80078ce:	4616      	mov	r6, r2
 80078d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80078d4:	fb03 5711 	mls	r7, r3, r1, r5
 80078d8:	5dc7      	ldrb	r7, [r0, r7]
 80078da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078de:	462f      	mov	r7, r5
 80078e0:	42bb      	cmp	r3, r7
 80078e2:	460d      	mov	r5, r1
 80078e4:	d9f4      	bls.n	80078d0 <_printf_i+0x114>
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d10b      	bne.n	8007902 <_printf_i+0x146>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	07df      	lsls	r7, r3, #31
 80078ee:	d508      	bpl.n	8007902 <_printf_i+0x146>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	6861      	ldr	r1, [r4, #4]
 80078f4:	4299      	cmp	r1, r3
 80078f6:	bfde      	ittt	le
 80078f8:	2330      	movle	r3, #48	@ 0x30
 80078fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007902:	1b92      	subs	r2, r2, r6
 8007904:	6122      	str	r2, [r4, #16]
 8007906:	464b      	mov	r3, r9
 8007908:	4621      	mov	r1, r4
 800790a:	4640      	mov	r0, r8
 800790c:	f8cd a000 	str.w	sl, [sp]
 8007910:	aa03      	add	r2, sp, #12
 8007912:	f7ff fee1 	bl	80076d8 <_printf_common>
 8007916:	3001      	adds	r0, #1
 8007918:	d14a      	bne.n	80079b0 <_printf_i+0x1f4>
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	b004      	add	sp, #16
 8007920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	f043 0320 	orr.w	r3, r3, #32
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	2778      	movs	r7, #120	@ 0x78
 800792e:	4832      	ldr	r0, [pc, #200]	@ (80079f8 <_printf_i+0x23c>)
 8007930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	6831      	ldr	r1, [r6, #0]
 8007938:	061f      	lsls	r7, r3, #24
 800793a:	f851 5b04 	ldr.w	r5, [r1], #4
 800793e:	d402      	bmi.n	8007946 <_printf_i+0x18a>
 8007940:	065f      	lsls	r7, r3, #25
 8007942:	bf48      	it	mi
 8007944:	b2ad      	uxthmi	r5, r5
 8007946:	6031      	str	r1, [r6, #0]
 8007948:	07d9      	lsls	r1, r3, #31
 800794a:	bf44      	itt	mi
 800794c:	f043 0320 	orrmi.w	r3, r3, #32
 8007950:	6023      	strmi	r3, [r4, #0]
 8007952:	b11d      	cbz	r5, 800795c <_printf_i+0x1a0>
 8007954:	2310      	movs	r3, #16
 8007956:	e7ab      	b.n	80078b0 <_printf_i+0xf4>
 8007958:	4826      	ldr	r0, [pc, #152]	@ (80079f4 <_printf_i+0x238>)
 800795a:	e7e9      	b.n	8007930 <_printf_i+0x174>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	f023 0320 	bic.w	r3, r3, #32
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e7f6      	b.n	8007954 <_printf_i+0x198>
 8007966:	4616      	mov	r6, r2
 8007968:	e7bd      	b.n	80078e6 <_printf_i+0x12a>
 800796a:	6833      	ldr	r3, [r6, #0]
 800796c:	6825      	ldr	r5, [r4, #0]
 800796e:	1d18      	adds	r0, r3, #4
 8007970:	6961      	ldr	r1, [r4, #20]
 8007972:	6030      	str	r0, [r6, #0]
 8007974:	062e      	lsls	r6, r5, #24
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	d501      	bpl.n	800797e <_printf_i+0x1c2>
 800797a:	6019      	str	r1, [r3, #0]
 800797c:	e002      	b.n	8007984 <_printf_i+0x1c8>
 800797e:	0668      	lsls	r0, r5, #25
 8007980:	d5fb      	bpl.n	800797a <_printf_i+0x1be>
 8007982:	8019      	strh	r1, [r3, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	4616      	mov	r6, r2
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	e7bc      	b.n	8007906 <_printf_i+0x14a>
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	2100      	movs	r1, #0
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	6032      	str	r2, [r6, #0]
 8007994:	681e      	ldr	r6, [r3, #0]
 8007996:	6862      	ldr	r2, [r4, #4]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f9e4 	bl	8007d66 <memchr>
 800799e:	b108      	cbz	r0, 80079a4 <_printf_i+0x1e8>
 80079a0:	1b80      	subs	r0, r0, r6
 80079a2:	6060      	str	r0, [r4, #4]
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	2300      	movs	r3, #0
 80079aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ae:	e7aa      	b.n	8007906 <_printf_i+0x14a>
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	47d0      	blx	sl
 80079ba:	3001      	adds	r0, #1
 80079bc:	d0ad      	beq.n	800791a <_printf_i+0x15e>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	079b      	lsls	r3, r3, #30
 80079c2:	d413      	bmi.n	80079ec <_printf_i+0x230>
 80079c4:	68e0      	ldr	r0, [r4, #12]
 80079c6:	9b03      	ldr	r3, [sp, #12]
 80079c8:	4298      	cmp	r0, r3
 80079ca:	bfb8      	it	lt
 80079cc:	4618      	movlt	r0, r3
 80079ce:	e7a6      	b.n	800791e <_printf_i+0x162>
 80079d0:	2301      	movs	r3, #1
 80079d2:	4632      	mov	r2, r6
 80079d4:	4649      	mov	r1, r9
 80079d6:	4640      	mov	r0, r8
 80079d8:	47d0      	blx	sl
 80079da:	3001      	adds	r0, #1
 80079dc:	d09d      	beq.n	800791a <_printf_i+0x15e>
 80079de:	3501      	adds	r5, #1
 80079e0:	68e3      	ldr	r3, [r4, #12]
 80079e2:	9903      	ldr	r1, [sp, #12]
 80079e4:	1a5b      	subs	r3, r3, r1
 80079e6:	42ab      	cmp	r3, r5
 80079e8:	dcf2      	bgt.n	80079d0 <_printf_i+0x214>
 80079ea:	e7eb      	b.n	80079c4 <_printf_i+0x208>
 80079ec:	2500      	movs	r5, #0
 80079ee:	f104 0619 	add.w	r6, r4, #25
 80079f2:	e7f5      	b.n	80079e0 <_printf_i+0x224>
 80079f4:	08009e34 	.word	0x08009e34
 80079f8:	08009e45 	.word	0x08009e45

080079fc <std>:
 80079fc:	2300      	movs	r3, #0
 80079fe:	b510      	push	{r4, lr}
 8007a00:	4604      	mov	r4, r0
 8007a02:	e9c0 3300 	strd	r3, r3, [r0]
 8007a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a0a:	6083      	str	r3, [r0, #8]
 8007a0c:	8181      	strh	r1, [r0, #12]
 8007a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a10:	81c2      	strh	r2, [r0, #14]
 8007a12:	6183      	str	r3, [r0, #24]
 8007a14:	4619      	mov	r1, r3
 8007a16:	2208      	movs	r2, #8
 8007a18:	305c      	adds	r0, #92	@ 0x5c
 8007a1a:	f000 f914 	bl	8007c46 <memset>
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <std+0x58>)
 8007a20:	6224      	str	r4, [r4, #32]
 8007a22:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <std+0x5c>)
 8007a26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <std+0x60>)
 8007a2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a60 <std+0x64>)
 8007a2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a30:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <std+0x68>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d006      	beq.n	8007a44 <std+0x48>
 8007a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a3a:	4294      	cmp	r4, r2
 8007a3c:	d002      	beq.n	8007a44 <std+0x48>
 8007a3e:	33d0      	adds	r3, #208	@ 0xd0
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d105      	bne.n	8007a50 <std+0x54>
 8007a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4c:	f000 b988 	b.w	8007d60 <__retarget_lock_init_recursive>
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	bf00      	nop
 8007a54:	08007bc1 	.word	0x08007bc1
 8007a58:	08007be3 	.word	0x08007be3
 8007a5c:	08007c1b 	.word	0x08007c1b
 8007a60:	08007c3f 	.word	0x08007c3f
 8007a64:	200003f0 	.word	0x200003f0

08007a68 <stdio_exit_handler>:
 8007a68:	4a02      	ldr	r2, [pc, #8]	@ (8007a74 <stdio_exit_handler+0xc>)
 8007a6a:	4903      	ldr	r1, [pc, #12]	@ (8007a78 <stdio_exit_handler+0x10>)
 8007a6c:	4803      	ldr	r0, [pc, #12]	@ (8007a7c <stdio_exit_handler+0x14>)
 8007a6e:	f000 b869 	b.w	8007b44 <_fwalk_sglue>
 8007a72:	bf00      	nop
 8007a74:	20000024 	.word	0x20000024
 8007a78:	08009569 	.word	0x08009569
 8007a7c:	20000034 	.word	0x20000034

08007a80 <cleanup_stdio>:
 8007a80:	6841      	ldr	r1, [r0, #4]
 8007a82:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <cleanup_stdio+0x34>)
 8007a84:	b510      	push	{r4, lr}
 8007a86:	4299      	cmp	r1, r3
 8007a88:	4604      	mov	r4, r0
 8007a8a:	d001      	beq.n	8007a90 <cleanup_stdio+0x10>
 8007a8c:	f001 fd6c 	bl	8009568 <_fflush_r>
 8007a90:	68a1      	ldr	r1, [r4, #8]
 8007a92:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <cleanup_stdio+0x38>)
 8007a94:	4299      	cmp	r1, r3
 8007a96:	d002      	beq.n	8007a9e <cleanup_stdio+0x1e>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f001 fd65 	bl	8009568 <_fflush_r>
 8007a9e:	68e1      	ldr	r1, [r4, #12]
 8007aa0:	4b06      	ldr	r3, [pc, #24]	@ (8007abc <cleanup_stdio+0x3c>)
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	d004      	beq.n	8007ab0 <cleanup_stdio+0x30>
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aac:	f001 bd5c 	b.w	8009568 <_fflush_r>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	bf00      	nop
 8007ab4:	200003f0 	.word	0x200003f0
 8007ab8:	20000458 	.word	0x20000458
 8007abc:	200004c0 	.word	0x200004c0

08007ac0 <global_stdio_init.part.0>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8007af0 <global_stdio_init.part.0+0x30>)
 8007ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8007af4 <global_stdio_init.part.0+0x34>)
 8007ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8007af8 <global_stdio_init.part.0+0x38>)
 8007ac8:	4620      	mov	r0, r4
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	2104      	movs	r1, #4
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f7ff ff94 	bl	80079fc <std>
 8007ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2109      	movs	r1, #9
 8007adc:	f7ff ff8e 	bl	80079fc <std>
 8007ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aea:	2112      	movs	r1, #18
 8007aec:	f7ff bf86 	b.w	80079fc <std>
 8007af0:	20000528 	.word	0x20000528
 8007af4:	200003f0 	.word	0x200003f0
 8007af8:	08007a69 	.word	0x08007a69

08007afc <__sfp_lock_acquire>:
 8007afc:	4801      	ldr	r0, [pc, #4]	@ (8007b04 <__sfp_lock_acquire+0x8>)
 8007afe:	f000 b930 	b.w	8007d62 <__retarget_lock_acquire_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000531 	.word	0x20000531

08007b08 <__sfp_lock_release>:
 8007b08:	4801      	ldr	r0, [pc, #4]	@ (8007b10 <__sfp_lock_release+0x8>)
 8007b0a:	f000 b92b 	b.w	8007d64 <__retarget_lock_release_recursive>
 8007b0e:	bf00      	nop
 8007b10:	20000531 	.word	0x20000531

08007b14 <__sinit>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	4604      	mov	r4, r0
 8007b18:	f7ff fff0 	bl	8007afc <__sfp_lock_acquire>
 8007b1c:	6a23      	ldr	r3, [r4, #32]
 8007b1e:	b11b      	cbz	r3, 8007b28 <__sinit+0x14>
 8007b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b24:	f7ff bff0 	b.w	8007b08 <__sfp_lock_release>
 8007b28:	4b04      	ldr	r3, [pc, #16]	@ (8007b3c <__sinit+0x28>)
 8007b2a:	6223      	str	r3, [r4, #32]
 8007b2c:	4b04      	ldr	r3, [pc, #16]	@ (8007b40 <__sinit+0x2c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f5      	bne.n	8007b20 <__sinit+0xc>
 8007b34:	f7ff ffc4 	bl	8007ac0 <global_stdio_init.part.0>
 8007b38:	e7f2      	b.n	8007b20 <__sinit+0xc>
 8007b3a:	bf00      	nop
 8007b3c:	08007a81 	.word	0x08007a81
 8007b40:	20000528 	.word	0x20000528

08007b44 <_fwalk_sglue>:
 8007b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4607      	mov	r7, r0
 8007b4a:	4688      	mov	r8, r1
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	2600      	movs	r6, #0
 8007b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b54:	f1b9 0901 	subs.w	r9, r9, #1
 8007b58:	d505      	bpl.n	8007b66 <_fwalk_sglue+0x22>
 8007b5a:	6824      	ldr	r4, [r4, #0]
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	d1f7      	bne.n	8007b50 <_fwalk_sglue+0xc>
 8007b60:	4630      	mov	r0, r6
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b66:	89ab      	ldrh	r3, [r5, #12]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d907      	bls.n	8007b7c <_fwalk_sglue+0x38>
 8007b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b70:	3301      	adds	r3, #1
 8007b72:	d003      	beq.n	8007b7c <_fwalk_sglue+0x38>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c0      	blx	r8
 8007b7a:	4306      	orrs	r6, r0
 8007b7c:	3568      	adds	r5, #104	@ 0x68
 8007b7e:	e7e9      	b.n	8007b54 <_fwalk_sglue+0x10>

08007b80 <siprintf>:
 8007b80:	b40e      	push	{r1, r2, r3}
 8007b82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b86:	b500      	push	{lr}
 8007b88:	b09c      	sub	sp, #112	@ 0x70
 8007b8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b8c:	9002      	str	r0, [sp, #8]
 8007b8e:	9006      	str	r0, [sp, #24]
 8007b90:	9107      	str	r1, [sp, #28]
 8007b92:	9104      	str	r1, [sp, #16]
 8007b94:	4808      	ldr	r0, [pc, #32]	@ (8007bb8 <siprintf+0x38>)
 8007b96:	4909      	ldr	r1, [pc, #36]	@ (8007bbc <siprintf+0x3c>)
 8007b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9c:	9105      	str	r1, [sp, #20]
 8007b9e:	6800      	ldr	r0, [r0, #0]
 8007ba0:	a902      	add	r1, sp, #8
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	f001 fb64 	bl	8009270 <_svfiprintf_r>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	9b02      	ldr	r3, [sp, #8]
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	b01c      	add	sp, #112	@ 0x70
 8007bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb4:	b003      	add	sp, #12
 8007bb6:	4770      	bx	lr
 8007bb8:	20000030 	.word	0x20000030
 8007bbc:	ffff0208 	.word	0xffff0208

08007bc0 <__sread>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	f000 f86c 	bl	8007ca4 <_read_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	bfab      	itete	ge
 8007bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bd4:	181b      	addge	r3, r3, r0
 8007bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bda:	bfac      	ite	ge
 8007bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bde:	81a3      	strhlt	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__swrite>:
 8007be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	461f      	mov	r7, r3
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	4605      	mov	r5, r0
 8007bec:	05db      	lsls	r3, r3, #23
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4616      	mov	r6, r2
 8007bf2:	d505      	bpl.n	8007c00 <__swrite+0x1e>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfc:	f000 f840 	bl	8007c80 <_lseek_r>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	4632      	mov	r2, r6
 8007c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	f000 b867 	b.w	8007ce8 <_write_r>

08007c1a <__sseek>:
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c22:	f000 f82d 	bl	8007c80 <_lseek_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	bf15      	itete	ne
 8007c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c36:	81a3      	strheq	r3, [r4, #12]
 8007c38:	bf18      	it	ne
 8007c3a:	81a3      	strhne	r3, [r4, #12]
 8007c3c:	bd10      	pop	{r4, pc}

08007c3e <__sclose>:
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 b80d 	b.w	8007c60 <_close_r>

08007c46 <memset>:
 8007c46:	4603      	mov	r3, r0
 8007c48:	4402      	add	r2, r0
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d100      	bne.n	8007c50 <memset+0xa>
 8007c4e:	4770      	bx	lr
 8007c50:	f803 1b01 	strb.w	r1, [r3], #1
 8007c54:	e7f9      	b.n	8007c4a <memset+0x4>
	...

08007c58 <_localeconv_r>:
 8007c58:	4800      	ldr	r0, [pc, #0]	@ (8007c5c <_localeconv_r+0x4>)
 8007c5a:	4770      	bx	lr
 8007c5c:	20000170 	.word	0x20000170

08007c60 <_close_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	2300      	movs	r3, #0
 8007c64:	4d05      	ldr	r5, [pc, #20]	@ (8007c7c <_close_r+0x1c>)
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7fa ff15 	bl	8002a9a <_close>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_close_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_close_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	2000052c 	.word	0x2000052c

08007c80 <_lseek_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4d05      	ldr	r5, [pc, #20]	@ (8007ca0 <_lseek_r+0x20>)
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7fa ff27 	bl	8002ae2 <_lseek>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_lseek_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_lseek_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	2000052c 	.word	0x2000052c

08007ca4 <_read_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	4d05      	ldr	r5, [pc, #20]	@ (8007cc4 <_read_r+0x20>)
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f7fa feb8 	bl	8002a28 <_read>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_read_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_read_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	2000052c 	.word	0x2000052c

08007cc8 <_sbrk_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4d05      	ldr	r5, [pc, #20]	@ (8007ce4 <_sbrk_r+0x1c>)
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7fa ff12 	bl	8002afc <_sbrk>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_sbrk_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_sbrk_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	2000052c 	.word	0x2000052c

08007ce8 <_write_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4d05      	ldr	r5, [pc, #20]	@ (8007d08 <_write_r+0x20>)
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7fa feb3 	bl	8002a62 <_write>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_write_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_write_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	2000052c 	.word	0x2000052c

08007d0c <__errno>:
 8007d0c:	4b01      	ldr	r3, [pc, #4]	@ (8007d14 <__errno+0x8>)
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000030 	.word	0x20000030

08007d18 <__libc_init_array>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	2600      	movs	r6, #0
 8007d1c:	4d0c      	ldr	r5, [pc, #48]	@ (8007d50 <__libc_init_array+0x38>)
 8007d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8007d54 <__libc_init_array+0x3c>)
 8007d20:	1b64      	subs	r4, r4, r5
 8007d22:	10a4      	asrs	r4, r4, #2
 8007d24:	42a6      	cmp	r6, r4
 8007d26:	d109      	bne.n	8007d3c <__libc_init_array+0x24>
 8007d28:	f001 ffaa 	bl	8009c80 <_init>
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	4d0a      	ldr	r5, [pc, #40]	@ (8007d58 <__libc_init_array+0x40>)
 8007d30:	4c0a      	ldr	r4, [pc, #40]	@ (8007d5c <__libc_init_array+0x44>)
 8007d32:	1b64      	subs	r4, r4, r5
 8007d34:	10a4      	asrs	r4, r4, #2
 8007d36:	42a6      	cmp	r6, r4
 8007d38:	d105      	bne.n	8007d46 <__libc_init_array+0x2e>
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d40:	4798      	blx	r3
 8007d42:	3601      	adds	r6, #1
 8007d44:	e7ee      	b.n	8007d24 <__libc_init_array+0xc>
 8007d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4a:	4798      	blx	r3
 8007d4c:	3601      	adds	r6, #1
 8007d4e:	e7f2      	b.n	8007d36 <__libc_init_array+0x1e>
 8007d50:	0800a198 	.word	0x0800a198
 8007d54:	0800a198 	.word	0x0800a198
 8007d58:	0800a198 	.word	0x0800a198
 8007d5c:	0800a19c 	.word	0x0800a19c

08007d60 <__retarget_lock_init_recursive>:
 8007d60:	4770      	bx	lr

08007d62 <__retarget_lock_acquire_recursive>:
 8007d62:	4770      	bx	lr

08007d64 <__retarget_lock_release_recursive>:
 8007d64:	4770      	bx	lr

08007d66 <memchr>:
 8007d66:	4603      	mov	r3, r0
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	b2c9      	uxtb	r1, r1
 8007d6c:	4402      	add	r2, r0
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	d101      	bne.n	8007d78 <memchr+0x12>
 8007d74:	2000      	movs	r0, #0
 8007d76:	e003      	b.n	8007d80 <memchr+0x1a>
 8007d78:	7804      	ldrb	r4, [r0, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	428c      	cmp	r4, r1
 8007d7e:	d1f6      	bne.n	8007d6e <memchr+0x8>
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <quorem>:
 8007d82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d86:	6903      	ldr	r3, [r0, #16]
 8007d88:	690c      	ldr	r4, [r1, #16]
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	db7e      	blt.n	8007e8e <quorem+0x10c>
 8007d90:	3c01      	subs	r4, #1
 8007d92:	00a3      	lsls	r3, r4, #2
 8007d94:	f100 0514 	add.w	r5, r0, #20
 8007d98:	f101 0814 	add.w	r8, r1, #20
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dac:	3301      	adds	r3, #1
 8007dae:	429a      	cmp	r2, r3
 8007db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007db8:	d32e      	bcc.n	8007e18 <quorem+0x96>
 8007dba:	f04f 0a00 	mov.w	sl, #0
 8007dbe:	46c4      	mov	ip, r8
 8007dc0:	46ae      	mov	lr, r5
 8007dc2:	46d3      	mov	fp, sl
 8007dc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dc8:	b298      	uxth	r0, r3
 8007dca:	fb06 a000 	mla	r0, r6, r0, sl
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	0c02      	lsrs	r2, r0, #16
 8007dd2:	fb06 2303 	mla	r3, r6, r3, r2
 8007dd6:	f8de 2000 	ldr.w	r2, [lr]
 8007dda:	b280      	uxth	r0, r0
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	1a12      	subs	r2, r2, r0
 8007de0:	445a      	add	r2, fp
 8007de2:	f8de 0000 	ldr.w	r0, [lr]
 8007de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007df0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007df4:	b292      	uxth	r2, r2
 8007df6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dfa:	45e1      	cmp	r9, ip
 8007dfc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e00:	f84e 2b04 	str.w	r2, [lr], #4
 8007e04:	d2de      	bcs.n	8007dc4 <quorem+0x42>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	58eb      	ldr	r3, [r5, r3]
 8007e0a:	b92b      	cbnz	r3, 8007e18 <quorem+0x96>
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	3b04      	subs	r3, #4
 8007e10:	429d      	cmp	r5, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	d32f      	bcc.n	8007e76 <quorem+0xf4>
 8007e16:	613c      	str	r4, [r7, #16]
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f001 f8c5 	bl	8008fa8 <__mcmp>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	db25      	blt.n	8007e6e <quorem+0xec>
 8007e22:	4629      	mov	r1, r5
 8007e24:	2000      	movs	r0, #0
 8007e26:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e2a:	f8d1 c000 	ldr.w	ip, [r1]
 8007e2e:	fa1f fe82 	uxth.w	lr, r2
 8007e32:	fa1f f38c 	uxth.w	r3, ip
 8007e36:	eba3 030e 	sub.w	r3, r3, lr
 8007e3a:	4403      	add	r3, r0
 8007e3c:	0c12      	lsrs	r2, r2, #16
 8007e3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e4c:	45c1      	cmp	r9, r8
 8007e4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e52:	f841 3b04 	str.w	r3, [r1], #4
 8007e56:	d2e6      	bcs.n	8007e26 <quorem+0xa4>
 8007e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e60:	b922      	cbnz	r2, 8007e6c <quorem+0xea>
 8007e62:	3b04      	subs	r3, #4
 8007e64:	429d      	cmp	r5, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	d30b      	bcc.n	8007e82 <quorem+0x100>
 8007e6a:	613c      	str	r4, [r7, #16]
 8007e6c:	3601      	adds	r6, #1
 8007e6e:	4630      	mov	r0, r6
 8007e70:	b003      	add	sp, #12
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d1cb      	bne.n	8007e16 <quorem+0x94>
 8007e7e:	3c01      	subs	r4, #1
 8007e80:	e7c6      	b.n	8007e10 <quorem+0x8e>
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	d1ef      	bne.n	8007e6a <quorem+0xe8>
 8007e8a:	3c01      	subs	r4, #1
 8007e8c:	e7ea      	b.n	8007e64 <quorem+0xe2>
 8007e8e:	2000      	movs	r0, #0
 8007e90:	e7ee      	b.n	8007e70 <quorem+0xee>
 8007e92:	0000      	movs	r0, r0
 8007e94:	0000      	movs	r0, r0
	...

08007e98 <_dtoa_r>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	69c7      	ldr	r7, [r0, #28]
 8007ea2:	b097      	sub	sp, #92	@ 0x5c
 8007ea4:	4683      	mov	fp, r0
 8007ea6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007eaa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007eac:	b97f      	cbnz	r7, 8007ece <_dtoa_r+0x36>
 8007eae:	2010      	movs	r0, #16
 8007eb0:	f7ff f88a 	bl	8006fc8 <malloc>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007eba:	b920      	cbnz	r0, 8007ec6 <_dtoa_r+0x2e>
 8007ebc:	21ef      	movs	r1, #239	@ 0xef
 8007ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8008160 <_dtoa_r+0x2c8>)
 8007ec0:	48a8      	ldr	r0, [pc, #672]	@ (8008164 <_dtoa_r+0x2cc>)
 8007ec2:	f001 fba1 	bl	8009608 <__assert_func>
 8007ec6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007eca:	6007      	str	r7, [r0, #0]
 8007ecc:	60c7      	str	r7, [r0, #12]
 8007ece:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	b159      	cbz	r1, 8007eee <_dtoa_r+0x56>
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4093      	lsls	r3, r2
 8007edc:	604a      	str	r2, [r1, #4]
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	4658      	mov	r0, fp
 8007ee2:	f000 fe29 	bl	8008b38 <_Bfree>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	1e2b      	subs	r3, r5, #0
 8007ef0:	bfaf      	iteee	ge
 8007ef2:	2300      	movge	r3, #0
 8007ef4:	2201      	movlt	r2, #1
 8007ef6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007efa:	9303      	strlt	r3, [sp, #12]
 8007efc:	bfa8      	it	ge
 8007efe:	6033      	strge	r3, [r6, #0]
 8007f00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f04:	4b98      	ldr	r3, [pc, #608]	@ (8008168 <_dtoa_r+0x2d0>)
 8007f06:	bfb8      	it	lt
 8007f08:	6032      	strlt	r2, [r6, #0]
 8007f0a:	ea33 0308 	bics.w	r3, r3, r8
 8007f0e:	d112      	bne.n	8007f36 <_dtoa_r+0x9e>
 8007f10:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f1c:	4323      	orrs	r3, r4
 8007f1e:	f000 8550 	beq.w	80089c2 <_dtoa_r+0xb2a>
 8007f22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800816c <_dtoa_r+0x2d4>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8552 	beq.w	80089d2 <_dtoa_r+0xb3a>
 8007f2e:	f10a 0303 	add.w	r3, sl, #3
 8007f32:	f000 bd4c 	b.w	80089ce <_dtoa_r+0xb36>
 8007f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f7f8 fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	b158      	cbz	r0, 8007f66 <_dtoa_r+0xce>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f56:	b113      	cbz	r3, 8007f5e <_dtoa_r+0xc6>
 8007f58:	4b85      	ldr	r3, [pc, #532]	@ (8008170 <_dtoa_r+0x2d8>)
 8007f5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008174 <_dtoa_r+0x2dc>
 8007f62:	f000 bd36 	b.w	80089d2 <_dtoa_r+0xb3a>
 8007f66:	ab14      	add	r3, sp, #80	@ 0x50
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	ab15      	add	r3, sp, #84	@ 0x54
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4658      	mov	r0, fp
 8007f70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f74:	f001 f8c8 	bl	8009108 <__d2b>
 8007f78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007f7c:	4681      	mov	r9, r0
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	d077      	beq.n	8008072 <_dtoa_r+0x1da>
 8007f82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f98:	9712      	str	r7, [sp, #72]	@ 0x48
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4b76      	ldr	r3, [pc, #472]	@ (8008178 <_dtoa_r+0x2e0>)
 8007fa0:	f7f8 f8e2 	bl	8000168 <__aeabi_dsub>
 8007fa4:	a368      	add	r3, pc, #416	@ (adr r3, 8008148 <_dtoa_r+0x2b0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	a368      	add	r3, pc, #416	@ (adr r3, 8008150 <_dtoa_r+0x2b8>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 f8da 	bl	800016c <__adddf3>
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4630      	mov	r0, r6
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	f7f8 fa21 	bl	8000404 <__aeabi_i2d>
 8007fc2:	a365      	add	r3, pc, #404	@ (adr r3, 8008158 <_dtoa_r+0x2c0>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 fa86 	bl	80004d8 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 f8ca 	bl	800016c <__adddf3>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	f7f8 fd2c 	bl	8000a38 <__aeabi_d2iz>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 fce7 	bl	80009bc <__aeabi_dcmplt>
 8007fee:	b140      	cbz	r0, 8008002 <_dtoa_r+0x16a>
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7f8 fa07 	bl	8000404 <__aeabi_i2d>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	f7f8 fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8007ffe:	b900      	cbnz	r0, 8008002 <_dtoa_r+0x16a>
 8008000:	3f01      	subs	r7, #1
 8008002:	2f16      	cmp	r7, #22
 8008004:	d853      	bhi.n	80080ae <_dtoa_r+0x216>
 8008006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800800a:	4b5c      	ldr	r3, [pc, #368]	@ (800817c <_dtoa_r+0x2e4>)
 800800c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 fcd2 	bl	80009bc <__aeabi_dcmplt>
 8008018:	2800      	cmp	r0, #0
 800801a:	d04a      	beq.n	80080b2 <_dtoa_r+0x21a>
 800801c:	2300      	movs	r3, #0
 800801e:	3f01      	subs	r7, #1
 8008020:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008022:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008024:	1b9b      	subs	r3, r3, r6
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	bf46      	itte	mi
 800802a:	f1c3 0801 	rsbmi	r8, r3, #1
 800802e:	2300      	movmi	r3, #0
 8008030:	f04f 0800 	movpl.w	r8, #0
 8008034:	9209      	str	r2, [sp, #36]	@ 0x24
 8008036:	bf48      	it	mi
 8008038:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800803a:	2f00      	cmp	r7, #0
 800803c:	db3b      	blt.n	80080b6 <_dtoa_r+0x21e>
 800803e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008040:	970e      	str	r7, [sp, #56]	@ 0x38
 8008042:	443b      	add	r3, r7
 8008044:	9309      	str	r3, [sp, #36]	@ 0x24
 8008046:	2300      	movs	r3, #0
 8008048:	930a      	str	r3, [sp, #40]	@ 0x28
 800804a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800804c:	2b09      	cmp	r3, #9
 800804e:	d866      	bhi.n	800811e <_dtoa_r+0x286>
 8008050:	2b05      	cmp	r3, #5
 8008052:	bfc4      	itt	gt
 8008054:	3b04      	subgt	r3, #4
 8008056:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008058:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800805a:	bfc8      	it	gt
 800805c:	2400      	movgt	r4, #0
 800805e:	f1a3 0302 	sub.w	r3, r3, #2
 8008062:	bfd8      	it	le
 8008064:	2401      	movle	r4, #1
 8008066:	2b03      	cmp	r3, #3
 8008068:	d864      	bhi.n	8008134 <_dtoa_r+0x29c>
 800806a:	e8df f003 	tbb	[pc, r3]
 800806e:	382b      	.short	0x382b
 8008070:	5636      	.short	0x5636
 8008072:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008076:	441e      	add	r6, r3
 8008078:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800807c:	2b20      	cmp	r3, #32
 800807e:	bfc1      	itttt	gt
 8008080:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008084:	fa08 f803 	lslgt.w	r8, r8, r3
 8008088:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800808c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008090:	bfd6      	itet	le
 8008092:	f1c3 0320 	rsble	r3, r3, #32
 8008096:	ea48 0003 	orrgt.w	r0, r8, r3
 800809a:	fa04 f003 	lslle.w	r0, r4, r3
 800809e:	f7f8 f9a1 	bl	80003e4 <__aeabi_ui2d>
 80080a2:	2201      	movs	r2, #1
 80080a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080a8:	3e01      	subs	r6, #1
 80080aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80080ac:	e775      	b.n	8007f9a <_dtoa_r+0x102>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7b6      	b.n	8008020 <_dtoa_r+0x188>
 80080b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080b4:	e7b5      	b.n	8008022 <_dtoa_r+0x18a>
 80080b6:	427b      	negs	r3, r7
 80080b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ba:	2300      	movs	r3, #0
 80080bc:	eba8 0807 	sub.w	r8, r8, r7
 80080c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80080c2:	e7c2      	b.n	800804a <_dtoa_r+0x1b2>
 80080c4:	2300      	movs	r3, #0
 80080c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dc35      	bgt.n	800813a <_dtoa_r+0x2a2>
 80080ce:	2301      	movs	r3, #1
 80080d0:	461a      	mov	r2, r3
 80080d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80080d8:	e00b      	b.n	80080f2 <_dtoa_r+0x25a>
 80080da:	2301      	movs	r3, #1
 80080dc:	e7f3      	b.n	80080c6 <_dtoa_r+0x22e>
 80080de:	2300      	movs	r3, #0
 80080e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	9308      	str	r3, [sp, #32]
 80080e8:	3301      	adds	r3, #1
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	2301      	movlt	r3, #1
 80080f2:	2100      	movs	r1, #0
 80080f4:	2204      	movs	r2, #4
 80080f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080fa:	f102 0514 	add.w	r5, r2, #20
 80080fe:	429d      	cmp	r5, r3
 8008100:	d91f      	bls.n	8008142 <_dtoa_r+0x2aa>
 8008102:	6041      	str	r1, [r0, #4]
 8008104:	4658      	mov	r0, fp
 8008106:	f000 fcd7 	bl	8008ab8 <_Balloc>
 800810a:	4682      	mov	sl, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d139      	bne.n	8008184 <_dtoa_r+0x2ec>
 8008110:	4602      	mov	r2, r0
 8008112:	f240 11af 	movw	r1, #431	@ 0x1af
 8008116:	4b1a      	ldr	r3, [pc, #104]	@ (8008180 <_dtoa_r+0x2e8>)
 8008118:	e6d2      	b.n	8007ec0 <_dtoa_r+0x28>
 800811a:	2301      	movs	r3, #1
 800811c:	e7e0      	b.n	80080e0 <_dtoa_r+0x248>
 800811e:	2401      	movs	r4, #1
 8008120:	2300      	movs	r3, #0
 8008122:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008124:	9320      	str	r3, [sp, #128]	@ 0x80
 8008126:	f04f 33ff 	mov.w	r3, #4294967295
 800812a:	2200      	movs	r2, #0
 800812c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008130:	2312      	movs	r3, #18
 8008132:	e7d0      	b.n	80080d6 <_dtoa_r+0x23e>
 8008134:	2301      	movs	r3, #1
 8008136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008138:	e7f5      	b.n	8008126 <_dtoa_r+0x28e>
 800813a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800813c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008140:	e7d7      	b.n	80080f2 <_dtoa_r+0x25a>
 8008142:	3101      	adds	r1, #1
 8008144:	0052      	lsls	r2, r2, #1
 8008146:	e7d8      	b.n	80080fa <_dtoa_r+0x262>
 8008148:	636f4361 	.word	0x636f4361
 800814c:	3fd287a7 	.word	0x3fd287a7
 8008150:	8b60c8b3 	.word	0x8b60c8b3
 8008154:	3fc68a28 	.word	0x3fc68a28
 8008158:	509f79fb 	.word	0x509f79fb
 800815c:	3fd34413 	.word	0x3fd34413
 8008160:	08009e63 	.word	0x08009e63
 8008164:	08009e7a 	.word	0x08009e7a
 8008168:	7ff00000 	.word	0x7ff00000
 800816c:	08009e5f 	.word	0x08009e5f
 8008170:	08009e33 	.word	0x08009e33
 8008174:	08009e32 	.word	0x08009e32
 8008178:	3ff80000 	.word	0x3ff80000
 800817c:	08009f70 	.word	0x08009f70
 8008180:	08009ed2 	.word	0x08009ed2
 8008184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	9b07      	ldr	r3, [sp, #28]
 800818c:	2b0e      	cmp	r3, #14
 800818e:	f200 80a4 	bhi.w	80082da <_dtoa_r+0x442>
 8008192:	2c00      	cmp	r4, #0
 8008194:	f000 80a1 	beq.w	80082da <_dtoa_r+0x442>
 8008198:	2f00      	cmp	r7, #0
 800819a:	dd33      	ble.n	8008204 <_dtoa_r+0x36c>
 800819c:	4b86      	ldr	r3, [pc, #536]	@ (80083b8 <_dtoa_r+0x520>)
 800819e:	f007 020f 	and.w	r2, r7, #15
 80081a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a6:	05f8      	lsls	r0, r7, #23
 80081a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081b4:	d516      	bpl.n	80081e4 <_dtoa_r+0x34c>
 80081b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ba:	4b80      	ldr	r3, [pc, #512]	@ (80083bc <_dtoa_r+0x524>)
 80081bc:	2603      	movs	r6, #3
 80081be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081c2:	f7f8 fab3 	bl	800072c <__aeabi_ddiv>
 80081c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ca:	f004 040f 	and.w	r4, r4, #15
 80081ce:	4d7b      	ldr	r5, [pc, #492]	@ (80083bc <_dtoa_r+0x524>)
 80081d0:	b954      	cbnz	r4, 80081e8 <_dtoa_r+0x350>
 80081d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081da:	f7f8 faa7 	bl	800072c <__aeabi_ddiv>
 80081de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081e2:	e028      	b.n	8008236 <_dtoa_r+0x39e>
 80081e4:	2602      	movs	r6, #2
 80081e6:	e7f2      	b.n	80081ce <_dtoa_r+0x336>
 80081e8:	07e1      	lsls	r1, r4, #31
 80081ea:	d508      	bpl.n	80081fe <_dtoa_r+0x366>
 80081ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081f4:	f7f8 f970 	bl	80004d8 <__aeabi_dmul>
 80081f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081fc:	3601      	adds	r6, #1
 80081fe:	1064      	asrs	r4, r4, #1
 8008200:	3508      	adds	r5, #8
 8008202:	e7e5      	b.n	80081d0 <_dtoa_r+0x338>
 8008204:	f000 80d2 	beq.w	80083ac <_dtoa_r+0x514>
 8008208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800820c:	427c      	negs	r4, r7
 800820e:	4b6a      	ldr	r3, [pc, #424]	@ (80083b8 <_dtoa_r+0x520>)
 8008210:	f004 020f 	and.w	r2, r4, #15
 8008214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f95c 	bl	80004d8 <__aeabi_dmul>
 8008220:	2602      	movs	r6, #2
 8008222:	2300      	movs	r3, #0
 8008224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008228:	4d64      	ldr	r5, [pc, #400]	@ (80083bc <_dtoa_r+0x524>)
 800822a:	1124      	asrs	r4, r4, #4
 800822c:	2c00      	cmp	r4, #0
 800822e:	f040 80b2 	bne.w	8008396 <_dtoa_r+0x4fe>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d3      	bne.n	80081de <_dtoa_r+0x346>
 8008236:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800823a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80b7 	beq.w	80083b0 <_dtoa_r+0x518>
 8008242:	2200      	movs	r2, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	4b5d      	ldr	r3, [pc, #372]	@ (80083c0 <_dtoa_r+0x528>)
 800824a:	f7f8 fbb7 	bl	80009bc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	f000 80ae 	beq.w	80083b0 <_dtoa_r+0x518>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 80aa 	beq.w	80083b0 <_dtoa_r+0x518>
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dd37      	ble.n	80082d2 <_dtoa_r+0x43a>
 8008262:	1e7b      	subs	r3, r7, #1
 8008264:	4620      	mov	r0, r4
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	2200      	movs	r2, #0
 800826a:	4629      	mov	r1, r5
 800826c:	4b55      	ldr	r3, [pc, #340]	@ (80083c4 <_dtoa_r+0x52c>)
 800826e:	f7f8 f933 	bl	80004d8 <__aeabi_dmul>
 8008272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008276:	9c08      	ldr	r4, [sp, #32]
 8008278:	3601      	adds	r6, #1
 800827a:	4630      	mov	r0, r6
 800827c:	f7f8 f8c2 	bl	8000404 <__aeabi_i2d>
 8008280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008284:	f7f8 f928 	bl	80004d8 <__aeabi_dmul>
 8008288:	2200      	movs	r2, #0
 800828a:	4b4f      	ldr	r3, [pc, #316]	@ (80083c8 <_dtoa_r+0x530>)
 800828c:	f7f7 ff6e 	bl	800016c <__adddf3>
 8008290:	4605      	mov	r5, r0
 8008292:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008296:	2c00      	cmp	r4, #0
 8008298:	f040 809a 	bne.w	80083d0 <_dtoa_r+0x538>
 800829c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	4b4a      	ldr	r3, [pc, #296]	@ (80083cc <_dtoa_r+0x534>)
 80082a4:	f7f7 ff60 	bl	8000168 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082b0:	462a      	mov	r2, r5
 80082b2:	4633      	mov	r3, r6
 80082b4:	f7f8 fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 828e 	bne.w	80087da <_dtoa_r+0x942>
 80082be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c2:	462a      	mov	r2, r5
 80082c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082c8:	f7f8 fb78 	bl	80009bc <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 8127 	bne.w	8008520 <_dtoa_r+0x688>
 80082d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f2c0 8163 	blt.w	80085a8 <_dtoa_r+0x710>
 80082e2:	2f0e      	cmp	r7, #14
 80082e4:	f300 8160 	bgt.w	80085a8 <_dtoa_r+0x710>
 80082e8:	4b33      	ldr	r3, [pc, #204]	@ (80083b8 <_dtoa_r+0x520>)
 80082ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	da03      	bge.n	8008304 <_dtoa_r+0x46c>
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f340 8100 	ble.w	8008504 <_dtoa_r+0x66c>
 8008304:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008308:	4656      	mov	r6, sl
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fa0b 	bl	800072c <__aeabi_ddiv>
 8008316:	f7f8 fb8f 	bl	8000a38 <__aeabi_d2iz>
 800831a:	4680      	mov	r8, r0
 800831c:	f7f8 f872 	bl	8000404 <__aeabi_i2d>
 8008320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f7f7 ff1a 	bl	8000168 <__aeabi_dsub>
 8008334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008338:	9d07      	ldr	r5, [sp, #28]
 800833a:	f806 4b01 	strb.w	r4, [r6], #1
 800833e:	eba6 040a 	sub.w	r4, r6, sl
 8008342:	42a5      	cmp	r5, r4
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	f040 8116 	bne.w	8008578 <_dtoa_r+0x6e0>
 800834c:	f7f7 ff0e 	bl	800016c <__adddf3>
 8008350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	f7f8 fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 80f8 	bne.w	8008552 <_dtoa_r+0x6ba>
 8008362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008366:	4620      	mov	r0, r4
 8008368:	4629      	mov	r1, r5
 800836a:	f7f8 fb1d 	bl	80009a8 <__aeabi_dcmpeq>
 800836e:	b118      	cbz	r0, 8008378 <_dtoa_r+0x4e0>
 8008370:	f018 0f01 	tst.w	r8, #1
 8008374:	f040 80ed 	bne.w	8008552 <_dtoa_r+0x6ba>
 8008378:	4649      	mov	r1, r9
 800837a:	4658      	mov	r0, fp
 800837c:	f000 fbdc 	bl	8008b38 <_Bfree>
 8008380:	2300      	movs	r3, #0
 8008382:	7033      	strb	r3, [r6, #0]
 8008384:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008386:	3701      	adds	r7, #1
 8008388:	601f      	str	r7, [r3, #0]
 800838a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8320 	beq.w	80089d2 <_dtoa_r+0xb3a>
 8008392:	601e      	str	r6, [r3, #0]
 8008394:	e31d      	b.n	80089d2 <_dtoa_r+0xb3a>
 8008396:	07e2      	lsls	r2, r4, #31
 8008398:	d505      	bpl.n	80083a6 <_dtoa_r+0x50e>
 800839a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800839e:	f7f8 f89b 	bl	80004d8 <__aeabi_dmul>
 80083a2:	2301      	movs	r3, #1
 80083a4:	3601      	adds	r6, #1
 80083a6:	1064      	asrs	r4, r4, #1
 80083a8:	3508      	adds	r5, #8
 80083aa:	e73f      	b.n	800822c <_dtoa_r+0x394>
 80083ac:	2602      	movs	r6, #2
 80083ae:	e742      	b.n	8008236 <_dtoa_r+0x39e>
 80083b0:	9c07      	ldr	r4, [sp, #28]
 80083b2:	9704      	str	r7, [sp, #16]
 80083b4:	e761      	b.n	800827a <_dtoa_r+0x3e2>
 80083b6:	bf00      	nop
 80083b8:	08009f70 	.word	0x08009f70
 80083bc:	08009f48 	.word	0x08009f48
 80083c0:	3ff00000 	.word	0x3ff00000
 80083c4:	40240000 	.word	0x40240000
 80083c8:	401c0000 	.word	0x401c0000
 80083cc:	40140000 	.word	0x40140000
 80083d0:	4b70      	ldr	r3, [pc, #448]	@ (8008594 <_dtoa_r+0x6fc>)
 80083d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083dc:	4454      	add	r4, sl
 80083de:	2900      	cmp	r1, #0
 80083e0:	d045      	beq.n	800846e <_dtoa_r+0x5d6>
 80083e2:	2000      	movs	r0, #0
 80083e4:	496c      	ldr	r1, [pc, #432]	@ (8008598 <_dtoa_r+0x700>)
 80083e6:	f7f8 f9a1 	bl	800072c <__aeabi_ddiv>
 80083ea:	4633      	mov	r3, r6
 80083ec:	462a      	mov	r2, r5
 80083ee:	f7f7 febb 	bl	8000168 <__aeabi_dsub>
 80083f2:	4656      	mov	r6, sl
 80083f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083fc:	f7f8 fb1c 	bl	8000a38 <__aeabi_d2iz>
 8008400:	4605      	mov	r5, r0
 8008402:	f7f7 ffff 	bl	8000404 <__aeabi_i2d>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840e:	f7f7 feab 	bl	8000168 <__aeabi_dsub>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	3530      	adds	r5, #48	@ 0x30
 8008418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800841c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008420:	f806 5b01 	strb.w	r5, [r6], #1
 8008424:	f7f8 faca 	bl	80009bc <__aeabi_dcmplt>
 8008428:	2800      	cmp	r0, #0
 800842a:	d163      	bne.n	80084f4 <_dtoa_r+0x65c>
 800842c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008430:	2000      	movs	r0, #0
 8008432:	495a      	ldr	r1, [pc, #360]	@ (800859c <_dtoa_r+0x704>)
 8008434:	f7f7 fe98 	bl	8000168 <__aeabi_dsub>
 8008438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800843c:	f7f8 fabe 	bl	80009bc <__aeabi_dcmplt>
 8008440:	2800      	cmp	r0, #0
 8008442:	f040 8087 	bne.w	8008554 <_dtoa_r+0x6bc>
 8008446:	42a6      	cmp	r6, r4
 8008448:	f43f af43 	beq.w	80082d2 <_dtoa_r+0x43a>
 800844c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008450:	2200      	movs	r2, #0
 8008452:	4b53      	ldr	r3, [pc, #332]	@ (80085a0 <_dtoa_r+0x708>)
 8008454:	f7f8 f840 	bl	80004d8 <__aeabi_dmul>
 8008458:	2200      	movs	r2, #0
 800845a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	4b4f      	ldr	r3, [pc, #316]	@ (80085a0 <_dtoa_r+0x708>)
 8008464:	f7f8 f838 	bl	80004d8 <__aeabi_dmul>
 8008468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800846c:	e7c4      	b.n	80083f8 <_dtoa_r+0x560>
 800846e:	4631      	mov	r1, r6
 8008470:	4628      	mov	r0, r5
 8008472:	f7f8 f831 	bl	80004d8 <__aeabi_dmul>
 8008476:	4656      	mov	r6, sl
 8008478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800847c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800847e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008482:	f7f8 fad9 	bl	8000a38 <__aeabi_d2iz>
 8008486:	4605      	mov	r5, r0
 8008488:	f7f7 ffbc 	bl	8000404 <__aeabi_i2d>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008494:	f7f7 fe68 	bl	8000168 <__aeabi_dsub>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	3530      	adds	r5, #48	@ 0x30
 800849e:	f806 5b01 	strb.w	r5, [r6], #1
 80084a2:	42a6      	cmp	r6, r4
 80084a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	d124      	bne.n	80084f8 <_dtoa_r+0x660>
 80084ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084b2:	4b39      	ldr	r3, [pc, #228]	@ (8008598 <_dtoa_r+0x700>)
 80084b4:	f7f7 fe5a 	bl	800016c <__adddf3>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c0:	f7f8 fa9a 	bl	80009f8 <__aeabi_dcmpgt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d145      	bne.n	8008554 <_dtoa_r+0x6bc>
 80084c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084cc:	2000      	movs	r0, #0
 80084ce:	4932      	ldr	r1, [pc, #200]	@ (8008598 <_dtoa_r+0x700>)
 80084d0:	f7f7 fe4a 	bl	8000168 <__aeabi_dsub>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084dc:	f7f8 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f43f aef6 	beq.w	80082d2 <_dtoa_r+0x43a>
 80084e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084e8:	1e73      	subs	r3, r6, #1
 80084ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084f0:	2b30      	cmp	r3, #48	@ 0x30
 80084f2:	d0f8      	beq.n	80084e6 <_dtoa_r+0x64e>
 80084f4:	9f04      	ldr	r7, [sp, #16]
 80084f6:	e73f      	b.n	8008378 <_dtoa_r+0x4e0>
 80084f8:	4b29      	ldr	r3, [pc, #164]	@ (80085a0 <_dtoa_r+0x708>)
 80084fa:	f7f7 ffed 	bl	80004d8 <__aeabi_dmul>
 80084fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008502:	e7bc      	b.n	800847e <_dtoa_r+0x5e6>
 8008504:	d10c      	bne.n	8008520 <_dtoa_r+0x688>
 8008506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800850a:	2200      	movs	r2, #0
 800850c:	4b25      	ldr	r3, [pc, #148]	@ (80085a4 <_dtoa_r+0x70c>)
 800850e:	f7f7 ffe3 	bl	80004d8 <__aeabi_dmul>
 8008512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008516:	f7f8 fa65 	bl	80009e4 <__aeabi_dcmpge>
 800851a:	2800      	cmp	r0, #0
 800851c:	f000 815b 	beq.w	80087d6 <_dtoa_r+0x93e>
 8008520:	2400      	movs	r4, #0
 8008522:	4625      	mov	r5, r4
 8008524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008526:	4656      	mov	r6, sl
 8008528:	43db      	mvns	r3, r3
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	2700      	movs	r7, #0
 800852e:	4621      	mov	r1, r4
 8008530:	4658      	mov	r0, fp
 8008532:	f000 fb01 	bl	8008b38 <_Bfree>
 8008536:	2d00      	cmp	r5, #0
 8008538:	d0dc      	beq.n	80084f4 <_dtoa_r+0x65c>
 800853a:	b12f      	cbz	r7, 8008548 <_dtoa_r+0x6b0>
 800853c:	42af      	cmp	r7, r5
 800853e:	d003      	beq.n	8008548 <_dtoa_r+0x6b0>
 8008540:	4639      	mov	r1, r7
 8008542:	4658      	mov	r0, fp
 8008544:	f000 faf8 	bl	8008b38 <_Bfree>
 8008548:	4629      	mov	r1, r5
 800854a:	4658      	mov	r0, fp
 800854c:	f000 faf4 	bl	8008b38 <_Bfree>
 8008550:	e7d0      	b.n	80084f4 <_dtoa_r+0x65c>
 8008552:	9704      	str	r7, [sp, #16]
 8008554:	4633      	mov	r3, r6
 8008556:	461e      	mov	r6, r3
 8008558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800855c:	2a39      	cmp	r2, #57	@ 0x39
 800855e:	d107      	bne.n	8008570 <_dtoa_r+0x6d8>
 8008560:	459a      	cmp	sl, r3
 8008562:	d1f8      	bne.n	8008556 <_dtoa_r+0x6be>
 8008564:	9a04      	ldr	r2, [sp, #16]
 8008566:	3201      	adds	r2, #1
 8008568:	9204      	str	r2, [sp, #16]
 800856a:	2230      	movs	r2, #48	@ 0x30
 800856c:	f88a 2000 	strb.w	r2, [sl]
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	3201      	adds	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	e7bd      	b.n	80084f4 <_dtoa_r+0x65c>
 8008578:	2200      	movs	r2, #0
 800857a:	4b09      	ldr	r3, [pc, #36]	@ (80085a0 <_dtoa_r+0x708>)
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	f7f8 fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800858c:	2800      	cmp	r0, #0
 800858e:	f43f aebc 	beq.w	800830a <_dtoa_r+0x472>
 8008592:	e6f1      	b.n	8008378 <_dtoa_r+0x4e0>
 8008594:	08009f70 	.word	0x08009f70
 8008598:	3fe00000 	.word	0x3fe00000
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	40240000 	.word	0x40240000
 80085a4:	40140000 	.word	0x40140000
 80085a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	f000 80db 	beq.w	8008766 <_dtoa_r+0x8ce>
 80085b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	f300 80bf 	bgt.w	8008736 <_dtoa_r+0x89e>
 80085b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	f000 80b7 	beq.w	800872e <_dtoa_r+0x896>
 80085c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085c4:	4646      	mov	r6, r8
 80085c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ca:	2101      	movs	r1, #1
 80085cc:	441a      	add	r2, r3
 80085ce:	4658      	mov	r0, fp
 80085d0:	4498      	add	r8, r3
 80085d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80085d4:	f000 fb64 	bl	8008ca0 <__i2b>
 80085d8:	4605      	mov	r5, r0
 80085da:	b15e      	cbz	r6, 80085f4 <_dtoa_r+0x75c>
 80085dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd08      	ble.n	80085f4 <_dtoa_r+0x75c>
 80085e2:	42b3      	cmp	r3, r6
 80085e4:	bfa8      	it	ge
 80085e6:	4633      	movge	r3, r6
 80085e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ea:	eba8 0803 	sub.w	r8, r8, r3
 80085ee:	1af6      	subs	r6, r6, r3
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085f6:	b1f3      	cbz	r3, 8008636 <_dtoa_r+0x79e>
 80085f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 80b7 	beq.w	800876e <_dtoa_r+0x8d6>
 8008600:	b18c      	cbz	r4, 8008626 <_dtoa_r+0x78e>
 8008602:	4629      	mov	r1, r5
 8008604:	4622      	mov	r2, r4
 8008606:	4658      	mov	r0, fp
 8008608:	f000 fc08 	bl	8008e1c <__pow5mult>
 800860c:	464a      	mov	r2, r9
 800860e:	4601      	mov	r1, r0
 8008610:	4605      	mov	r5, r0
 8008612:	4658      	mov	r0, fp
 8008614:	f000 fb5a 	bl	8008ccc <__multiply>
 8008618:	4649      	mov	r1, r9
 800861a:	9004      	str	r0, [sp, #16]
 800861c:	4658      	mov	r0, fp
 800861e:	f000 fa8b 	bl	8008b38 <_Bfree>
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	4699      	mov	r9, r3
 8008626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008628:	1b1a      	subs	r2, r3, r4
 800862a:	d004      	beq.n	8008636 <_dtoa_r+0x79e>
 800862c:	4649      	mov	r1, r9
 800862e:	4658      	mov	r0, fp
 8008630:	f000 fbf4 	bl	8008e1c <__pow5mult>
 8008634:	4681      	mov	r9, r0
 8008636:	2101      	movs	r1, #1
 8008638:	4658      	mov	r0, fp
 800863a:	f000 fb31 	bl	8008ca0 <__i2b>
 800863e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008640:	4604      	mov	r4, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 81c9 	beq.w	80089da <_dtoa_r+0xb42>
 8008648:	461a      	mov	r2, r3
 800864a:	4601      	mov	r1, r0
 800864c:	4658      	mov	r0, fp
 800864e:	f000 fbe5 	bl	8008e1c <__pow5mult>
 8008652:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008654:	4604      	mov	r4, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	f300 808f 	bgt.w	800877a <_dtoa_r+0x8e2>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 8087 	bne.w	8008772 <_dtoa_r+0x8da>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 8083 	bne.w	8008776 <_dtoa_r+0x8de>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008676:	0d1b      	lsrs	r3, r3, #20
 8008678:	051b      	lsls	r3, r3, #20
 800867a:	b12b      	cbz	r3, 8008688 <_dtoa_r+0x7f0>
 800867c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	3301      	adds	r3, #1
 8008684:	9309      	str	r3, [sp, #36]	@ 0x24
 8008686:	2301      	movs	r3, #1
 8008688:	930a      	str	r3, [sp, #40]	@ 0x28
 800868a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 81aa 	beq.w	80089e6 <_dtoa_r+0xb4e>
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008698:	6918      	ldr	r0, [r3, #16]
 800869a:	f000 fab5 	bl	8008c08 <__hi0bits>
 800869e:	f1c0 0020 	rsb	r0, r0, #32
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	4418      	add	r0, r3
 80086a6:	f010 001f 	ands.w	r0, r0, #31
 80086aa:	d071      	beq.n	8008790 <_dtoa_r+0x8f8>
 80086ac:	f1c0 0320 	rsb	r3, r0, #32
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	dd65      	ble.n	8008780 <_dtoa_r+0x8e8>
 80086b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b6:	f1c0 001c 	rsb	r0, r0, #28
 80086ba:	4403      	add	r3, r0
 80086bc:	4480      	add	r8, r0
 80086be:	4406      	add	r6, r0
 80086c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c2:	f1b8 0f00 	cmp.w	r8, #0
 80086c6:	dd05      	ble.n	80086d4 <_dtoa_r+0x83c>
 80086c8:	4649      	mov	r1, r9
 80086ca:	4642      	mov	r2, r8
 80086cc:	4658      	mov	r0, fp
 80086ce:	f000 fbff 	bl	8008ed0 <__lshift>
 80086d2:	4681      	mov	r9, r0
 80086d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	dd05      	ble.n	80086e6 <_dtoa_r+0x84e>
 80086da:	4621      	mov	r1, r4
 80086dc:	461a      	mov	r2, r3
 80086de:	4658      	mov	r0, fp
 80086e0:	f000 fbf6 	bl	8008ed0 <__lshift>
 80086e4:	4604      	mov	r4, r0
 80086e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d053      	beq.n	8008794 <_dtoa_r+0x8fc>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4648      	mov	r0, r9
 80086f0:	f000 fc5a 	bl	8008fa8 <__mcmp>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	da4d      	bge.n	8008794 <_dtoa_r+0x8fc>
 80086f8:	1e7b      	subs	r3, r7, #1
 80086fa:	4649      	mov	r1, r9
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	220a      	movs	r2, #10
 8008700:	2300      	movs	r3, #0
 8008702:	4658      	mov	r0, fp
 8008704:	f000 fa3a 	bl	8008b7c <__multadd>
 8008708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800870a:	4681      	mov	r9, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 816c 	beq.w	80089ea <_dtoa_r+0xb52>
 8008712:	2300      	movs	r3, #0
 8008714:	4629      	mov	r1, r5
 8008716:	220a      	movs	r2, #10
 8008718:	4658      	mov	r0, fp
 800871a:	f000 fa2f 	bl	8008b7c <__multadd>
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	4605      	mov	r5, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc61      	bgt.n	80087ea <_dtoa_r+0x952>
 8008726:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008728:	2b02      	cmp	r3, #2
 800872a:	dc3b      	bgt.n	80087a4 <_dtoa_r+0x90c>
 800872c:	e05d      	b.n	80087ea <_dtoa_r+0x952>
 800872e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008730:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008734:	e746      	b.n	80085c4 <_dtoa_r+0x72c>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	1e5c      	subs	r4, r3, #1
 800873a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800873c:	42a3      	cmp	r3, r4
 800873e:	bfbf      	itttt	lt
 8008740:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008742:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008744:	1ae3      	sublt	r3, r4, r3
 8008746:	18d2      	addlt	r2, r2, r3
 8008748:	bfa8      	it	ge
 800874a:	1b1c      	subge	r4, r3, r4
 800874c:	9b07      	ldr	r3, [sp, #28]
 800874e:	bfbe      	ittt	lt
 8008750:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008752:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008754:	2400      	movlt	r4, #0
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfb5      	itete	lt
 800875a:	eba8 0603 	sublt.w	r6, r8, r3
 800875e:	4646      	movge	r6, r8
 8008760:	2300      	movlt	r3, #0
 8008762:	9b07      	ldrge	r3, [sp, #28]
 8008764:	e730      	b.n	80085c8 <_dtoa_r+0x730>
 8008766:	4646      	mov	r6, r8
 8008768:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800876a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800876c:	e735      	b.n	80085da <_dtoa_r+0x742>
 800876e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008770:	e75c      	b.n	800862c <_dtoa_r+0x794>
 8008772:	2300      	movs	r3, #0
 8008774:	e788      	b.n	8008688 <_dtoa_r+0x7f0>
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	e786      	b.n	8008688 <_dtoa_r+0x7f0>
 800877a:	2300      	movs	r3, #0
 800877c:	930a      	str	r3, [sp, #40]	@ 0x28
 800877e:	e788      	b.n	8008692 <_dtoa_r+0x7fa>
 8008780:	d09f      	beq.n	80086c2 <_dtoa_r+0x82a>
 8008782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008784:	331c      	adds	r3, #28
 8008786:	441a      	add	r2, r3
 8008788:	4498      	add	r8, r3
 800878a:	441e      	add	r6, r3
 800878c:	9209      	str	r2, [sp, #36]	@ 0x24
 800878e:	e798      	b.n	80086c2 <_dtoa_r+0x82a>
 8008790:	4603      	mov	r3, r0
 8008792:	e7f6      	b.n	8008782 <_dtoa_r+0x8ea>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	9704      	str	r7, [sp, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	dc20      	bgt.n	80087de <_dtoa_r+0x946>
 800879c:	9308      	str	r3, [sp, #32]
 800879e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	dd1e      	ble.n	80087e2 <_dtoa_r+0x94a>
 80087a4:	9b08      	ldr	r3, [sp, #32]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f47f aebc 	bne.w	8008524 <_dtoa_r+0x68c>
 80087ac:	4621      	mov	r1, r4
 80087ae:	2205      	movs	r2, #5
 80087b0:	4658      	mov	r0, fp
 80087b2:	f000 f9e3 	bl	8008b7c <__multadd>
 80087b6:	4601      	mov	r1, r0
 80087b8:	4604      	mov	r4, r0
 80087ba:	4648      	mov	r0, r9
 80087bc:	f000 fbf4 	bl	8008fa8 <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f77f aeaf 	ble.w	8008524 <_dtoa_r+0x68c>
 80087c6:	2331      	movs	r3, #49	@ 0x31
 80087c8:	4656      	mov	r6, sl
 80087ca:	f806 3b01 	strb.w	r3, [r6], #1
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	3301      	adds	r3, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	e6aa      	b.n	800852c <_dtoa_r+0x694>
 80087d6:	9c07      	ldr	r4, [sp, #28]
 80087d8:	9704      	str	r7, [sp, #16]
 80087da:	4625      	mov	r5, r4
 80087dc:	e7f3      	b.n	80087c6 <_dtoa_r+0x92e>
 80087de:	9b07      	ldr	r3, [sp, #28]
 80087e0:	9308      	str	r3, [sp, #32]
 80087e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8104 	beq.w	80089f2 <_dtoa_r+0xb5a>
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	dd05      	ble.n	80087fa <_dtoa_r+0x962>
 80087ee:	4629      	mov	r1, r5
 80087f0:	4632      	mov	r2, r6
 80087f2:	4658      	mov	r0, fp
 80087f4:	f000 fb6c 	bl	8008ed0 <__lshift>
 80087f8:	4605      	mov	r5, r0
 80087fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d05a      	beq.n	80088b6 <_dtoa_r+0xa1e>
 8008800:	4658      	mov	r0, fp
 8008802:	6869      	ldr	r1, [r5, #4]
 8008804:	f000 f958 	bl	8008ab8 <_Balloc>
 8008808:	4606      	mov	r6, r0
 800880a:	b928      	cbnz	r0, 8008818 <_dtoa_r+0x980>
 800880c:	4602      	mov	r2, r0
 800880e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008812:	4b83      	ldr	r3, [pc, #524]	@ (8008a20 <_dtoa_r+0xb88>)
 8008814:	f7ff bb54 	b.w	8007ec0 <_dtoa_r+0x28>
 8008818:	692a      	ldr	r2, [r5, #16]
 800881a:	f105 010c 	add.w	r1, r5, #12
 800881e:	3202      	adds	r2, #2
 8008820:	0092      	lsls	r2, r2, #2
 8008822:	300c      	adds	r0, #12
 8008824:	f000 fee2 	bl	80095ec <memcpy>
 8008828:	2201      	movs	r2, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4658      	mov	r0, fp
 800882e:	f000 fb4f 	bl	8008ed0 <__lshift>
 8008832:	462f      	mov	r7, r5
 8008834:	4605      	mov	r5, r0
 8008836:	f10a 0301 	add.w	r3, sl, #1
 800883a:	9307      	str	r3, [sp, #28]
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	4453      	add	r3, sl
 8008840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	930a      	str	r3, [sp, #40]	@ 0x28
 800884a:	9b07      	ldr	r3, [sp, #28]
 800884c:	4621      	mov	r1, r4
 800884e:	3b01      	subs	r3, #1
 8008850:	4648      	mov	r0, r9
 8008852:	9302      	str	r3, [sp, #8]
 8008854:	f7ff fa95 	bl	8007d82 <quorem>
 8008858:	4639      	mov	r1, r7
 800885a:	9008      	str	r0, [sp, #32]
 800885c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008860:	4648      	mov	r0, r9
 8008862:	f000 fba1 	bl	8008fa8 <__mcmp>
 8008866:	462a      	mov	r2, r5
 8008868:	9009      	str	r0, [sp, #36]	@ 0x24
 800886a:	4621      	mov	r1, r4
 800886c:	4658      	mov	r0, fp
 800886e:	f000 fbb7 	bl	8008fe0 <__mdiff>
 8008872:	68c2      	ldr	r2, [r0, #12]
 8008874:	4606      	mov	r6, r0
 8008876:	bb02      	cbnz	r2, 80088ba <_dtoa_r+0xa22>
 8008878:	4601      	mov	r1, r0
 800887a:	4648      	mov	r0, r9
 800887c:	f000 fb94 	bl	8008fa8 <__mcmp>
 8008880:	4602      	mov	r2, r0
 8008882:	4631      	mov	r1, r6
 8008884:	4658      	mov	r0, fp
 8008886:	920c      	str	r2, [sp, #48]	@ 0x30
 8008888:	f000 f956 	bl	8008b38 <_Bfree>
 800888c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800888e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008890:	9e07      	ldr	r6, [sp, #28]
 8008892:	ea43 0102 	orr.w	r1, r3, r2
 8008896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008898:	4319      	orrs	r1, r3
 800889a:	d110      	bne.n	80088be <_dtoa_r+0xa26>
 800889c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088a0:	d029      	beq.n	80088f6 <_dtoa_r+0xa5e>
 80088a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd02      	ble.n	80088ae <_dtoa_r+0xa16>
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	f883 8000 	strb.w	r8, [r3]
 80088b4:	e63b      	b.n	800852e <_dtoa_r+0x696>
 80088b6:	4628      	mov	r0, r5
 80088b8:	e7bb      	b.n	8008832 <_dtoa_r+0x99a>
 80088ba:	2201      	movs	r2, #1
 80088bc:	e7e1      	b.n	8008882 <_dtoa_r+0x9ea>
 80088be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db04      	blt.n	80088ce <_dtoa_r+0xa36>
 80088c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80088c6:	430b      	orrs	r3, r1
 80088c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088ca:	430b      	orrs	r3, r1
 80088cc:	d120      	bne.n	8008910 <_dtoa_r+0xa78>
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	dded      	ble.n	80088ae <_dtoa_r+0xa16>
 80088d2:	4649      	mov	r1, r9
 80088d4:	2201      	movs	r2, #1
 80088d6:	4658      	mov	r0, fp
 80088d8:	f000 fafa 	bl	8008ed0 <__lshift>
 80088dc:	4621      	mov	r1, r4
 80088de:	4681      	mov	r9, r0
 80088e0:	f000 fb62 	bl	8008fa8 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	dc03      	bgt.n	80088f0 <_dtoa_r+0xa58>
 80088e8:	d1e1      	bne.n	80088ae <_dtoa_r+0xa16>
 80088ea:	f018 0f01 	tst.w	r8, #1
 80088ee:	d0de      	beq.n	80088ae <_dtoa_r+0xa16>
 80088f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088f4:	d1d8      	bne.n	80088a8 <_dtoa_r+0xa10>
 80088f6:	2339      	movs	r3, #57	@ 0x39
 80088f8:	9a02      	ldr	r2, [sp, #8]
 80088fa:	7013      	strb	r3, [r2, #0]
 80088fc:	4633      	mov	r3, r6
 80088fe:	461e      	mov	r6, r3
 8008900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008904:	3b01      	subs	r3, #1
 8008906:	2a39      	cmp	r2, #57	@ 0x39
 8008908:	d052      	beq.n	80089b0 <_dtoa_r+0xb18>
 800890a:	3201      	adds	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e60e      	b.n	800852e <_dtoa_r+0x696>
 8008910:	2a00      	cmp	r2, #0
 8008912:	dd07      	ble.n	8008924 <_dtoa_r+0xa8c>
 8008914:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008918:	d0ed      	beq.n	80088f6 <_dtoa_r+0xa5e>
 800891a:	9a02      	ldr	r2, [sp, #8]
 800891c:	f108 0301 	add.w	r3, r8, #1
 8008920:	7013      	strb	r3, [r2, #0]
 8008922:	e604      	b.n	800852e <_dtoa_r+0x696>
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	9a07      	ldr	r2, [sp, #28]
 8008928:	f803 8c01 	strb.w	r8, [r3, #-1]
 800892c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800892e:	4293      	cmp	r3, r2
 8008930:	d028      	beq.n	8008984 <_dtoa_r+0xaec>
 8008932:	4649      	mov	r1, r9
 8008934:	2300      	movs	r3, #0
 8008936:	220a      	movs	r2, #10
 8008938:	4658      	mov	r0, fp
 800893a:	f000 f91f 	bl	8008b7c <__multadd>
 800893e:	42af      	cmp	r7, r5
 8008940:	4681      	mov	r9, r0
 8008942:	f04f 0300 	mov.w	r3, #0
 8008946:	f04f 020a 	mov.w	r2, #10
 800894a:	4639      	mov	r1, r7
 800894c:	4658      	mov	r0, fp
 800894e:	d107      	bne.n	8008960 <_dtoa_r+0xac8>
 8008950:	f000 f914 	bl	8008b7c <__multadd>
 8008954:	4607      	mov	r7, r0
 8008956:	4605      	mov	r5, r0
 8008958:	9b07      	ldr	r3, [sp, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	9307      	str	r3, [sp, #28]
 800895e:	e774      	b.n	800884a <_dtoa_r+0x9b2>
 8008960:	f000 f90c 	bl	8008b7c <__multadd>
 8008964:	4629      	mov	r1, r5
 8008966:	4607      	mov	r7, r0
 8008968:	2300      	movs	r3, #0
 800896a:	220a      	movs	r2, #10
 800896c:	4658      	mov	r0, fp
 800896e:	f000 f905 	bl	8008b7c <__multadd>
 8008972:	4605      	mov	r5, r0
 8008974:	e7f0      	b.n	8008958 <_dtoa_r+0xac0>
 8008976:	9b08      	ldr	r3, [sp, #32]
 8008978:	2700      	movs	r7, #0
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfcc      	ite	gt
 800897e:	461e      	movgt	r6, r3
 8008980:	2601      	movle	r6, #1
 8008982:	4456      	add	r6, sl
 8008984:	4649      	mov	r1, r9
 8008986:	2201      	movs	r2, #1
 8008988:	4658      	mov	r0, fp
 800898a:	f000 faa1 	bl	8008ed0 <__lshift>
 800898e:	4621      	mov	r1, r4
 8008990:	4681      	mov	r9, r0
 8008992:	f000 fb09 	bl	8008fa8 <__mcmp>
 8008996:	2800      	cmp	r0, #0
 8008998:	dcb0      	bgt.n	80088fc <_dtoa_r+0xa64>
 800899a:	d102      	bne.n	80089a2 <_dtoa_r+0xb0a>
 800899c:	f018 0f01 	tst.w	r8, #1
 80089a0:	d1ac      	bne.n	80088fc <_dtoa_r+0xa64>
 80089a2:	4633      	mov	r3, r6
 80089a4:	461e      	mov	r6, r3
 80089a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089aa:	2a30      	cmp	r2, #48	@ 0x30
 80089ac:	d0fa      	beq.n	80089a4 <_dtoa_r+0xb0c>
 80089ae:	e5be      	b.n	800852e <_dtoa_r+0x696>
 80089b0:	459a      	cmp	sl, r3
 80089b2:	d1a4      	bne.n	80088fe <_dtoa_r+0xa66>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	3301      	adds	r3, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	2331      	movs	r3, #49	@ 0x31
 80089bc:	f88a 3000 	strb.w	r3, [sl]
 80089c0:	e5b5      	b.n	800852e <_dtoa_r+0x696>
 80089c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a24 <_dtoa_r+0xb8c>
 80089c8:	b11b      	cbz	r3, 80089d2 <_dtoa_r+0xb3a>
 80089ca:	f10a 0308 	add.w	r3, sl, #8
 80089ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	4650      	mov	r0, sl
 80089d4:	b017      	add	sp, #92	@ 0x5c
 80089d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089dc:	2b01      	cmp	r3, #1
 80089de:	f77f ae3d 	ble.w	800865c <_dtoa_r+0x7c4>
 80089e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e6:	2001      	movs	r0, #1
 80089e8:	e65b      	b.n	80086a2 <_dtoa_r+0x80a>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f77f aed6 	ble.w	800879e <_dtoa_r+0x906>
 80089f2:	4656      	mov	r6, sl
 80089f4:	4621      	mov	r1, r4
 80089f6:	4648      	mov	r0, r9
 80089f8:	f7ff f9c3 	bl	8007d82 <quorem>
 80089fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a00:	9b08      	ldr	r3, [sp, #32]
 8008a02:	f806 8b01 	strb.w	r8, [r6], #1
 8008a06:	eba6 020a 	sub.w	r2, r6, sl
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	ddb3      	ble.n	8008976 <_dtoa_r+0xade>
 8008a0e:	4649      	mov	r1, r9
 8008a10:	2300      	movs	r3, #0
 8008a12:	220a      	movs	r2, #10
 8008a14:	4658      	mov	r0, fp
 8008a16:	f000 f8b1 	bl	8008b7c <__multadd>
 8008a1a:	4681      	mov	r9, r0
 8008a1c:	e7ea      	b.n	80089f4 <_dtoa_r+0xb5c>
 8008a1e:	bf00      	nop
 8008a20:	08009ed2 	.word	0x08009ed2
 8008a24:	08009e56 	.word	0x08009e56

08008a28 <_free_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d040      	beq.n	8008ab2 <_free_r+0x8a>
 8008a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a34:	1f0c      	subs	r4, r1, #4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfb8      	it	lt
 8008a3a:	18e4      	addlt	r4, r4, r3
 8008a3c:	f7fe fb76 	bl	800712c <__malloc_lock>
 8008a40:	4a1c      	ldr	r2, [pc, #112]	@ (8008ab4 <_free_r+0x8c>)
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	b933      	cbnz	r3, 8008a54 <_free_r+0x2c>
 8008a46:	6063      	str	r3, [r4, #4]
 8008a48:	6014      	str	r4, [r2, #0]
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a50:	f7fe bb72 	b.w	8007138 <__malloc_unlock>
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d908      	bls.n	8008a6a <_free_r+0x42>
 8008a58:	6820      	ldr	r0, [r4, #0]
 8008a5a:	1821      	adds	r1, r4, r0
 8008a5c:	428b      	cmp	r3, r1
 8008a5e:	bf01      	itttt	eq
 8008a60:	6819      	ldreq	r1, [r3, #0]
 8008a62:	685b      	ldreq	r3, [r3, #4]
 8008a64:	1809      	addeq	r1, r1, r0
 8008a66:	6021      	streq	r1, [r4, #0]
 8008a68:	e7ed      	b.n	8008a46 <_free_r+0x1e>
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	b10b      	cbz	r3, 8008a74 <_free_r+0x4c>
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d9fa      	bls.n	8008a6a <_free_r+0x42>
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	1850      	adds	r0, r2, r1
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d10b      	bne.n	8008a94 <_free_r+0x6c>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	4401      	add	r1, r0
 8008a80:	1850      	adds	r0, r2, r1
 8008a82:	4283      	cmp	r3, r0
 8008a84:	6011      	str	r1, [r2, #0]
 8008a86:	d1e0      	bne.n	8008a4a <_free_r+0x22>
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4408      	add	r0, r1
 8008a8e:	6010      	str	r0, [r2, #0]
 8008a90:	6053      	str	r3, [r2, #4]
 8008a92:	e7da      	b.n	8008a4a <_free_r+0x22>
 8008a94:	d902      	bls.n	8008a9c <_free_r+0x74>
 8008a96:	230c      	movs	r3, #12
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	e7d6      	b.n	8008a4a <_free_r+0x22>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	1821      	adds	r1, r4, r0
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf01      	itttt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	1809      	addeq	r1, r1, r0
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	6054      	str	r4, [r2, #4]
 8008ab0:	e7cb      	b.n	8008a4a <_free_r+0x22>
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200003ec 	.word	0x200003ec

08008ab8 <_Balloc>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	69c6      	ldr	r6, [r0, #28]
 8008abc:	4604      	mov	r4, r0
 8008abe:	460d      	mov	r5, r1
 8008ac0:	b976      	cbnz	r6, 8008ae0 <_Balloc+0x28>
 8008ac2:	2010      	movs	r0, #16
 8008ac4:	f7fe fa80 	bl	8006fc8 <malloc>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	61e0      	str	r0, [r4, #28]
 8008acc:	b920      	cbnz	r0, 8008ad8 <_Balloc+0x20>
 8008ace:	216b      	movs	r1, #107	@ 0x6b
 8008ad0:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <_Balloc+0x78>)
 8008ad2:	4818      	ldr	r0, [pc, #96]	@ (8008b34 <_Balloc+0x7c>)
 8008ad4:	f000 fd98 	bl	8009608 <__assert_func>
 8008ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008adc:	6006      	str	r6, [r0, #0]
 8008ade:	60c6      	str	r6, [r0, #12]
 8008ae0:	69e6      	ldr	r6, [r4, #28]
 8008ae2:	68f3      	ldr	r3, [r6, #12]
 8008ae4:	b183      	cbz	r3, 8008b08 <_Balloc+0x50>
 8008ae6:	69e3      	ldr	r3, [r4, #28]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008aee:	b9b8      	cbnz	r0, 8008b20 <_Balloc+0x68>
 8008af0:	2101      	movs	r1, #1
 8008af2:	fa01 f605 	lsl.w	r6, r1, r5
 8008af6:	1d72      	adds	r2, r6, #5
 8008af8:	4620      	mov	r0, r4
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	f000 fda2 	bl	8009644 <_calloc_r>
 8008b00:	b160      	cbz	r0, 8008b1c <_Balloc+0x64>
 8008b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b06:	e00e      	b.n	8008b26 <_Balloc+0x6e>
 8008b08:	2221      	movs	r2, #33	@ 0x21
 8008b0a:	2104      	movs	r1, #4
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 fd99 	bl	8009644 <_calloc_r>
 8008b12:	69e3      	ldr	r3, [r4, #28]
 8008b14:	60f0      	str	r0, [r6, #12]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e4      	bne.n	8008ae6 <_Balloc+0x2e>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	6802      	ldr	r2, [r0, #0]
 8008b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b26:	2300      	movs	r3, #0
 8008b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b2c:	e7f7      	b.n	8008b1e <_Balloc+0x66>
 8008b2e:	bf00      	nop
 8008b30:	08009e63 	.word	0x08009e63
 8008b34:	08009ee3 	.word	0x08009ee3

08008b38 <_Bfree>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	69c6      	ldr	r6, [r0, #28]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	b976      	cbnz	r6, 8008b60 <_Bfree+0x28>
 8008b42:	2010      	movs	r0, #16
 8008b44:	f7fe fa40 	bl	8006fc8 <malloc>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	61e8      	str	r0, [r5, #28]
 8008b4c:	b920      	cbnz	r0, 8008b58 <_Bfree+0x20>
 8008b4e:	218f      	movs	r1, #143	@ 0x8f
 8008b50:	4b08      	ldr	r3, [pc, #32]	@ (8008b74 <_Bfree+0x3c>)
 8008b52:	4809      	ldr	r0, [pc, #36]	@ (8008b78 <_Bfree+0x40>)
 8008b54:	f000 fd58 	bl	8009608 <__assert_func>
 8008b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b5c:	6006      	str	r6, [r0, #0]
 8008b5e:	60c6      	str	r6, [r0, #12]
 8008b60:	b13c      	cbz	r4, 8008b72 <_Bfree+0x3a>
 8008b62:	69eb      	ldr	r3, [r5, #28]
 8008b64:	6862      	ldr	r2, [r4, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b6c:	6021      	str	r1, [r4, #0]
 8008b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	08009e63 	.word	0x08009e63
 8008b78:	08009ee3 	.word	0x08009ee3

08008b7c <__multadd>:
 8008b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b80:	4607      	mov	r7, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	461e      	mov	r6, r3
 8008b86:	2000      	movs	r0, #0
 8008b88:	690d      	ldr	r5, [r1, #16]
 8008b8a:	f101 0c14 	add.w	ip, r1, #20
 8008b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b92:	3001      	adds	r0, #1
 8008b94:	b299      	uxth	r1, r3
 8008b96:	fb02 6101 	mla	r1, r2, r1, r6
 8008b9a:	0c1e      	lsrs	r6, r3, #16
 8008b9c:	0c0b      	lsrs	r3, r1, #16
 8008b9e:	fb02 3306 	mla	r3, r2, r6, r3
 8008ba2:	b289      	uxth	r1, r1
 8008ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ba8:	4285      	cmp	r5, r0
 8008baa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bae:	f84c 1b04 	str.w	r1, [ip], #4
 8008bb2:	dcec      	bgt.n	8008b8e <__multadd+0x12>
 8008bb4:	b30e      	cbz	r6, 8008bfa <__multadd+0x7e>
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	42ab      	cmp	r3, r5
 8008bba:	dc19      	bgt.n	8008bf0 <__multadd+0x74>
 8008bbc:	6861      	ldr	r1, [r4, #4]
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	f7ff ff79 	bl	8008ab8 <_Balloc>
 8008bc6:	4680      	mov	r8, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <__multadd+0x5a>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	21ba      	movs	r1, #186	@ 0xba
 8008bce:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <__multadd+0x84>)
 8008bd0:	480c      	ldr	r0, [pc, #48]	@ (8008c04 <__multadd+0x88>)
 8008bd2:	f000 fd19 	bl	8009608 <__assert_func>
 8008bd6:	6922      	ldr	r2, [r4, #16]
 8008bd8:	f104 010c 	add.w	r1, r4, #12
 8008bdc:	3202      	adds	r2, #2
 8008bde:	0092      	lsls	r2, r2, #2
 8008be0:	300c      	adds	r0, #12
 8008be2:	f000 fd03 	bl	80095ec <memcpy>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ffa5 	bl	8008b38 <_Bfree>
 8008bee:	4644      	mov	r4, r8
 8008bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	615e      	str	r6, [r3, #20]
 8008bf8:	6125      	str	r5, [r4, #16]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c00:	08009ed2 	.word	0x08009ed2
 8008c04:	08009ee3 	.word	0x08009ee3

08008c08 <__hi0bits>:
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c0e:	bf3a      	itte	cc
 8008c10:	0403      	lslcc	r3, r0, #16
 8008c12:	2010      	movcc	r0, #16
 8008c14:	2000      	movcs	r0, #0
 8008c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1a:	bf3c      	itt	cc
 8008c1c:	021b      	lslcc	r3, r3, #8
 8008c1e:	3008      	addcc	r0, #8
 8008c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c24:	bf3c      	itt	cc
 8008c26:	011b      	lslcc	r3, r3, #4
 8008c28:	3004      	addcc	r0, #4
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2e:	bf3c      	itt	cc
 8008c30:	009b      	lslcc	r3, r3, #2
 8008c32:	3002      	addcc	r0, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	db05      	blt.n	8008c44 <__hi0bits+0x3c>
 8008c38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c3c:	f100 0001 	add.w	r0, r0, #1
 8008c40:	bf08      	it	eq
 8008c42:	2020      	moveq	r0, #32
 8008c44:	4770      	bx	lr

08008c46 <__lo0bits>:
 8008c46:	6803      	ldr	r3, [r0, #0]
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f013 0007 	ands.w	r0, r3, #7
 8008c4e:	d00b      	beq.n	8008c68 <__lo0bits+0x22>
 8008c50:	07d9      	lsls	r1, r3, #31
 8008c52:	d421      	bmi.n	8008c98 <__lo0bits+0x52>
 8008c54:	0798      	lsls	r0, r3, #30
 8008c56:	bf49      	itett	mi
 8008c58:	085b      	lsrmi	r3, r3, #1
 8008c5a:	089b      	lsrpl	r3, r3, #2
 8008c5c:	2001      	movmi	r0, #1
 8008c5e:	6013      	strmi	r3, [r2, #0]
 8008c60:	bf5c      	itt	pl
 8008c62:	2002      	movpl	r0, #2
 8008c64:	6013      	strpl	r3, [r2, #0]
 8008c66:	4770      	bx	lr
 8008c68:	b299      	uxth	r1, r3
 8008c6a:	b909      	cbnz	r1, 8008c70 <__lo0bits+0x2a>
 8008c6c:	2010      	movs	r0, #16
 8008c6e:	0c1b      	lsrs	r3, r3, #16
 8008c70:	b2d9      	uxtb	r1, r3
 8008c72:	b909      	cbnz	r1, 8008c78 <__lo0bits+0x32>
 8008c74:	3008      	adds	r0, #8
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	0719      	lsls	r1, r3, #28
 8008c7a:	bf04      	itt	eq
 8008c7c:	091b      	lsreq	r3, r3, #4
 8008c7e:	3004      	addeq	r0, #4
 8008c80:	0799      	lsls	r1, r3, #30
 8008c82:	bf04      	itt	eq
 8008c84:	089b      	lsreq	r3, r3, #2
 8008c86:	3002      	addeq	r0, #2
 8008c88:	07d9      	lsls	r1, r3, #31
 8008c8a:	d403      	bmi.n	8008c94 <__lo0bits+0x4e>
 8008c8c:	085b      	lsrs	r3, r3, #1
 8008c8e:	f100 0001 	add.w	r0, r0, #1
 8008c92:	d003      	beq.n	8008c9c <__lo0bits+0x56>
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	4770      	bx	lr
 8008c98:	2000      	movs	r0, #0
 8008c9a:	4770      	bx	lr
 8008c9c:	2020      	movs	r0, #32
 8008c9e:	4770      	bx	lr

08008ca0 <__i2b>:
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	f7ff ff07 	bl	8008ab8 <_Balloc>
 8008caa:	4602      	mov	r2, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__i2b+0x1a>
 8008cae:	f240 1145 	movw	r1, #325	@ 0x145
 8008cb2:	4b04      	ldr	r3, [pc, #16]	@ (8008cc4 <__i2b+0x24>)
 8008cb4:	4804      	ldr	r0, [pc, #16]	@ (8008cc8 <__i2b+0x28>)
 8008cb6:	f000 fca7 	bl	8009608 <__assert_func>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	6144      	str	r4, [r0, #20]
 8008cbe:	6103      	str	r3, [r0, #16]
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08009ed2 	.word	0x08009ed2
 8008cc8:	08009ee3 	.word	0x08009ee3

08008ccc <__multiply>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	690a      	ldr	r2, [r1, #16]
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bfa2      	ittt	ge
 8008cdc:	4623      	movge	r3, r4
 8008cde:	460c      	movge	r4, r1
 8008ce0:	461f      	movge	r7, r3
 8008ce2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ce6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	eb0a 0609 	add.w	r6, sl, r9
 8008cf2:	42b3      	cmp	r3, r6
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	bfb8      	it	lt
 8008cf8:	3101      	addlt	r1, #1
 8008cfa:	f7ff fedd 	bl	8008ab8 <_Balloc>
 8008cfe:	b930      	cbnz	r0, 8008d0e <__multiply+0x42>
 8008d00:	4602      	mov	r2, r0
 8008d02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d06:	4b43      	ldr	r3, [pc, #268]	@ (8008e14 <__multiply+0x148>)
 8008d08:	4843      	ldr	r0, [pc, #268]	@ (8008e18 <__multiply+0x14c>)
 8008d0a:	f000 fc7d 	bl	8009608 <__assert_func>
 8008d0e:	f100 0514 	add.w	r5, r0, #20
 8008d12:	462b      	mov	r3, r5
 8008d14:	2200      	movs	r2, #0
 8008d16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d1a:	4543      	cmp	r3, r8
 8008d1c:	d321      	bcc.n	8008d62 <__multiply+0x96>
 8008d1e:	f107 0114 	add.w	r1, r7, #20
 8008d22:	f104 0214 	add.w	r2, r4, #20
 8008d26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	1b13      	subs	r3, r2, r4
 8008d32:	3b15      	subs	r3, #21
 8008d34:	f023 0303 	bic.w	r3, r3, #3
 8008d38:	3304      	adds	r3, #4
 8008d3a:	f104 0715 	add.w	r7, r4, #21
 8008d3e:	42ba      	cmp	r2, r7
 8008d40:	bf38      	it	cc
 8008d42:	2304      	movcc	r3, #4
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	9103      	str	r1, [sp, #12]
 8008d4a:	428b      	cmp	r3, r1
 8008d4c:	d80c      	bhi.n	8008d68 <__multiply+0x9c>
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	dd03      	ble.n	8008d5a <__multiply+0x8e>
 8008d52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d05a      	beq.n	8008e10 <__multiply+0x144>
 8008d5a:	6106      	str	r6, [r0, #16]
 8008d5c:	b005      	add	sp, #20
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	f843 2b04 	str.w	r2, [r3], #4
 8008d66:	e7d8      	b.n	8008d1a <__multiply+0x4e>
 8008d68:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	d023      	beq.n	8008dba <__multiply+0xee>
 8008d72:	46a9      	mov	r9, r5
 8008d74:	f04f 0c00 	mov.w	ip, #0
 8008d78:	f104 0e14 	add.w	lr, r4, #20
 8008d7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d80:	f8d9 3000 	ldr.w	r3, [r9]
 8008d84:	fa1f fb87 	uxth.w	fp, r7
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d8e:	4463      	add	r3, ip
 8008d90:	f8d9 c000 	ldr.w	ip, [r9]
 8008d94:	0c3f      	lsrs	r7, r7, #16
 8008d96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d9a:	fb0a c707 	mla	r7, sl, r7, ip
 8008d9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008da8:	4572      	cmp	r2, lr
 8008daa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dae:	f849 3b04 	str.w	r3, [r9], #4
 8008db2:	d8e3      	bhi.n	8008d7c <__multiply+0xb0>
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	f845 c003 	str.w	ip, [r5, r3]
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	3104      	adds	r1, #4
 8008dbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	d021      	beq.n	8008e0c <__multiply+0x140>
 8008dc8:	46ae      	mov	lr, r5
 8008dca:	f04f 0a00 	mov.w	sl, #0
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	f104 0c14 	add.w	ip, r4, #20
 8008dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008dd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	fb09 770b 	mla	r7, r9, fp, r7
 8008de2:	4457      	add	r7, sl
 8008de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008de8:	f84e 3b04 	str.w	r3, [lr], #4
 8008dec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008df0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df4:	f8be 3000 	ldrh.w	r3, [lr]
 8008df8:	4562      	cmp	r2, ip
 8008dfa:	fb09 330a 	mla	r3, r9, sl, r3
 8008dfe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e06:	d8e5      	bhi.n	8008dd4 <__multiply+0x108>
 8008e08:	9f01      	ldr	r7, [sp, #4]
 8008e0a:	51eb      	str	r3, [r5, r7]
 8008e0c:	3504      	adds	r5, #4
 8008e0e:	e79a      	b.n	8008d46 <__multiply+0x7a>
 8008e10:	3e01      	subs	r6, #1
 8008e12:	e79c      	b.n	8008d4e <__multiply+0x82>
 8008e14:	08009ed2 	.word	0x08009ed2
 8008e18:	08009ee3 	.word	0x08009ee3

08008e1c <__pow5mult>:
 8008e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e20:	4615      	mov	r5, r2
 8008e22:	f012 0203 	ands.w	r2, r2, #3
 8008e26:	4607      	mov	r7, r0
 8008e28:	460e      	mov	r6, r1
 8008e2a:	d007      	beq.n	8008e3c <__pow5mult+0x20>
 8008e2c:	4c25      	ldr	r4, [pc, #148]	@ (8008ec4 <__pow5mult+0xa8>)
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	2300      	movs	r3, #0
 8008e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e36:	f7ff fea1 	bl	8008b7c <__multadd>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	10ad      	asrs	r5, r5, #2
 8008e3e:	d03d      	beq.n	8008ebc <__pow5mult+0xa0>
 8008e40:	69fc      	ldr	r4, [r7, #28]
 8008e42:	b97c      	cbnz	r4, 8008e64 <__pow5mult+0x48>
 8008e44:	2010      	movs	r0, #16
 8008e46:	f7fe f8bf 	bl	8006fc8 <malloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	61f8      	str	r0, [r7, #28]
 8008e4e:	b928      	cbnz	r0, 8008e5c <__pow5mult+0x40>
 8008e50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <__pow5mult+0xac>)
 8008e56:	481d      	ldr	r0, [pc, #116]	@ (8008ecc <__pow5mult+0xb0>)
 8008e58:	f000 fbd6 	bl	8009608 <__assert_func>
 8008e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e60:	6004      	str	r4, [r0, #0]
 8008e62:	60c4      	str	r4, [r0, #12]
 8008e64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e6c:	b94c      	cbnz	r4, 8008e82 <__pow5mult+0x66>
 8008e6e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff14 	bl	8008ca0 <__i2b>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	f04f 0900 	mov.w	r9, #0
 8008e86:	07eb      	lsls	r3, r5, #31
 8008e88:	d50a      	bpl.n	8008ea0 <__pow5mult+0x84>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ff1c 	bl	8008ccc <__multiply>
 8008e94:	4680      	mov	r8, r0
 8008e96:	4631      	mov	r1, r6
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff fe4d 	bl	8008b38 <_Bfree>
 8008e9e:	4646      	mov	r6, r8
 8008ea0:	106d      	asrs	r5, r5, #1
 8008ea2:	d00b      	beq.n	8008ebc <__pow5mult+0xa0>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	b938      	cbnz	r0, 8008eb8 <__pow5mult+0x9c>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ff0d 	bl	8008ccc <__multiply>
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	f8c0 9000 	str.w	r9, [r0]
 8008eb8:	4604      	mov	r4, r0
 8008eba:	e7e4      	b.n	8008e86 <__pow5mult+0x6a>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08009f3c 	.word	0x08009f3c
 8008ec8:	08009e63 	.word	0x08009e63
 8008ecc:	08009ee3 	.word	0x08009ee3

08008ed0 <__lshift>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	4691      	mov	r9, r2
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	6849      	ldr	r1, [r1, #4]
 8008ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee8:	f108 0601 	add.w	r6, r8, #1
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	db0b      	blt.n	8008f08 <__lshift+0x38>
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff fde1 	bl	8008ab8 <_Balloc>
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b948      	cbnz	r0, 8008f0e <__lshift+0x3e>
 8008efa:	4602      	mov	r2, r0
 8008efc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f00:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <__lshift+0xd0>)
 8008f02:	4828      	ldr	r0, [pc, #160]	@ (8008fa4 <__lshift+0xd4>)
 8008f04:	f000 fb80 	bl	8009608 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	e7ee      	b.n	8008eec <__lshift+0x1c>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f100 0114 	add.w	r1, r0, #20
 8008f14:	f100 0210 	add.w	r2, r0, #16
 8008f18:	4618      	mov	r0, r3
 8008f1a:	4553      	cmp	r3, sl
 8008f1c:	db33      	blt.n	8008f86 <__lshift+0xb6>
 8008f1e:	6920      	ldr	r0, [r4, #16]
 8008f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f24:	f104 0314 	add.w	r3, r4, #20
 8008f28:	f019 091f 	ands.w	r9, r9, #31
 8008f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f34:	d02b      	beq.n	8008f8e <__lshift+0xbe>
 8008f36:	468a      	mov	sl, r1
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	fa00 f009 	lsl.w	r0, r0, r9
 8008f44:	4310      	orrs	r0, r2
 8008f46:	f84a 0b04 	str.w	r0, [sl], #4
 8008f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4e:	459c      	cmp	ip, r3
 8008f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f54:	d8f3      	bhi.n	8008f3e <__lshift+0x6e>
 8008f56:	ebac 0304 	sub.w	r3, ip, r4
 8008f5a:	3b15      	subs	r3, #21
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	3304      	adds	r3, #4
 8008f62:	f104 0015 	add.w	r0, r4, #21
 8008f66:	4584      	cmp	ip, r0
 8008f68:	bf38      	it	cc
 8008f6a:	2304      	movcc	r3, #4
 8008f6c:	50ca      	str	r2, [r1, r3]
 8008f6e:	b10a      	cbz	r2, 8008f74 <__lshift+0xa4>
 8008f70:	f108 0602 	add.w	r6, r8, #2
 8008f74:	3e01      	subs	r6, #1
 8008f76:	4638      	mov	r0, r7
 8008f78:	4621      	mov	r1, r4
 8008f7a:	612e      	str	r6, [r5, #16]
 8008f7c:	f7ff fddc 	bl	8008b38 <_Bfree>
 8008f80:	4628      	mov	r0, r5
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	e7c5      	b.n	8008f1a <__lshift+0x4a>
 8008f8e:	3904      	subs	r1, #4
 8008f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f94:	459c      	cmp	ip, r3
 8008f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f9a:	d8f9      	bhi.n	8008f90 <__lshift+0xc0>
 8008f9c:	e7ea      	b.n	8008f74 <__lshift+0xa4>
 8008f9e:	bf00      	nop
 8008fa0:	08009ed2 	.word	0x08009ed2
 8008fa4:	08009ee3 	.word	0x08009ee3

08008fa8 <__mcmp>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	690a      	ldr	r2, [r1, #16]
 8008fac:	6900      	ldr	r0, [r0, #16]
 8008fae:	b530      	push	{r4, r5, lr}
 8008fb0:	1a80      	subs	r0, r0, r2
 8008fb2:	d10e      	bne.n	8008fd2 <__mcmp+0x2a>
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	3114      	adds	r1, #20
 8008fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fc8:	4295      	cmp	r5, r2
 8008fca:	d003      	beq.n	8008fd4 <__mcmp+0x2c>
 8008fcc:	d205      	bcs.n	8008fda <__mcmp+0x32>
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd30      	pop	{r4, r5, pc}
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d3f3      	bcc.n	8008fc0 <__mcmp+0x18>
 8008fd8:	e7fb      	b.n	8008fd2 <__mcmp+0x2a>
 8008fda:	2001      	movs	r0, #1
 8008fdc:	e7f9      	b.n	8008fd2 <__mcmp+0x2a>
	...

08008fe0 <__mdiff>:
 8008fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4689      	mov	r9, r1
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4648      	mov	r0, r9
 8008fec:	4614      	mov	r4, r2
 8008fee:	f7ff ffdb 	bl	8008fa8 <__mcmp>
 8008ff2:	1e05      	subs	r5, r0, #0
 8008ff4:	d112      	bne.n	800901c <__mdiff+0x3c>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff fd5d 	bl	8008ab8 <_Balloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	b928      	cbnz	r0, 800900e <__mdiff+0x2e>
 8009002:	f240 2137 	movw	r1, #567	@ 0x237
 8009006:	4b3e      	ldr	r3, [pc, #248]	@ (8009100 <__mdiff+0x120>)
 8009008:	483e      	ldr	r0, [pc, #248]	@ (8009104 <__mdiff+0x124>)
 800900a:	f000 fafd 	bl	8009608 <__assert_func>
 800900e:	2301      	movs	r3, #1
 8009010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009014:	4610      	mov	r0, r2
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	bfbc      	itt	lt
 800901e:	464b      	movlt	r3, r9
 8009020:	46a1      	movlt	r9, r4
 8009022:	4630      	mov	r0, r6
 8009024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009028:	bfba      	itte	lt
 800902a:	461c      	movlt	r4, r3
 800902c:	2501      	movlt	r5, #1
 800902e:	2500      	movge	r5, #0
 8009030:	f7ff fd42 	bl	8008ab8 <_Balloc>
 8009034:	4602      	mov	r2, r0
 8009036:	b918      	cbnz	r0, 8009040 <__mdiff+0x60>
 8009038:	f240 2145 	movw	r1, #581	@ 0x245
 800903c:	4b30      	ldr	r3, [pc, #192]	@ (8009100 <__mdiff+0x120>)
 800903e:	e7e3      	b.n	8009008 <__mdiff+0x28>
 8009040:	f100 0b14 	add.w	fp, r0, #20
 8009044:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009048:	f109 0310 	add.w	r3, r9, #16
 800904c:	60c5      	str	r5, [r0, #12]
 800904e:	f04f 0c00 	mov.w	ip, #0
 8009052:	f109 0514 	add.w	r5, r9, #20
 8009056:	46d9      	mov	r9, fp
 8009058:	6926      	ldr	r6, [r4, #16]
 800905a:	f104 0e14 	add.w	lr, r4, #20
 800905e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800906e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009072:	b281      	uxth	r1, r0
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	fa1f f38a 	uxth.w	r3, sl
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	0c00      	lsrs	r0, r0, #16
 800907e:	4463      	add	r3, ip
 8009080:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009084:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800908e:	4576      	cmp	r6, lr
 8009090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009094:	f849 3b04 	str.w	r3, [r9], #4
 8009098:	d8e6      	bhi.n	8009068 <__mdiff+0x88>
 800909a:	1b33      	subs	r3, r6, r4
 800909c:	3b15      	subs	r3, #21
 800909e:	f023 0303 	bic.w	r3, r3, #3
 80090a2:	3415      	adds	r4, #21
 80090a4:	3304      	adds	r3, #4
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	bf38      	it	cc
 80090aa:	2304      	movcc	r3, #4
 80090ac:	441d      	add	r5, r3
 80090ae:	445b      	add	r3, fp
 80090b0:	461e      	mov	r6, r3
 80090b2:	462c      	mov	r4, r5
 80090b4:	4544      	cmp	r4, r8
 80090b6:	d30e      	bcc.n	80090d6 <__mdiff+0xf6>
 80090b8:	f108 0103 	add.w	r1, r8, #3
 80090bc:	1b49      	subs	r1, r1, r5
 80090be:	f021 0103 	bic.w	r1, r1, #3
 80090c2:	3d03      	subs	r5, #3
 80090c4:	45a8      	cmp	r8, r5
 80090c6:	bf38      	it	cc
 80090c8:	2100      	movcc	r1, #0
 80090ca:	440b      	add	r3, r1
 80090cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d0:	b199      	cbz	r1, 80090fa <__mdiff+0x11a>
 80090d2:	6117      	str	r7, [r2, #16]
 80090d4:	e79e      	b.n	8009014 <__mdiff+0x34>
 80090d6:	46e6      	mov	lr, ip
 80090d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090dc:	fa1f fc81 	uxth.w	ip, r1
 80090e0:	44f4      	add	ip, lr
 80090e2:	0c08      	lsrs	r0, r1, #16
 80090e4:	4471      	add	r1, lr
 80090e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090f4:	f846 1b04 	str.w	r1, [r6], #4
 80090f8:	e7dc      	b.n	80090b4 <__mdiff+0xd4>
 80090fa:	3f01      	subs	r7, #1
 80090fc:	e7e6      	b.n	80090cc <__mdiff+0xec>
 80090fe:	bf00      	nop
 8009100:	08009ed2 	.word	0x08009ed2
 8009104:	08009ee3 	.word	0x08009ee3

08009108 <__d2b>:
 8009108:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800910c:	2101      	movs	r1, #1
 800910e:	4690      	mov	r8, r2
 8009110:	4699      	mov	r9, r3
 8009112:	9e08      	ldr	r6, [sp, #32]
 8009114:	f7ff fcd0 	bl	8008ab8 <_Balloc>
 8009118:	4604      	mov	r4, r0
 800911a:	b930      	cbnz	r0, 800912a <__d2b+0x22>
 800911c:	4602      	mov	r2, r0
 800911e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009122:	4b23      	ldr	r3, [pc, #140]	@ (80091b0 <__d2b+0xa8>)
 8009124:	4823      	ldr	r0, [pc, #140]	@ (80091b4 <__d2b+0xac>)
 8009126:	f000 fa6f 	bl	8009608 <__assert_func>
 800912a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800912e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009132:	b10d      	cbz	r5, 8009138 <__d2b+0x30>
 8009134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	f1b8 0300 	subs.w	r3, r8, #0
 800913e:	d024      	beq.n	800918a <__d2b+0x82>
 8009140:	4668      	mov	r0, sp
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	f7ff fd7f 	bl	8008c46 <__lo0bits>
 8009148:	e9dd 1200 	ldrd	r1, r2, [sp]
 800914c:	b1d8      	cbz	r0, 8009186 <__d2b+0x7e>
 800914e:	f1c0 0320 	rsb	r3, r0, #32
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	430b      	orrs	r3, r1
 8009158:	40c2      	lsrs	r2, r0
 800915a:	6163      	str	r3, [r4, #20]
 800915c:	9201      	str	r2, [sp, #4]
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bf0c      	ite	eq
 8009164:	2201      	moveq	r2, #1
 8009166:	2202      	movne	r2, #2
 8009168:	61a3      	str	r3, [r4, #24]
 800916a:	6122      	str	r2, [r4, #16]
 800916c:	b1ad      	cbz	r5, 800919a <__d2b+0x92>
 800916e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009172:	4405      	add	r5, r0
 8009174:	6035      	str	r5, [r6, #0]
 8009176:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800917a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800917c:	6018      	str	r0, [r3, #0]
 800917e:	4620      	mov	r0, r4
 8009180:	b002      	add	sp, #8
 8009182:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009186:	6161      	str	r1, [r4, #20]
 8009188:	e7e9      	b.n	800915e <__d2b+0x56>
 800918a:	a801      	add	r0, sp, #4
 800918c:	f7ff fd5b 	bl	8008c46 <__lo0bits>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	6163      	str	r3, [r4, #20]
 8009196:	3020      	adds	r0, #32
 8009198:	e7e7      	b.n	800916a <__d2b+0x62>
 800919a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800919e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091a2:	6030      	str	r0, [r6, #0]
 80091a4:	6918      	ldr	r0, [r3, #16]
 80091a6:	f7ff fd2f 	bl	8008c08 <__hi0bits>
 80091aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091ae:	e7e4      	b.n	800917a <__d2b+0x72>
 80091b0:	08009ed2 	.word	0x08009ed2
 80091b4:	08009ee3 	.word	0x08009ee3

080091b8 <__ssputs_r>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	461f      	mov	r7, r3
 80091be:	688e      	ldr	r6, [r1, #8]
 80091c0:	4682      	mov	sl, r0
 80091c2:	42be      	cmp	r6, r7
 80091c4:	460c      	mov	r4, r1
 80091c6:	4690      	mov	r8, r2
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	d82d      	bhi.n	8009228 <__ssputs_r+0x70>
 80091cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091d4:	d026      	beq.n	8009224 <__ssputs_r+0x6c>
 80091d6:	6965      	ldr	r5, [r4, #20]
 80091d8:	6909      	ldr	r1, [r1, #16]
 80091da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091de:	eba3 0901 	sub.w	r9, r3, r1
 80091e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091e6:	1c7b      	adds	r3, r7, #1
 80091e8:	444b      	add	r3, r9
 80091ea:	106d      	asrs	r5, r5, #1
 80091ec:	429d      	cmp	r5, r3
 80091ee:	bf38      	it	cc
 80091f0:	461d      	movcc	r5, r3
 80091f2:	0553      	lsls	r3, r2, #21
 80091f4:	d527      	bpl.n	8009246 <__ssputs_r+0x8e>
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7fd ff18 	bl	800702c <_malloc_r>
 80091fc:	4606      	mov	r6, r0
 80091fe:	b360      	cbz	r0, 800925a <__ssputs_r+0xa2>
 8009200:	464a      	mov	r2, r9
 8009202:	6921      	ldr	r1, [r4, #16]
 8009204:	f000 f9f2 	bl	80095ec <memcpy>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	81a3      	strh	r3, [r4, #12]
 8009214:	6126      	str	r6, [r4, #16]
 8009216:	444e      	add	r6, r9
 8009218:	6026      	str	r6, [r4, #0]
 800921a:	463e      	mov	r6, r7
 800921c:	6165      	str	r5, [r4, #20]
 800921e:	eba5 0509 	sub.w	r5, r5, r9
 8009222:	60a5      	str	r5, [r4, #8]
 8009224:	42be      	cmp	r6, r7
 8009226:	d900      	bls.n	800922a <__ssputs_r+0x72>
 8009228:	463e      	mov	r6, r7
 800922a:	4632      	mov	r2, r6
 800922c:	4641      	mov	r1, r8
 800922e:	6820      	ldr	r0, [r4, #0]
 8009230:	f000 f9c2 	bl	80095b8 <memmove>
 8009234:	2000      	movs	r0, #0
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	1b9b      	subs	r3, r3, r6
 800923a:	60a3      	str	r3, [r4, #8]
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	4433      	add	r3, r6
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009246:	462a      	mov	r2, r5
 8009248:	f000 fa22 	bl	8009690 <_realloc_r>
 800924c:	4606      	mov	r6, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	d1e0      	bne.n	8009214 <__ssputs_r+0x5c>
 8009252:	4650      	mov	r0, sl
 8009254:	6921      	ldr	r1, [r4, #16]
 8009256:	f7ff fbe7 	bl	8008a28 <_free_r>
 800925a:	230c      	movs	r3, #12
 800925c:	f8ca 3000 	str.w	r3, [sl]
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f04f 30ff 	mov.w	r0, #4294967295
 8009266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	e7e9      	b.n	8009242 <__ssputs_r+0x8a>
	...

08009270 <_svfiprintf_r>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	4698      	mov	r8, r3
 8009276:	898b      	ldrh	r3, [r1, #12]
 8009278:	4607      	mov	r7, r0
 800927a:	061b      	lsls	r3, r3, #24
 800927c:	460d      	mov	r5, r1
 800927e:	4614      	mov	r4, r2
 8009280:	b09d      	sub	sp, #116	@ 0x74
 8009282:	d510      	bpl.n	80092a6 <_svfiprintf_r+0x36>
 8009284:	690b      	ldr	r3, [r1, #16]
 8009286:	b973      	cbnz	r3, 80092a6 <_svfiprintf_r+0x36>
 8009288:	2140      	movs	r1, #64	@ 0x40
 800928a:	f7fd fecf 	bl	800702c <_malloc_r>
 800928e:	6028      	str	r0, [r5, #0]
 8009290:	6128      	str	r0, [r5, #16]
 8009292:	b930      	cbnz	r0, 80092a2 <_svfiprintf_r+0x32>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	b01d      	add	sp, #116	@ 0x74
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	2340      	movs	r3, #64	@ 0x40
 80092a4:	616b      	str	r3, [r5, #20]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092aa:	2320      	movs	r3, #32
 80092ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092b0:	2330      	movs	r3, #48	@ 0x30
 80092b2:	f04f 0901 	mov.w	r9, #1
 80092b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009454 <_svfiprintf_r+0x1e4>
 80092be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092c2:	4623      	mov	r3, r4
 80092c4:	469a      	mov	sl, r3
 80092c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ca:	b10a      	cbz	r2, 80092d0 <_svfiprintf_r+0x60>
 80092cc:	2a25      	cmp	r2, #37	@ 0x25
 80092ce:	d1f9      	bne.n	80092c4 <_svfiprintf_r+0x54>
 80092d0:	ebba 0b04 	subs.w	fp, sl, r4
 80092d4:	d00b      	beq.n	80092ee <_svfiprintf_r+0x7e>
 80092d6:	465b      	mov	r3, fp
 80092d8:	4622      	mov	r2, r4
 80092da:	4629      	mov	r1, r5
 80092dc:	4638      	mov	r0, r7
 80092de:	f7ff ff6b 	bl	80091b8 <__ssputs_r>
 80092e2:	3001      	adds	r0, #1
 80092e4:	f000 80a7 	beq.w	8009436 <_svfiprintf_r+0x1c6>
 80092e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ea:	445a      	add	r2, fp
 80092ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80092ee:	f89a 3000 	ldrb.w	r3, [sl]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 809f 	beq.w	8009436 <_svfiprintf_r+0x1c6>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f04f 32ff 	mov.w	r2, #4294967295
 80092fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009302:	f10a 0a01 	add.w	sl, sl, #1
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800930e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009310:	4654      	mov	r4, sl
 8009312:	2205      	movs	r2, #5
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	484e      	ldr	r0, [pc, #312]	@ (8009454 <_svfiprintf_r+0x1e4>)
 800931a:	f7fe fd24 	bl	8007d66 <memchr>
 800931e:	9a04      	ldr	r2, [sp, #16]
 8009320:	b9d8      	cbnz	r0, 800935a <_svfiprintf_r+0xea>
 8009322:	06d0      	lsls	r0, r2, #27
 8009324:	bf44      	itt	mi
 8009326:	2320      	movmi	r3, #32
 8009328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800932c:	0711      	lsls	r1, r2, #28
 800932e:	bf44      	itt	mi
 8009330:	232b      	movmi	r3, #43	@ 0x2b
 8009332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009336:	f89a 3000 	ldrb.w	r3, [sl]
 800933a:	2b2a      	cmp	r3, #42	@ 0x2a
 800933c:	d015      	beq.n	800936a <_svfiprintf_r+0xfa>
 800933e:	4654      	mov	r4, sl
 8009340:	2000      	movs	r0, #0
 8009342:	f04f 0c0a 	mov.w	ip, #10
 8009346:	9a07      	ldr	r2, [sp, #28]
 8009348:	4621      	mov	r1, r4
 800934a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800934e:	3b30      	subs	r3, #48	@ 0x30
 8009350:	2b09      	cmp	r3, #9
 8009352:	d94b      	bls.n	80093ec <_svfiprintf_r+0x17c>
 8009354:	b1b0      	cbz	r0, 8009384 <_svfiprintf_r+0x114>
 8009356:	9207      	str	r2, [sp, #28]
 8009358:	e014      	b.n	8009384 <_svfiprintf_r+0x114>
 800935a:	eba0 0308 	sub.w	r3, r0, r8
 800935e:	fa09 f303 	lsl.w	r3, r9, r3
 8009362:	4313      	orrs	r3, r2
 8009364:	46a2      	mov	sl, r4
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	e7d2      	b.n	8009310 <_svfiprintf_r+0xa0>
 800936a:	9b03      	ldr	r3, [sp, #12]
 800936c:	1d19      	adds	r1, r3, #4
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	9103      	str	r1, [sp, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfbb      	ittet	lt
 8009376:	425b      	neglt	r3, r3
 8009378:	f042 0202 	orrlt.w	r2, r2, #2
 800937c:	9307      	strge	r3, [sp, #28]
 800937e:	9307      	strlt	r3, [sp, #28]
 8009380:	bfb8      	it	lt
 8009382:	9204      	strlt	r2, [sp, #16]
 8009384:	7823      	ldrb	r3, [r4, #0]
 8009386:	2b2e      	cmp	r3, #46	@ 0x2e
 8009388:	d10a      	bne.n	80093a0 <_svfiprintf_r+0x130>
 800938a:	7863      	ldrb	r3, [r4, #1]
 800938c:	2b2a      	cmp	r3, #42	@ 0x2a
 800938e:	d132      	bne.n	80093f6 <_svfiprintf_r+0x186>
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	3402      	adds	r4, #2
 8009394:	1d1a      	adds	r2, r3, #4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	9203      	str	r2, [sp, #12]
 800939a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800939e:	9305      	str	r3, [sp, #20]
 80093a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009458 <_svfiprintf_r+0x1e8>
 80093a4:	2203      	movs	r2, #3
 80093a6:	4650      	mov	r0, sl
 80093a8:	7821      	ldrb	r1, [r4, #0]
 80093aa:	f7fe fcdc 	bl	8007d66 <memchr>
 80093ae:	b138      	cbz	r0, 80093c0 <_svfiprintf_r+0x150>
 80093b0:	2240      	movs	r2, #64	@ 0x40
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	eba0 000a 	sub.w	r0, r0, sl
 80093b8:	4082      	lsls	r2, r0
 80093ba:	4313      	orrs	r3, r2
 80093bc:	3401      	adds	r4, #1
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c4:	2206      	movs	r2, #6
 80093c6:	4825      	ldr	r0, [pc, #148]	@ (800945c <_svfiprintf_r+0x1ec>)
 80093c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093cc:	f7fe fccb 	bl	8007d66 <memchr>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d036      	beq.n	8009442 <_svfiprintf_r+0x1d2>
 80093d4:	4b22      	ldr	r3, [pc, #136]	@ (8009460 <_svfiprintf_r+0x1f0>)
 80093d6:	bb1b      	cbnz	r3, 8009420 <_svfiprintf_r+0x1b0>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	3307      	adds	r3, #7
 80093dc:	f023 0307 	bic.w	r3, r3, #7
 80093e0:	3308      	adds	r3, #8
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e6:	4433      	add	r3, r6
 80093e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ea:	e76a      	b.n	80092c2 <_svfiprintf_r+0x52>
 80093ec:	460c      	mov	r4, r1
 80093ee:	2001      	movs	r0, #1
 80093f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f4:	e7a8      	b.n	8009348 <_svfiprintf_r+0xd8>
 80093f6:	2300      	movs	r3, #0
 80093f8:	f04f 0c0a 	mov.w	ip, #10
 80093fc:	4619      	mov	r1, r3
 80093fe:	3401      	adds	r4, #1
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	4620      	mov	r0, r4
 8009404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009408:	3a30      	subs	r2, #48	@ 0x30
 800940a:	2a09      	cmp	r2, #9
 800940c:	d903      	bls.n	8009416 <_svfiprintf_r+0x1a6>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0c6      	beq.n	80093a0 <_svfiprintf_r+0x130>
 8009412:	9105      	str	r1, [sp, #20]
 8009414:	e7c4      	b.n	80093a0 <_svfiprintf_r+0x130>
 8009416:	4604      	mov	r4, r0
 8009418:	2301      	movs	r3, #1
 800941a:	fb0c 2101 	mla	r1, ip, r1, r2
 800941e:	e7f0      	b.n	8009402 <_svfiprintf_r+0x192>
 8009420:	ab03      	add	r3, sp, #12
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	462a      	mov	r2, r5
 8009426:	4638      	mov	r0, r7
 8009428:	4b0e      	ldr	r3, [pc, #56]	@ (8009464 <_svfiprintf_r+0x1f4>)
 800942a:	a904      	add	r1, sp, #16
 800942c:	f7fd ff28 	bl	8007280 <_printf_float>
 8009430:	1c42      	adds	r2, r0, #1
 8009432:	4606      	mov	r6, r0
 8009434:	d1d6      	bne.n	80093e4 <_svfiprintf_r+0x174>
 8009436:	89ab      	ldrh	r3, [r5, #12]
 8009438:	065b      	lsls	r3, r3, #25
 800943a:	f53f af2d 	bmi.w	8009298 <_svfiprintf_r+0x28>
 800943e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009440:	e72c      	b.n	800929c <_svfiprintf_r+0x2c>
 8009442:	ab03      	add	r3, sp, #12
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	462a      	mov	r2, r5
 8009448:	4638      	mov	r0, r7
 800944a:	4b06      	ldr	r3, [pc, #24]	@ (8009464 <_svfiprintf_r+0x1f4>)
 800944c:	a904      	add	r1, sp, #16
 800944e:	f7fe f9b5 	bl	80077bc <_printf_i>
 8009452:	e7ed      	b.n	8009430 <_svfiprintf_r+0x1c0>
 8009454:	0800a038 	.word	0x0800a038
 8009458:	0800a03e 	.word	0x0800a03e
 800945c:	0800a042 	.word	0x0800a042
 8009460:	08007281 	.word	0x08007281
 8009464:	080091b9 	.word	0x080091b9

08009468 <__sflush_r>:
 8009468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	0716      	lsls	r6, r2, #28
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	d454      	bmi.n	8009520 <__sflush_r+0xb8>
 8009476:	684b      	ldr	r3, [r1, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	dc02      	bgt.n	8009482 <__sflush_r+0x1a>
 800947c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd48      	ble.n	8009514 <__sflush_r+0xac>
 8009482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009484:	2e00      	cmp	r6, #0
 8009486:	d045      	beq.n	8009514 <__sflush_r+0xac>
 8009488:	2300      	movs	r3, #0
 800948a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800948e:	682f      	ldr	r7, [r5, #0]
 8009490:	6a21      	ldr	r1, [r4, #32]
 8009492:	602b      	str	r3, [r5, #0]
 8009494:	d030      	beq.n	80094f8 <__sflush_r+0x90>
 8009496:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	0759      	lsls	r1, r3, #29
 800949c:	d505      	bpl.n	80094aa <__sflush_r+0x42>
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094a4:	b10b      	cbz	r3, 80094aa <__sflush_r+0x42>
 80094a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094a8:	1ad2      	subs	r2, r2, r3
 80094aa:	2300      	movs	r3, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094b0:	6a21      	ldr	r1, [r4, #32]
 80094b2:	47b0      	blx	r6
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	d106      	bne.n	80094c8 <__sflush_r+0x60>
 80094ba:	6829      	ldr	r1, [r5, #0]
 80094bc:	291d      	cmp	r1, #29
 80094be:	d82b      	bhi.n	8009518 <__sflush_r+0xb0>
 80094c0:	4a28      	ldr	r2, [pc, #160]	@ (8009564 <__sflush_r+0xfc>)
 80094c2:	410a      	asrs	r2, r1
 80094c4:	07d6      	lsls	r6, r2, #31
 80094c6:	d427      	bmi.n	8009518 <__sflush_r+0xb0>
 80094c8:	2200      	movs	r2, #0
 80094ca:	6062      	str	r2, [r4, #4]
 80094cc:	6922      	ldr	r2, [r4, #16]
 80094ce:	04d9      	lsls	r1, r3, #19
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	d504      	bpl.n	80094de <__sflush_r+0x76>
 80094d4:	1c42      	adds	r2, r0, #1
 80094d6:	d101      	bne.n	80094dc <__sflush_r+0x74>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b903      	cbnz	r3, 80094de <__sflush_r+0x76>
 80094dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80094de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094e0:	602f      	str	r7, [r5, #0]
 80094e2:	b1b9      	cbz	r1, 8009514 <__sflush_r+0xac>
 80094e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__sflush_r+0x8a>
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff fa9b 	bl	8008a28 <_free_r>
 80094f2:	2300      	movs	r3, #0
 80094f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094f6:	e00d      	b.n	8009514 <__sflush_r+0xac>
 80094f8:	2301      	movs	r3, #1
 80094fa:	4628      	mov	r0, r5
 80094fc:	47b0      	blx	r6
 80094fe:	4602      	mov	r2, r0
 8009500:	1c50      	adds	r0, r2, #1
 8009502:	d1c9      	bne.n	8009498 <__sflush_r+0x30>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c6      	beq.n	8009498 <__sflush_r+0x30>
 800950a:	2b1d      	cmp	r3, #29
 800950c:	d001      	beq.n	8009512 <__sflush_r+0xaa>
 800950e:	2b16      	cmp	r3, #22
 8009510:	d11d      	bne.n	800954e <__sflush_r+0xe6>
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	2000      	movs	r0, #0
 8009516:	e021      	b.n	800955c <__sflush_r+0xf4>
 8009518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800951c:	b21b      	sxth	r3, r3
 800951e:	e01a      	b.n	8009556 <__sflush_r+0xee>
 8009520:	690f      	ldr	r7, [r1, #16]
 8009522:	2f00      	cmp	r7, #0
 8009524:	d0f6      	beq.n	8009514 <__sflush_r+0xac>
 8009526:	0793      	lsls	r3, r2, #30
 8009528:	bf18      	it	ne
 800952a:	2300      	movne	r3, #0
 800952c:	680e      	ldr	r6, [r1, #0]
 800952e:	bf08      	it	eq
 8009530:	694b      	ldreq	r3, [r1, #20]
 8009532:	1bf6      	subs	r6, r6, r7
 8009534:	600f      	str	r7, [r1, #0]
 8009536:	608b      	str	r3, [r1, #8]
 8009538:	2e00      	cmp	r6, #0
 800953a:	ddeb      	ble.n	8009514 <__sflush_r+0xac>
 800953c:	4633      	mov	r3, r6
 800953e:	463a      	mov	r2, r7
 8009540:	4628      	mov	r0, r5
 8009542:	6a21      	ldr	r1, [r4, #32]
 8009544:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009548:	47e0      	blx	ip
 800954a:	2800      	cmp	r0, #0
 800954c:	dc07      	bgt.n	800955e <__sflush_r+0xf6>
 800954e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955e:	4407      	add	r7, r0
 8009560:	1a36      	subs	r6, r6, r0
 8009562:	e7e9      	b.n	8009538 <__sflush_r+0xd0>
 8009564:	dfbffffe 	.word	0xdfbffffe

08009568 <_fflush_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	690b      	ldr	r3, [r1, #16]
 800956c:	4605      	mov	r5, r0
 800956e:	460c      	mov	r4, r1
 8009570:	b913      	cbnz	r3, 8009578 <_fflush_r+0x10>
 8009572:	2500      	movs	r5, #0
 8009574:	4628      	mov	r0, r5
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	b118      	cbz	r0, 8009582 <_fflush_r+0x1a>
 800957a:	6a03      	ldr	r3, [r0, #32]
 800957c:	b90b      	cbnz	r3, 8009582 <_fflush_r+0x1a>
 800957e:	f7fe fac9 	bl	8007b14 <__sinit>
 8009582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0f3      	beq.n	8009572 <_fflush_r+0xa>
 800958a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800958c:	07d0      	lsls	r0, r2, #31
 800958e:	d404      	bmi.n	800959a <_fflush_r+0x32>
 8009590:	0599      	lsls	r1, r3, #22
 8009592:	d402      	bmi.n	800959a <_fflush_r+0x32>
 8009594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009596:	f7fe fbe4 	bl	8007d62 <__retarget_lock_acquire_recursive>
 800959a:	4628      	mov	r0, r5
 800959c:	4621      	mov	r1, r4
 800959e:	f7ff ff63 	bl	8009468 <__sflush_r>
 80095a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095a4:	4605      	mov	r5, r0
 80095a6:	07da      	lsls	r2, r3, #31
 80095a8:	d4e4      	bmi.n	8009574 <_fflush_r+0xc>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	059b      	lsls	r3, r3, #22
 80095ae:	d4e1      	bmi.n	8009574 <_fflush_r+0xc>
 80095b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095b2:	f7fe fbd7 	bl	8007d64 <__retarget_lock_release_recursive>
 80095b6:	e7dd      	b.n	8009574 <_fflush_r+0xc>

080095b8 <memmove>:
 80095b8:	4288      	cmp	r0, r1
 80095ba:	b510      	push	{r4, lr}
 80095bc:	eb01 0402 	add.w	r4, r1, r2
 80095c0:	d902      	bls.n	80095c8 <memmove+0x10>
 80095c2:	4284      	cmp	r4, r0
 80095c4:	4623      	mov	r3, r4
 80095c6:	d807      	bhi.n	80095d8 <memmove+0x20>
 80095c8:	1e43      	subs	r3, r0, #1
 80095ca:	42a1      	cmp	r1, r4
 80095cc:	d008      	beq.n	80095e0 <memmove+0x28>
 80095ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095d6:	e7f8      	b.n	80095ca <memmove+0x12>
 80095d8:	4601      	mov	r1, r0
 80095da:	4402      	add	r2, r0
 80095dc:	428a      	cmp	r2, r1
 80095de:	d100      	bne.n	80095e2 <memmove+0x2a>
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ea:	e7f7      	b.n	80095dc <memmove+0x24>

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	4291      	cmp	r1, r2
 8009600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <__assert_func>:
 8009608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960a:	4614      	mov	r4, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4b09      	ldr	r3, [pc, #36]	@ (8009634 <__assert_func+0x2c>)
 8009610:	4605      	mov	r5, r0
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68d8      	ldr	r0, [r3, #12]
 8009616:	b954      	cbnz	r4, 800962e <__assert_func+0x26>
 8009618:	4b07      	ldr	r3, [pc, #28]	@ (8009638 <__assert_func+0x30>)
 800961a:	461c      	mov	r4, r3
 800961c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009620:	9100      	str	r1, [sp, #0]
 8009622:	462b      	mov	r3, r5
 8009624:	4905      	ldr	r1, [pc, #20]	@ (800963c <__assert_func+0x34>)
 8009626:	f000 f86f 	bl	8009708 <fiprintf>
 800962a:	f000 f87f 	bl	800972c <abort>
 800962e:	4b04      	ldr	r3, [pc, #16]	@ (8009640 <__assert_func+0x38>)
 8009630:	e7f4      	b.n	800961c <__assert_func+0x14>
 8009632:	bf00      	nop
 8009634:	20000030 	.word	0x20000030
 8009638:	0800a08e 	.word	0x0800a08e
 800963c:	0800a060 	.word	0x0800a060
 8009640:	0800a053 	.word	0x0800a053

08009644 <_calloc_r>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	fba1 5402 	umull	r5, r4, r1, r2
 800964a:	b93c      	cbnz	r4, 800965c <_calloc_r+0x18>
 800964c:	4629      	mov	r1, r5
 800964e:	f7fd fced 	bl	800702c <_malloc_r>
 8009652:	4606      	mov	r6, r0
 8009654:	b928      	cbnz	r0, 8009662 <_calloc_r+0x1e>
 8009656:	2600      	movs	r6, #0
 8009658:	4630      	mov	r0, r6
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	220c      	movs	r2, #12
 800965e:	6002      	str	r2, [r0, #0]
 8009660:	e7f9      	b.n	8009656 <_calloc_r+0x12>
 8009662:	462a      	mov	r2, r5
 8009664:	4621      	mov	r1, r4
 8009666:	f7fe faee 	bl	8007c46 <memset>
 800966a:	e7f5      	b.n	8009658 <_calloc_r+0x14>

0800966c <__ascii_mbtowc>:
 800966c:	b082      	sub	sp, #8
 800966e:	b901      	cbnz	r1, 8009672 <__ascii_mbtowc+0x6>
 8009670:	a901      	add	r1, sp, #4
 8009672:	b142      	cbz	r2, 8009686 <__ascii_mbtowc+0x1a>
 8009674:	b14b      	cbz	r3, 800968a <__ascii_mbtowc+0x1e>
 8009676:	7813      	ldrb	r3, [r2, #0]
 8009678:	600b      	str	r3, [r1, #0]
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	1e10      	subs	r0, r2, #0
 800967e:	bf18      	it	ne
 8009680:	2001      	movne	r0, #1
 8009682:	b002      	add	sp, #8
 8009684:	4770      	bx	lr
 8009686:	4610      	mov	r0, r2
 8009688:	e7fb      	b.n	8009682 <__ascii_mbtowc+0x16>
 800968a:	f06f 0001 	mvn.w	r0, #1
 800968e:	e7f8      	b.n	8009682 <__ascii_mbtowc+0x16>

08009690 <_realloc_r>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	4680      	mov	r8, r0
 8009696:	4615      	mov	r5, r2
 8009698:	460c      	mov	r4, r1
 800969a:	b921      	cbnz	r1, 80096a6 <_realloc_r+0x16>
 800969c:	4611      	mov	r1, r2
 800969e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	f7fd bcc3 	b.w	800702c <_malloc_r>
 80096a6:	b92a      	cbnz	r2, 80096b4 <_realloc_r+0x24>
 80096a8:	f7ff f9be 	bl	8008a28 <_free_r>
 80096ac:	2400      	movs	r4, #0
 80096ae:	4620      	mov	r0, r4
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	f000 f841 	bl	800973a <_malloc_usable_size_r>
 80096b8:	4285      	cmp	r5, r0
 80096ba:	4606      	mov	r6, r0
 80096bc:	d802      	bhi.n	80096c4 <_realloc_r+0x34>
 80096be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096c2:	d8f4      	bhi.n	80096ae <_realloc_r+0x1e>
 80096c4:	4629      	mov	r1, r5
 80096c6:	4640      	mov	r0, r8
 80096c8:	f7fd fcb0 	bl	800702c <_malloc_r>
 80096cc:	4607      	mov	r7, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0ec      	beq.n	80096ac <_realloc_r+0x1c>
 80096d2:	42b5      	cmp	r5, r6
 80096d4:	462a      	mov	r2, r5
 80096d6:	4621      	mov	r1, r4
 80096d8:	bf28      	it	cs
 80096da:	4632      	movcs	r2, r6
 80096dc:	f7ff ff86 	bl	80095ec <memcpy>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4640      	mov	r0, r8
 80096e4:	f7ff f9a0 	bl	8008a28 <_free_r>
 80096e8:	463c      	mov	r4, r7
 80096ea:	e7e0      	b.n	80096ae <_realloc_r+0x1e>

080096ec <__ascii_wctomb>:
 80096ec:	4603      	mov	r3, r0
 80096ee:	4608      	mov	r0, r1
 80096f0:	b141      	cbz	r1, 8009704 <__ascii_wctomb+0x18>
 80096f2:	2aff      	cmp	r2, #255	@ 0xff
 80096f4:	d904      	bls.n	8009700 <__ascii_wctomb+0x14>
 80096f6:	228a      	movs	r2, #138	@ 0x8a
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	4770      	bx	lr
 8009700:	2001      	movs	r0, #1
 8009702:	700a      	strb	r2, [r1, #0]
 8009704:	4770      	bx	lr
	...

08009708 <fiprintf>:
 8009708:	b40e      	push	{r1, r2, r3}
 800970a:	b503      	push	{r0, r1, lr}
 800970c:	4601      	mov	r1, r0
 800970e:	ab03      	add	r3, sp, #12
 8009710:	4805      	ldr	r0, [pc, #20]	@ (8009728 <fiprintf+0x20>)
 8009712:	f853 2b04 	ldr.w	r2, [r3], #4
 8009716:	6800      	ldr	r0, [r0, #0]
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	f000 f83d 	bl	8009798 <_vfiprintf_r>
 800971e:	b002      	add	sp, #8
 8009720:	f85d eb04 	ldr.w	lr, [sp], #4
 8009724:	b003      	add	sp, #12
 8009726:	4770      	bx	lr
 8009728:	20000030 	.word	0x20000030

0800972c <abort>:
 800972c:	2006      	movs	r0, #6
 800972e:	b508      	push	{r3, lr}
 8009730:	f000 fa06 	bl	8009b40 <raise>
 8009734:	2001      	movs	r0, #1
 8009736:	f7f9 f96c 	bl	8002a12 <_exit>

0800973a <_malloc_usable_size_r>:
 800973a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800973e:	1f18      	subs	r0, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfbc      	itt	lt
 8009744:	580b      	ldrlt	r3, [r1, r0]
 8009746:	18c0      	addlt	r0, r0, r3
 8009748:	4770      	bx	lr

0800974a <__sfputc_r>:
 800974a:	6893      	ldr	r3, [r2, #8]
 800974c:	b410      	push	{r4}
 800974e:	3b01      	subs	r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	6093      	str	r3, [r2, #8]
 8009754:	da07      	bge.n	8009766 <__sfputc_r+0x1c>
 8009756:	6994      	ldr	r4, [r2, #24]
 8009758:	42a3      	cmp	r3, r4
 800975a:	db01      	blt.n	8009760 <__sfputc_r+0x16>
 800975c:	290a      	cmp	r1, #10
 800975e:	d102      	bne.n	8009766 <__sfputc_r+0x1c>
 8009760:	bc10      	pop	{r4}
 8009762:	f000 b931 	b.w	80099c8 <__swbuf_r>
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	1c58      	adds	r0, r3, #1
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	7019      	strb	r1, [r3, #0]
 800976e:	4608      	mov	r0, r1
 8009770:	bc10      	pop	{r4}
 8009772:	4770      	bx	lr

08009774 <__sfputs_r>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	4614      	mov	r4, r2
 800977c:	18d5      	adds	r5, r2, r3
 800977e:	42ac      	cmp	r4, r5
 8009780:	d101      	bne.n	8009786 <__sfputs_r+0x12>
 8009782:	2000      	movs	r0, #0
 8009784:	e007      	b.n	8009796 <__sfputs_r+0x22>
 8009786:	463a      	mov	r2, r7
 8009788:	4630      	mov	r0, r6
 800978a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978e:	f7ff ffdc 	bl	800974a <__sfputc_r>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	d1f3      	bne.n	800977e <__sfputs_r+0xa>
 8009796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009798 <_vfiprintf_r>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	460d      	mov	r5, r1
 800979e:	4614      	mov	r4, r2
 80097a0:	4698      	mov	r8, r3
 80097a2:	4606      	mov	r6, r0
 80097a4:	b09d      	sub	sp, #116	@ 0x74
 80097a6:	b118      	cbz	r0, 80097b0 <_vfiprintf_r+0x18>
 80097a8:	6a03      	ldr	r3, [r0, #32]
 80097aa:	b90b      	cbnz	r3, 80097b0 <_vfiprintf_r+0x18>
 80097ac:	f7fe f9b2 	bl	8007b14 <__sinit>
 80097b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097b2:	07d9      	lsls	r1, r3, #31
 80097b4:	d405      	bmi.n	80097c2 <_vfiprintf_r+0x2a>
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	059a      	lsls	r2, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_vfiprintf_r+0x2a>
 80097bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097be:	f7fe fad0 	bl	8007d62 <__retarget_lock_acquire_recursive>
 80097c2:	89ab      	ldrh	r3, [r5, #12]
 80097c4:	071b      	lsls	r3, r3, #28
 80097c6:	d501      	bpl.n	80097cc <_vfiprintf_r+0x34>
 80097c8:	692b      	ldr	r3, [r5, #16]
 80097ca:	b99b      	cbnz	r3, 80097f4 <_vfiprintf_r+0x5c>
 80097cc:	4629      	mov	r1, r5
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 f938 	bl	8009a44 <__swsetup_r>
 80097d4:	b170      	cbz	r0, 80097f4 <_vfiprintf_r+0x5c>
 80097d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d8:	07dc      	lsls	r4, r3, #31
 80097da:	d504      	bpl.n	80097e6 <_vfiprintf_r+0x4e>
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	b01d      	add	sp, #116	@ 0x74
 80097e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	0598      	lsls	r0, r3, #22
 80097ea:	d4f7      	bmi.n	80097dc <_vfiprintf_r+0x44>
 80097ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097ee:	f7fe fab9 	bl	8007d64 <__retarget_lock_release_recursive>
 80097f2:	e7f3      	b.n	80097dc <_vfiprintf_r+0x44>
 80097f4:	2300      	movs	r3, #0
 80097f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f8:	2320      	movs	r3, #32
 80097fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097fe:	2330      	movs	r3, #48	@ 0x30
 8009800:	f04f 0901 	mov.w	r9, #1
 8009804:	f8cd 800c 	str.w	r8, [sp, #12]
 8009808:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80099b4 <_vfiprintf_r+0x21c>
 800980c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009810:	4623      	mov	r3, r4
 8009812:	469a      	mov	sl, r3
 8009814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009818:	b10a      	cbz	r2, 800981e <_vfiprintf_r+0x86>
 800981a:	2a25      	cmp	r2, #37	@ 0x25
 800981c:	d1f9      	bne.n	8009812 <_vfiprintf_r+0x7a>
 800981e:	ebba 0b04 	subs.w	fp, sl, r4
 8009822:	d00b      	beq.n	800983c <_vfiprintf_r+0xa4>
 8009824:	465b      	mov	r3, fp
 8009826:	4622      	mov	r2, r4
 8009828:	4629      	mov	r1, r5
 800982a:	4630      	mov	r0, r6
 800982c:	f7ff ffa2 	bl	8009774 <__sfputs_r>
 8009830:	3001      	adds	r0, #1
 8009832:	f000 80a7 	beq.w	8009984 <_vfiprintf_r+0x1ec>
 8009836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009838:	445a      	add	r2, fp
 800983a:	9209      	str	r2, [sp, #36]	@ 0x24
 800983c:	f89a 3000 	ldrb.w	r3, [sl]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 809f 	beq.w	8009984 <_vfiprintf_r+0x1ec>
 8009846:	2300      	movs	r3, #0
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009850:	f10a 0a01 	add.w	sl, sl, #1
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	9307      	str	r3, [sp, #28]
 8009858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800985c:	931a      	str	r3, [sp, #104]	@ 0x68
 800985e:	4654      	mov	r4, sl
 8009860:	2205      	movs	r2, #5
 8009862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009866:	4853      	ldr	r0, [pc, #332]	@ (80099b4 <_vfiprintf_r+0x21c>)
 8009868:	f7fe fa7d 	bl	8007d66 <memchr>
 800986c:	9a04      	ldr	r2, [sp, #16]
 800986e:	b9d8      	cbnz	r0, 80098a8 <_vfiprintf_r+0x110>
 8009870:	06d1      	lsls	r1, r2, #27
 8009872:	bf44      	itt	mi
 8009874:	2320      	movmi	r3, #32
 8009876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800987a:	0713      	lsls	r3, r2, #28
 800987c:	bf44      	itt	mi
 800987e:	232b      	movmi	r3, #43	@ 0x2b
 8009880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b2a      	cmp	r3, #42	@ 0x2a
 800988a:	d015      	beq.n	80098b8 <_vfiprintf_r+0x120>
 800988c:	4654      	mov	r4, sl
 800988e:	2000      	movs	r0, #0
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	9a07      	ldr	r2, [sp, #28]
 8009896:	4621      	mov	r1, r4
 8009898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989c:	3b30      	subs	r3, #48	@ 0x30
 800989e:	2b09      	cmp	r3, #9
 80098a0:	d94b      	bls.n	800993a <_vfiprintf_r+0x1a2>
 80098a2:	b1b0      	cbz	r0, 80098d2 <_vfiprintf_r+0x13a>
 80098a4:	9207      	str	r2, [sp, #28]
 80098a6:	e014      	b.n	80098d2 <_vfiprintf_r+0x13a>
 80098a8:	eba0 0308 	sub.w	r3, r0, r8
 80098ac:	fa09 f303 	lsl.w	r3, r9, r3
 80098b0:	4313      	orrs	r3, r2
 80098b2:	46a2      	mov	sl, r4
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	e7d2      	b.n	800985e <_vfiprintf_r+0xc6>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	1d19      	adds	r1, r3, #4
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	9103      	str	r1, [sp, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfbb      	ittet	lt
 80098c4:	425b      	neglt	r3, r3
 80098c6:	f042 0202 	orrlt.w	r2, r2, #2
 80098ca:	9307      	strge	r3, [sp, #28]
 80098cc:	9307      	strlt	r3, [sp, #28]
 80098ce:	bfb8      	it	lt
 80098d0:	9204      	strlt	r2, [sp, #16]
 80098d2:	7823      	ldrb	r3, [r4, #0]
 80098d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80098d6:	d10a      	bne.n	80098ee <_vfiprintf_r+0x156>
 80098d8:	7863      	ldrb	r3, [r4, #1]
 80098da:	2b2a      	cmp	r3, #42	@ 0x2a
 80098dc:	d132      	bne.n	8009944 <_vfiprintf_r+0x1ac>
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	3402      	adds	r4, #2
 80098e2:	1d1a      	adds	r2, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9203      	str	r2, [sp, #12]
 80098e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80099b8 <_vfiprintf_r+0x220>
 80098f2:	2203      	movs	r2, #3
 80098f4:	4650      	mov	r0, sl
 80098f6:	7821      	ldrb	r1, [r4, #0]
 80098f8:	f7fe fa35 	bl	8007d66 <memchr>
 80098fc:	b138      	cbz	r0, 800990e <_vfiprintf_r+0x176>
 80098fe:	2240      	movs	r2, #64	@ 0x40
 8009900:	9b04      	ldr	r3, [sp, #16]
 8009902:	eba0 000a 	sub.w	r0, r0, sl
 8009906:	4082      	lsls	r2, r0
 8009908:	4313      	orrs	r3, r2
 800990a:	3401      	adds	r4, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009912:	2206      	movs	r2, #6
 8009914:	4829      	ldr	r0, [pc, #164]	@ (80099bc <_vfiprintf_r+0x224>)
 8009916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800991a:	f7fe fa24 	bl	8007d66 <memchr>
 800991e:	2800      	cmp	r0, #0
 8009920:	d03f      	beq.n	80099a2 <_vfiprintf_r+0x20a>
 8009922:	4b27      	ldr	r3, [pc, #156]	@ (80099c0 <_vfiprintf_r+0x228>)
 8009924:	bb1b      	cbnz	r3, 800996e <_vfiprintf_r+0x1d6>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	3307      	adds	r3, #7
 800992a:	f023 0307 	bic.w	r3, r3, #7
 800992e:	3308      	adds	r3, #8
 8009930:	9303      	str	r3, [sp, #12]
 8009932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009934:	443b      	add	r3, r7
 8009936:	9309      	str	r3, [sp, #36]	@ 0x24
 8009938:	e76a      	b.n	8009810 <_vfiprintf_r+0x78>
 800993a:	460c      	mov	r4, r1
 800993c:	2001      	movs	r0, #1
 800993e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009942:	e7a8      	b.n	8009896 <_vfiprintf_r+0xfe>
 8009944:	2300      	movs	r3, #0
 8009946:	f04f 0c0a 	mov.w	ip, #10
 800994a:	4619      	mov	r1, r3
 800994c:	3401      	adds	r4, #1
 800994e:	9305      	str	r3, [sp, #20]
 8009950:	4620      	mov	r0, r4
 8009952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009956:	3a30      	subs	r2, #48	@ 0x30
 8009958:	2a09      	cmp	r2, #9
 800995a:	d903      	bls.n	8009964 <_vfiprintf_r+0x1cc>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0c6      	beq.n	80098ee <_vfiprintf_r+0x156>
 8009960:	9105      	str	r1, [sp, #20]
 8009962:	e7c4      	b.n	80098ee <_vfiprintf_r+0x156>
 8009964:	4604      	mov	r4, r0
 8009966:	2301      	movs	r3, #1
 8009968:	fb0c 2101 	mla	r1, ip, r1, r2
 800996c:	e7f0      	b.n	8009950 <_vfiprintf_r+0x1b8>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4630      	mov	r0, r6
 8009976:	4b13      	ldr	r3, [pc, #76]	@ (80099c4 <_vfiprintf_r+0x22c>)
 8009978:	a904      	add	r1, sp, #16
 800997a:	f7fd fc81 	bl	8007280 <_printf_float>
 800997e:	4607      	mov	r7, r0
 8009980:	1c78      	adds	r0, r7, #1
 8009982:	d1d6      	bne.n	8009932 <_vfiprintf_r+0x19a>
 8009984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009986:	07d9      	lsls	r1, r3, #31
 8009988:	d405      	bmi.n	8009996 <_vfiprintf_r+0x1fe>
 800998a:	89ab      	ldrh	r3, [r5, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d402      	bmi.n	8009996 <_vfiprintf_r+0x1fe>
 8009990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009992:	f7fe f9e7 	bl	8007d64 <__retarget_lock_release_recursive>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	065b      	lsls	r3, r3, #25
 800999a:	f53f af1f 	bmi.w	80097dc <_vfiprintf_r+0x44>
 800999e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099a0:	e71e      	b.n	80097e0 <_vfiprintf_r+0x48>
 80099a2:	ab03      	add	r3, sp, #12
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	462a      	mov	r2, r5
 80099a8:	4630      	mov	r0, r6
 80099aa:	4b06      	ldr	r3, [pc, #24]	@ (80099c4 <_vfiprintf_r+0x22c>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	f7fd ff05 	bl	80077bc <_printf_i>
 80099b2:	e7e4      	b.n	800997e <_vfiprintf_r+0x1e6>
 80099b4:	0800a038 	.word	0x0800a038
 80099b8:	0800a03e 	.word	0x0800a03e
 80099bc:	0800a042 	.word	0x0800a042
 80099c0:	08007281 	.word	0x08007281
 80099c4:	08009775 	.word	0x08009775

080099c8 <__swbuf_r>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	460e      	mov	r6, r1
 80099cc:	4614      	mov	r4, r2
 80099ce:	4605      	mov	r5, r0
 80099d0:	b118      	cbz	r0, 80099da <__swbuf_r+0x12>
 80099d2:	6a03      	ldr	r3, [r0, #32]
 80099d4:	b90b      	cbnz	r3, 80099da <__swbuf_r+0x12>
 80099d6:	f7fe f89d 	bl	8007b14 <__sinit>
 80099da:	69a3      	ldr	r3, [r4, #24]
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	071a      	lsls	r2, r3, #28
 80099e2:	d501      	bpl.n	80099e8 <__swbuf_r+0x20>
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	b943      	cbnz	r3, 80099fa <__swbuf_r+0x32>
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f82a 	bl	8009a44 <__swsetup_r>
 80099f0:	b118      	cbz	r0, 80099fa <__swbuf_r+0x32>
 80099f2:	f04f 37ff 	mov.w	r7, #4294967295
 80099f6:	4638      	mov	r0, r7
 80099f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	6922      	ldr	r2, [r4, #16]
 80099fe:	b2f6      	uxtb	r6, r6
 8009a00:	1a98      	subs	r0, r3, r2
 8009a02:	6963      	ldr	r3, [r4, #20]
 8009a04:	4637      	mov	r7, r6
 8009a06:	4283      	cmp	r3, r0
 8009a08:	dc05      	bgt.n	8009a16 <__swbuf_r+0x4e>
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff fdab 	bl	8009568 <_fflush_r>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d1ed      	bne.n	80099f2 <__swbuf_r+0x2a>
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	60a3      	str	r3, [r4, #8]
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	6022      	str	r2, [r4, #0]
 8009a22:	701e      	strb	r6, [r3, #0]
 8009a24:	6962      	ldr	r2, [r4, #20]
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d004      	beq.n	8009a36 <__swbuf_r+0x6e>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	07db      	lsls	r3, r3, #31
 8009a30:	d5e1      	bpl.n	80099f6 <__swbuf_r+0x2e>
 8009a32:	2e0a      	cmp	r6, #10
 8009a34:	d1df      	bne.n	80099f6 <__swbuf_r+0x2e>
 8009a36:	4621      	mov	r1, r4
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7ff fd95 	bl	8009568 <_fflush_r>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d0d9      	beq.n	80099f6 <__swbuf_r+0x2e>
 8009a42:	e7d6      	b.n	80099f2 <__swbuf_r+0x2a>

08009a44 <__swsetup_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4b29      	ldr	r3, [pc, #164]	@ (8009aec <__swsetup_r+0xa8>)
 8009a48:	4605      	mov	r5, r0
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	b118      	cbz	r0, 8009a58 <__swsetup_r+0x14>
 8009a50:	6a03      	ldr	r3, [r0, #32]
 8009a52:	b90b      	cbnz	r3, 8009a58 <__swsetup_r+0x14>
 8009a54:	f7fe f85e 	bl	8007b14 <__sinit>
 8009a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5c:	0719      	lsls	r1, r3, #28
 8009a5e:	d422      	bmi.n	8009aa6 <__swsetup_r+0x62>
 8009a60:	06da      	lsls	r2, r3, #27
 8009a62:	d407      	bmi.n	8009a74 <__swsetup_r+0x30>
 8009a64:	2209      	movs	r2, #9
 8009a66:	602a      	str	r2, [r5, #0]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	e033      	b.n	8009adc <__swsetup_r+0x98>
 8009a74:	0758      	lsls	r0, r3, #29
 8009a76:	d512      	bpl.n	8009a9e <__swsetup_r+0x5a>
 8009a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a7a:	b141      	cbz	r1, 8009a8e <__swsetup_r+0x4a>
 8009a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a80:	4299      	cmp	r1, r3
 8009a82:	d002      	beq.n	8009a8a <__swsetup_r+0x46>
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7fe ffcf 	bl	8008a28 <_free_r>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	2300      	movs	r3, #0
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f043 0308 	orr.w	r3, r3, #8
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	b94b      	cbnz	r3, 8009abe <__swsetup_r+0x7a>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab4:	d003      	beq.n	8009abe <__swsetup_r+0x7a>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 f882 	bl	8009bc2 <__smakebuf_r>
 8009abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac2:	f013 0201 	ands.w	r2, r3, #1
 8009ac6:	d00a      	beq.n	8009ade <__swsetup_r+0x9a>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	60a2      	str	r2, [r4, #8]
 8009acc:	6962      	ldr	r2, [r4, #20]
 8009ace:	4252      	negs	r2, r2
 8009ad0:	61a2      	str	r2, [r4, #24]
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	b942      	cbnz	r2, 8009ae8 <__swsetup_r+0xa4>
 8009ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ada:	d1c5      	bne.n	8009a68 <__swsetup_r+0x24>
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	0799      	lsls	r1, r3, #30
 8009ae0:	bf58      	it	pl
 8009ae2:	6962      	ldrpl	r2, [r4, #20]
 8009ae4:	60a2      	str	r2, [r4, #8]
 8009ae6:	e7f4      	b.n	8009ad2 <__swsetup_r+0x8e>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e7f7      	b.n	8009adc <__swsetup_r+0x98>
 8009aec:	20000030 	.word	0x20000030

08009af0 <_raise_r>:
 8009af0:	291f      	cmp	r1, #31
 8009af2:	b538      	push	{r3, r4, r5, lr}
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	d904      	bls.n	8009b04 <_raise_r+0x14>
 8009afa:	2316      	movs	r3, #22
 8009afc:	6003      	str	r3, [r0, #0]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b06:	b112      	cbz	r2, 8009b0e <_raise_r+0x1e>
 8009b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b0c:	b94b      	cbnz	r3, 8009b22 <_raise_r+0x32>
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f830 	bl	8009b74 <_getpid_r>
 8009b14:	4622      	mov	r2, r4
 8009b16:	4601      	mov	r1, r0
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b1e:	f000 b817 	b.w	8009b50 <_kill_r>
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d00a      	beq.n	8009b3c <_raise_r+0x4c>
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	d103      	bne.n	8009b32 <_raise_r+0x42>
 8009b2a:	2316      	movs	r3, #22
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	2001      	movs	r0, #1
 8009b30:	e7e7      	b.n	8009b02 <_raise_r+0x12>
 8009b32:	2100      	movs	r1, #0
 8009b34:	4620      	mov	r0, r4
 8009b36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b3a:	4798      	blx	r3
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e7e0      	b.n	8009b02 <_raise_r+0x12>

08009b40 <raise>:
 8009b40:	4b02      	ldr	r3, [pc, #8]	@ (8009b4c <raise+0xc>)
 8009b42:	4601      	mov	r1, r0
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	f7ff bfd3 	b.w	8009af0 <_raise_r>
 8009b4a:	bf00      	nop
 8009b4c:	20000030 	.word	0x20000030

08009b50 <_kill_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	2300      	movs	r3, #0
 8009b54:	4d06      	ldr	r5, [pc, #24]	@ (8009b70 <_kill_r+0x20>)
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	f7f8 ff48 	bl	80029f2 <_kill>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d102      	bne.n	8009b6c <_kill_r+0x1c>
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	b103      	cbz	r3, 8009b6c <_kill_r+0x1c>
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	bf00      	nop
 8009b70:	2000052c 	.word	0x2000052c

08009b74 <_getpid_r>:
 8009b74:	f7f8 bf36 	b.w	80029e4 <_getpid>

08009b78 <__swhatbuf_r>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	4615      	mov	r5, r2
 8009b82:	2900      	cmp	r1, #0
 8009b84:	461e      	mov	r6, r3
 8009b86:	b096      	sub	sp, #88	@ 0x58
 8009b88:	da0c      	bge.n	8009ba4 <__swhatbuf_r+0x2c>
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b92:	bf14      	ite	ne
 8009b94:	2340      	movne	r3, #64	@ 0x40
 8009b96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	6031      	str	r1, [r6, #0]
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	b016      	add	sp, #88	@ 0x58
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	466a      	mov	r2, sp
 8009ba6:	f000 f849 	bl	8009c3c <_fstat_r>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	dbed      	blt.n	8009b8a <__swhatbuf_r+0x12>
 8009bae:	9901      	ldr	r1, [sp, #4]
 8009bb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bb8:	4259      	negs	r1, r3
 8009bba:	4159      	adcs	r1, r3
 8009bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bc0:	e7eb      	b.n	8009b9a <__swhatbuf_r+0x22>

08009bc2 <__smakebuf_r>:
 8009bc2:	898b      	ldrh	r3, [r1, #12]
 8009bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bc6:	079d      	lsls	r5, r3, #30
 8009bc8:	4606      	mov	r6, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	d507      	bpl.n	8009bde <__smakebuf_r+0x1c>
 8009bce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	6123      	str	r3, [r4, #16]
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6163      	str	r3, [r4, #20]
 8009bda:	b003      	add	sp, #12
 8009bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bde:	466a      	mov	r2, sp
 8009be0:	ab01      	add	r3, sp, #4
 8009be2:	f7ff ffc9 	bl	8009b78 <__swhatbuf_r>
 8009be6:	9f00      	ldr	r7, [sp, #0]
 8009be8:	4605      	mov	r5, r0
 8009bea:	4639      	mov	r1, r7
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7fd fa1d 	bl	800702c <_malloc_r>
 8009bf2:	b948      	cbnz	r0, 8009c08 <__smakebuf_r+0x46>
 8009bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf8:	059a      	lsls	r2, r3, #22
 8009bfa:	d4ee      	bmi.n	8009bda <__smakebuf_r+0x18>
 8009bfc:	f023 0303 	bic.w	r3, r3, #3
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7e2      	b.n	8009bce <__smakebuf_r+0xc>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	6020      	str	r0, [r4, #0]
 8009c18:	b15b      	cbz	r3, 8009c32 <__smakebuf_r+0x70>
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c20:	f000 f81e 	bl	8009c60 <_isatty_r>
 8009c24:	b128      	cbz	r0, 8009c32 <__smakebuf_r+0x70>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	431d      	orrs	r5, r3
 8009c36:	81a5      	strh	r5, [r4, #12]
 8009c38:	e7cf      	b.n	8009bda <__smakebuf_r+0x18>
	...

08009c3c <_fstat_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	2300      	movs	r3, #0
 8009c40:	4d06      	ldr	r5, [pc, #24]	@ (8009c5c <_fstat_r+0x20>)
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	4611      	mov	r1, r2
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f7f8 ff31 	bl	8002ab0 <_fstat>
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	d102      	bne.n	8009c58 <_fstat_r+0x1c>
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	b103      	cbz	r3, 8009c58 <_fstat_r+0x1c>
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	2000052c 	.word	0x2000052c

08009c60 <_isatty_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	2300      	movs	r3, #0
 8009c64:	4d05      	ldr	r5, [pc, #20]	@ (8009c7c <_isatty_r+0x1c>)
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f8 ff2f 	bl	8002ace <_isatty>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_isatty_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_isatty_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	2000052c 	.word	0x2000052c

08009c80 <_init>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr

08009c8c <_fini>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr
