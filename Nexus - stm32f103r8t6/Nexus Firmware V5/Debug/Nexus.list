
Nexus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a628  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800a738  0800a738  0000b738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac30  0800ac30  0000c1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac30  0800ac30  0000bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac38  0800ac38  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac3c  0800ac3c  0000bc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800ac40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001f4  0800ae34  0000c1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800ae34  0000c570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d31  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003248  00000000  00000000  0001ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00022198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8c  00000000  00000000  00023330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b177  00000000  00000000  000240bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cc0  00000000  00000000  0003f233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009332c  00000000  00000000  00055ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e921f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a48  00000000  00000000  000e9264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eecac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a720 	.word	0x0800a720

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a720 	.word	0x0800a720

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <MPU_6050_init>:
#include <main.h>
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU_6050_init(){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af04      	add	r7, sp, #16

	//Inicializamos la configuracion del MPU6050
	 HAL_StatusTypeDef check_connection = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1) + 0 , 1, 100); //Status check from the MPU6050
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	2201      	movs	r2, #1
 800106e:	21d0      	movs	r1, #208	@ 0xd0
 8001070:	4846      	ldr	r0, [pc, #280]	@ (800118c <MPU_6050_init+0x128>)
 8001072:	f004 f859 	bl	8005128 <HAL_I2C_IsDeviceReady>
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]

	if (check_connection == HAL_OK){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d111      	bne.n	80010a4 <MPU_6050_init+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	4842      	ldr	r0, [pc, #264]	@ (8001190 <MPU_6050_init+0x12c>)
 8001088:	f003 fb76 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800108c:	2064      	movs	r0, #100	@ 0x64
 800108e:	f001 ff21 	bl	8002ed4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001098:	483d      	ldr	r0, [pc, #244]	@ (8001190 <MPU_6050_init+0x12c>)
 800109a:	f003 fb6d 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800109e:	2064      	movs	r0, #100	@ 0x64
 80010a0:	f001 ff18 	bl	8002ed4 <HAL_Delay>
	}
	uint8_t gyro_scale = FS_GYRO_500;
 80010a4:	2308      	movs	r3, #8
 80010a6:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef gyro_config = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &gyro_scale, 1, 100); //Gyroscope scale configuration (MAX)
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	221b      	movs	r2, #27
 80010b8:	21d0      	movs	r1, #208	@ 0xd0
 80010ba:	4834      	ldr	r0, [pc, #208]	@ (800118c <MPU_6050_init+0x128>)
 80010bc:	f003 fcd2 	bl	8004a64 <HAL_I2C_Mem_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71bb      	strb	r3, [r7, #6]

	if (gyro_config == HAL_OK){
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d111      	bne.n	80010ee <MPU_6050_init+0x8a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d0:	482f      	ldr	r0, [pc, #188]	@ (8001190 <MPU_6050_init+0x12c>)
 80010d2:	f003 fb51 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	@ 0x64
 80010d8:	f001 fefc 	bl	8002ed4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e2:	482b      	ldr	r0, [pc, #172]	@ (8001190 <MPU_6050_init+0x12c>)
 80010e4:	f003 fb48 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	@ 0x64
 80010ea:	f001 fef3 	bl	8002ed4 <HAL_Delay>
	}

	uint8_t acc_scale = FS_ACC_4G;
 80010ee:	2308      	movs	r3, #8
 80010f0:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef acc_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &acc_scale, 1, 100); //Accelerometer scale set up (+-4G)
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	1cbb      	adds	r3, r7, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	221c      	movs	r2, #28
 8001102:	21d0      	movs	r1, #208	@ 0xd0
 8001104:	4821      	ldr	r0, [pc, #132]	@ (800118c <MPU_6050_init+0x128>)
 8001106:	f003 fcad 	bl	8004a64 <HAL_I2C_Mem_Write>
 800110a:	4603      	mov	r3, r0
 800110c:	717b      	strb	r3, [r7, #5]

	if (acc_config == HAL_OK){
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <MPU_6050_init+0xd4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111a:	481d      	ldr	r0, [pc, #116]	@ (8001190 <MPU_6050_init+0x12c>)
 800111c:	f003 fb2c 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f001 fed7 	bl	8002ed4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112c:	4818      	ldr	r0, [pc, #96]	@ (8001190 <MPU_6050_init+0x12c>)
 800112e:	f003 fb23 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	@ 0x64
 8001134:	f001 fece 	bl	8002ed4 <HAL_Delay>
	}

	uint8_t temp_activation = FS_TEMP;
 8001138:	2300      	movs	r3, #0
 800113a:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef temp_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp_activation, 1, 100); //Disable "Sleep Mode" and enable the internal temperature sensor
 800113c:	2364      	movs	r3, #100	@ 0x64
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	2301      	movs	r3, #1
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	226b      	movs	r2, #107	@ 0x6b
 800114c:	21d0      	movs	r1, #208	@ 0xd0
 800114e:	480f      	ldr	r0, [pc, #60]	@ (800118c <MPU_6050_init+0x128>)
 8001150:	f003 fc88 	bl	8004a64 <HAL_I2C_Mem_Write>
 8001154:	4603      	mov	r3, r0
 8001156:	713b      	strb	r3, [r7, #4]

	if (temp_config == HAL_OK){
 8001158:	793b      	ldrb	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d111      	bne.n	8001182 <MPU_6050_init+0x11e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001164:	480a      	ldr	r0, [pc, #40]	@ (8001190 <MPU_6050_init+0x12c>)
 8001166:	f003 fb07 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800116a:	2064      	movs	r0, #100	@ 0x64
 800116c:	f001 feb2 	bl	8002ed4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MPU_6050_init+0x12c>)
 8001178:	f003 fafe 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800117c:	2064      	movs	r0, #100	@ 0x64
 800117e:	f001 fea9 	bl	8002ed4 <HAL_Delay>
	}
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000270 	.word	0x20000270
 8001190:	40010800 	.word	0x40010800
 8001194:	00000000 	.word	0x00000000

08001198 <MPU_6050_Get_Temp>:
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Z, 1, raw_acc_z, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
	acc_z = (((int16_t) raw_acc_z[0] << 8) + raw_acc_z[1]);
	return acc_z;
}

float MPU_6050_Get_Temp(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	81fb      	strh	r3, [r7, #14]
	float temp = 0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_TEMP, 1, temp_data, 2, 100);
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2302      	movs	r3, #2
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2241      	movs	r2, #65	@ 0x41
 80011b8:	21d1      	movs	r1, #209	@ 0xd1
 80011ba:	4817      	ldr	r0, [pc, #92]	@ (8001218 <MPU_6050_Get_Temp+0x80>)
 80011bc:	f003 fd4c 	bl	8004c58 <HAL_I2C_Mem_Read>
	raw_temp = (temp_data[0] << 8 | temp_data[1]);
 80011c0:	793b      	ldrb	r3, [r7, #4]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	81fb      	strh	r3, [r7, #14]
	temp = (raw_temp/340.0) + 36.53;
 80011ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f916 	bl	8000404 <__aeabi_i2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MPU_6050_Get_Temp+0x84>)
 80011de:	f7ff faa5 	bl	800072c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a309      	add	r3, pc, #36	@ (adr r3, 8001210 <MPU_6050_Get_Temp+0x78>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7fe ffbc 	bl	800016c <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc64 	bl	8000ac8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	60bb      	str	r3, [r7, #8]
	return temp;
 8001204:	68bb      	ldr	r3, [r7, #8]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0a3d70a4 	.word	0x0a3d70a4
 8001214:	404243d7 	.word	0x404243d7
 8001218:	20000270 	.word	0x20000270
 800121c:	40754000 	.word	0x40754000

08001220 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2110      	movs	r1, #16
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <SELECT+0x18>)
 800122a:	f003 faa5 	bl	8004778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f001 fe50 	bl	8002ed4 <HAL_Delay>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010800 	.word	0x40010800

0800123c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	2110      	movs	r1, #16
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <DESELECT+0x18>)
 8001246:	f003 fa97 	bl	8004778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f001 fe42 	bl	8002ed4 <HAL_Delay>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010800 	.word	0x40010800

08001258 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001262:	bf00      	nop
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <SPI_TxByte+0x30>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b02      	cmp	r3, #2
 8001270:	d1f8      	bne.n	8001264 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001272:	1df9      	adds	r1, r7, #7
 8001274:	2364      	movs	r3, #100	@ 0x64
 8001276:	2201      	movs	r2, #1
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <SPI_TxByte+0x30>)
 800127a:	f005 fdc7 	bl	8006e0c <HAL_SPI_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002d8 	.word	0x200002d8

0800128c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001298:	bf00      	nop
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <SPI_TxBuffer+0x30>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d1f8      	bne.n	800129a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	2364      	movs	r3, #100	@ 0x64
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4803      	ldr	r0, [pc, #12]	@ (80012bc <SPI_TxBuffer+0x30>)
 80012b0:	f005 fdac 	bl	8006e0c <HAL_SPI_Transmit>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002d8 	.word	0x200002d8

080012c0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80012c6:	23ff      	movs	r3, #255	@ 0xff
 80012c8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012ca:	bf00      	nop
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <SPI_RxByte+0x34>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d1f8      	bne.n	80012cc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012da:	1dba      	adds	r2, r7, #6
 80012dc:	1df9      	adds	r1, r7, #7
 80012de:	2364      	movs	r3, #100	@ 0x64
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <SPI_RxByte+0x34>)
 80012e6:	f005 fed4 	bl	8007092 <HAL_SPI_TransmitReceive>

	return data;
 80012ea:	79bb      	ldrb	r3, [r7, #6]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002d8 	.word	0x200002d8

080012f8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001300:	f7ff ffde 	bl	80012c0 <SPI_RxByte>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	701a      	strb	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <SD_ReadyWait+0x30>)
 800131c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001320:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001322:	f7ff ffcd 	bl	80012c0 <SPI_RxByte>
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2bff      	cmp	r3, #255	@ 0xff
 800132e:	d003      	beq.n	8001338 <SD_ReadyWait+0x24>
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SD_ReadyWait+0x30>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f4      	bne.n	8001322 <SD_ReadyWait+0xe>

	return res;
 8001338:	79fb      	ldrb	r3, [r7, #7]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000212 	.word	0x20000212

08001348 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800134e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001352:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001354:	f7ff ff72 	bl	800123c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	e005      	b.n	800136a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800135e:	20ff      	movs	r0, #255	@ 0xff
 8001360:	f7ff ff7a 	bl	8001258 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b09      	cmp	r3, #9
 800136e:	ddf6      	ble.n	800135e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001370:	f7ff ff56 	bl	8001220 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001374:	2340      	movs	r3, #64	@ 0x40
 8001376:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001388:	2395      	movs	r3, #149	@ 0x95
 800138a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800138c:	463b      	mov	r3, r7
 800138e:	2106      	movs	r1, #6
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff7b 	bl	800128c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001396:	e002      	b.n	800139e <SD_PowerOn+0x56>
	{
		cnt--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800139e:	f7ff ff8f 	bl	80012c0 <SPI_RxByte>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d002      	beq.n	80013ae <SD_PowerOn+0x66>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f4      	bne.n	8001398 <SD_PowerOn+0x50>
	}

	DESELECT();
 80013ae:	f7ff ff45 	bl	800123c <DESELECT>
	SPI_TxByte(0XFF);
 80013b2:	20ff      	movs	r0, #255	@ 0xff
 80013b4:	f7ff ff50 	bl	8001258 <SPI_TxByte>

	PowerFlag = 1;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <SD_PowerOn+0x80>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000215 	.word	0x20000215

080013cc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <SD_PowerOff+0x14>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000215 	.word	0x20000215

080013e4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80013e8:	4b02      	ldr	r3, [pc, #8]	@ (80013f4 <SD_CheckPower+0x10>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000215 	.word	0x20000215

080013f8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <SD_RxDataBlock+0x58>)
 8001404:	22c8      	movs	r2, #200	@ 0xc8
 8001406:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001408:	f7ff ff5a 	bl	80012c0 <SPI_RxByte>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	d103      	bne.n	800141e <SD_RxDataBlock+0x26>
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <SD_RxDataBlock+0x58>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f4      	bne.n	8001408 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2bfe      	cmp	r3, #254	@ 0xfe
 8001422:	d001      	beq.n	8001428 <SD_RxDataBlock+0x30>
 8001424:	2300      	movs	r3, #0
 8001426:	e00f      	b.n	8001448 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff62 	bl	80012f8 <SPI_RxBytePtr>
	} while(len--);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f4      	bne.n	8001428 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800143e:	f7ff ff3f 	bl	80012c0 <SPI_RxByte>
	SPI_RxByte();
 8001442:	f7ff ff3d 	bl	80012c0 <SPI_RxByte>

	return TRUE;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000210 	.word	0x20000210

08001454 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001464:	f7ff ff56 	bl	8001314 <SD_ReadyWait>
 8001468:	4603      	mov	r3, r0
 800146a:	2bff      	cmp	r3, #255	@ 0xff
 800146c:	d001      	beq.n	8001472 <SD_TxDataBlock+0x1e>
 800146e:	2300      	movs	r3, #0
 8001470:	e02f      	b.n	80014d2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff feef 	bl	8001258 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2bfd      	cmp	r3, #253	@ 0xfd
 800147e:	d020      	beq.n	80014c2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff01 	bl	800128c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800148a:	f7ff ff19 	bl	80012c0 <SPI_RxByte>
		SPI_RxByte();
 800148e:	f7ff ff17 	bl	80012c0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001492:	e00b      	b.n	80014ac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001494:	f7ff ff14 	bl	80012c0 <SPI_RxByte>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d006      	beq.n	80014b4 <SD_TxDataBlock+0x60>
			i++;
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	3301      	adds	r3, #1
 80014aa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	2b40      	cmp	r3, #64	@ 0x40
 80014b0:	d9f0      	bls.n	8001494 <SD_TxDataBlock+0x40>
 80014b2:	e000      	b.n	80014b6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80014b4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80014b6:	bf00      	nop
 80014b8:	f7ff ff02 	bl	80012c0 <SPI_RxByte>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0fa      	beq.n	80014b8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d101      	bne.n	80014d0 <SD_TxDataBlock+0x7c>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	6039      	str	r1, [r7, #0]
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014e6:	f7ff ff15 	bl	8001314 <SD_ReadyWait>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2bff      	cmp	r3, #255	@ 0xff
 80014ee:	d001      	beq.n	80014f4 <SD_SendCmd+0x1a>
 80014f0:	23ff      	movs	r3, #255	@ 0xff
 80014f2:	e042      	b.n	800157a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff feae 	bl	8001258 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	0e1b      	lsrs	r3, r3, #24
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fea8 	bl	8001258 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fea2 	bl	8001258 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe9c 	bl	8001258 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe97 	bl	8001258 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b40      	cmp	r3, #64	@ 0x40
 800152e:	d102      	bne.n	8001536 <SD_SendCmd+0x5c>
 8001530:	2395      	movs	r3, #149	@ 0x95
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e007      	b.n	8001546 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b48      	cmp	r3, #72	@ 0x48
 800153a:	d102      	bne.n	8001542 <SD_SendCmd+0x68>
 800153c:	2387      	movs	r3, #135	@ 0x87
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e001      	b.n	8001546 <SD_SendCmd+0x6c>
	else crc = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe85 	bl	8001258 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b4c      	cmp	r3, #76	@ 0x4c
 8001552:	d101      	bne.n	8001558 <SD_SendCmd+0x7e>
 8001554:	f7ff feb4 	bl	80012c0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800155c:	f7ff feb0 	bl	80012c0 <SPI_RxByte>
 8001560:	4603      	mov	r3, r0
 8001562:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001564:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da05      	bge.n	8001578 <SD_SendCmd+0x9e>
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	3b01      	subs	r3, #1
 8001570:	73bb      	strb	r3, [r7, #14]
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f1      	bne.n	800155c <SD_SendCmd+0x82>

	return res;
 8001578:	7b7b      	ldrb	r3, [r7, #13]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SD_disk_initialize+0x14>
 8001594:	2301      	movs	r3, #1
 8001596:	e0d1      	b.n	800173c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001598:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <SD_disk_initialize+0x1c0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <SD_disk_initialize+0x2a>
 80015a6:	4b67      	ldr	r3, [pc, #412]	@ (8001744 <SD_disk_initialize+0x1c0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	e0c6      	b.n	800173c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80015ae:	f7ff fecb 	bl	8001348 <SD_PowerOn>

	/* slave select */
	SELECT();
 80015b2:	f7ff fe35 	bl	8001220 <SELECT>

	/* check disk type */
	type = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80015ba:	2100      	movs	r1, #0
 80015bc:	2040      	movs	r0, #64	@ 0x40
 80015be:	f7ff ff8c 	bl	80014da <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 80a1 	bne.w	800170c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80015ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <SD_disk_initialize+0x1c4>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015d2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80015d6:	2048      	movs	r0, #72	@ 0x48
 80015d8:	f7ff ff7f 	bl	80014da <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d155      	bne.n	800168e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e00c      	b.n	8001602 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80015e8:	7bfc      	ldrb	r4, [r7, #15]
 80015ea:	f7ff fe69 	bl	80012c0 <SPI_RxByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	f104 0310 	add.w	r3, r4, #16
 80015f6:	443b      	add	r3, r7
 80015f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d9ef      	bls.n	80015e8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001608:	7abb      	ldrb	r3, [r7, #10]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d17e      	bne.n	800170c <SD_disk_initialize+0x188>
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	2baa      	cmp	r3, #170	@ 0xaa
 8001612:	d17b      	bne.n	800170c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001614:	2100      	movs	r1, #0
 8001616:	2077      	movs	r0, #119	@ 0x77
 8001618:	f7ff ff5f 	bl	80014da <SD_SendCmd>
 800161c:	4603      	mov	r3, r0
 800161e:	2b01      	cmp	r3, #1
 8001620:	d807      	bhi.n	8001632 <SD_disk_initialize+0xae>
 8001622:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001626:	2069      	movs	r0, #105	@ 0x69
 8001628:	f7ff ff57 	bl	80014da <SD_SendCmd>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <SD_disk_initialize+0x1c4>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ec      	bne.n	8001614 <SD_disk_initialize+0x90>
 800163a:	e000      	b.n	800163e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800163c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <SD_disk_initialize+0x1c4>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d062      	beq.n	800170c <SD_disk_initialize+0x188>
 8001646:	2100      	movs	r1, #0
 8001648:	207a      	movs	r0, #122	@ 0x7a
 800164a:	f7ff ff46 	bl	80014da <SD_SendCmd>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d15b      	bne.n	800170c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e00c      	b.n	8001674 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800165a:	7bfc      	ldrb	r4, [r7, #15]
 800165c:	f7ff fe30 	bl	80012c0 <SPI_RxByte>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	f104 0310 	add.w	r3, r4, #16
 8001668:	443b      	add	r3, r7
 800166a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3301      	adds	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d9ef      	bls.n	800165a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800167a:	7a3b      	ldrb	r3, [r7, #8]
 800167c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SD_disk_initialize+0x104>
 8001684:	230c      	movs	r3, #12
 8001686:	e000      	b.n	800168a <SD_disk_initialize+0x106>
 8001688:	2304      	movs	r3, #4
 800168a:	73bb      	strb	r3, [r7, #14]
 800168c:	e03e      	b.n	800170c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800168e:	2100      	movs	r1, #0
 8001690:	2077      	movs	r0, #119	@ 0x77
 8001692:	f7ff ff22 	bl	80014da <SD_SendCmd>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d808      	bhi.n	80016ae <SD_disk_initialize+0x12a>
 800169c:	2100      	movs	r1, #0
 800169e:	2069      	movs	r0, #105	@ 0x69
 80016a0:	f7ff ff1b 	bl	80014da <SD_SendCmd>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d801      	bhi.n	80016ae <SD_disk_initialize+0x12a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e000      	b.n	80016b0 <SD_disk_initialize+0x12c>
 80016ae:	2301      	movs	r3, #1
 80016b0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d10e      	bne.n	80016d6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80016b8:	2100      	movs	r1, #0
 80016ba:	2077      	movs	r0, #119	@ 0x77
 80016bc:	f7ff ff0d 	bl	80014da <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d80e      	bhi.n	80016e4 <SD_disk_initialize+0x160>
 80016c6:	2100      	movs	r1, #0
 80016c8:	2069      	movs	r0, #105	@ 0x69
 80016ca:	f7ff ff06 	bl	80014da <SD_SendCmd>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <SD_disk_initialize+0x160>
 80016d4:	e00c      	b.n	80016f0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016d6:	2100      	movs	r1, #0
 80016d8:	2041      	movs	r0, #65	@ 0x41
 80016da:	f7ff fefe 	bl	80014da <SD_SendCmd>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <SD_disk_initialize+0x1c4>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e2      	bne.n	80016b2 <SD_disk_initialize+0x12e>
 80016ec:	e000      	b.n	80016f0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ee:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <SD_disk_initialize+0x1c4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <SD_disk_initialize+0x184>
 80016f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016fc:	2050      	movs	r0, #80	@ 0x50
 80016fe:	f7ff feec 	bl	80014da <SD_SendCmd>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SD_disk_initialize+0x188>
 8001708:	2300      	movs	r3, #0
 800170a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800170c:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <SD_disk_initialize+0x1c8>)
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001712:	f7ff fd93 	bl	800123c <DESELECT>
	SPI_RxByte();
 8001716:	f7ff fdd3 	bl	80012c0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <SD_disk_initialize+0x1c0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <SD_disk_initialize+0x1c0>)
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e001      	b.n	8001736 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001732:	f7ff fe4b 	bl	80013cc <SD_PowerOff>
	}

	return Stat;
 8001736:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <SD_disk_initialize+0x1c0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000210 	.word	0x20000210
 800174c:	20000214 	.word	0x20000214

08001750 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SD_disk_status+0x14>
 8001760:	2301      	movs	r3, #1
 8001762:	e002      	b.n	800176a <SD_disk_status+0x1a>
	return Stat;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <SD_disk_status+0x24>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000

08001778 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <SD_disk_read+0x1c>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <SD_disk_read+0x20>
 8001794:	2304      	movs	r3, #4
 8001796:	e051      	b.n	800183c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001798:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <SD_disk_read+0xcc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SD_disk_read+0x32>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e048      	b.n	800183c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <SD_disk_read+0xd0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <SD_disk_read+0x44>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	607b      	str	r3, [r7, #4]

	SELECT();
 80017bc:	f7ff fd30 	bl	8001220 <SELECT>

	if (count == 1)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d111      	bne.n	80017ea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	2051      	movs	r0, #81	@ 0x51
 80017ca:	f7ff fe86 	bl	80014da <SD_SendCmd>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d129      	bne.n	8001828 <SD_disk_read+0xb0>
 80017d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f7ff fe0d 	bl	80013f8 <SD_RxDataBlock>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <SD_disk_read+0xb0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	e01e      	b.n	8001828 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	2052      	movs	r0, #82	@ 0x52
 80017ee:	f7ff fe74 	bl	80014da <SD_SendCmd>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d117      	bne.n	8001828 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f7ff fdfb 	bl	80013f8 <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <SD_disk_read+0xa6>
				buff += 512;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800180e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ed      	bne.n	80017f8 <SD_disk_read+0x80>
 800181c:	e000      	b.n	8001820 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800181e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001820:	2100      	movs	r1, #0
 8001822:	204c      	movs	r0, #76	@ 0x4c
 8001824:	f7ff fe59 	bl	80014da <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001828:	f7ff fd08 	bl	800123c <DESELECT>
	SPI_RxByte();
 800182c:	f7ff fd48 	bl	80012c0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000214 	.word	0x20000214

0800184c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <SD_disk_write+0x1c>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <SD_disk_write+0x20>
 8001868:	2304      	movs	r3, #4
 800186a:	e06b      	b.n	8001944 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <SD_disk_write+0x100>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SD_disk_write+0x32>
 800187a:	2303      	movs	r3, #3
 800187c:	e062      	b.n	8001944 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800187e:	4b33      	ldr	r3, [pc, #204]	@ (800194c <SD_disk_write+0x100>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SD_disk_write+0x44>
 800188c:	2302      	movs	r3, #2
 800188e:	e059      	b.n	8001944 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001890:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <SD_disk_write+0x104>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <SD_disk_write+0x56>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80018a2:	f7ff fcbd 	bl	8001220 <SELECT>

	if (count == 1)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d110      	bne.n	80018ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	2058      	movs	r0, #88	@ 0x58
 80018b0:	f7ff fe13 	bl	80014da <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13a      	bne.n	8001930 <SD_disk_write+0xe4>
 80018ba:	21fe      	movs	r1, #254	@ 0xfe
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f7ff fdc9 	bl	8001454 <SD_TxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d033      	beq.n	8001930 <SD_disk_write+0xe4>
			count = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e030      	b.n	8001930 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <SD_disk_write+0x104>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80018da:	2100      	movs	r1, #0
 80018dc:	2077      	movs	r0, #119	@ 0x77
 80018de:	f7ff fdfc 	bl	80014da <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	2057      	movs	r0, #87	@ 0x57
 80018e6:	f7ff fdf8 	bl	80014da <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	2059      	movs	r0, #89	@ 0x59
 80018ee:	f7ff fdf4 	bl	80014da <SD_SendCmd>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11b      	bne.n	8001930 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018f8:	21fc      	movs	r1, #252	@ 0xfc
 80018fa:	68b8      	ldr	r0, [r7, #8]
 80018fc:	f7ff fdaa 	bl	8001454 <SD_TxDataBlock>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <SD_disk_write+0xd0>
				buff += 512;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800190c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ee      	bne.n	80018f8 <SD_disk_write+0xac>
 800191a:	e000      	b.n	800191e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800191c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800191e:	21fd      	movs	r1, #253	@ 0xfd
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fd97 	bl	8001454 <SD_TxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <SD_disk_write+0xe4>
			{
				count = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001930:	f7ff fc84 	bl	800123c <DESELECT>
	SPI_RxByte();
 8001934:	f7ff fcc4 	bl	80012c0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000214 	.word	0x20000214

08001954 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	@ 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	603a      	str	r2, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	460b      	mov	r3, r1
 8001962:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SD_disk_ioctl+0x1e>
 800196e:	2304      	movs	r3, #4
 8001970:	e113      	b.n	8001b9a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d124      	bne.n	80019c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d012      	beq.n	80019ac <SD_disk_ioctl+0x58>
 8001986:	2b02      	cmp	r3, #2
 8001988:	dc1a      	bgt.n	80019c0 <SD_disk_ioctl+0x6c>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <SD_disk_ioctl+0x40>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d006      	beq.n	80019a0 <SD_disk_ioctl+0x4c>
 8001992:	e015      	b.n	80019c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001994:	f7ff fd1a 	bl	80013cc <SD_PowerOff>
			res = RES_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800199e:	e0fa      	b.n	8001b96 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80019a0:	f7ff fcd2 	bl	8001348 <SD_PowerOn>
			res = RES_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019aa:	e0f4      	b.n	8001b96 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	1c5c      	adds	r4, r3, #1
 80019b0:	f7ff fd18 	bl	80013e4 <SD_CheckPower>
 80019b4:	4603      	mov	r3, r0
 80019b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019be:	e0ea      	b.n	8001b96 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80019c0:	2304      	movs	r3, #4
 80019c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019c6:	e0e6      	b.n	8001b96 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019c8:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <SD_disk_ioctl+0x250>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SD_disk_ioctl+0x86>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0df      	b.n	8001b9a <SD_disk_ioctl+0x246>

		SELECT();
 80019da:	f7ff fc21 	bl	8001220 <SELECT>

		switch (ctrl)
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	2b0d      	cmp	r3, #13
 80019e2:	f200 80c9 	bhi.w	8001b78 <SD_disk_ioctl+0x224>
 80019e6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ec <SD_disk_ioctl+0x98>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001ae3 	.word	0x08001ae3
 80019f0:	08001a25 	.word	0x08001a25
 80019f4:	08001ad3 	.word	0x08001ad3
 80019f8:	08001b79 	.word	0x08001b79
 80019fc:	08001b79 	.word	0x08001b79
 8001a00:	08001b79 	.word	0x08001b79
 8001a04:	08001b79 	.word	0x08001b79
 8001a08:	08001b79 	.word	0x08001b79
 8001a0c:	08001b79 	.word	0x08001b79
 8001a10:	08001b79 	.word	0x08001b79
 8001a14:	08001b79 	.word	0x08001b79
 8001a18:	08001af5 	.word	0x08001af5
 8001a1c:	08001b19 	.word	0x08001b19
 8001a20:	08001b3d 	.word	0x08001b3d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a24:	2100      	movs	r1, #0
 8001a26:	2049      	movs	r0, #73	@ 0x49
 8001a28:	f7ff fd57 	bl	80014da <SD_SendCmd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 80a6 	bne.w	8001b80 <SD_disk_ioctl+0x22c>
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fcdc 	bl	80013f8 <SD_RxDataBlock>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809c 	beq.w	8001b80 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10d      	bne.n	8001a6e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a52:	7d7b      	ldrb	r3, [r7, #21]
 8001a54:	461a      	mov	r2, r3
 8001a56:	7d3b      	ldrb	r3, [r7, #20]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	029a      	lsls	r2, r3, #10
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e02d      	b.n	8001aca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a6e:	7c7b      	ldrb	r3, [r7, #17]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	7dbb      	ldrb	r3, [r7, #22]
 8001a78:	09db      	lsrs	r3, r3, #7
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	7d7b      	ldrb	r3, [r7, #21]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 0306 	and.w	r3, r3, #6
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3302      	adds	r3, #2
 8001a92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a96:	7d3b      	ldrb	r3, [r7, #20]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	7cfb      	ldrb	r3, [r7, #19]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001abc:	8bfa      	ldrh	r2, [r7, #30]
 8001abe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ac2:	3b09      	subs	r3, #9
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001ad0:	e056      	b.n	8001b80 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ae0:	e055      	b.n	8001b8e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ae2:	f7ff fc17 	bl	8001314 <SD_ReadyWait>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2bff      	cmp	r3, #255	@ 0xff
 8001aea:	d14b      	bne.n	8001b84 <SD_disk_ioctl+0x230>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001af2:	e047      	b.n	8001b84 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001af4:	2100      	movs	r1, #0
 8001af6:	2049      	movs	r0, #73	@ 0x49
 8001af8:	f7ff fcef 	bl	80014da <SD_SendCmd>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d142      	bne.n	8001b88 <SD_disk_ioctl+0x234>
 8001b02:	2110      	movs	r1, #16
 8001b04:	6a38      	ldr	r0, [r7, #32]
 8001b06:	f7ff fc77 	bl	80013f8 <SD_RxDataBlock>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03b      	beq.n	8001b88 <SD_disk_ioctl+0x234>
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b16:	e037      	b.n	8001b88 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b18:	2100      	movs	r1, #0
 8001b1a:	204a      	movs	r0, #74	@ 0x4a
 8001b1c:	f7ff fcdd 	bl	80014da <SD_SendCmd>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d132      	bne.n	8001b8c <SD_disk_ioctl+0x238>
 8001b26:	2110      	movs	r1, #16
 8001b28:	6a38      	ldr	r0, [r7, #32]
 8001b2a:	f7ff fc65 	bl	80013f8 <SD_RxDataBlock>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02b      	beq.n	8001b8c <SD_disk_ioctl+0x238>
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b3a:	e027      	b.n	8001b8c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	207a      	movs	r0, #122	@ 0x7a
 8001b40:	f7ff fccb 	bl	80014da <SD_SendCmd>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b50:	e00b      	b.n	8001b6a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001b52:	6a3c      	ldr	r4, [r7, #32]
 8001b54:	1c63      	adds	r3, r4, #1
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	f7ff fbb2 	bl	80012c0 <SPI_RxByte>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d9ef      	bls.n	8001b52 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b7e:	e006      	b.n	8001b8e <SD_disk_ioctl+0x23a>
			break;
 8001b80:	bf00      	nop
 8001b82:	e004      	b.n	8001b8e <SD_disk_ioctl+0x23a>
			break;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <SD_disk_ioctl+0x23a>
			break;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <SD_disk_ioctl+0x23a>
			break;
 8001b8c:	bf00      	nop
		}

		DESELECT();
 8001b8e:	f7ff fb55 	bl	800123c <DESELECT>
		SPI_RxByte();
 8001b92:	f7ff fb95 	bl	80012c0 <SPI_RxByte>
	}

	return res;
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	372c      	adds	r7, #44	@ 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_CAN_RxFifo0MsgPendingCallback>:

const char *array_elementos[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001bb0:	4b83      	ldr	r3, [pc, #524]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001bb2:	4a84      	ldr	r2, [pc, #528]	@ (8001dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f001 ffe3 	bl	8003b82 <HAL_CAN_GetRxMessage>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	4881      	ldr	r0, [pc, #516]	@ (8001dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001bc4:	f002 fdd8 	bl	8004778 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001bc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bcc:	487f      	ldr	r0, [pc, #508]	@ (8001dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001bce:	f002 fdeb 	bl	80047a8 <HAL_GPIO_TogglePin>
	switch (RxHeader.StdId){
 8001bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001bda:	d005      	beq.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001bdc:	f240 5221 	movw	r2, #1313	@ 0x521
 8001be0:	4293      	cmp	r3, r2
 8001be2:	f000 81c2 	beq.w	8001f6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3c2>
	}

//	if (RxHeader.StdId == 0x118){
//	Message_Ready118 = 1;
//	}
}
 8001be6:	e22a      	b.n	800203e <HAL_CAN_RxFifo0MsgPendingCallback+0x496>
			CAN_Status = 1;
 8001be8:	4b79      	ldr	r3, [pc, #484]	@ (8001dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
			Engine_Speed = (uint8_t)RxData[0];
 8001bee:	4b74      	ldr	r3, [pc, #464]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b77      	ldr	r3, [pc, #476]	@ (8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001bf6:	601a      	str	r2, [r3, #0]
			Engine_Speed = (int)Engine_Speed *100;
 8001bf8:	4b76      	ldr	r3, [pc, #472]	@ (8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2264      	movs	r2, #100	@ 0x64
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	4a74      	ldr	r2, [pc, #464]	@ (8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8001c04:	6013      	str	r3, [r2, #0]
			Throttle_Pos = (uint8_t)RxData[1];
 8001c06:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001c08:	785a      	ldrb	r2, [r3, #1]
 8001c0a:	4b73      	ldr	r3, [pc, #460]	@ (8001dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001c0c:	701a      	strb	r2, [r3, #0]
			Coolant_Temp = (uint8_t)RxData[2];
 8001c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001c10:	789a      	ldrb	r2, [r3, #2]
 8001c12:	4b72      	ldr	r3, [pc, #456]	@ (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8001c14:	701a      	strb	r2, [r3, #0]
			Battery_Voltage = (uint8_t)RxData[3];
 8001c16:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001c18:	78da      	ldrb	r2, [r3, #3]
 8001c1a:	4b71      	ldr	r3, [pc, #452]	@ (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			Battery_Voltage_Float = (float)Battery_Voltage/10;
 8001c1e:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f856 	bl	8000cd4 <__aeabi_ui2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	496e      	ldr	r1, [pc, #440]	@ (8001de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f95d 	bl	8000eec <__aeabi_fdiv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b6c      	ldr	r3, [pc, #432]	@ (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001c38:	601a      	str	r2, [r3, #0]
			Brake_Pressure = (int16_t)RxData[4]<<8 | RxData[5];
 8001c3a:	4b61      	ldr	r3, [pc, #388]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b67      	ldr	r3, [pc, #412]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001c4e:	801a      	strh	r2, [r3, #0]
			Brake_Percentage = 0.0138*Brake_Pressure;
 8001c50:	4b66      	ldr	r3, [pc, #408]	@ (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fbd4 	bl	8000404 <__aeabi_i2d>
 8001c5c:	a356      	add	r3, pc, #344	@ (adr r3, 8001db8 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fc39 	bl	80004d8 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ff0b 	bl	8000a88 <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b5e      	ldr	r3, [pc, #376]	@ (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c78:	701a      	strb	r2, [r3, #0]
			NEXTION_SendNumber(&huart1, "brakePedal", Brake_Percentage);
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	495c      	ldr	r1, [pc, #368]	@ (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001c82:	485d      	ldr	r0, [pc, #372]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001c84:	f000 fcde 	bl	8002644 <NEXTION_SendNumber>
			MPU_6050_Temp = MPU_6050_Get_Temp();
 8001c88:	f7ff fa86 	bl	8001198 <MPU_6050_Get_Temp>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9c8 	bl	8001024 <__aeabi_f2uiz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b58      	ldr	r3, [pc, #352]	@ (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001c9a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8001c9c:	4858      	ldr	r0, [pc, #352]	@ (8001e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001c9e:	f001 fa15 	bl	80030cc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca6:	4856      	ldr	r0, [pc, #344]	@ (8001e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001ca8:	f001 fabe 	bl	8003228 <HAL_ADC_PollForConversion>
			Gear = HAL_ADC_GetValue(&hadc1);
 8001cac:	4854      	ldr	r0, [pc, #336]	@ (8001e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001cae:	f001 fbc1 	bl	8003434 <HAL_ADC_GetValue>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001cb8:	801a      	strh	r2, [r3, #0]
			if ((Gear>=40)&&(Gear<500)){
 8001cba:	4b52      	ldr	r3, [pc, #328]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b27      	cmp	r3, #39	@ 0x27
 8001cc0:	d90e      	bls.n	8001ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8001cc2:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cca:	d209      	bcs.n	8001ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
				strcpy(Gear_Text,"N");
 8001ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001cce:	224e      	movs	r2, #78	@ 0x4e
 8001cd0:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001cd6:	494d      	ldr	r1, [pc, #308]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001cd8:	4847      	ldr	r0, [pc, #284]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001cda:	f000 fc71 	bl	80025c0 <NEXTION_SendText>
 8001cde:	e0a5      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
			else if((Gear>=600)&&(Gear<950)){
 8001ce0:	4b48      	ldr	r3, [pc, #288]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001ce8:	d30f      	bcc.n	8001d0a <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
 8001cea:	4b46      	ldr	r3, [pc, #280]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d809      	bhi.n	8001d0a <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
				strcpy(Gear_Text,"1");
 8001cf6:	4b44      	ldr	r3, [pc, #272]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001cf8:	2231      	movs	r2, #49	@ 0x31
 8001cfa:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4a42      	ldr	r2, [pc, #264]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d00:	4942      	ldr	r1, [pc, #264]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001d02:	483d      	ldr	r0, [pc, #244]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001d04:	f000 fc5c 	bl	80025c0 <NEXTION_SendText>
 8001d08:	e090      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
			else if((Gear>=1000)&&(Gear<1350)){
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d12:	d30f      	bcc.n	8001d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>
 8001d14:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f240 5245 	movw	r2, #1349	@ 0x545
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d809      	bhi.n	8001d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>
				strcpy(Gear_Text,"2");
 8001d20:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d22:	2232      	movs	r2, #50	@ 0x32
 8001d24:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001d26:	2300      	movs	r3, #0
 8001d28:	4a37      	ldr	r2, [pc, #220]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d2a:	4938      	ldr	r1, [pc, #224]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001d2c:	4832      	ldr	r0, [pc, #200]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001d2e:	f000 fc47 	bl	80025c0 <NEXTION_SendText>
 8001d32:	e07b      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
			else if((Gear>=1500)&&(Gear<1800)){
 8001d34:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d90e      	bls.n	8001d5e <HAL_CAN_RxFifo0MsgPendingCallback+0x1b6>
 8001d40:	4b30      	ldr	r3, [pc, #192]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001d48:	d209      	bcs.n	8001d5e <HAL_CAN_RxFifo0MsgPendingCallback+0x1b6>
				strcpy(Gear_Text,"3");
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d4c:	2233      	movs	r2, #51	@ 0x33
 8001d4e:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001d50:	2300      	movs	r3, #0
 8001d52:	4a2d      	ldr	r2, [pc, #180]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d54:	492d      	ldr	r1, [pc, #180]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001d56:	4828      	ldr	r0, [pc, #160]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001d58:	f000 fc32 	bl	80025c0 <NEXTION_SendText>
 8001d5c:	e066      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
			else if((Gear>=1900)&&(Gear<2100)){
 8001d5e:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d90f      	bls.n	8001d8a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
 8001d6a:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f640 0233 	movw	r2, #2099	@ 0x833
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d809      	bhi.n	8001d8a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
				strcpy(Gear_Text,"4");
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d78:	2234      	movs	r2, #52	@ 0x34
 8001d7a:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4a22      	ldr	r2, [pc, #136]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d80:	4922      	ldr	r1, [pc, #136]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001d82:	481d      	ldr	r0, [pc, #116]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001d84:	f000 fc1c 	bl	80025c0 <NEXTION_SendText>
 8001d88:	e050      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
			else if((Gear>=2150)&&(Gear<2400)){
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	f640 0265 	movw	r2, #2149	@ 0x865
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d93c      	bls.n	8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001d9e:	d237      	bcs.n	8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
				strcpy(Gear_Text,"5");
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001da2:	2235      	movs	r2, #53	@ 0x35
 8001da4:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001da6:	2300      	movs	r3, #0
 8001da8:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001daa:	4918      	ldr	r1, [pc, #96]	@ (8001e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001dac:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001dae:	f000 fc07 	bl	80025c0 <NEXTION_SendText>
 8001db2:	e03b      	b.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
 8001db4:	f3af 8000 	nop.w
 8001db8:	a57a786c 	.word	0xa57a786c
 8001dbc:	3f8c432c 	.word	0x3f8c432c
 8001dc0:	20000394 	.word	0x20000394
 8001dc4:	20000378 	.word	0x20000378
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	200003b3 	.word	0x200003b3
 8001dd4:	2000039c 	.word	0x2000039c
 8001dd8:	200003a0 	.word	0x200003a0
 8001ddc:	200003a1 	.word	0x200003a1
 8001de0:	200003a2 	.word	0x200003a2
 8001de4:	41200000 	.word	0x41200000
 8001de8:	200003a4 	.word	0x200003a4
 8001dec:	200003a8 	.word	0x200003a8
 8001df0:	200003b2 	.word	0x200003b2
 8001df4:	0800a774 	.word	0x0800a774
 8001df8:	20000330 	.word	0x20000330
 8001dfc:	200003b4 	.word	0x200003b4
 8001e00:	20000218 	.word	0x20000218
 8001e04:	200003b0 	.word	0x200003b0
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	0800a74c 	.word	0x0800a74c
			else if(Gear>=2400){
 8001e10:	4b8d      	ldr	r3, [pc, #564]	@ (8002048 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001e18:	d308      	bcc.n	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
				strcpy(Gear_Text,"6");
 8001e1a:	4b8c      	ldr	r3, [pc, #560]	@ (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8001e1c:	2236      	movs	r2, #54	@ 0x36
 8001e1e:	801a      	strh	r2, [r3, #0]
				NEXTION_SendText(&huart1, "gear", Gear_Text, NULL);
 8001e20:	2300      	movs	r3, #0
 8001e22:	4a8a      	ldr	r2, [pc, #552]	@ (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8001e24:	498a      	ldr	r1, [pc, #552]	@ (8002050 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8001e26:	488b      	ldr	r0, [pc, #556]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e28:	f000 fbca 	bl	80025c0 <NEXTION_SendText>
			sprintf(RPM_text, "%d", Engine_Speed);
 8001e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002058 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	498a      	ldr	r1, [pc, #552]	@ (800205c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8001e34:	488a      	ldr	r0, [pc, #552]	@ (8002060 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 8001e36:	f006 fbf5 	bl	8008624 <siprintf>
			NEXTION_SendText(&huart1, "revValue", RPM_text, NULL);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	4a88      	ldr	r2, [pc, #544]	@ (8002060 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 8001e3e:	4989      	ldr	r1, [pc, #548]	@ (8002064 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 8001e40:	4884      	ldr	r0, [pc, #528]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e42:	f000 fbbd 	bl	80025c0 <NEXTION_SendText>
			NEXTION_Send_Revs_v2(&huart1, Engine_Speed);
 8001e46:	4b84      	ldr	r3, [pc, #528]	@ (8002058 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4881      	ldr	r0, [pc, #516]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e4e:	f000 fc51 	bl	80026f4 <NEXTION_Send_Revs_v2>
			NEXTION_SendNumber(&huart1, "acePedal", Throttle_Pos);
 8001e52:	4b85      	ldr	r3, [pc, #532]	@ (8002068 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4984      	ldr	r1, [pc, #528]	@ (800206c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 8001e5a:	487e      	ldr	r0, [pc, #504]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e5c:	f000 fbf2 	bl	8002644 <NEXTION_SendNumber>
			sprintf(Coolant_Text, "%d", Coolant_Temp);
 8001e60:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	497d      	ldr	r1, [pc, #500]	@ (800205c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8001e68:	4882      	ldr	r0, [pc, #520]	@ (8002074 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001e6a:	f006 fbdb 	bl	8008624 <siprintf>
			NEXTION_SendText(&huart1,"engineTemp",Coolant_Text,"\xB0");
 8001e6e:	4b82      	ldr	r3, [pc, #520]	@ (8002078 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d0>)
 8001e70:	4a80      	ldr	r2, [pc, #512]	@ (8002074 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>)
 8001e72:	4982      	ldr	r1, [pc, #520]	@ (800207c <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 8001e74:	4877      	ldr	r0, [pc, #476]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e76:	f000 fba3 	bl	80025c0 <NEXTION_SendText>
			sprintf(Ambient_Temperature_Text, "%d", MPU_6050_Temp);
 8001e7a:	4b81      	ldr	r3, [pc, #516]	@ (8002080 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4976      	ldr	r1, [pc, #472]	@ (800205c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8001e82:	4880      	ldr	r0, [pc, #512]	@ (8002084 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 8001e84:	f006 fbce 	bl	8008624 <siprintf>
			NEXTION_SendText(&huart1,"ambtemperature",Ambient_Temperature_Text,"\xB0");
 8001e88:	4b7b      	ldr	r3, [pc, #492]	@ (8002078 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d0>)
 8001e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002084 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 8001e8c:	497e      	ldr	r1, [pc, #504]	@ (8002088 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e0>)
 8001e8e:	4871      	ldr	r0, [pc, #452]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001e90:	f000 fb96 	bl	80025c0 <NEXTION_SendText>
			if (CAN_Status == 1){
 8001e94:	4b7d      	ldr	r3, [pc, #500]	@ (800208c <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_CAN_RxFifo0MsgPendingCallback+0x302>
				NEXTION_estado_color(&huart1, "can", 1024);
 8001e9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea0:	497b      	ldr	r1, [pc, #492]	@ (8002090 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8001ea2:	486c      	ldr	r0, [pc, #432]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001ea4:	f000 fbfa 	bl	800269c <NEXTION_estado_color>
 8001ea8:	e005      	b.n	8001eb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x30e>
				NEXTION_estado_color(&huart1, "can", 63488);
 8001eaa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001eae:	4978      	ldr	r1, [pc, #480]	@ (8002090 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8001eb0:	4868      	ldr	r0, [pc, #416]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001eb2:	f000 fbf3 	bl	800269c <NEXTION_estado_color>
			if (Coolant_Temp<95){
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b5e      	cmp	r3, #94	@ 0x5e
 8001ebc:	d806      	bhi.n	8001ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x324>
				NEXTION_estado_color(&huart1, "engineTemp", 36609);
 8001ebe:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8001ec2:	496e      	ldr	r1, [pc, #440]	@ (800207c <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 8001ec4:	4863      	ldr	r0, [pc, #396]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001ec6:	f000 fbe9 	bl	800269c <NEXTION_estado_color>
 8001eca:	e014      	b.n	8001ef6 <HAL_CAN_RxFifo0MsgPendingCallback+0x34e>
			else if((Coolant_Temp>=95)&&(Coolant_Temp<=99)){
 8001ecc:	4b68      	ldr	r3, [pc, #416]	@ (8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b5e      	cmp	r3, #94	@ 0x5e
 8001ed2:	d90a      	bls.n	8001eea <HAL_CAN_RxFifo0MsgPendingCallback+0x342>
 8001ed4:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b63      	cmp	r3, #99	@ 0x63
 8001eda:	d806      	bhi.n	8001eea <HAL_CAN_RxFifo0MsgPendingCallback+0x342>
				NEXTION_estado_color(&huart1, "engineTemp", 64520);
 8001edc:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 8001ee0:	4966      	ldr	r1, [pc, #408]	@ (800207c <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 8001ee2:	485c      	ldr	r0, [pc, #368]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001ee4:	f000 fbda 	bl	800269c <NEXTION_estado_color>
 8001ee8:	e005      	b.n	8001ef6 <HAL_CAN_RxFifo0MsgPendingCallback+0x34e>
				NEXTION_estado_color(&huart1, "engineTemp", 63488);
 8001eea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001eee:	4963      	ldr	r1, [pc, #396]	@ (800207c <HAL_CAN_RxFifo0MsgPendingCallback+0x4d4>)
 8001ef0:	4858      	ldr	r0, [pc, #352]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001ef2:	f000 fbd3 	bl	800269c <NEXTION_estado_color>
			sprintf(Battery_Text, "%.1f",Battery_Voltage_Float);
 8001ef6:	4b67      	ldr	r3, [pc, #412]	@ (8002094 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fa94 	bl	8000428 <__aeabi_f2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4964      	ldr	r1, [pc, #400]	@ (8002098 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 8001f06:	4865      	ldr	r0, [pc, #404]	@ (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 8001f08:	f006 fb8c 	bl	8008624 <siprintf>
			NEXTION_SendText(&huart1,"voltage",Battery_Text,"V");
 8001f0c:	4b64      	ldr	r3, [pc, #400]	@ (80020a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>)
 8001f0e:	4a63      	ldr	r2, [pc, #396]	@ (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 8001f10:	4964      	ldr	r1, [pc, #400]	@ (80020a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 8001f12:	4850      	ldr	r0, [pc, #320]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001f14:	f000 fb54 	bl	80025c0 <NEXTION_SendText>
			if (Battery_Voltage>=12.5){
 8001f18:	4b63      	ldr	r3, [pc, #396]	@ (80020a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d906      	bls.n	8001f2e <HAL_CAN_RxFifo0MsgPendingCallback+0x386>
				NEXTION_estado_color(&huart1, "voltage", 36609);
 8001f20:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8001f24:	495f      	ldr	r1, [pc, #380]	@ (80020a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 8001f26:	484b      	ldr	r0, [pc, #300]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001f28:	f000 fbb8 	bl	800269c <NEXTION_estado_color>
 8001f2c:	e014      	b.n	8001f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b0>
			else if((Battery_Voltage<12.5)&&(Battery_Voltage>=12)){
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d80a      	bhi.n	8001f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>
 8001f36:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b0b      	cmp	r3, #11
 8001f3c:	d906      	bls.n	8001f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>
				NEXTION_estado_color(&huart1, "voltage", 64520);
 8001f3e:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 8001f42:	4958      	ldr	r1, [pc, #352]	@ (80020a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 8001f44:	4843      	ldr	r0, [pc, #268]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001f46:	f000 fba9 	bl	800269c <NEXTION_estado_color>
 8001f4a:	e005      	b.n	8001f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b0>
				NEXTION_estado_color(&huart1, "voltage", 63488);
 8001f4c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001f50:	4954      	ldr	r1, [pc, #336]	@ (80020a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 8001f52:	4840      	ldr	r0, [pc, #256]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001f54:	f000 fba2 	bl	800269c <NEXTION_estado_color>
			NEXTION_SendNumber(&huart1, "brakePedal", Brake_Pressure);
 8001f58:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <HAL_CAN_RxFifo0MsgPendingCallback+0x504>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4953      	ldr	r1, [pc, #332]	@ (80020b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x508>)
 8001f62:	483c      	ldr	r0, [pc, #240]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001f64:	f000 fb6e 	bl	8002644 <NEXTION_SendNumber>
			break;
 8001f68:	e069      	b.n	800203e <HAL_CAN_RxFifo0MsgPendingCallback+0x496>
			Ignition = (uint8_t)RxData[0];
 8001f6a:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b52      	ldr	r3, [pc, #328]	@ (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x510>)
 8001f70:	701a      	strb	r2, [r3, #0]
			SDC = (uint8_t)RxData[1];
 8001f72:	4b50      	ldr	r3, [pc, #320]	@ (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8001f74:	785a      	ldrb	r2, [r3, #1]
 8001f76:	4b51      	ldr	r3, [pc, #324]	@ (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8001f78:	701a      	strb	r2, [r3, #0]
			Sw_Starter = (uint8_t)RxData[2];
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8001f7c:	789a      	ldrb	r2, [r3, #2]
 8001f7e:	4b50      	ldr	r3, [pc, #320]	@ (80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8001f80:	701a      	strb	r2, [r3, #0]
			Left_Fan = (uint8_t)RxData[3];
 8001f82:	4b4c      	ldr	r3, [pc, #304]	@ (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8001f84:	78da      	ldrb	r2, [r3, #3]
 8001f86:	4b4f      	ldr	r3, [pc, #316]	@ (80020c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x51c>)
 8001f88:	701a      	strb	r2, [r3, #0]
			Right_Fan = (uint8_t)RxData[4];
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80020b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8001f8c:	791a      	ldrb	r2, [r3, #4]
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>)
 8001f90:	701a      	strb	r2, [r3, #0]
						if (Ignition == 1){
 8001f92:	4b49      	ldr	r3, [pc, #292]	@ (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x510>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d106      	bne.n	8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>
							NEXTION_estado_color(&huart1, "ignition", 1024);
 8001f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9e:	494b      	ldr	r1, [pc, #300]	@ (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x524>)
 8001fa0:	482c      	ldr	r0, [pc, #176]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001fa2:	f000 fb7b 	bl	800269c <NEXTION_estado_color>
 8001fa6:	e005      	b.n	8001fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>
							NEXTION_estado_color(&huart1, "ignition", 63488);
 8001fa8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001fac:	4947      	ldr	r1, [pc, #284]	@ (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x524>)
 8001fae:	4829      	ldr	r0, [pc, #164]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001fb0:	f000 fb74 	bl	800269c <NEXTION_estado_color>
						if (SDC == 0){
 8001fb4:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_CAN_RxFifo0MsgPendingCallback+0x422>
							NEXTION_estado_color(&huart1, "sdc", 1024);
 8001fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc0:	4943      	ldr	r1, [pc, #268]	@ (80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x528>)
 8001fc2:	4824      	ldr	r0, [pc, #144]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001fc4:	f000 fb6a 	bl	800269c <NEXTION_estado_color>
 8001fc8:	e005      	b.n	8001fd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42e>
							NEXTION_estado_color(&huart1, "sdc", 63488 );
 8001fca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001fce:	4940      	ldr	r1, [pc, #256]	@ (80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x528>)
 8001fd0:	4820      	ldr	r0, [pc, #128]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001fd2:	f000 fb63 	bl	800269c <NEXTION_estado_color>
						if (Sw_Starter == 1){
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x444>
							NEXTION_estado_color(&huart1, "str", 1024);
 8001fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe2:	493c      	ldr	r1, [pc, #240]	@ (80020d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x52c>)
 8001fe4:	481b      	ldr	r0, [pc, #108]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001fe6:	f000 fb59 	bl	800269c <NEXTION_estado_color>
 8001fea:	e005      	b.n	8001ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>
							NEXTION_estado_color(&huart1, "str", 63488);
 8001fec:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ff0:	4938      	ldr	r1, [pc, #224]	@ (80020d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x52c>)
 8001ff2:	4818      	ldr	r0, [pc, #96]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001ff4:	f000 fb52 	bl	800269c <NEXTION_estado_color>
						if (Left_Fan == 1){
 8001ff8:	4b32      	ldr	r3, [pc, #200]	@ (80020c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x51c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_CAN_RxFifo0MsgPendingCallback+0x466>
							NEXTION_estado_color(&huart1, "fanLeft", 1024);
 8002000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002004:	4934      	ldr	r1, [pc, #208]	@ (80020d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x530>)
 8002006:	4813      	ldr	r0, [pc, #76]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8002008:	f000 fb48 	bl	800269c <NEXTION_estado_color>
 800200c:	e005      	b.n	800201a <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
							NEXTION_estado_color(&huart1, "fanLeft", 63488);
 800200e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002012:	4931      	ldr	r1, [pc, #196]	@ (80020d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x530>)
 8002014:	480f      	ldr	r0, [pc, #60]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8002016:	f000 fb41 	bl	800269c <NEXTION_estado_color>
						if (Right_Fan == 1){
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
							NEXTION_estado_color(&huart1, "fanRight", 1024);
 8002022:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002026:	492d      	ldr	r1, [pc, #180]	@ (80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x534>)
 8002028:	480a      	ldr	r0, [pc, #40]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800202a:	f000 fb37 	bl	800269c <NEXTION_estado_color>
			break;
 800202e:	e005      	b.n	800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x494>
							NEXTION_estado_color(&huart1, "fanRight", 63488);
 8002030:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002034:	4929      	ldr	r1, [pc, #164]	@ (80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x534>)
 8002036:	4807      	ldr	r0, [pc, #28]	@ (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8002038:	f000 fb30 	bl	800269c <NEXTION_estado_color>
			break;
 800203c:	bf00      	nop
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003b0 	.word	0x200003b0
 800204c:	20000004 	.word	0x20000004
 8002050:	0800a74c 	.word	0x0800a74c
 8002054:	20000330 	.word	0x20000330
 8002058:	2000039c 	.word	0x2000039c
 800205c:	0800a780 	.word	0x0800a780
 8002060:	200003b8 	.word	0x200003b8
 8002064:	0800a740 	.word	0x0800a740
 8002068:	200003a0 	.word	0x200003a0
 800206c:	0800a784 	.word	0x0800a784
 8002070:	200003a1 	.word	0x200003a1
 8002074:	200003cc 	.word	0x200003cc
 8002078:	0800a790 	.word	0x0800a790
 800207c:	0800a794 	.word	0x0800a794
 8002080:	200003b4 	.word	0x200003b4
 8002084:	200003f4 	.word	0x200003f4
 8002088:	0800a7a0 	.word	0x0800a7a0
 800208c:	200003b3 	.word	0x200003b3
 8002090:	0800a7b0 	.word	0x0800a7b0
 8002094:	200003a4 	.word	0x200003a4
 8002098:	0800a7b4 	.word	0x0800a7b4
 800209c:	200003e0 	.word	0x200003e0
 80020a0:	0800a7bc 	.word	0x0800a7bc
 80020a4:	0800a7c0 	.word	0x0800a7c0
 80020a8:	200003a2 	.word	0x200003a2
 80020ac:	200003a8 	.word	0x200003a8
 80020b0:	0800a774 	.word	0x0800a774
 80020b4:	20000394 	.word	0x20000394
 80020b8:	200003aa 	.word	0x200003aa
 80020bc:	200003ab 	.word	0x200003ab
 80020c0:	200003ac 	.word	0x200003ac
 80020c4:	200003ad 	.word	0x200003ad
 80020c8:	200003ae 	.word	0x200003ae
 80020cc:	0800a7c8 	.word	0x0800a7c8
 80020d0:	0800a7d4 	.word	0x0800a7d4
 80020d4:	0800a7d8 	.word	0x0800a7d8
 80020d8:	0800a7dc 	.word	0x0800a7dc
 80020dc:	0800a7e4 	.word	0x0800a7e4

080020e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e4:	f000 fe94 	bl	8002e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e8:	f000 f826 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ec:	f000 f9ea 	bl	80024c4 <MX_GPIO_Init>
  MX_CAN_Init();
 80020f0:	f000 f8bc 	bl	800226c <MX_CAN_Init>
  MX_USART1_UART_Init();
 80020f4:	f000 f9bc 	bl	8002470 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80020f8:	f000 f93a 	bl	8002370 <MX_RTC_Init>
  MX_SPI2_Init();
 80020fc:	f000 f982 	bl	8002404 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002100:	f005 fbee 	bl	80078e0 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002104:	f000 f906 	bl	8002314 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002108:	f000 f872 	bl	80021f0 <MX_ADC1_Init>
 // NEXTION_SendPageChange(&huart1,"page1");

             //Inicializar interfaz a negro (por si se quedó la página con estilos a rojo por alguna alerta provocada por NEXTION_Alert())
  //NEXTION_Alert(&huart1, 0);

  HAL_CAN_Start(&hcan);
 800210c:	4808      	ldr	r0, [pc, #32]	@ (8002130 <main+0x50>)
 800210e:	f001 fcf4 	bl	8003afa <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002112:	2102      	movs	r1, #2
 8002114:	4806      	ldr	r0, [pc, #24]	@ (8002130 <main+0x50>)
 8002116:	f001 fe55 	bl	8003dc4 <HAL_CAN_ActivateNotification>

  MPU_6050_init();
 800211a:	f7fe ffa3 	bl	8001064 <MPU_6050_init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <main+0x54>)
 8002126:	f002 fb27 	bl	8004778 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212a:	bf00      	nop
 800212c:	e7fd      	b.n	800212a <main+0x4a>
 800212e:	bf00      	nop
 8002130:	20000248 	.word	0x20000248
 8002134:	40011000 	.word	0x40011000

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b094      	sub	sp, #80	@ 0x50
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002142:	2228      	movs	r2, #40	@ 0x28
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f006 facf 	bl	80086ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002168:	230a      	movs	r3, #10
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216c:	2301      	movs	r3, #1
 800216e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002170:	2310      	movs	r3, #16
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002174:	2301      	movs	r3, #1
 8002176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002178:	2302      	movs	r3, #2
 800217a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800217c:	2300      	movs	r3, #0
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002180:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fcba 	bl	8005b04 <HAL_RCC_OscConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002196:	f000 fa0d 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219a:	230f      	movs	r3, #15
 800219c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 ff26 	bl	8006008 <HAL_RCC_ClockConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80021c2:	f000 f9f7 	bl	80025b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80021c6:	2303      	movs	r3, #3
 80021c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80021d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f8a3 	bl	8006324 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80021e4:	f000 f9e6 	bl	80025b4 <Error_Handler>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3750      	adds	r7, #80	@ 0x50
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <MX_ADC1_Init+0x74>)
 8002202:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <MX_ADC1_Init+0x78>)
 8002204:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <MX_ADC1_Init+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <MX_ADC1_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <MX_ADC1_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <MX_ADC1_Init+0x74>)
 800221a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800221e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002220:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_ADC1_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <MX_ADC1_Init+0x74>)
 8002228:	2201      	movs	r2, #1
 800222a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800222c:	480d      	ldr	r0, [pc, #52]	@ (8002264 <MX_ADC1_Init+0x74>)
 800222e:	f000 fe75 	bl	8002f1c <HAL_ADC_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002238:	f000 f9bc 	bl	80025b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002240:	2301      	movs	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	@ (8002264 <MX_ADC1_Init+0x74>)
 800224e:	f001 f8fd 	bl	800344c <HAL_ADC_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002258:	f000 f9ac 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000218 	.word	0x20000218
 8002268:	40012400 	.word	0x40012400

0800226c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002272:	4b26      	ldr	r3, [pc, #152]	@ (800230c <MX_CAN_Init+0xa0>)
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <MX_CAN_Init+0xa4>)
 8002276:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002278:	4b24      	ldr	r3, [pc, #144]	@ (800230c <MX_CAN_Init+0xa0>)
 800227a:	2204      	movs	r2, #4
 800227c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800227e:	4b23      	ldr	r3, [pc, #140]	@ (800230c <MX_CAN_Init+0xa0>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <MX_CAN_Init+0xa0>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <MX_CAN_Init+0xa0>)
 800228c:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8002290:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <MX_CAN_Init+0xa0>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <MX_CAN_Init+0xa0>)
 800229a:	2200      	movs	r2, #0
 800229c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <MX_CAN_Init+0xa0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <MX_CAN_Init+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80022aa:	4b18      	ldr	r3, [pc, #96]	@ (800230c <MX_CAN_Init+0xa0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80022b0:	4b16      	ldr	r3, [pc, #88]	@ (800230c <MX_CAN_Init+0xa0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <MX_CAN_Init+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80022bc:	4813      	ldr	r0, [pc, #76]	@ (800230c <MX_CAN_Init+0xa0>)
 80022be:	f001 fa58 	bl	8003772 <HAL_CAN_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80022c8:	f000 f974 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE; //It is needed to enable the filters
 80022cc:	2301      	movs	r3, #1
 80022ce:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // A filter bank is a FILTER used to classify different messages.Select the filter bank we are going to use and we are going to configure.
 80022d0:	230a      	movs	r3, #10
 80022d2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Bank to recieve or send data(FIFO0 or FIFO1).We assing the CAN FIFO we are going to use to recieve the income data
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]

  canfilterconfig.FilterIdHigh = 0x200; //We select the MAXIMUM ID allowed to be recieved
 80022d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022dc:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0; //We select the MINIMUM ID allowed to be recieved. In case it is under the range it will be restricted
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  										// In case we use STD ID we need to move 5 bits to the left staring from the lower value bits.
  canfilterconfig.FilterMaskIdHigh = 0x140 ; //Sirve para comparar con entre el ID de filtro par que despues sea comparado el ID con el mensaje de entrada. Si la mascara no compara en un bit se tomara como bueno.
 80022e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80022e6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x100;
 80022e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ec:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK; // This is the type of ID Filter we want to use. You can look up the types by looking in it directory
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  													// It works identifying the ID to let it pass through the filter
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; //We choose the width of the Filter Register we are going to use.
 80022f2:	2301      	movs	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  //It choose a range of bank filters dedicated to the slave(If write 13 it will use 13 to 27 to the CAN_2)
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  											//if there is only one peripheral available (CAN1 or CAN2) It is unuseless
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	4803      	ldr	r0, [pc, #12]	@ (800230c <MX_CAN_Init+0xa0>)
 8002300:	f001 fb32 	bl	8003968 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	@ 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000248 	.word	0x20000248
 8002310:	40006400 	.word	0x40006400

08002314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <MX_I2C1_Init+0x50>)
 800231a:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <MX_I2C1_Init+0x54>)
 800231c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002320:	4a12      	ldr	r2, [pc, #72]	@ (800236c <MX_I2C1_Init+0x58>)
 8002322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002332:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002338:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <MX_I2C1_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	@ (8002364 <MX_I2C1_Init+0x50>)
 8002352:	f002 fa43 	bl	80047dc <HAL_I2C_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800235c:	f000 f92a 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000270 	.word	0x20000270
 8002368:	40005400 	.word	0x40005400
 800236c:	000186a0 	.word	0x000186a0

08002370 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2100      	movs	r1, #0
 800237a:	460a      	mov	r2, r1
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	460a      	mov	r2, r1
 8002380:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002382:	2300      	movs	r3, #0
 8002384:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <MX_RTC_Init+0x8c>)
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <MX_RTC_Init+0x90>)
 800238a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <MX_RTC_Init+0x8c>)
 800238e:	f04f 32ff 	mov.w	r2, #4294967295
 8002392:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <MX_RTC_Init+0x8c>)
 8002396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800239a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800239c:	4817      	ldr	r0, [pc, #92]	@ (80023fc <MX_RTC_Init+0x8c>)
 800239e:	f004 f92d 	bl	80065fc <HAL_RTC_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80023a8:	f000 f904 	bl	80025b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2201      	movs	r2, #1
 80023bc:	4619      	mov	r1, r3
 80023be:	480f      	ldr	r0, [pc, #60]	@ (80023fc <MX_RTC_Init+0x8c>)
 80023c0:	f004 f9a8 	bl	8006714 <HAL_RTC_SetTime>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80023ca:	f000 f8f3 	bl	80025b4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 80023d2:	2307      	movs	r3, #7
 80023d4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x9;
 80023d6:	2309      	movs	r3, #9
 80023d8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 80023da:	2324      	movs	r3, #36	@ 0x24
 80023dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80023de:	463b      	mov	r3, r7
 80023e0:	2201      	movs	r2, #1
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	@ (80023fc <MX_RTC_Init+0x8c>)
 80023e6:	f004 fa2d 	bl	8006844 <HAL_RTC_SetDate>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80023f0:	f000 f8e0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200002c4 	.word	0x200002c4
 8002400:	40002800 	.word	0x40002800

08002404 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <MX_SPI2_Init+0x64>)
 800240a:	4a18      	ldr	r2, [pc, #96]	@ (800246c <MX_SPI2_Init+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002410:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002414:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002416:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800241c:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <MX_SPI2_Init+0x64>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <MX_SPI2_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002434:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800243c:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <MX_SPI2_Init+0x64>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <MX_SPI2_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002450:	220a      	movs	r2, #10
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002454:	4804      	ldr	r0, [pc, #16]	@ (8002468 <MX_SPI2_Init+0x64>)
 8002456:	f004 fc55 	bl	8006d04 <HAL_SPI_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002460:	f000 f8a8 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200002d8 	.word	0x200002d8
 800246c:	40003800 	.word	0x40003800

08002470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <MX_USART1_UART_Init+0x50>)
 8002478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	@ (80024bc <MX_USART1_UART_Init+0x4c>)
 80024a8:	f005 f84a 	bl	8007540 <HAL_UART_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024b2:	f000 f87f 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000330 	.word	0x20000330
 80024c0:	40013800 	.word	0x40013800

080024c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a31      	ldr	r2, [pc, #196]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a2b      	ldr	r2, [pc, #172]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <MX_GPIO_Init+0xe0>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2104      	movs	r1, #4
 8002524:	4820      	ldr	r0, [pc, #128]	@ (80025a8 <MX_GPIO_Init+0xe4>)
 8002526:	f002 f927 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_8|LED_Amarillo_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002530:	481e      	ldr	r0, [pc, #120]	@ (80025ac <MX_GPIO_Init+0xe8>)
 8002532:	f002 f921 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800253c:	481c      	ldr	r0, [pc, #112]	@ (80025b0 <MX_GPIO_Init+0xec>)
 800253e:	f002 f91b 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002542:	2304      	movs	r3, #4
 8002544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2302      	movs	r3, #2
 8002550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4619      	mov	r1, r3
 8002558:	4813      	ldr	r0, [pc, #76]	@ (80025a8 <MX_GPIO_Init+0xe4>)
 800255a:	f001 ff89 	bl	8004470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PC8 LED_Amarillo_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_8|LED_Amarillo_Pin;
 800255e:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2302      	movs	r3, #2
 800256e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4619      	mov	r1, r3
 8002576:	480d      	ldr	r0, [pc, #52]	@ (80025ac <MX_GPIO_Init+0xe8>)
 8002578:	f001 ff7a 	bl	8004470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800257c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2302      	movs	r3, #2
 800258c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	4806      	ldr	r0, [pc, #24]	@ (80025b0 <MX_GPIO_Init+0xec>)
 8002596:	f001 ff6b 	bl	8004470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259a:	bf00      	nop
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40010800 	.word	0x40010800

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <Error_Handler+0x8>

080025c0 <NEXTION_SendText>:
const char *array_elementos_a_poner_rojo_por_alerta[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};
const uint8_t Cmd_End[3] = {0xff, 0xff, 0xff};


// Función para actualizar objeto obj de la interfaz con un valor text
void NEXTION_SendText(UART_HandleTypeDef *huart, char *obj, char *text, char *units) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 80025ce:	2032      	movs	r0, #50	@ 0x32
 80025d0:	f005 fa4c 	bl	8007a6c <malloc>
 80025d4:	4603      	mov	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]
    int len = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

    if (units == NULL || units[0] == '\0') {
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <NEXTION_SendText+0x2a>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <NEXTION_SendText+0x3a>
        len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, text);  // Agregar el texto al objeto
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	4912      	ldr	r1, [pc, #72]	@ (8002638 <NEXTION_SendText+0x78>)
 80025f0:	6938      	ldr	r0, [r7, #16]
 80025f2:	f006 f817 	bl	8008624 <siprintf>
 80025f6:	6178      	str	r0, [r7, #20]
 80025f8:	e008      	b.n	800260c <NEXTION_SendText+0x4c>
    } else {
        len = sprintf((char *)buffer, "%s.txt=\"%s%s\"", obj, text, units); // Agrega las unidades al texto del objeto
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	490e      	ldr	r1, [pc, #56]	@ (800263c <NEXTION_SendText+0x7c>)
 8002604:	6938      	ldr	r0, [r7, #16]
 8002606:	f006 f80d 	bl	8008624 <siprintf>
 800260a:	6178      	str	r0, [r7, #20]
    }

    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	b29a      	uxth	r2, r3
 8002610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002614:	6939      	ldr	r1, [r7, #16]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f004 ffe2 	bl	80075e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 800261c:	2364      	movs	r3, #100	@ 0x64
 800261e:	2203      	movs	r2, #3
 8002620:	4907      	ldr	r1, [pc, #28]	@ (8002640 <NEXTION_SendText+0x80>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f004 ffdc 	bl	80075e0 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8002628:	6938      	ldr	r0, [r7, #16]
 800262a:	f005 fa27 	bl	8007a7c <free>
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	0800a82c 	.word	0x0800a82c
 800263c:	0800a838 	.word	0x0800a838
 8002640:	0800a880 	.word	0x0800a880

08002644 <NEXTION_SendNumber>:

// Actualiza valores de las barras de frenado, aceleración y revoluciones
void NEXTION_SendNumber(UART_HandleTypeDef *huart, char *obj, int number) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8002650:	2032      	movs	r0, #50	@ 0x32
 8002652:	f005 fa0b 	bl	8007a6c <malloc>
 8002656:	4603      	mov	r3, r0
 8002658:	617b      	str	r3, [r7, #20]
    int len = sprintf((char *)buffer, "%s.val=%d", obj, number); // Inicializa el buffer con el objeto y el valor a inicializar
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	490d      	ldr	r1, [pc, #52]	@ (8002694 <NEXTION_SendNumber+0x50>)
 8002660:	6978      	ldr	r0, [r7, #20]
 8002662:	f005 ffdf 	bl	8008624 <siprintf>
 8002666:	6138      	str	r0, [r7, #16]
    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f004 ffb4 	bl	80075e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8002678:	2364      	movs	r3, #100	@ 0x64
 800267a:	2203      	movs	r2, #3
 800267c:	4906      	ldr	r1, [pc, #24]	@ (8002698 <NEXTION_SendNumber+0x54>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f004 ffae 	bl	80075e0 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f005 f9f9 	bl	8007a7c <free>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800a848 	.word	0x0800a848
 8002698:	0800a880 	.word	0x0800a880

0800269c <NEXTION_estado_color>:
        free(buffer);
    }
}

//Función para actualizar color estado de voltaje bateria y temperatura del motor
void NEXTION_estado_color(UART_HandleTypeDef *huart, char *obj, int color) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]

	uint8_t *buffer = malloc(50 * sizeof(char));
 80026a8:	2032      	movs	r0, #50	@ 0x32
 80026aa:	f005 f9df 	bl	8007a6c <malloc>
 80026ae:	4603      	mov	r3, r0
 80026b0:	617b      	str	r3, [r7, #20]

	// Formatea y transmite el mensaje para el elemento actual
	int len = sprintf((char *)buffer, "%s.bco=%d", obj, color);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <NEXTION_estado_color+0x50>)
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f005 ffb3 	bl	8008624 <siprintf>
 80026be:	6138      	str	r0, [r7, #16]

    HAL_UART_Transmit(huart, buffer, len, 1000);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c8:	6979      	ldr	r1, [r7, #20]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f004 ff88 	bl	80075e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 80026d0:	2364      	movs	r3, #100	@ 0x64
 80026d2:	2203      	movs	r2, #3
 80026d4:	4906      	ldr	r1, [pc, #24]	@ (80026f0 <NEXTION_estado_color+0x54>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f004 ff82 	bl	80075e0 <HAL_UART_Transmit>

    // Libera el buffer
    free(buffer);
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f005 f9cd 	bl	8007a7c <free>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800a874 	.word	0x0800a874
 80026f0:	0800a880 	.word	0x0800a880

080026f4 <NEXTION_Send_Revs_v2>:

void NEXTION_Send_Revs_v2(UART_HandleTypeDef *huart, int val) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
    int resultado1 = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
    int resultado2 = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
    int resultado3 = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]

    // Check the value ranges and assign corresponding color values
    if (val<50) {
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b31      	cmp	r3, #49	@ 0x31
 800270e:	dc06      	bgt.n	800271e <NEXTION_Send_Revs_v2+0x2a>
            resultado1 = 0; // Color green for range 0-3000
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
            resultado2 = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
            resultado3 = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e040      	b.n	80027a0 <NEXTION_Send_Revs_v2+0xac>
    }
    else if (val >= 50 && val <2000) {
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b31      	cmp	r3, #49	@ 0x31
 8002722:	dd0b      	ble.n	800273c <NEXTION_Send_Revs_v2+0x48>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800272a:	da07      	bge.n	800273c <NEXTION_Send_Revs_v2+0x48>
        resultado1 = 32736; // Color green for range 0-3000
 800272c:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 8002730:	617b      	str	r3, [r7, #20]
        resultado2 = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e031      	b.n	80027a0 <NEXTION_Send_Revs_v2+0xac>
    } else if (val >= 2000 && val < 4000) {
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002742:	db0c      	blt.n	800275e <NEXTION_Send_Revs_v2+0x6a>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800274a:	da08      	bge.n	800275e <NEXTION_Send_Revs_v2+0x6a>
        resultado1 = 32736; // Color red for range 3000-6000
 800274c:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 8002750:	617b      	str	r3, [r7, #20]
        resultado2 = 63488;
 8002752:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002756:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e020      	b.n	80027a0 <NEXTION_Send_Revs_v2+0xac>
    } else if (val >= 4000 && val<6200) {
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002764:	db0e      	blt.n	8002784 <NEXTION_Send_Revs_v2+0x90>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f641 0237 	movw	r2, #6199	@ 0x1837
 800276c:	4293      	cmp	r3, r2
 800276e:	dc09      	bgt.n	8002784 <NEXTION_Send_Revs_v2+0x90>
        resultado1 = 32736; // Color blue for range 6000-9000
 8002770:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 8002774:	617b      	str	r3, [r7, #20]
        resultado2 = 63488;
 8002776:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800277a:	613b      	str	r3, [r7, #16]
        resultado3 = 1055;
 800277c:	f240 431f 	movw	r3, #1055	@ 0x41f
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e00d      	b.n	80027a0 <NEXTION_Send_Revs_v2+0xac>
    }
    else if (val >= 6200){
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f641 0237 	movw	r2, #6199	@ 0x1837
 800278a:	4293      	cmp	r3, r2
 800278c:	dd08      	ble.n	80027a0 <NEXTION_Send_Revs_v2+0xac>
            resultado1 = 37053; // Color blue for range 6000-9000
 800278e:	f249 03bd 	movw	r3, #37053	@ 0x90bd
 8002792:	617b      	str	r3, [r7, #20]
            resultado2 = 37053;
 8002794:	f249 03bd 	movw	r3, #37053	@ 0x90bd
 8002798:	613b      	str	r3, [r7, #16]
            resultado3 = 37053;
 800279a:	f249 03bd 	movw	r3, #37053	@ 0x90bd
 800279e:	60fb      	str	r3, [r7, #12]
    }

    // Send the color values to the corresponding LEDs on the Nextion display
    NEXTION_estado_color(huart, "led1",resultado1);
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4909      	ldr	r1, [pc, #36]	@ (80027c8 <NEXTION_Send_Revs_v2+0xd4>)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff79 	bl	800269c <NEXTION_estado_color>
    NEXTION_estado_color(huart, "led2",resultado2);
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4907      	ldr	r1, [pc, #28]	@ (80027cc <NEXTION_Send_Revs_v2+0xd8>)
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff74 	bl	800269c <NEXTION_estado_color>
    NEXTION_estado_color(huart, "led3",resultado3);
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4906      	ldr	r1, [pc, #24]	@ (80027d0 <NEXTION_Send_Revs_v2+0xdc>)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff6f 	bl	800269c <NEXTION_estado_color>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0800a854 	.word	0x0800a854
 80027cc:	0800a85c 	.word	0x0800a85c
 80027d0:	0800a864 	.word	0x0800a864

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <HAL_MspInit+0x5c>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <HAL_MspInit+0x5c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6193      	str	r3, [r2, #24]
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_MspInit+0x5c>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <HAL_MspInit+0x5c>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002830 <HAL_MspInit+0x5c>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <HAL_MspInit+0x5c>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_MspInit+0x60>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_MspInit+0x60>)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	40010000 	.word	0x40010000

08002838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <HAL_ADC_MspInit+0x6c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d121      	bne.n	800289c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <HAL_ADC_MspInit+0x70>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800288c:	2303      	movs	r3, #3
 800288e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4619      	mov	r1, r3
 8002896:	4805      	ldr	r0, [pc, #20]	@ (80028ac <HAL_ADC_MspInit+0x74>)
 8002898:	f001 fdea 	bl	8004470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012400 	.word	0x40012400
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010800 	.word	0x40010800

080028b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002980 <HAL_CAN_MspInit+0xd0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d153      	bne.n	8002978 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028da:	61d3      	str	r3, [r2, #28]
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a25      	ldr	r2, [pc, #148]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <HAL_CAN_MspInit+0xd4>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	481c      	ldr	r0, [pc, #112]	@ (8002988 <HAL_CAN_MspInit+0xd8>)
 8002916:	f001 fdab 	bl	8004470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800291a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	4816      	ldr	r0, [pc, #88]	@ (8002988 <HAL_CAN_MspInit+0xd8>)
 8002930:	f001 fd9e 	bl	8004470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002934:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_CAN_MspInit+0xdc>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <HAL_CAN_MspInit+0xdc>)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2014      	movs	r0, #20
 800295e:	f001 fd50 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002962:	2014      	movs	r0, #20
 8002964:	f001 fd69 	bl	800443a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	2015      	movs	r0, #21
 800296e:	f001 fd48 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002972:	2015      	movs	r0, #21
 8002974:	f001 fd61 	bl	800443a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002978:	bf00      	nop
 800297a:	3728      	adds	r7, #40	@ 0x28
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40006400 	.word	0x40006400
 8002984:	40021000 	.word	0x40021000
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40010000 	.word	0x40010000

08002990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_I2C_MspInit+0x70>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d123      	bne.n	80029f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c8:	23c0      	movs	r3, #192	@ 0xc0
 80029ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029cc:	2312      	movs	r3, #18
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	480b      	ldr	r0, [pc, #44]	@ (8002a08 <HAL_I2C_MspInit+0x78>)
 80029dc:	f001 fd48 	bl	8004470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_I2C_MspInit+0x74>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40005400 	.word	0x40005400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010c00 	.word	0x40010c00

08002a0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_RTC_MspInit+0x3c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d110      	bne.n	8002a40 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002a1e:	f003 f865 	bl	8005aec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_RTC_MspInit+0x40>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_RTC_MspInit+0x40>)
 8002a28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_RTC_MspInit+0x40>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RTC_MspInit+0x44>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40002800 	.word	0x40002800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	4242043c 	.word	0x4242043c

08002a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_SPI_MspInit+0x8c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d131      	bne.n	8002ad8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a7e:	61d3      	str	r3, [r2, #28]
 8002a80:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_SPI_MspInit+0x90>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002aa4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480b      	ldr	r0, [pc, #44]	@ (8002ae8 <HAL_SPI_MspInit+0x94>)
 8002aba:	f001 fcd9 	bl	8004470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_SPI_MspInit+0x94>)
 8002ad4:	f001 fccc 	bl	8004470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40003800 	.word	0x40003800
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010c00 	.word	0x40010c00

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_UART_MspInit+0x8c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d131      	bne.n	8002b70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_UART_MspInit+0x90>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480b      	ldr	r0, [pc, #44]	@ (8002b80 <HAL_UART_MspInit+0x94>)
 8002b52:	f001 fc8d 	bl	8004470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <HAL_UART_MspInit+0x94>)
 8002b6c:	f001 fc80 	bl	8004470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b70:	bf00      	nop
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010800 	.word	0x40010800

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <NMI_Handler+0x4>

08002b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <BusFault_Handler+0x4>

08002ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <UsageFault_Handler+0x4>

08002bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
		if(Timer1 > 0)
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <SysTick_Handler+0x34>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <SysTick_Handler+0x18>
			Timer1--;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <SysTick_Handler+0x34>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <SysTick_Handler+0x34>)
 8002be6:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <SysTick_Handler+0x38>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <SysTick_Handler+0x2c>
			Timer2--;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <SysTick_Handler+0x38>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <SysTick_Handler+0x38>)
 8002bfa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfc:	f000 f94e 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000210 	.word	0x20000210
 8002c08:	20000212 	.word	0x20000212

08002c0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c12:	f001 f8fc 	bl	8003e0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000248 	.word	0x20000248

08002c20 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <CAN1_RX1_IRQHandler+0x10>)
 8002c26:	f001 f8f2 	bl	8003e0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000248 	.word	0x20000248

08002c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return 1;
 8002c38:	2301      	movs	r3, #1
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <_kill>:

int _kill(int pid, int sig)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c4c:	f005 fdb0 	bl	80087b0 <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2216      	movs	r2, #22
 8002c54:	601a      	str	r2, [r3, #0]
  return -1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_exit>:

void _exit (int status)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffe7 	bl	8002c42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <_exit+0x12>

08002c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e00a      	b.n	8002ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c8a:	f3af 8000 	nop.w
 8002c8e:	4601      	mov	r1, r0
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60ba      	str	r2, [r7, #8]
 8002c96:	b2ca      	uxtb	r2, r1
 8002c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	dbf0      	blt.n	8002c8a <_read+0x12>
  }

  return len;
 8002ca8:	687b      	ldr	r3, [r7, #4]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e009      	b.n	8002cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	60ba      	str	r2, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf1      	blt.n	8002cc4 <_write+0x12>
  }
  return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_close>:

int _close(int file)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d10:	605a      	str	r2, [r3, #4]
  return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <_isatty>:

int _isatty(int file)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	@ (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f005 fd18 	bl	80087b0 <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	@ (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20005000 	.word	0x20005000
 8002dac:	00000400 	.word	0x00000400
 8002db0:	20000408 	.word	0x20000408
 8002db4:	20000570 	.word	0x20000570

08002db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dc4:	f7ff fff8 	bl	8002db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc8:	480b      	ldr	r0, [pc, #44]	@ (8002df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dca:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd0:	e002      	b.n	8002dd8 <LoopCopyDataInit>

08002dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd6:	3304      	adds	r3, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ddc:	d3f9      	bcc.n	8002dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dde:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002de0:	4c09      	ldr	r4, [pc, #36]	@ (8002e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de4:	e001      	b.n	8002dea <LoopFillZerobss>

08002de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de8:	3204      	adds	r2, #4

08002dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dec:	d3fb      	bcc.n	8002de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dee:	f005 fce5 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df2:	f7ff f975 	bl	80020e0 <main>
  bx lr
 8002df6:	4770      	bx	lr
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002e00:	0800ac40 	.word	0x0800ac40
  ldr r2, =_sbss
 8002e04:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002e08:	20000570 	.word	0x20000570

08002e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC1_2_IRQHandler>
	...

08002e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_Init+0x28>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_Init+0x28>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f001 fae3 	bl	80043ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fcd2 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fafb 	bl	8004456 <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f001 fac3 	bl	8004402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000014 	.word	0x20000014
 8002e98:	20000010 	.word	0x20000010

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	@ (8002ebc <HAL_IncTick+0x20>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000014 	.word	0x20000014
 8002ebc:	2000040c 	.word	0x2000040c

08002ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	@ (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	2000040c 	.word	0x2000040c

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffe0 	bl	8002ec0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000014 	.word	0x20000014

08002f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0be      	b.n	80030bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fc6c 	bl	8002838 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbc5 	bl	80036f0 <ADC_ConversionStop_Disable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8099 	bne.w	80030aa <HAL_ADC_Init+0x18e>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8095 	bne.w	80030aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f88:	f023 0302 	bic.w	r3, r3, #2
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b1b      	ldrb	r3, [r3, #12]
 8002fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_Init+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_Init+0xa8>
 8002fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Init+0xaa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7d1b      	ldrb	r3, [r3, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d119      	bne.n	8003008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	035a      	lsls	r2, r3, #13
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e00b      	b.n	8003008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b28      	ldr	r3, [pc, #160]	@ (80030c4 <HAL_ADC_Init+0x1a8>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d003      	beq.n	8003042 <HAL_ADC_Init+0x126>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_ADC_Init+0x1ac>)
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003086:	e018      	b.n	80030ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	f023 0312 	bic.w	r3, r3, #18
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Start+0x1a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e098      	b.n	8003218 <HAL_ADC_Start+0x14c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 faa4 	bl	800363c <ADC_Enable>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8087 	bne.w	800320e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a41      	ldr	r2, [pc, #260]	@ (8003220 <HAL_ADC_Start+0x154>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d105      	bne.n	800312a <HAL_ADC_Start+0x5e>
 800311e:	4b41      	ldr	r3, [pc, #260]	@ (8003224 <HAL_ADC_Start+0x158>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d026      	beq.n	8003192 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800314c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003154:	e01d      	b.n	8003192 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2f      	ldr	r2, [pc, #188]	@ (8003224 <HAL_ADC_Start+0x158>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_ADC_Start+0xaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	@ (8003220 <HAL_ADC_Start+0x154>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_ADC_Start+0xc6>
 8003176:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <HAL_ADC_Start+0x158>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	f023 0206 	bic.w	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031aa:	e002      	b.n	80031b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0202 	mvn.w	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80031ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80031d2:	d113      	bne.n	80031fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d8:	4a11      	ldr	r2, [pc, #68]	@ (8003220 <HAL_ADC_Start+0x154>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d105      	bne.n	80031ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_ADC_Start+0x158>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	e00c      	b.n	8003216 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e003      	b.n	8003216 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40012800 	.word	0x40012800
 8003224:	40012400 	.word	0x40012400

08003228 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800323e:	f7ff fe3f 	bl	8002ec0 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0d3      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d131      	bne.n	80032dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d12a      	bne.n	80032dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003286:	e021      	b.n	80032cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d01d      	beq.n	80032cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x7e>
 8003296:	f7ff fe13 	bl	8002ec0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d212      	bcs.n	80032cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0a2      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0d6      	beq.n	8003288 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032da:	e070      	b.n	80033be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032dc:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <HAL_ADC_PollForConversion+0x1f4>)
 80032de:	681c      	ldr	r4, [r3, #0]
 80032e0:	2002      	movs	r0, #2
 80032e2:	f003 f8d5 	bl	8006490 <HAL_RCCEx_GetPeriphCLKFreq>
 80032e6:	4603      	mov	r3, r0
 80032e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003420 <HAL_ADC_PollForConversion+0x1f8>)
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_ADC_PollForConversion+0x104>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	4b48      	ldr	r3, [pc, #288]	@ (8003424 <HAL_ADC_PollForConversion+0x1fc>)
 8003302:	400b      	ands	r3, r1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_ADC_PollForConversion+0x104>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	4b46      	ldr	r3, [pc, #280]	@ (8003428 <HAL_ADC_PollForConversion+0x200>)
 8003310:	400b      	ands	r3, r1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <HAL_ADC_PollForConversion+0x100>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68d9      	ldr	r1, [r3, #12]
 800331c:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_ADC_PollForConversion+0x204>)
 800331e:	400b      	ands	r3, r1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_PollForConversion+0x100>
 8003324:	2314      	movs	r3, #20
 8003326:	e020      	b.n	800336a <HAL_ADC_PollForConversion+0x142>
 8003328:	2329      	movs	r3, #41	@ 0x29
 800332a:	e01e      	b.n	800336a <HAL_ADC_PollForConversion+0x142>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6919      	ldr	r1, [r3, #16]
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_ADC_PollForConversion+0x200>)
 8003334:	400b      	ands	r3, r1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_ADC_PollForConversion+0x120>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	4b3a      	ldr	r3, [pc, #232]	@ (800342c <HAL_ADC_PollForConversion+0x204>)
 8003342:	400b      	ands	r3, r1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_ADC_PollForConversion+0x13c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_ADC_PollForConversion+0x208>)
 8003350:	400b      	ands	r3, r1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_ADC_PollForConversion+0x140>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68d9      	ldr	r1, [r3, #12]
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <HAL_ADC_PollForConversion+0x208>)
 800335e:	400b      	ands	r3, r1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_PollForConversion+0x140>
 8003364:	2354      	movs	r3, #84	@ 0x54
 8003366:	e000      	b.n	800336a <HAL_ADC_PollForConversion+0x142>
 8003368:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003370:	e021      	b.n	80033b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d01a      	beq.n	80033b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_ADC_PollForConversion+0x168>
 8003380:	f7ff fd9e 	bl	8002ec0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d20f      	bcs.n	80033b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	d90b      	bls.n	80033b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e030      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3301      	adds	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d8d9      	bhi.n	8003372 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0212 	mvn.w	r2, #18
 80033c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80033de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80033e2:	d115      	bne.n	8003410 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c
 8003420:	24924924 	.word	0x24924924
 8003424:	00924924 	.word	0x00924924
 8003428:	12492492 	.word	0x12492492
 800342c:	00492492 	.word	0x00492492
 8003430:	00249249 	.word	0x00249249

08003434 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x20>
 8003468:	2302      	movs	r3, #2
 800346a:	e0dc      	b.n	8003626 <HAL_ADC_ConfigChannel+0x1da>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d81c      	bhi.n	80034b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b05      	subs	r3, #5
 800348e:	221f      	movs	r2, #31
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4019      	ands	r1, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b05      	subs	r3, #5
 80034a8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80034b4:	e03c      	b.n	8003530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d81c      	bhi.n	80034f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3b23      	subs	r3, #35	@ 0x23
 80034d0:	221f      	movs	r2, #31
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	4019      	ands	r1, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b23      	subs	r3, #35	@ 0x23
 80034ea:	fa00 f203 	lsl.w	r2, r0, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034f6:	e01b      	b.n	8003530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	3b41      	subs	r3, #65	@ 0x41
 800350a:	221f      	movs	r2, #31
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	4019      	ands	r1, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b41      	subs	r3, #65	@ 0x41
 8003524:	fa00 f203 	lsl.w	r2, r0, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b09      	cmp	r3, #9
 8003536:	d91c      	bls.n	8003572 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68d9      	ldr	r1, [r3, #12]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	3b1e      	subs	r3, #30
 800354a:	2207      	movs	r2, #7
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	4019      	ands	r1, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6898      	ldr	r0, [r3, #8]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	3b1e      	subs	r3, #30
 8003564:	fa00 f203 	lsl.w	r2, r0, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e019      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6919      	ldr	r1, [r3, #16]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	2207      	movs	r2, #7
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	4019      	ands	r1, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	fa00 f203 	lsl.w	r2, r0, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d003      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035b2:	2b11      	cmp	r3, #17
 80035b4:	d132      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_ADC_ConfigChannel+0x1e4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d125      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d126      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d11a      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035e6:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <HAL_ADC_ConfigChannel+0x1e8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <HAL_ADC_ConfigChannel+0x1ec>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	0c9a      	lsrs	r2, r3, #18
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035fc:	e002      	b.n	8003604 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3b01      	subs	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f9      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x1b2>
 800360a:	e007      	b.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012400 	.word	0x40012400
 8003634:	2000000c 	.word	0x2000000c
 8003638:	431bde83 	.word	0x431bde83

0800363c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d040      	beq.n	80036dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800366a:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <ADC_Enable+0xac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <ADC_Enable+0xb0>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	0c9b      	lsrs	r3, r3, #18
 8003676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003678:	e002      	b.n	8003680 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3b01      	subs	r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f9      	bne.n	800367a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003686:	f7ff fc1b 	bl	8002ec0 <HAL_GetTick>
 800368a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800368c:	e01f      	b.n	80036ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800368e:	f7ff fc17 	bl	8002ec0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d918      	bls.n	80036ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d011      	beq.n	80036ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d1d8      	bne.n	800368e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000000c 	.word	0x2000000c
 80036ec:	431bde83 	.word	0x431bde83

080036f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12e      	bne.n	8003768 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800371a:	f7ff fbd1 	bl	8002ec0 <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003720:	e01b      	b.n	800375a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003722:	f7ff fbcd 	bl	8002ec0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d914      	bls.n	800375a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d10d      	bne.n	800375a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e007      	b.n	800376a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d0dc      	beq.n	8003722 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0ed      	b.n	8003960 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff f88d 	bl	80028b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a6:	f7ff fb8b 	bl	8002ec0 <HAL_GetTick>
 80037aa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037ac:	e012      	b.n	80037d4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037ae:	f7ff fb87 	bl	8002ec0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b0a      	cmp	r3, #10
 80037ba:	d90b      	bls.n	80037d4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0c5      	b.n	8003960 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0e5      	beq.n	80037ae <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0202 	bic.w	r2, r2, #2
 80037f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f2:	f7ff fb65 	bl	8002ec0 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037f8:	e012      	b.n	8003820 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037fa:	f7ff fb61 	bl	8002ec0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b0a      	cmp	r3, #10
 8003806:	d90b      	bls.n	8003820 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2205      	movs	r2, #5
 8003818:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e09f      	b.n	8003960 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7e1b      	ldrb	r3, [r3, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7e5b      	ldrb	r3, [r3, #25]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e007      	b.n	8003882 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7e9b      	ldrb	r3, [r3, #26]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0220 	orr.w	r2, r2, #32
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e007      	b.n	80038ac <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0220 	bic.w	r2, r2, #32
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7edb      	ldrb	r3, [r3, #27]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e007      	b.n	80038d6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0210 	orr.w	r2, r2, #16
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7f1b      	ldrb	r3, [r3, #28]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0208 	orr.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e007      	b.n	8003900 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0208 	bic.w	r2, r2, #8
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7f5b      	ldrb	r3, [r3, #29]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d108      	bne.n	800391a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0204 	orr.w	r2, r2, #4
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e007      	b.n	800392a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0204 	bic.w	r2, r2, #4
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	ea42 0103 	orr.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800397e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <HAL_CAN_ConfigFilter+0x26>
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b02      	cmp	r3, #2
 800398a:	f040 80aa 	bne.w	8003ae2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2201      	movs	r2, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d123      	bne.n	8003a10 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3248      	adds	r2, #72	@ 0x48
 80039f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	3348      	adds	r3, #72	@ 0x48
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d122      	bne.n	8003a5e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3248      	adds	r2, #72	@ 0x48
 8003a3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	3348      	adds	r3, #72	@ 0x48
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003a78:	e007      	b.n	8003a8a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003aa4:	e007      	b.n	8003ab6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ad4:	f023 0201 	bic.w	r2, r3, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e006      	b.n	8003af0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d12e      	bne.n	8003b6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7ff f9cb 	bl	8002ec0 <HAL_GetTick>
 8003b2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b2c:	e012      	b.n	8003b54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b2e:	f7ff f9c7 	bl	8002ec0 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b0a      	cmp	r3, #10
 8003b3a:	d90b      	bls.n	8003b54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e012      	b.n	8003b7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e006      	b.n	8003b7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b96:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d003      	beq.n	8003ba6 <HAL_CAN_GetRxMessage+0x24>
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	f040 8103 	bne.w	8003dac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10e      	bne.n	8003bca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0f7      	b.n	8003dba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0e8      	b.n	8003dba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	331b      	adds	r3, #27
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0204 	and.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	331b      	adds	r3, #27
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0d5b      	lsrs	r3, r3, #21
 8003c16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	331b      	adds	r3, #27
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	331b      	adds	r3, #27
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0202 	and.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	331b      	adds	r3, #27
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	611a      	str	r2, [r3, #16]
 8003c6c:	e00b      	b.n	8003c86 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	331b      	adds	r3, #27
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	331b      	adds	r3, #27
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	331b      	adds	r3, #27
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	3304      	adds	r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0a1a      	lsrs	r2, r3, #8
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	0c1a      	lsrs	r2, r3, #16
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e1a      	lsrs	r2, r3, #24
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3303      	adds	r3, #3
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	0a1a      	lsrs	r2, r3, #8
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	3305      	adds	r3, #5
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0c1a      	lsrs	r2, r3, #16
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	3306      	adds	r3, #6
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0e1a      	lsrs	r2, r3, #24
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0220 	orr.w	r2, r2, #32
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	e007      	b.n	8003da8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0220 	orr.w	r2, r2, #32
 8003da6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e006      	b.n	8003dba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <HAL_CAN_ActivateNotification+0x1e>
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d109      	bne.n	8003df6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6959      	ldr	r1, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e006      	b.n	8003e04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b08a      	sub	sp, #40	@ 0x28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d07c      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d023      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f983 	bl	800417c <HAL_CAN_TxMailbox0CompleteCallback>
 8003e76:	e016      	b.n	8003ea6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8a:	e00c      	b.n	8003ea6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9e:	e002      	b.n	8003ea6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f986 	bl	80041b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d024      	beq.n	8003efa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f962 	bl	800418e <HAL_CAN_TxMailbox1CompleteCallback>
 8003eca:	e016      	b.n	8003efa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ede:	e00c      	b.n	8003efa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef2:	e002      	b.n	8003efa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f965 	bl	80041c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d024      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f941 	bl	80041a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f1e:	e016      	b.n	8003f4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f32:	e00c      	b.n	8003f4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f46:	e002      	b.n	8003f4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f944 	bl	80041d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2210      	movs	r2, #16
 8003f70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f92a 	bl	80041e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fd fdfb 	bl	8001ba8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00c      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f90a 	bl	800420c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8f2 	bl	80041fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2210      	movs	r2, #16
 8004030:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8f3 	bl	800421e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2208      	movs	r2, #8
 8004052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8eb 	bl	8004230 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d07b      	beq.n	800415c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d072      	beq.n	8004154 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d043      	beq.n	8004154 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03e      	beq.n	8004154 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040dc:	2b60      	cmp	r3, #96	@ 0x60
 80040de:	d02b      	beq.n	8004138 <HAL_CAN_IRQHandler+0x32a>
 80040e0:	2b60      	cmp	r3, #96	@ 0x60
 80040e2:	d82e      	bhi.n	8004142 <HAL_CAN_IRQHandler+0x334>
 80040e4:	2b50      	cmp	r3, #80	@ 0x50
 80040e6:	d022      	beq.n	800412e <HAL_CAN_IRQHandler+0x320>
 80040e8:	2b50      	cmp	r3, #80	@ 0x50
 80040ea:	d82a      	bhi.n	8004142 <HAL_CAN_IRQHandler+0x334>
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d019      	beq.n	8004124 <HAL_CAN_IRQHandler+0x316>
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d826      	bhi.n	8004142 <HAL_CAN_IRQHandler+0x334>
 80040f4:	2b30      	cmp	r3, #48	@ 0x30
 80040f6:	d010      	beq.n	800411a <HAL_CAN_IRQHandler+0x30c>
 80040f8:	2b30      	cmp	r3, #48	@ 0x30
 80040fa:	d822      	bhi.n	8004142 <HAL_CAN_IRQHandler+0x334>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d002      	beq.n	8004106 <HAL_CAN_IRQHandler+0x2f8>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d005      	beq.n	8004110 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004104:	e01d      	b.n	8004142 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800410e:	e019      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	f043 0310 	orr.w	r3, r3, #16
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004118:	e014      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004122:	e00f      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800412c:	e00a      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004136:	e005      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004140:	e000      	b.n	8004144 <HAL_CAN_IRQHandler+0x336>
            break;
 8004142:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004152:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2204      	movs	r2, #4
 800415a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f867 	bl	8004242 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	@ 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <__NVIC_SetPriorityGrouping+0x44>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004270:	4013      	ands	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800427c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004286:	4a04      	ldr	r2, [pc, #16]	@ (8004298 <__NVIC_SetPriorityGrouping+0x44>)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	60d3      	str	r3, [r2, #12]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__NVIC_GetPriorityGrouping+0x18>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f003 0307 	and.w	r3, r3, #7
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db0b      	blt.n	80042e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4906      	ldr	r1, [pc, #24]	@ (80042ec <__NVIC_EnableIRQ+0x34>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2001      	movs	r0, #1
 80042da:	fa00 f202 	lsl.w	r2, r0, r2
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	e000e100 	.word	0xe000e100

080042f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	db0a      	blt.n	800431a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	490c      	ldr	r1, [pc, #48]	@ (800433c <__NVIC_SetPriority+0x4c>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	0112      	lsls	r2, r2, #4
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	440b      	add	r3, r1
 8004314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004318:	e00a      	b.n	8004330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4908      	ldr	r1, [pc, #32]	@ (8004340 <__NVIC_SetPriority+0x50>)
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	3b04      	subs	r3, #4
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	440b      	add	r3, r1
 800432e:	761a      	strb	r2, [r3, #24]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000e100 	.word	0xe000e100
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	@ 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f1c3 0307 	rsb	r3, r3, #7
 800435e:	2b04      	cmp	r3, #4
 8004360:	bf28      	it	cs
 8004362:	2304      	movcs	r3, #4
 8004364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3304      	adds	r3, #4
 800436a:	2b06      	cmp	r3, #6
 800436c:	d902      	bls.n	8004374 <NVIC_EncodePriority+0x30>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3b03      	subs	r3, #3
 8004372:	e000      	b.n	8004376 <NVIC_EncodePriority+0x32>
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43da      	mvns	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	401a      	ands	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800438c:	f04f 31ff 	mov.w	r1, #4294967295
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	43d9      	mvns	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	4313      	orrs	r3, r2
         );
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	@ 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b8:	d301      	bcc.n	80043be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00f      	b.n	80043de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043be:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <SysTick_Config+0x40>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c6:	210f      	movs	r1, #15
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f7ff ff90 	bl	80042f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <SysTick_Config+0x40>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d6:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <SysTick_Config+0x40>)
 80043d8:	2207      	movs	r2, #7
 80043da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e010 	.word	0xe000e010

080043ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff2d 	bl	8004254 <__NVIC_SetPriorityGrouping>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004414:	f7ff ff42 	bl	800429c <__NVIC_GetPriorityGrouping>
 8004418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ff90 	bl	8004344 <NVIC_EncodePriority>
 8004424:	4602      	mov	r2, r0
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff5f 	bl	80042f0 <__NVIC_SetPriority>
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff35 	bl	80042b8 <__NVIC_EnableIRQ>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ffa2 	bl	80043a8 <SysTick_Config>
 8004464:	4603      	mov	r3, r0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004470:	b480      	push	{r7}
 8004472:	b08b      	sub	sp, #44	@ 0x2c
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004482:	e169      	b.n	8004758 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004484:	2201      	movs	r2, #1
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	429a      	cmp	r2, r3
 800449e:	f040 8158 	bne.w	8004752 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a9a      	ldr	r2, [pc, #616]	@ (8004710 <HAL_GPIO_Init+0x2a0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d05e      	beq.n	800456a <HAL_GPIO_Init+0xfa>
 80044ac:	4a98      	ldr	r2, [pc, #608]	@ (8004710 <HAL_GPIO_Init+0x2a0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d875      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044b2:	4a98      	ldr	r2, [pc, #608]	@ (8004714 <HAL_GPIO_Init+0x2a4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d058      	beq.n	800456a <HAL_GPIO_Init+0xfa>
 80044b8:	4a96      	ldr	r2, [pc, #600]	@ (8004714 <HAL_GPIO_Init+0x2a4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d86f      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044be:	4a96      	ldr	r2, [pc, #600]	@ (8004718 <HAL_GPIO_Init+0x2a8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d052      	beq.n	800456a <HAL_GPIO_Init+0xfa>
 80044c4:	4a94      	ldr	r2, [pc, #592]	@ (8004718 <HAL_GPIO_Init+0x2a8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d869      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044ca:	4a94      	ldr	r2, [pc, #592]	@ (800471c <HAL_GPIO_Init+0x2ac>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04c      	beq.n	800456a <HAL_GPIO_Init+0xfa>
 80044d0:	4a92      	ldr	r2, [pc, #584]	@ (800471c <HAL_GPIO_Init+0x2ac>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d863      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044d6:	4a92      	ldr	r2, [pc, #584]	@ (8004720 <HAL_GPIO_Init+0x2b0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d046      	beq.n	800456a <HAL_GPIO_Init+0xfa>
 80044dc:	4a90      	ldr	r2, [pc, #576]	@ (8004720 <HAL_GPIO_Init+0x2b0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d85d      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044e2:	2b12      	cmp	r3, #18
 80044e4:	d82a      	bhi.n	800453c <HAL_GPIO_Init+0xcc>
 80044e6:	2b12      	cmp	r3, #18
 80044e8:	d859      	bhi.n	800459e <HAL_GPIO_Init+0x12e>
 80044ea:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <HAL_GPIO_Init+0x80>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	0800456b 	.word	0x0800456b
 80044f4:	08004545 	.word	0x08004545
 80044f8:	08004557 	.word	0x08004557
 80044fc:	08004599 	.word	0x08004599
 8004500:	0800459f 	.word	0x0800459f
 8004504:	0800459f 	.word	0x0800459f
 8004508:	0800459f 	.word	0x0800459f
 800450c:	0800459f 	.word	0x0800459f
 8004510:	0800459f 	.word	0x0800459f
 8004514:	0800459f 	.word	0x0800459f
 8004518:	0800459f 	.word	0x0800459f
 800451c:	0800459f 	.word	0x0800459f
 8004520:	0800459f 	.word	0x0800459f
 8004524:	0800459f 	.word	0x0800459f
 8004528:	0800459f 	.word	0x0800459f
 800452c:	0800459f 	.word	0x0800459f
 8004530:	0800459f 	.word	0x0800459f
 8004534:	0800454d 	.word	0x0800454d
 8004538:	08004561 	.word	0x08004561
 800453c:	4a79      	ldr	r2, [pc, #484]	@ (8004724 <HAL_GPIO_Init+0x2b4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004542:	e02c      	b.n	800459e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	623b      	str	r3, [r7, #32]
          break;
 800454a:	e029      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	623b      	str	r3, [r7, #32]
          break;
 8004554:	e024      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	3308      	adds	r3, #8
 800455c:	623b      	str	r3, [r7, #32]
          break;
 800455e:	e01f      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	330c      	adds	r3, #12
 8004566:	623b      	str	r3, [r7, #32]
          break;
 8004568:	e01a      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004572:	2304      	movs	r3, #4
 8004574:	623b      	str	r3, [r7, #32]
          break;
 8004576:	e013      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004580:	2308      	movs	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	611a      	str	r2, [r3, #16]
          break;
 800458a:	e009      	b.n	80045a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800458c:	2308      	movs	r3, #8
 800458e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	615a      	str	r2, [r3, #20]
          break;
 8004596:	e003      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004598:	2300      	movs	r3, #0
 800459a:	623b      	str	r3, [r7, #32]
          break;
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x130>
          break;
 800459e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2bff      	cmp	r3, #255	@ 0xff
 80045a4:	d801      	bhi.n	80045aa <HAL_GPIO_Init+0x13a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	e001      	b.n	80045ae <HAL_GPIO_Init+0x13e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2bff      	cmp	r3, #255	@ 0xff
 80045b4:	d802      	bhi.n	80045bc <HAL_GPIO_Init+0x14c>
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_Init+0x152>
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	3b08      	subs	r3, #8
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	210f      	movs	r1, #15
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	6a39      	ldr	r1, [r7, #32]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	431a      	orrs	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80b1 	beq.w	8004752 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004728 <HAL_GPIO_Init+0x2b8>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004728 <HAL_GPIO_Init+0x2b8>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6193      	str	r3, [r2, #24]
 80045fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004728 <HAL_GPIO_Init+0x2b8>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004608:	4a48      	ldr	r2, [pc, #288]	@ (800472c <HAL_GPIO_Init+0x2bc>)
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	3302      	adds	r3, #2
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	220f      	movs	r2, #15
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a40      	ldr	r2, [pc, #256]	@ (8004730 <HAL_GPIO_Init+0x2c0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_GPIO_Init+0x1ec>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3f      	ldr	r2, [pc, #252]	@ (8004734 <HAL_GPIO_Init+0x2c4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00d      	beq.n	8004658 <HAL_GPIO_Init+0x1e8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3e      	ldr	r2, [pc, #248]	@ (8004738 <HAL_GPIO_Init+0x2c8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <HAL_GPIO_Init+0x1e4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_GPIO_Init+0x2cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_GPIO_Init+0x1e0>
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <HAL_GPIO_Init+0x1ee>
 8004650:	2304      	movs	r3, #4
 8004652:	e004      	b.n	800465e <HAL_GPIO_Init+0x1ee>
 8004654:	2302      	movs	r3, #2
 8004656:	e002      	b.n	800465e <HAL_GPIO_Init+0x1ee>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_GPIO_Init+0x1ee>
 800465c:	2300      	movs	r3, #0
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	f002 0203 	and.w	r2, r2, #3
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	4093      	lsls	r3, r2
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800466e:	492f      	ldr	r1, [pc, #188]	@ (800472c <HAL_GPIO_Init+0x2bc>)
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	089b      	lsrs	r3, r3, #2
 8004674:	3302      	adds	r3, #2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004688:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	492c      	ldr	r1, [pc, #176]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
 8004694:	e006      	b.n	80046a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004696:	4b2a      	ldr	r3, [pc, #168]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	43db      	mvns	r3, r3
 800469e:	4928      	ldr	r1, [pc, #160]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046b0:	4b23      	ldr	r3, [pc, #140]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4922      	ldr	r1, [pc, #136]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046be:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	491e      	ldr	r1, [pc, #120]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046d8:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4918      	ldr	r1, [pc, #96]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	e006      	b.n	80046f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046e6:	4b16      	ldr	r3, [pc, #88]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	4914      	ldr	r1, [pc, #80]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d021      	beq.n	8004744 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004700:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	490e      	ldr	r1, [pc, #56]	@ (8004740 <HAL_GPIO_Init+0x2d0>)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]
 800470c:	e021      	b.n	8004752 <HAL_GPIO_Init+0x2e2>
 800470e:	bf00      	nop
 8004710:	10320000 	.word	0x10320000
 8004714:	10310000 	.word	0x10310000
 8004718:	10220000 	.word	0x10220000
 800471c:	10210000 	.word	0x10210000
 8004720:	10120000 	.word	0x10120000
 8004724:	10110000 	.word	0x10110000
 8004728:	40021000 	.word	0x40021000
 800472c:	40010000 	.word	0x40010000
 8004730:	40010800 	.word	0x40010800
 8004734:	40010c00 	.word	0x40010c00
 8004738:	40011000 	.word	0x40011000
 800473c:	40011400 	.word	0x40011400
 8004740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_GPIO_Init+0x304>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	43db      	mvns	r3, r3
 800474c:	4909      	ldr	r1, [pc, #36]	@ (8004774 <HAL_GPIO_Init+0x304>)
 800474e:	4013      	ands	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	f47f ae8e 	bne.w	8004484 <HAL_GPIO_Init+0x14>
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	372c      	adds	r7, #44	@ 0x2c
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	40010400 	.word	0x40010400

08004778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
 8004784:	4613      	mov	r3, r2
 8004786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004794:	e003      	b.n	800479e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	041a      	lsls	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	041a      	lsls	r2, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43d9      	mvns	r1, r3
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	400b      	ands	r3, r1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	611a      	str	r2, [r3, #16]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e12b      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe f8c4 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800483e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004840:	f001 fd2a 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4a81      	ldr	r2, [pc, #516]	@ (8004a50 <HAL_I2C_Init+0x274>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d807      	bhi.n	8004860 <HAL_I2C_Init+0x84>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <HAL_I2C_Init+0x278>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e006      	b.n	800486e <HAL_I2C_Init+0x92>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a7d      	ldr	r2, [pc, #500]	@ (8004a58 <HAL_I2C_Init+0x27c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	bf94      	ite	ls
 8004868:	2301      	movls	r3, #1
 800486a:	2300      	movhi	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0e7      	b.n	8004a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a78      	ldr	r2, [pc, #480]	@ (8004a5c <HAL_I2C_Init+0x280>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d802      	bhi.n	80048b0 <HAL_I2C_Init+0xd4>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3301      	adds	r3, #1
 80048ae:	e009      	b.n	80048c4 <HAL_I2C_Init+0xe8>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	4a69      	ldr	r2, [pc, #420]	@ (8004a60 <HAL_I2C_Init+0x284>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	3301      	adds	r3, #1
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	495c      	ldr	r1, [pc, #368]	@ (8004a50 <HAL_I2C_Init+0x274>)
 80048e0:	428b      	cmp	r3, r1
 80048e2:	d819      	bhi.n	8004918 <HAL_I2C_Init+0x13c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	1e59      	subs	r1, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048f8:	400b      	ands	r3, r1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_I2C_Init+0x138>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1e59      	subs	r1, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fbb1 f3f3 	udiv	r3, r1, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	e051      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004914:	2304      	movs	r3, #4
 8004916:	e04f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <HAL_I2C_Init+0x168>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e58      	subs	r0, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	440b      	add	r3, r1
 800492e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e012      	b.n	800496a <HAL_I2C_Init+0x18e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	0099      	lsls	r1, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Init+0x196>
 800496e:	2301      	movs	r3, #1
 8004970:	e022      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10e      	bne.n	8004998 <HAL_I2C_Init+0x1bc>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e58      	subs	r0, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	440b      	add	r3, r1
 8004988:	fbb0 f3f3 	udiv	r3, r0, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004996:	e00f      	b.n	80049b8 <HAL_I2C_Init+0x1dc>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e58      	subs	r0, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	0099      	lsls	r1, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	6809      	ldr	r1, [r1, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6911      	ldr	r1, [r2, #16]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	000186a0 	.word	0x000186a0
 8004a54:	001e847f 	.word	0x001e847f
 8004a58:	003d08ff 	.word	0x003d08ff
 8004a5c:	431bde83 	.word	0x431bde83
 8004a60:	10624dd3 	.word	0x10624dd3

08004a64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a7e:	f7fe fa1f 	bl	8002ec0 <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	f040 80d9 	bne.w	8004c44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	2319      	movs	r3, #25
 8004a98:	2201      	movs	r2, #1
 8004a9a:	496d      	ldr	r1, [pc, #436]	@ (8004c50 <HAL_I2C_Mem_Write+0x1ec>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fdef 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0cc      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_I2C_Mem_Write+0x56>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0c5      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d007      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2221      	movs	r2, #33	@ 0x21
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2240      	movs	r2, #64	@ 0x40
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a3a      	ldr	r2, [r7, #32]
 8004b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c54 <HAL_I2C_Mem_Write+0x1f0>)
 8004b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b22:	88f8      	ldrh	r0, [r7, #6]
 8004b24:	893a      	ldrh	r2, [r7, #8]
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	4603      	mov	r3, r0
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fc26 	bl	8005384 <I2C_RequestMemoryWrite>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d052      	beq.n	8004be4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e081      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 feb4 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d107      	bne.n	8004b6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06b      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_I2C_Mem_Write+0x180>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1aa      	bne.n	8004b42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fea7 	bl	8005944 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d107      	bne.n	8004c14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e016      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	00100002 	.word	0x00100002
 8004c54:	ffff0000 	.word	0xffff0000

08004c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	@ 0x30
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	813b      	strh	r3, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c76:	f7fe f923 	bl	8002ec0 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 8244 	bne.w	8005112 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2319      	movs	r3, #25
 8004c90:	2201      	movs	r2, #1
 8004c92:	4982      	ldr	r1, [pc, #520]	@ (8004e9c <HAL_I2C_Mem_Read+0x244>)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fcf3 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e237      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Read+0x5a>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e230      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d007      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2222      	movs	r2, #34	@ 0x22
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	@ 0x40
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a62      	ldr	r2, [pc, #392]	@ (8004ea0 <HAL_I2C_Mem_Read+0x248>)
 8004d18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d1a:	88f8      	ldrh	r0, [r7, #6]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	8979      	ldrh	r1, [r7, #10]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4603      	mov	r3, r0
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fbc0 	bl	80054b0 <I2C_RequestMemoryRead>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1ec      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d113      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e1c0      	b.n	80050ec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d11e      	bne.n	8004db0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d82:	b672      	cpsid	i
}
 8004d84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004daa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dac:	b662      	cpsie	i
}
 8004dae:	e035      	b.n	8004e1c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11e      	bne.n	8004df6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc8:	b672      	cpsid	i
}
 8004dca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004df2:	b662      	cpsie	i
}
 8004df4:	e012      	b.n	8004e1c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e04:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e1c:	e166      	b.n	80050ec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f200 811f 	bhi.w	8005066 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d123      	bne.n	8004e78 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fdcd 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e167      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e76:	e139      	b.n	80050ec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d152      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	2200      	movs	r2, #0
 8004e88:	4906      	ldr	r1, [pc, #24]	@ (8004ea4 <HAL_I2C_Mem_Read+0x24c>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fbf8 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e13c      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
 8004e9a:	bf00      	nop
 8004e9c:	00100002 	.word	0x00100002
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea8:	b672      	cpsid	i
}
 8004eaa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004eee:	b662      	cpsie	i
}
 8004ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f24:	e0e2      	b.n	80050ec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	497b      	ldr	r1, [pc, #492]	@ (800511c <HAL_I2C_Mem_Read+0x4c4>)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fba5 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0e9      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f50:	b672      	cpsid	i
}
 8004f52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f86:	4b66      	ldr	r3, [pc, #408]	@ (8005120 <HAL_I2C_Mem_Read+0x4c8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	08db      	lsrs	r3, r3, #3
 8004f8c:	4a65      	ldr	r2, [pc, #404]	@ (8005124 <HAL_I2C_Mem_Read+0x4cc>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	0a1a      	lsrs	r2, r3, #8
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00da      	lsls	r2, r3, #3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d118      	bne.n	8004fde <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fce:	b662      	cpsie	i
}
 8004fd0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09a      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d1d9      	bne.n	8004fa0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800502e:	b662      	cpsie	i
}
 8005030:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005064:	e042      	b.n	80050ec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005068:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fcb2 	bl	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e04c      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d118      	bne.n	80050ec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f ae94 	bne.w	8004e1e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	@ 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	00010004 	.word	0x00010004
 8005120:	2000000c 	.word	0x2000000c
 8005124:	14f8b589 	.word	0x14f8b589

08005128 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	460b      	mov	r3, r1
 8005136:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005138:	f7fd fec2 	bl	8002ec0 <HAL_GetTick>
 800513c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b20      	cmp	r3, #32
 800514c:	f040 8111 	bne.w	8005372 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2319      	movs	r3, #25
 8005156:	2201      	movs	r2, #1
 8005158:	4988      	ldr	r1, [pc, #544]	@ (800537c <HAL_I2C_IsDeviceReady+0x254>)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fa90 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
 8005168:	e104      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2C_IsDeviceReady+0x50>
 8005174:	2302      	movs	r3, #2
 8005176:	e0fd      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d007      	beq.n	800519e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2224      	movs	r2, #36	@ 0x24
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a70      	ldr	r2, [pc, #448]	@ (8005380 <HAL_I2C_IsDeviceReady+0x258>)
 80051c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fa4e 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f8:	d103      	bne.n	8005202 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b6      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005214:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005216:	f7fd fe53 	bl	8002ec0 <HAL_GetTick>
 800521a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800524a:	e025      	b.n	8005298 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fd fe38 	bl	8002ec0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <HAL_I2C_IsDeviceReady+0x13a>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	22a0      	movs	r2, #160	@ 0xa0
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80052a2:	d005      	beq.n	80052b0 <HAL_I2C_IsDeviceReady+0x188>
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <HAL_I2C_IsDeviceReady+0x188>
 80052aa:	7dbb      	ldrb	r3, [r7, #22]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0cd      	beq.n	800524c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d129      	bne.n	800531a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2319      	movs	r3, #25
 80052f2:	2201      	movs	r2, #1
 80052f4:	4921      	ldr	r1, [pc, #132]	@ (800537c <HAL_I2C_IsDeviceReady+0x254>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f9c2 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e036      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e02c      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005328:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005332:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2319      	movs	r3, #25
 800533a:	2201      	movs	r2, #1
 800533c:	490f      	ldr	r1, [pc, #60]	@ (800537c <HAL_I2C_IsDeviceReady+0x254>)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f99e 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e012      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	3301      	adds	r3, #1
 8005352:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	f4ff af32 	bcc.w	80051c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	00100002 	.word	0x00100002
 8005380:	ffff0000 	.word	0xffff0000

08005384 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	461a      	mov	r2, r3
 8005392:	4603      	mov	r3, r0
 8005394:	817b      	strh	r3, [r7, #10]
 8005396:	460b      	mov	r3, r1
 8005398:	813b      	strh	r3, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f960 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d4:	d103      	bne.n	80053de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e05f      	b.n	80054a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	492d      	ldr	r1, [pc, #180]	@ (80054ac <I2C_RequestMemoryWrite+0x128>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f9bb 	bl	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e04c      	b.n	80054a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa46 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2b04      	cmp	r3, #4
 8005434:	d107      	bne.n	8005446 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e02b      	b.n	80054a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	e021      	b.n	80054a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2da      	uxtb	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fa20 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e005      	b.n	80054a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005496:	893b      	ldrh	r3, [r7, #8]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	00010002 	.word	0x00010002

080054b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	817b      	strh	r3, [r7, #10]
 80054c2:	460b      	mov	r3, r1
 80054c4:	813b      	strh	r3, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8c2 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005510:	d103      	bne.n	800551a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005518:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0aa      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800551e:	897b      	ldrh	r3, [r7, #10]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800552c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	4952      	ldr	r1, [pc, #328]	@ (800567c <I2C_RequestMemoryRead+0x1cc>)
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f91d 	bl	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e097      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	6a39      	ldr	r1, [r7, #32]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f9a8 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	2b04      	cmp	r3, #4
 8005570:	d107      	bne.n	8005582 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e076      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800558c:	893b      	ldrh	r3, [r7, #8]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	611a      	str	r2, [r3, #16]
 8005596:	e021      	b.n	80055dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005598:	893b      	ldrh	r3, [r7, #8]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	b29b      	uxth	r3, r3
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6a39      	ldr	r1, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f982 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d107      	bne.n	80055ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e050      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055d2:	893b      	ldrh	r3, [r7, #8]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055de:	6a39      	ldr	r1, [r7, #32]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f967 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d107      	bne.n	8005604 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e035      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005616:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2200      	movs	r2, #0
 8005620:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f82b 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563e:	d103      	bne.n	8005648 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e013      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800564c:	897b      	ldrh	r3, [r7, #10]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	6a3a      	ldr	r2, [r7, #32]
 8005660:	4906      	ldr	r1, [pc, #24]	@ (800567c <I2C_RequestMemoryRead+0x1cc>)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f886 	bl	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	00010002 	.word	0x00010002

08005680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005690:	e048      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d044      	beq.n	8005724 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fd fc11 	bl	8002ec0 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d139      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10d      	bne.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	43da      	mvns	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	e00c      	b.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	43da      	mvns	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d116      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e023      	b.n	800576c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10d      	bne.n	800574a <I2C_WaitOnFlagUntilTimeout+0xca>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	e00c      	b.n	8005764 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	43da      	mvns	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	429a      	cmp	r2, r3
 8005768:	d093      	beq.n	8005692 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005782:	e071      	b.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005792:	d123      	bne.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e067      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d041      	beq.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e4:	f7fd fb6c 	bl	8002ec0 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d302      	bcc.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d136      	bne.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10c      	bne.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	43da      	mvns	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4013      	ands	r3, r2
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e00b      	b.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e021      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10c      	bne.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e00b      	b.n	80058a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	43da      	mvns	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f47f af6d 	bne.w	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c0:	e034      	b.n	800592c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f8e3 	bl	8005a8e <I2C_IsAcknowledgeFailed>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e034      	b.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d028      	beq.n	800592c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058da:	f7fd faf1 	bl	8002ec0 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11d      	bne.n	800592c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b80      	cmp	r3, #128	@ 0x80
 80058fc:	d016      	beq.n	800592c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	f043 0220 	orr.w	r2, r3, #32
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e007      	b.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b80      	cmp	r3, #128	@ 0x80
 8005938:	d1c3      	bne.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005950:	e034      	b.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f89b 	bl	8005a8e <I2C_IsAcknowledgeFailed>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e034      	b.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d028      	beq.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fd faa9 	bl	8002ec0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11d      	bne.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b04      	cmp	r3, #4
 800598c:	d016      	beq.n	80059bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d1c3      	bne.n	8005952 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e0:	e049      	b.n	8005a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d119      	bne.n	8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0210 	mvn.w	r2, #16
 80059f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e030      	b.n	8005a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a24:	f7fd fa4c 	bl	8002ec0 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11d      	bne.n	8005a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b40      	cmp	r3, #64	@ 0x40
 8005a46:	d016      	beq.n	8005a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e007      	b.n	8005a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a80:	2b40      	cmp	r3, #64	@ 0x40
 8005a82:	d1ae      	bne.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aa4:	d11b      	bne.n	8005ade <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005af0:	4b03      	ldr	r3, [pc, #12]	@ (8005b00 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	420e0020 	.word	0x420e0020

08005b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e272      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8087 	beq.w	8005c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b24:	4b92      	ldr	r3, [pc, #584]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d00c      	beq.n	8005b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b30:	4b8f      	ldr	r3, [pc, #572]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d112      	bne.n	8005b62 <HAL_RCC_OscConfig+0x5e>
 8005b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4a:	4b89      	ldr	r3, [pc, #548]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d06c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x12c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d168      	bne.n	8005c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e24c      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6a:	d106      	bne.n	8005b7a <HAL_RCC_OscConfig+0x76>
 8005b6c:	4b80      	ldr	r3, [pc, #512]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a7f      	ldr	r2, [pc, #508]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e02e      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x98>
 8005b82:	4b7b      	ldr	r3, [pc, #492]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a7a      	ldr	r2, [pc, #488]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b78      	ldr	r3, [pc, #480]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a77      	ldr	r2, [pc, #476]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e01d      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0xbc>
 8005ba6:	4b72      	ldr	r3, [pc, #456]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a71      	ldr	r2, [pc, #452]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCC_OscConfig+0xd4>
 8005bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	4b68      	ldr	r3, [pc, #416]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a67      	ldr	r2, [pc, #412]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d013      	beq.n	8005c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fd f96e 	bl	8002ec0 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be8:	f7fd f96a 	bl	8002ec0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	@ 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e200      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0xe4>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fd f95a 	bl	8002ec0 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c10:	f7fd f956 	bl	8002ec0 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b64      	cmp	r3, #100	@ 0x64
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e1ec      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c22:	4b53      	ldr	r3, [pc, #332]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x10c>
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d063      	beq.n	8005d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c4a:	4b49      	ldr	r3, [pc, #292]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d11c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x18c>
 8005c56:	4b46      	ldr	r3, [pc, #280]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d116      	bne.n	8005c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c62:	4b43      	ldr	r3, [pc, #268]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCC_OscConfig+0x176>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d001      	beq.n	8005c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e1c0      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4939      	ldr	r1, [pc, #228]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8e:	e03a      	b.n	8005d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d020      	beq.n	8005cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c98:	4b36      	ldr	r3, [pc, #216]	@ (8005d74 <HAL_RCC_OscConfig+0x270>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9e:	f7fd f90f 	bl	8002ec0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fd f90b 	bl	8002ec0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1a1      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4927      	ldr	r1, [pc, #156]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	e015      	b.n	8005d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cda:	4b26      	ldr	r3, [pc, #152]	@ (8005d74 <HAL_RCC_OscConfig+0x270>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce0:	f7fd f8ee 	bl	8002ec0 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce8:	f7fd f8ea 	bl	8002ec0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e180      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d03a      	beq.n	8005d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d019      	beq.n	8005d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1a:	4b17      	ldr	r3, [pc, #92]	@ (8005d78 <HAL_RCC_OscConfig+0x274>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d20:	f7fd f8ce 	bl	8002ec0 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d28:	f7fd f8ca 	bl	8002ec0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e160      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <HAL_RCC_OscConfig+0x26c>)
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d46:	2001      	movs	r0, #1
 8005d48:	f000 face 	bl	80062e8 <RCC_Delay>
 8005d4c:	e01c      	b.n	8005d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <HAL_RCC_OscConfig+0x274>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d54:	f7fd f8b4 	bl	8002ec0 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5a:	e00f      	b.n	8005d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5c:	f7fd f8b0 	bl	8002ec0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d908      	bls.n	8005d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e146      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	42420000 	.word	0x42420000
 8005d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7c:	4b92      	ldr	r3, [pc, #584]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e9      	bne.n	8005d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a6 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10d      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	4b88      	ldr	r3, [pc, #544]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4a87      	ldr	r2, [pc, #540]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	61d3      	str	r3, [r2, #28]
 8005db2:	4b85      	ldr	r3, [pc, #532]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b82      	ldr	r3, [pc, #520]	@ (8005fcc <HAL_RCC_OscConfig+0x4c8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d118      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dce:	4b7f      	ldr	r3, [pc, #508]	@ (8005fcc <HAL_RCC_OscConfig+0x4c8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8005fcc <HAL_RCC_OscConfig+0x4c8>)
 8005dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dda:	f7fd f871 	bl	8002ec0 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de2:	f7fd f86d 	bl	8002ec0 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b64      	cmp	r3, #100	@ 0x64
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e103      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df4:	4b75      	ldr	r3, [pc, #468]	@ (8005fcc <HAL_RCC_OscConfig+0x4c8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x312>
 8005e08:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6213      	str	r3, [r2, #32]
 8005e14:	e02d      	b.n	8005e72 <HAL_RCC_OscConfig+0x36e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x334>
 8005e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	4a69      	ldr	r2, [pc, #420]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	6213      	str	r3, [r2, #32]
 8005e2a:	4b67      	ldr	r3, [pc, #412]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	4a66      	ldr	r2, [pc, #408]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	6213      	str	r3, [r2, #32]
 8005e36:	e01c      	b.n	8005e72 <HAL_RCC_OscConfig+0x36e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b05      	cmp	r3, #5
 8005e3e:	d10c      	bne.n	8005e5a <HAL_RCC_OscConfig+0x356>
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	4a60      	ldr	r2, [pc, #384]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6213      	str	r3, [r2, #32]
 8005e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	4a5d      	ldr	r2, [pc, #372]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6213      	str	r3, [r2, #32]
 8005e58:	e00b      	b.n	8005e72 <HAL_RCC_OscConfig+0x36e>
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	6213      	str	r3, [r2, #32]
 8005e66:	4b58      	ldr	r3, [pc, #352]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4a57      	ldr	r2, [pc, #348]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e6c:	f023 0304 	bic.w	r3, r3, #4
 8005e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d015      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e7a:	f7fd f821 	bl	8002ec0 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e80:	e00a      	b.n	8005e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fd f81d 	bl	8002ec0 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e0b1      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e98:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0ee      	beq.n	8005e82 <HAL_RCC_OscConfig+0x37e>
 8005ea4:	e014      	b.n	8005ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea6:	f7fd f80b 	bl	8002ec0 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fd f807 	bl	8002ec0 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e09b      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec4:	4b40      	ldr	r3, [pc, #256]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ee      	bne.n	8005eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4a3b      	ldr	r2, [pc, #236]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8087 	beq.w	8005ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eec:	4b36      	ldr	r3, [pc, #216]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 030c 	and.w	r3, r3, #12
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d061      	beq.n	8005fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d146      	bne.n	8005f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f00:	4b33      	ldr	r3, [pc, #204]	@ (8005fd0 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fc ffdb 	bl	8002ec0 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc ffd7 	bl	8002ec0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e06d      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f20:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f34:	d108      	bne.n	8005f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f36:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4921      	ldr	r1, [pc, #132]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f48:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a19      	ldr	r1, [r3, #32]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	491b      	ldr	r1, [pc, #108]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f60:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd0 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f66:	f7fc ffab 	bl	8002ec0 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fc ffa7 	bl	8002ec0 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e03d      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x46a>
 8005f8c:	e035      	b.n	8005ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <HAL_RCC_OscConfig+0x4cc>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fc ff94 	bl	8002ec0 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fc ff90 	bl	8002ec0 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e026      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fae:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x498>
 8005fba:	e01e      	b.n	8005ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e019      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <HAL_RCC_OscConfig+0x500>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d106      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000

08006008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0d0      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800601c:	4b6a      	ldr	r3, [pc, #424]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d910      	bls.n	800604c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b67      	ldr	r3, [pc, #412]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 0207 	bic.w	r2, r3, #7
 8006032:	4965      	ldr	r1, [pc, #404]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603a:	4b63      	ldr	r3, [pc, #396]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d001      	beq.n	800604c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0b8      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006064:	4b59      	ldr	r3, [pc, #356]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a58      	ldr	r2, [pc, #352]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800606a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800606e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800607c:	4b53      	ldr	r3, [pc, #332]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a52      	ldr	r2, [pc, #328]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006088:	4b50      	ldr	r3, [pc, #320]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	494d      	ldr	r1, [pc, #308]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d040      	beq.n	8006128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d107      	bne.n	80060be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ae:	4b47      	ldr	r3, [pc, #284]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d115      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e07f      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c6:	4b41      	ldr	r3, [pc, #260]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e073      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d6:	4b3d      	ldr	r3, [pc, #244]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e06b      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060e6:	4b39      	ldr	r3, [pc, #228]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f023 0203 	bic.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4936      	ldr	r1, [pc, #216]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fc fee2 	bl	8002ec0 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006100:	f7fc fede 	bl	8002ec0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e053      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	4b2d      	ldr	r3, [pc, #180]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 020c 	and.w	r2, r3, #12
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	429a      	cmp	r2, r3
 8006126:	d1eb      	bne.n	8006100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006128:	4b27      	ldr	r3, [pc, #156]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d210      	bcs.n	8006158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b24      	ldr	r3, [pc, #144]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 0207 	bic.w	r2, r3, #7
 800613e:	4922      	ldr	r1, [pc, #136]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e032      	b.n	80061be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006164:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4916      	ldr	r1, [pc, #88]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006172:	4313      	orrs	r3, r2
 8006174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006182:	4b12      	ldr	r3, [pc, #72]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	490e      	ldr	r1, [pc, #56]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006196:	f000 f821 	bl	80061dc <HAL_RCC_GetSysClockFreq>
 800619a:	4602      	mov	r2, r0
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <HAL_RCC_ClockConfig+0x1c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	490a      	ldr	r1, [pc, #40]	@ (80061d0 <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	5ccb      	ldrb	r3, [r1, r3]
 80061aa:	fa22 f303 	lsr.w	r3, r2, r3
 80061ae:	4a09      	ldr	r2, [pc, #36]	@ (80061d4 <HAL_RCC_ClockConfig+0x1cc>)
 80061b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061b2:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <HAL_RCC_ClockConfig+0x1d0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fc fe40 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40022000 	.word	0x40022000
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800a884 	.word	0x0800a884
 80061d4:	2000000c 	.word	0x2000000c
 80061d8:	20000010 	.word	0x20000010

080061dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x94>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b04      	cmp	r3, #4
 8006204:	d002      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0x30>
 8006206:	2b08      	cmp	r3, #8
 8006208:	d003      	beq.n	8006212 <HAL_RCC_GetSysClockFreq+0x36>
 800620a:	e027      	b.n	800625c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800620c:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x98>)
 800620e:	613b      	str	r3, [r7, #16]
      break;
 8006210:	e027      	b.n	8006262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	0c9b      	lsrs	r3, r3, #18
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	4a17      	ldr	r2, [pc, #92]	@ (8006278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800621c:	5cd3      	ldrb	r3, [r2, r3]
 800621e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d010      	beq.n	800624c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800622a:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x94>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	0c5b      	lsrs	r3, r3, #17
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	4a11      	ldr	r2, [pc, #68]	@ (800627c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x98>)
 800623e:	fb03 f202 	mul.w	r2, r3, r2
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e004      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a0c      	ldr	r2, [pc, #48]	@ (8006280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	613b      	str	r3, [r7, #16]
      break;
 800625a:	e002      	b.n	8006262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x98>)
 800625e:	613b      	str	r3, [r7, #16]
      break;
 8006260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006262:	693b      	ldr	r3, [r7, #16]
}
 8006264:	4618      	mov	r0, r3
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	007a1200 	.word	0x007a1200
 8006278:	0800a89c 	.word	0x0800a89c
 800627c:	0800a8ac 	.word	0x0800a8ac
 8006280:	003d0900 	.word	0x003d0900

08006284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006288:	4b02      	ldr	r3, [pc, #8]	@ (8006294 <HAL_RCC_GetHCLKFreq+0x10>)
 800628a:	681b      	ldr	r3, [r3, #0]
}
 800628c:	4618      	mov	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	2000000c 	.word	0x2000000c

08006298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800629c:	f7ff fff2 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4903      	ldr	r1, [pc, #12]	@ (80062bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	0800a894 	.word	0x0800a894

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062c4:	f7ff ffde 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	0adb      	lsrs	r3, r3, #11
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4903      	ldr	r1, [pc, #12]	@ (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000
 80062e4:	0800a894 	.word	0x0800a894

080062e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062f0:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <RCC_Delay+0x34>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006320 <RCC_Delay+0x38>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a5b      	lsrs	r3, r3, #9
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006304:	bf00      	nop
  }
  while (Delay --);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f9      	bne.n	8006304 <RCC_Delay+0x1c>
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr
 800631c:	2000000c 	.word	0x2000000c
 8006320:	10624dd3 	.word	0x10624dd3

08006324 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d07d      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006344:	4b4f      	ldr	r3, [pc, #316]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006350:	4b4c      	ldr	r3, [pc, #304]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	4a4b      	ldr	r2, [pc, #300]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635a:	61d3      	str	r3, [r2, #28]
 800635c:	4b49      	ldr	r3, [pc, #292]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636c:	4b46      	ldr	r3, [pc, #280]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d118      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006378:	4b43      	ldr	r3, [pc, #268]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a42      	ldr	r2, [pc, #264]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800637e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006384:	f7fc fd9c 	bl	8002ec0 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638a:	e008      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638c:	f7fc fd98 	bl	8002ec0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e06d      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639e:	4b3a      	ldr	r3, [pc, #232]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063aa:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02e      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d027      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063d2:	4b2e      	ldr	r3, [pc, #184]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063d8:	4b2c      	ldr	r3, [pc, #176]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063de:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ee:	f7fc fd67 	bl	8002ec0 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f4:	e00a      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fc fd63 	bl	8002ec0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e036      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ee      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	4b1a      	ldr	r3, [pc, #104]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4917      	ldr	r1, [pc, #92]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006426:	4313      	orrs	r3, r2
 8006428:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d105      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4a13      	ldr	r2, [pc, #76]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	490b      	ldr	r1, [pc, #44]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006456:	4313      	orrs	r3, r2
 8006458:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006466:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4904      	ldr	r1, [pc, #16]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006474:	4313      	orrs	r3, r2
 8006476:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40021000 	.word	0x40021000
 8006488:	40007000 	.word	0x40007000
 800648c:	42420440 	.word	0x42420440

08006490 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	2300      	movs	r3, #0
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	2300      	movs	r3, #0
 80064aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	f200 808a 	bhi.w	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d045      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d075      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80064c6:	e082      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80064c8:	4b46      	ldr	r3, [pc, #280]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80064ce:	4b45      	ldr	r3, [pc, #276]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d07b      	beq.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	0c9b      	lsrs	r3, r3, #18
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	4a41      	ldr	r2, [pc, #260]	@ (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80064e4:	5cd3      	ldrb	r3, [r2, r3]
 80064e6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d015      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064f2:	4b3c      	ldr	r3, [pc, #240]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	0c5b      	lsrs	r3, r3, #17
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	4a3b      	ldr	r2, [pc, #236]	@ (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80064fe:	5cd3      	ldrb	r3, [r2, r3]
 8006500:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00d      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800650c:	4a38      	ldr	r2, [pc, #224]	@ (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	fbb2 f2f3 	udiv	r2, r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4a34      	ldr	r2, [pc, #208]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006528:	4b2e      	ldr	r3, [pc, #184]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006534:	d102      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	61bb      	str	r3, [r7, #24]
      break;
 800653a:	e04a      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	61bb      	str	r3, [r7, #24]
      break;
 800654a:	e042      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800654c:	4b25      	ldr	r3, [pc, #148]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800655c:	d108      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e01f      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800657a:	d109      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800657c:	4b19      	ldr	r3, [pc, #100]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006588:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e00f      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800659a:	d11c      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800659c:	4b11      	ldr	r3, [pc, #68]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80065a8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80065ac:	61bb      	str	r3, [r7, #24]
      break;
 80065ae:	e012      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80065b0:	e011      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80065b2:	f7ff fe85 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	0b9b      	lsrs	r3, r3, #14
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	3301      	adds	r3, #1
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ca:	61bb      	str	r3, [r7, #24]
      break;
 80065cc:	e004      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80065d6:	bf00      	nop
    }
  }
  return (frequency);
 80065d8:	69bb      	ldr	r3, [r7, #24]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40021000 	.word	0x40021000
 80065e8:	0800a8b0 	.word	0x0800a8b0
 80065ec:	0800a8c0 	.word	0x0800a8c0
 80065f0:	007a1200 	.word	0x007a1200
 80065f4:	003d0900 	.word	0x003d0900
 80065f8:	aaaaaaab 	.word	0xaaaaaaab

080065fc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e07a      	b.n	8006708 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7c5b      	ldrb	r3, [r3, #17]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fc f9f2 	bl	8002a0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9be 	bl	80069b0 <HAL_RTC_WaitForSynchro>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e061      	b.n	8006708 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa77 	bl	8006b38 <RTC_EnterInitMode>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2204      	movs	r2, #4
 8006654:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e056      	b.n	8006708 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0207 	bic.w	r2, r2, #7
 8006668:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006672:	4b27      	ldr	r3, [pc, #156]	@ (8006710 <HAL_RTC_Init+0x114>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006676:	4a26      	ldr	r2, [pc, #152]	@ (8006710 <HAL_RTC_Init+0x114>)
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800667e:	4b24      	ldr	r3, [pc, #144]	@ (8006710 <HAL_RTC_Init+0x114>)
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	4921      	ldr	r1, [pc, #132]	@ (8006710 <HAL_RTC_Init+0x114>)
 800668c:	4313      	orrs	r3, r2
 800668e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d003      	beq.n	80066a2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e00e      	b.n	80066c0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80066a2:	2001      	movs	r0, #1
 80066a4:	f7ff fef4 	bl	8006490 <HAL_RCCEx_GetPeriphCLKFreq>
 80066a8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2204      	movs	r2, #4
 80066b4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e026      	b.n	8006708 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b01      	subs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0c1a      	lsrs	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f002 020f 	and.w	r2, r2, #15
 80066cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	b292      	uxth	r2, r2
 80066d6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa55 	bl	8006b88 <RTC_ExitInitMode>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2204      	movs	r2, #4
 80066e8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e00c      	b.n	8006708 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006706:	2300      	movs	r3, #0
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40006c00 	.word	0x40006c00

08006714 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_RTC_SetTime+0x20>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e080      	b.n	800683a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	7c1b      	ldrb	r3, [r3, #16]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_RTC_SetTime+0x30>
 8006740:	2302      	movs	r3, #2
 8006742:	e07a      	b.n	800683a <HAL_RTC_SetTime+0x126>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2202      	movs	r2, #2
 800674e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d113      	bne.n	800677e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006760:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	4619      	mov	r1, r3
 800676a:	460b      	mov	r3, r1
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	1a5b      	subs	r3, r3, r1
 8006770:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006772:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006778:	4413      	add	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e01e      	b.n	80067bc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa28 	bl	8006bd8 <RTC_Bcd2ToByte>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006790:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fa1d 	bl	8006bd8 <RTC_Bcd2ToByte>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	4613      	mov	r3, r2
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	1a9b      	subs	r3, r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80067aa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	789b      	ldrb	r3, [r3, #2]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fa11 	bl	8006bd8 <RTC_Bcd2ToByte>
 80067b6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80067b8:	4423      	add	r3, r4
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f953 	bl	8006a6a <RTC_WriteTimeCounter>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2204      	movs	r2, #4
 80067ce:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e02f      	b.n	800683a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0205 	bic.w	r2, r2, #5
 80067e8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f964 	bl	8006ab8 <RTC_ReadAlarmCounter>
 80067f0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d018      	beq.n	800682c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d214      	bcs.n	800682c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8006808:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800680c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800680e:	6939      	ldr	r1, [r7, #16]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f96a 	bl	8006aea <RTC_WriteAlarmCounter>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2204      	movs	r2, #4
 8006820:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e006      	b.n	800683a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	bd90      	pop	{r4, r7, pc}
	...

08006844 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_RTC_SetDate+0x24>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e097      	b.n	800699c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	7c1b      	ldrb	r3, [r3, #16]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_RTC_SetDate+0x34>
 8006874:	2302      	movs	r3, #2
 8006876:	e091      	b.n	800699c <HAL_RTC_SetDate+0x158>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2202      	movs	r2, #2
 8006882:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10c      	bne.n	80068a4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	78da      	ldrb	r2, [r3, #3]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785a      	ldrb	r2, [r3, #1]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	789a      	ldrb	r2, [r3, #2]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	739a      	strb	r2, [r3, #14]
 80068a2:	e01a      	b.n	80068da <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f995 	bl	8006bd8 <RTC_Bcd2ToByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f98c 	bl	8006bd8 <RTC_Bcd2ToByte>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	789b      	ldrb	r3, [r3, #2]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f983 	bl	8006bd8 <RTC_Bcd2ToByte>
 80068d2:	4603      	mov	r3, r0
 80068d4:	461a      	mov	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7bdb      	ldrb	r3, [r3, #15]
 80068de:	4618      	mov	r0, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	7b59      	ldrb	r1, [r3, #13]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	7b9b      	ldrb	r3, [r3, #14]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f000 f993 	bl	8006c14 <RTC_WeekDayNum>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	7b1a      	ldrb	r2, [r3, #12]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f883 	bl	8006a0a <RTC_ReadTimeCounter>
 8006904:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4a26      	ldr	r2, [pc, #152]	@ (80069a4 <HAL_RTC_SetDate+0x160>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	0adb      	lsrs	r3, r3, #11
 8006910:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b18      	cmp	r3, #24
 8006916:	d93a      	bls.n	800698e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	4a23      	ldr	r2, [pc, #140]	@ (80069a8 <HAL_RTC_SetDate+0x164>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	4a22      	ldr	r2, [pc, #136]	@ (80069ac <HAL_RTC_SetDate+0x168>)
 8006924:	fb02 f303 	mul.w	r3, r2, r3
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800692e:	69f9      	ldr	r1, [r7, #28]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f89a 	bl	8006a6a <RTC_WriteTimeCounter>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2204      	movs	r2, #4
 8006940:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e027      	b.n	800699c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f8b3 	bl	8006ab8 <RTC_ReadAlarmCounter>
 8006952:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d018      	beq.n	800698e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	429a      	cmp	r2, r3
 8006962:	d214      	bcs.n	800698e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800696a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800696e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006970:	69b9      	ldr	r1, [r7, #24]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f8b9 	bl	8006aea <RTC_WriteAlarmCounter>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2204      	movs	r2, #4
 8006982:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e006      	b.n	800699c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	91a2b3c5 	.word	0x91a2b3c5
 80069a8:	aaaaaaab 	.word	0xaaaaaaab
 80069ac:	00015180 	.word	0x00015180

080069b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e01d      	b.n	8006a02 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0208 	bic.w	r2, r2, #8
 80069d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80069d6:	f7fc fa73 	bl	8002ec0 <HAL_GetTick>
 80069da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80069dc:	e009      	b.n	80069f2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80069de:	f7fc fa6f 	bl	8002ec0 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069ec:	d901      	bls.n	80069f2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e007      	b.n	8006a02 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0ee      	beq.n	80069de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	827b      	strh	r3, [r7, #18]
 8006a16:	2300      	movs	r3, #0
 8006a18:	823b      	strh	r3, [r7, #16]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006a3a:	8a7a      	ldrh	r2, [r7, #18]
 8006a3c:	8a3b      	ldrh	r3, [r7, #16]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d008      	beq.n	8006a54 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006a42:	8a3b      	ldrh	r3, [r7, #16]
 8006a44:	041a      	lsls	r2, r3, #16
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e004      	b.n	8006a5e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006a54:	8a7b      	ldrh	r3, [r7, #18]
 8006a56:	041a      	lsls	r2, r3, #16
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006a5e:	697b      	ldr	r3, [r7, #20]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f85d 	bl	8006b38 <RTC_EnterInitMode>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e011      	b.n	8006aae <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	0c12      	lsrs	r2, r2, #16
 8006a92:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	b292      	uxth	r2, r2
 8006a9c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f872 	bl	8006b88 <RTC_ExitInitMode>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	81fb      	strh	r3, [r7, #14]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006ad8:	89fb      	ldrh	r3, [r7, #14]
 8006ada:	041a      	lsls	r2, r3, #16
 8006adc:	89bb      	ldrh	r3, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f81d 	bl	8006b38 <RTC_EnterInitMode>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	e011      	b.n	8006b2e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	0c12      	lsrs	r2, r2, #16
 8006b12:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	b292      	uxth	r2, r2
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f832 	bl	8006b88 <RTC_ExitInitMode>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006b44:	f7fc f9bc 	bl	8002ec0 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006b4a:	e009      	b.n	8006b60 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006b4c:	f7fc f9b8 	bl	8002ec0 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b5a:	d901      	bls.n	8006b60 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e00f      	b.n	8006b80 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0ee      	beq.n	8006b4c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0210 	orr.w	r2, r2, #16
 8006b7c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0210 	bic.w	r2, r2, #16
 8006ba2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006ba4:	f7fc f98c 	bl	8002ec0 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006baa:	e009      	b.n	8006bc0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006bac:	f7fc f988 	bl	8002ec0 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bba:	d901      	bls.n	8006bc0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e007      	b.n	8006bd0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0ee      	beq.n	8006bac <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	b2db      	uxtb	r3, r3
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr
	...

08006c14 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
 8006c20:	4613      	mov	r3, r2
 8006c22:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8006c32:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d82d      	bhi.n	8006c96 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	4a2c      	ldr	r2, [pc, #176]	@ (8006cf8 <RTC_WeekDayNum+0xe4>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	085a      	lsrs	r2, r3, #1
 8006c4e:	78bb      	ldrb	r3, [r7, #2]
 8006c50:	441a      	add	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	441a      	add	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	4926      	ldr	r1, [pc, #152]	@ (8006cfc <RTC_WeekDayNum+0xe8>)
 8006c64:	fba1 1303 	umull	r1, r3, r1, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4922      	ldr	r1, [pc, #136]	@ (8006cfc <RTC_WeekDayNum+0xe8>)
 8006c72:	fba1 1303 	umull	r1, r3, r1, r3
 8006c76:	09db      	lsrs	r3, r3, #7
 8006c78:	4413      	add	r3, r2
 8006c7a:	1d1a      	adds	r2, r3, #4
 8006c7c:	4b20      	ldr	r3, [pc, #128]	@ (8006d00 <RTC_WeekDayNum+0xec>)
 8006c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c82:	1ad1      	subs	r1, r2, r3
 8006c84:	0849      	lsrs	r1, r1, #1
 8006c86:	440b      	add	r3, r1
 8006c88:	0899      	lsrs	r1, r3, #2
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	1a5b      	subs	r3, r3, r1
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e029      	b.n	8006cea <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	4a15      	ldr	r2, [pc, #84]	@ (8006cf8 <RTC_WeekDayNum+0xe4>)
 8006ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca8:	085a      	lsrs	r2, r3, #1
 8006caa:	78bb      	ldrb	r3, [r7, #2]
 8006cac:	441a      	add	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4910      	ldr	r1, [pc, #64]	@ (8006cfc <RTC_WeekDayNum+0xe8>)
 8006cbc:	fba1 1303 	umull	r1, r3, r1, r3
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	490d      	ldr	r1, [pc, #52]	@ (8006cfc <RTC_WeekDayNum+0xe8>)
 8006cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8006ccc:	09db      	lsrs	r3, r3, #7
 8006cce:	4413      	add	r3, r2
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <RTC_WeekDayNum+0xec>)
 8006cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd8:	1ad1      	subs	r1, r2, r3
 8006cda:	0849      	lsrs	r1, r1, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	0899      	lsrs	r1, r3, #2
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a5b      	subs	r3, r3, r1
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	b2db      	uxtb	r3, r3
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr
 8006cf8:	38e38e39 	.word	0x38e38e39
 8006cfc:	51eb851f 	.word	0x51eb851f
 8006d00:	24924925 	.word	0x24924925

08006d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e076      	b.n	8006e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d108      	bne.n	8006d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d26:	d009      	beq.n	8006d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	61da      	str	r2, [r3, #28]
 8006d2e:	e005      	b.n	8006d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb fe7c 	bl	8002a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc0:	ea42 0103 	orr.w	r1, r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	0c1a      	lsrs	r2, r3, #16
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f002 0204 	and.w	r2, r2, #4
 8006de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_SPI_Transmit+0x22>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e12d      	b.n	800708a <HAL_SPI_Transmit+0x27e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e36:	f7fc f843 	bl	8002ec0 <HAL_GetTick>
 8006e3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d002      	beq.n	8006e52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e50:	e116      	b.n	8007080 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_SPI_Transmit+0x52>
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e62:	e10d      	b.n	8007080 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2203      	movs	r2, #3
 8006e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eaa:	d10f      	bne.n	8006ecc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d007      	beq.n	8006eea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef2:	d14f      	bne.n	8006f94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_SPI_Transmit+0xf6>
 8006efc:	8afb      	ldrh	r3, [r7, #22]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d142      	bne.n	8006f88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	881a      	ldrh	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f26:	e02f      	b.n	8006f88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d112      	bne.n	8006f5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	881a      	ldrh	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	1c9a      	adds	r2, r3, #2
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f5a:	e015      	b.n	8006f88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f5c:	f7fb ffb0 	bl	8002ec0 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d803      	bhi.n	8006f74 <HAL_SPI_Transmit+0x168>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d102      	bne.n	8006f7a <HAL_SPI_Transmit+0x16e>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006f86:	e07b      	b.n	8007080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1ca      	bne.n	8006f28 <HAL_SPI_Transmit+0x11c>
 8006f92:	e050      	b.n	8007036 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <HAL_SPI_Transmit+0x196>
 8006f9c:	8afb      	ldrh	r3, [r7, #22]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d144      	bne.n	800702c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fc8:	e030      	b.n	800702c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d113      	bne.n	8007000 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ffe:	e015      	b.n	800702c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007000:	f7fb ff5e 	bl	8002ec0 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d803      	bhi.n	8007018 <HAL_SPI_Transmit+0x20c>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d102      	bne.n	800701e <HAL_SPI_Transmit+0x212>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800702a:	e029      	b.n	8007080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1c9      	bne.n	8006fca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa62 	bl	8007504 <SPI_EndRxTxTransaction>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	77fb      	strb	r3, [r7, #31]
 8007076:	e003      	b.n	8007080 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007088:	7ffb      	ldrb	r3, [r7, #31]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b08c      	sub	sp, #48	@ 0x30
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070a0:	2301      	movs	r3, #1
 80070a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x26>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e198      	b.n	80073ea <HAL_SPI_TransmitReceive+0x358>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c0:	f7fb fefe 	bl	8002ec0 <HAL_GetTick>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d00f      	beq.n	8007102 <HAL_SPI_TransmitReceive+0x70>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e8:	d107      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x68>
 80070f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d003      	beq.n	8007102 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
 80070fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007100:	e16d      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x82>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x82>
 800710e:	887b      	ldrh	r3, [r7, #2]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800711a:	e160      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b04      	cmp	r3, #4
 8007126:	d003      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2205      	movs	r2, #5
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	887a      	ldrh	r2, [r7, #2]
 8007140:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	887a      	ldrh	r2, [r7, #2]
 8007146:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	887a      	ldrh	r2, [r7, #2]
 8007152:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	887a      	ldrh	r2, [r7, #2]
 8007158:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	d007      	beq.n	8007184 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718c:	d17c      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_SPI_TransmitReceive+0x10a>
 8007196:	8b7b      	ldrh	r3, [r7, #26]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d16a      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ac:	1c9a      	adds	r2, r3, #2
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c0:	e057      	b.n	8007272 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d11b      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x176>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x176>
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d113      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d119      	bne.n	800724a <HAL_SPI_TransmitReceive+0x1b8>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d014      	beq.n	800724a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722a:	b292      	uxth	r2, r2
 800722c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007246:	2301      	movs	r3, #1
 8007248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800724a:	f7fb fe39 	bl	8002ec0 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007256:	429a      	cmp	r2, r3
 8007258:	d80b      	bhi.n	8007272 <HAL_SPI_TransmitReceive+0x1e0>
 800725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d007      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007270:	e0b5      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1a2      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x130>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d19d      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x130>
 8007286:	e080      	b.n	800738a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SPI_TransmitReceive+0x204>
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d16f      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072bc:	e05b      	b.n	8007376 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d11c      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x274>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_SPI_TransmitReceive+0x274>
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d114      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d119      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x2b6>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d014      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007344:	2301      	movs	r3, #1
 8007346:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007348:	f7fb fdba 	bl	8002ec0 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007354:	429a      	cmp	r2, r3
 8007356:	d803      	bhi.n	8007360 <HAL_SPI_TransmitReceive+0x2ce>
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d102      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x2d4>
 8007360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007374:	e033      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d19e      	bne.n	80072be <HAL_SPI_TransmitReceive+0x22c>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d199      	bne.n	80072be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800738a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800738c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f8b8 	bl	8007504 <SPI_EndRxTxTransaction>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d006      	beq.n	80073a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80073a6:	e01a      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d4:	e003      	b.n	80073de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80073e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3730      	adds	r7, #48	@ 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007404:	f7fb fd5c 	bl	8002ec0 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4413      	add	r3, r2
 8007412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007414:	f7fb fd54 	bl	8002ec0 <HAL_GetTick>
 8007418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800741a:	4b39      	ldr	r3, [pc, #228]	@ (8007500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	015b      	lsls	r3, r3, #5
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742a:	e054      	b.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d050      	beq.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007434:	f7fb fd44 	bl	8002ec0 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	429a      	cmp	r2, r3
 8007442:	d902      	bls.n	800744a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d13d      	bne.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007462:	d111      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746c:	d004      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007476:	d107      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007490:	d10f      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e017      	b.n	80074f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d19b      	bne.n	800742c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2000000c 	.word	0x2000000c

08007504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	2180      	movs	r1, #128	@ 0x80
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff ff6a 	bl	80073f4 <SPI_WaitFlagStateUntilTimeout>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e000      	b.n	8007538 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e042      	b.n	80075d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fb fac0 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	@ 0x24
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f91d 	bl	80077c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	@ 0x28
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d16d      	bne.n	80076dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Transmit+0x2c>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e066      	b.n	80076de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2221      	movs	r2, #33	@ 0x21
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800761e:	f7fb fc4f 	bl	8002ec0 <HAL_GetTick>
 8007622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	88fa      	ldrh	r2, [r7, #6]
 8007628:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007638:	d108      	bne.n	800764c <HAL_UART_Transmit+0x6c>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e003      	b.n	8007654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007654:	e02a      	b.n	80076ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	@ 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f840 	bl	80076e6 <UART_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e036      	b.n	80076de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3302      	adds	r3, #2
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e007      	b.n	800769e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3301      	adds	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1cf      	bne.n	8007656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2140      	movs	r1, #64	@ 0x40
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f810 	bl	80076e6 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e000      	b.n	80076de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b090      	sub	sp, #64	@ 0x40
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f6:	e050      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d04c      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x30>
 8007706:	f7fb fbdb 	bl	8002ec0 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007712:	429a      	cmp	r2, r3
 8007714:	d241      	bcs.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007736:	637a      	str	r2, [r7, #52]	@ 0x34
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800773c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e5      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	613b      	str	r3, [r7, #16]
   return(result);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3314      	adds	r3, #20
 8007768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800776a:	623a      	str	r2, [r7, #32]
 800776c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	69f9      	ldr	r1, [r7, #28]
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	61bb      	str	r3, [r7, #24]
   return(result);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e5      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4013      	ands	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bf0c      	ite	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	2300      	movne	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d09f      	beq.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3740      	adds	r7, #64	@ 0x40
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80077fe:	f023 030c 	bic.w	r3, r3, #12
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	430b      	orrs	r3, r1
 800780a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a2c      	ldr	r2, [pc, #176]	@ (80078d8 <UART_SetConfig+0x114>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d103      	bne.n	8007834 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800782c:	f7fe fd48 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	e002      	b.n	800783a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fe fd30 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8007838:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009a      	lsls	r2, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	4a22      	ldr	r2, [pc, #136]	@ (80078dc <UART_SetConfig+0x118>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	0119      	lsls	r1, r3, #4
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009a      	lsls	r2, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007870:	4b1a      	ldr	r3, [pc, #104]	@ (80078dc <UART_SetConfig+0x118>)
 8007872:	fba3 0302 	umull	r0, r3, r3, r2
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	2064      	movs	r0, #100	@ 0x64
 800787a:	fb00 f303 	mul.w	r3, r0, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	3332      	adds	r3, #50	@ 0x32
 8007884:	4a15      	ldr	r2, [pc, #84]	@ (80078dc <UART_SetConfig+0x118>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007890:	4419      	add	r1, r3
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009a      	lsls	r2, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80078a8:	4b0c      	ldr	r3, [pc, #48]	@ (80078dc <UART_SetConfig+0x118>)
 80078aa:	fba3 0302 	umull	r0, r3, r3, r2
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2064      	movs	r0, #100	@ 0x64
 80078b2:	fb00 f303 	mul.w	r3, r0, r3
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	3332      	adds	r3, #50	@ 0x32
 80078bc:	4a07      	ldr	r2, [pc, #28]	@ (80078dc <UART_SetConfig+0x118>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f003 020f 	and.w	r2, r3, #15
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	440a      	add	r2, r1
 80078ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40013800 	.word	0x40013800
 80078dc:	51eb851f 	.word	0x51eb851f

080078e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80078e4:	4904      	ldr	r1, [pc, #16]	@ (80078f8 <MX_FATFS_Init+0x18>)
 80078e6:	4805      	ldr	r0, [pc, #20]	@ (80078fc <MX_FATFS_Init+0x1c>)
 80078e8:	f000 f8b0 	bl	8007a4c <FATFS_LinkDriver>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	4b03      	ldr	r3, [pc, #12]	@ (8007900 <MX_FATFS_Init+0x20>)
 80078f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80078f4:	bf00      	nop
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000414 	.word	0x20000414
 80078fc:	20000018 	.word	0x20000018
 8007900:	20000410 	.word	0x20000410

08007904 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	4618      	mov	r0, r3
 8007912:	f7f9 fe37 	bl	8001584 <SD_disk_initialize>
 8007916:	4603      	mov	r3, r0
 8007918:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	4603      	mov	r3, r0
 800792a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	4618      	mov	r0, r3
 8007930:	f7f9 ff0e 	bl	8001750 <SD_disk_status>
 8007934:	4603      	mov	r3, r0
 8007936:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8007950:	7bf8      	ldrb	r0, [r7, #15]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	f7f9 ff0e 	bl	8001778 <SD_disk_read>
 800795c:	4603      	mov	r3, r0
 800795e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8007978:	7bf8      	ldrb	r0, [r7, #15]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	f7f9 ff64 	bl	800184c <SD_disk_write>
 8007984:	4603      	mov	r3, r0
 8007986:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	603a      	str	r2, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
 800799c:	460b      	mov	r3, r1
 800799e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	79b9      	ldrb	r1, [r7, #6]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f9 ffd4 	bl	8001954 <SD_disk_ioctl>
 80079ac:	4603      	mov	r3, r0
 80079ae:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80079ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079d0:	7a5b      	ldrb	r3, [r3, #9]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d831      	bhi.n	8007a3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80079d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079da:	7a5b      	ldrb	r3, [r3, #9]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	4b19      	ldr	r3, [pc, #100]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079e2:	2100      	movs	r1, #0
 80079e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80079e6:	4b18      	ldr	r3, [pc, #96]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079e8:	7a5b      	ldrb	r3, [r3, #9]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	4a16      	ldr	r2, [pc, #88]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80079f6:	4b14      	ldr	r3, [pc, #80]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 80079f8:	7a5b      	ldrb	r3, [r3, #9]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	4b12      	ldr	r3, [pc, #72]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 8007a00:	4413      	add	r3, r2
 8007a02:	79fa      	ldrb	r2, [r7, #7]
 8007a04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a06:	4b10      	ldr	r3, [pc, #64]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 8007a08:	7a5b      	ldrb	r3, [r3, #9]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	b2d1      	uxtb	r1, r2
 8007a10:	4a0d      	ldr	r2, [pc, #52]	@ (8007a48 <FATFS_LinkDriverEx+0x90>)
 8007a12:	7251      	strb	r1, [r2, #9]
 8007a14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a16:	7dbb      	ldrb	r3, [r7, #22]
 8007a18:	3330      	adds	r3, #48	@ 0x30
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3301      	adds	r3, #1
 8007a24:	223a      	movs	r2, #58	@ 0x3a
 8007a26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	3302      	adds	r3, #2
 8007a2c:	222f      	movs	r2, #47	@ 0x2f
 8007a2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3303      	adds	r3, #3
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr
 8007a48:	20000418 	.word	0x20000418

08007a4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a56:	2200      	movs	r2, #0
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ffac 	bl	80079b8 <FATFS_LinkDriverEx>
 8007a60:	4603      	mov	r3, r0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <malloc>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	@ (8007a78 <malloc+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f000 b82d 	b.w	8007ad0 <_malloc_r>
 8007a76:	bf00      	nop
 8007a78:	20000038 	.word	0x20000038

08007a7c <free>:
 8007a7c:	4b02      	ldr	r3, [pc, #8]	@ (8007a88 <free+0xc>)
 8007a7e:	4601      	mov	r1, r0
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	f001 bd21 	b.w	80094c8 <_free_r>
 8007a86:	bf00      	nop
 8007a88:	20000038 	.word	0x20000038

08007a8c <sbrk_aligned>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007acc <sbrk_aligned+0x40>)
 8007a90:	460c      	mov	r4, r1
 8007a92:	6831      	ldr	r1, [r6, #0]
 8007a94:	4605      	mov	r5, r0
 8007a96:	b911      	cbnz	r1, 8007a9e <sbrk_aligned+0x12>
 8007a98:	f000 fe68 	bl	800876c <_sbrk_r>
 8007a9c:	6030      	str	r0, [r6, #0]
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 fe63 	bl	800876c <_sbrk_r>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d103      	bne.n	8007ab2 <sbrk_aligned+0x26>
 8007aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8007aae:	4620      	mov	r0, r4
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
 8007ab2:	1cc4      	adds	r4, r0, #3
 8007ab4:	f024 0403 	bic.w	r4, r4, #3
 8007ab8:	42a0      	cmp	r0, r4
 8007aba:	d0f8      	beq.n	8007aae <sbrk_aligned+0x22>
 8007abc:	1a21      	subs	r1, r4, r0
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fe54 	bl	800876c <_sbrk_r>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d1f2      	bne.n	8007aae <sbrk_aligned+0x22>
 8007ac8:	e7ef      	b.n	8007aaa <sbrk_aligned+0x1e>
 8007aca:	bf00      	nop
 8007acc:	20000424 	.word	0x20000424

08007ad0 <_malloc_r>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	1ccd      	adds	r5, r1, #3
 8007ad6:	f025 0503 	bic.w	r5, r5, #3
 8007ada:	3508      	adds	r5, #8
 8007adc:	2d0c      	cmp	r5, #12
 8007ade:	bf38      	it	cc
 8007ae0:	250c      	movcc	r5, #12
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	db01      	blt.n	8007aec <_malloc_r+0x1c>
 8007ae8:	42a9      	cmp	r1, r5
 8007aea:	d904      	bls.n	8007af6 <_malloc_r+0x26>
 8007aec:	230c      	movs	r3, #12
 8007aee:	6033      	str	r3, [r6, #0]
 8007af0:	2000      	movs	r0, #0
 8007af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bcc <_malloc_r+0xfc>
 8007afa:	f000 f869 	bl	8007bd0 <__malloc_lock>
 8007afe:	f8d8 3000 	ldr.w	r3, [r8]
 8007b02:	461c      	mov	r4, r3
 8007b04:	bb44      	cbnz	r4, 8007b58 <_malloc_r+0x88>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ffbf 	bl	8007a8c <sbrk_aligned>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	4604      	mov	r4, r0
 8007b12:	d158      	bne.n	8007bc6 <_malloc_r+0xf6>
 8007b14:	f8d8 4000 	ldr.w	r4, [r8]
 8007b18:	4627      	mov	r7, r4
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	d143      	bne.n	8007ba6 <_malloc_r+0xd6>
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d04b      	beq.n	8007bba <_malloc_r+0xea>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	eb04 0903 	add.w	r9, r4, r3
 8007b2c:	f000 fe1e 	bl	800876c <_sbrk_r>
 8007b30:	4581      	cmp	r9, r0
 8007b32:	d142      	bne.n	8007bba <_malloc_r+0xea>
 8007b34:	6821      	ldr	r1, [r4, #0]
 8007b36:	4630      	mov	r0, r6
 8007b38:	1a6d      	subs	r5, r5, r1
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7ff ffa6 	bl	8007a8c <sbrk_aligned>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d03a      	beq.n	8007bba <_malloc_r+0xea>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	442b      	add	r3, r5
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	bb62      	cbnz	r2, 8007bac <_malloc_r+0xdc>
 8007b52:	f8c8 7000 	str.w	r7, [r8]
 8007b56:	e00f      	b.n	8007b78 <_malloc_r+0xa8>
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	1b52      	subs	r2, r2, r5
 8007b5c:	d420      	bmi.n	8007ba0 <_malloc_r+0xd0>
 8007b5e:	2a0b      	cmp	r2, #11
 8007b60:	d917      	bls.n	8007b92 <_malloc_r+0xc2>
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	6025      	str	r5, [r4, #0]
 8007b68:	bf18      	it	ne
 8007b6a:	6059      	strne	r1, [r3, #4]
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	bf08      	it	eq
 8007b70:	f8c8 1000 	streq.w	r1, [r8]
 8007b74:	5162      	str	r2, [r4, r5]
 8007b76:	604b      	str	r3, [r1, #4]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f82f 	bl	8007bdc <__malloc_unlock>
 8007b7e:	f104 000b 	add.w	r0, r4, #11
 8007b82:	1d23      	adds	r3, r4, #4
 8007b84:	f020 0007 	bic.w	r0, r0, #7
 8007b88:	1ac2      	subs	r2, r0, r3
 8007b8a:	bf1c      	itt	ne
 8007b8c:	1a1b      	subne	r3, r3, r0
 8007b8e:	50a3      	strne	r3, [r4, r2]
 8007b90:	e7af      	b.n	8007af2 <_malloc_r+0x22>
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	bf0c      	ite	eq
 8007b98:	f8c8 2000 	streq.w	r2, [r8]
 8007b9c:	605a      	strne	r2, [r3, #4]
 8007b9e:	e7eb      	b.n	8007b78 <_malloc_r+0xa8>
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	6864      	ldr	r4, [r4, #4]
 8007ba4:	e7ae      	b.n	8007b04 <_malloc_r+0x34>
 8007ba6:	463c      	mov	r4, r7
 8007ba8:	687f      	ldr	r7, [r7, #4]
 8007baa:	e7b6      	b.n	8007b1a <_malloc_r+0x4a>
 8007bac:	461a      	mov	r2, r3
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d1fb      	bne.n	8007bac <_malloc_r+0xdc>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6053      	str	r3, [r2, #4]
 8007bb8:	e7de      	b.n	8007b78 <_malloc_r+0xa8>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	f000 f80c 	bl	8007bdc <__malloc_unlock>
 8007bc4:	e794      	b.n	8007af0 <_malloc_r+0x20>
 8007bc6:	6005      	str	r5, [r0, #0]
 8007bc8:	e7d6      	b.n	8007b78 <_malloc_r+0xa8>
 8007bca:	bf00      	nop
 8007bcc:	20000428 	.word	0x20000428

08007bd0 <__malloc_lock>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	@ (8007bd8 <__malloc_lock+0x8>)
 8007bd2:	f000 be18 	b.w	8008806 <__retarget_lock_acquire_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	2000056c 	.word	0x2000056c

08007bdc <__malloc_unlock>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	@ (8007be4 <__malloc_unlock+0x8>)
 8007bde:	f000 be13 	b.w	8008808 <__retarget_lock_release_recursive>
 8007be2:	bf00      	nop
 8007be4:	2000056c 	.word	0x2000056c

08007be8 <__cvt>:
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bee:	461d      	mov	r5, r3
 8007bf0:	bfbb      	ittet	lt
 8007bf2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007bf6:	461d      	movlt	r5, r3
 8007bf8:	2300      	movge	r3, #0
 8007bfa:	232d      	movlt	r3, #45	@ 0x2d
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	4614      	mov	r4, r2
 8007c00:	bfb8      	it	lt
 8007c02:	4614      	movlt	r4, r2
 8007c04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c06:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007c08:	7013      	strb	r3, [r2, #0]
 8007c0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007c10:	f023 0820 	bic.w	r8, r3, #32
 8007c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c18:	d005      	beq.n	8007c26 <__cvt+0x3e>
 8007c1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c1e:	d100      	bne.n	8007c22 <__cvt+0x3a>
 8007c20:	3601      	adds	r6, #1
 8007c22:	2302      	movs	r3, #2
 8007c24:	e000      	b.n	8007c28 <__cvt+0x40>
 8007c26:	2303      	movs	r3, #3
 8007c28:	aa07      	add	r2, sp, #28
 8007c2a:	9204      	str	r2, [sp, #16]
 8007c2c:	aa06      	add	r2, sp, #24
 8007c2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c32:	e9cd 3600 	strd	r3, r6, [sp]
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	f000 fe7d 	bl	8008938 <_dtoa_r>
 8007c3e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c42:	4607      	mov	r7, r0
 8007c44:	d119      	bne.n	8007c7a <__cvt+0x92>
 8007c46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c48:	07db      	lsls	r3, r3, #31
 8007c4a:	d50e      	bpl.n	8007c6a <__cvt+0x82>
 8007c4c:	eb00 0906 	add.w	r9, r0, r6
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8007c5c:	b108      	cbz	r0, 8007c62 <__cvt+0x7a>
 8007c5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c62:	2230      	movs	r2, #48	@ 0x30
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	454b      	cmp	r3, r9
 8007c68:	d31e      	bcc.n	8007ca8 <__cvt+0xc0>
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007c70:	1bdb      	subs	r3, r3, r7
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	b008      	add	sp, #32
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c7e:	eb00 0906 	add.w	r9, r0, r6
 8007c82:	d1e5      	bne.n	8007c50 <__cvt+0x68>
 8007c84:	7803      	ldrb	r3, [r0, #0]
 8007c86:	2b30      	cmp	r3, #48	@ 0x30
 8007c88:	d10a      	bne.n	8007ca0 <__cvt+0xb8>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8007c96:	b918      	cbnz	r0, 8007ca0 <__cvt+0xb8>
 8007c98:	f1c6 0601 	rsb	r6, r6, #1
 8007c9c:	f8ca 6000 	str.w	r6, [sl]
 8007ca0:	f8da 3000 	ldr.w	r3, [sl]
 8007ca4:	4499      	add	r9, r3
 8007ca6:	e7d3      	b.n	8007c50 <__cvt+0x68>
 8007ca8:	1c59      	adds	r1, r3, #1
 8007caa:	9107      	str	r1, [sp, #28]
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e7d9      	b.n	8007c64 <__cvt+0x7c>

08007cb0 <__exponent>:
 8007cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	bfb6      	itet	lt
 8007cb6:	232d      	movlt	r3, #45	@ 0x2d
 8007cb8:	232b      	movge	r3, #43	@ 0x2b
 8007cba:	4249      	neglt	r1, r1
 8007cbc:	2909      	cmp	r1, #9
 8007cbe:	7002      	strb	r2, [r0, #0]
 8007cc0:	7043      	strb	r3, [r0, #1]
 8007cc2:	dd29      	ble.n	8007d18 <__exponent+0x68>
 8007cc4:	f10d 0307 	add.w	r3, sp, #7
 8007cc8:	461d      	mov	r5, r3
 8007cca:	270a      	movs	r7, #10
 8007ccc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	fb07 1416 	mls	r4, r7, r6, r1
 8007cd6:	3430      	adds	r4, #48	@ 0x30
 8007cd8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cdc:	460c      	mov	r4, r1
 8007cde:	2c63      	cmp	r4, #99	@ 0x63
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ce6:	dcf1      	bgt.n	8007ccc <__exponent+0x1c>
 8007ce8:	3130      	adds	r1, #48	@ 0x30
 8007cea:	1e94      	subs	r4, r2, #2
 8007cec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	1c41      	adds	r1, r0, #1
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	d30a      	bcc.n	8007d0e <__exponent+0x5e>
 8007cf8:	f10d 0309 	add.w	r3, sp, #9
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	42ac      	cmp	r4, r5
 8007d00:	bf88      	it	hi
 8007d02:	2300      	movhi	r3, #0
 8007d04:	3302      	adds	r3, #2
 8007d06:	4403      	add	r3, r0
 8007d08:	1a18      	subs	r0, r3, r0
 8007d0a:	b003      	add	sp, #12
 8007d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d16:	e7ed      	b.n	8007cf4 <__exponent+0x44>
 8007d18:	2330      	movs	r3, #48	@ 0x30
 8007d1a:	3130      	adds	r1, #48	@ 0x30
 8007d1c:	7083      	strb	r3, [r0, #2]
 8007d1e:	70c1      	strb	r1, [r0, #3]
 8007d20:	1d03      	adds	r3, r0, #4
 8007d22:	e7f1      	b.n	8007d08 <__exponent+0x58>

08007d24 <_printf_float>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	b091      	sub	sp, #68	@ 0x44
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007d30:	4616      	mov	r6, r2
 8007d32:	461f      	mov	r7, r3
 8007d34:	4605      	mov	r5, r0
 8007d36:	f000 fce1 	bl	80086fc <_localeconv_r>
 8007d3a:	6803      	ldr	r3, [r0, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	f7f8 fa06 	bl	8000150 <strlen>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d48:	f8d8 3000 	ldr.w	r3, [r8]
 8007d4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d4e:	3307      	adds	r3, #7
 8007d50:	f023 0307 	bic.w	r3, r3, #7
 8007d54:	f103 0208 	add.w	r2, r3, #8
 8007d58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d5c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d60:	f8c8 2000 	str.w	r2, [r8]
 8007d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d6e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ff0 <_printf_float+0x2cc>)
 8007d80:	f7f8 fe44 	bl	8000a0c <__aeabi_dcmpun>
 8007d84:	bb70      	cbnz	r0, 8007de4 <_printf_float+0xc0>
 8007d86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	4b98      	ldr	r3, [pc, #608]	@ (8007ff0 <_printf_float+0x2cc>)
 8007d90:	f7f8 fe1e 	bl	80009d0 <__aeabi_dcmple>
 8007d94:	bb30      	cbnz	r0, 8007de4 <_printf_float+0xc0>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8007da2:	b110      	cbz	r0, 8007daa <_printf_float+0x86>
 8007da4:	232d      	movs	r3, #45	@ 0x2d
 8007da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007daa:	4a92      	ldr	r2, [pc, #584]	@ (8007ff4 <_printf_float+0x2d0>)
 8007dac:	4b92      	ldr	r3, [pc, #584]	@ (8007ff8 <_printf_float+0x2d4>)
 8007dae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007db2:	bf94      	ite	ls
 8007db4:	4690      	movls	r8, r2
 8007db6:	4698      	movhi	r8, r3
 8007db8:	2303      	movs	r3, #3
 8007dba:	f04f 0900 	mov.w	r9, #0
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	f02b 0304 	bic.w	r3, fp, #4
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	4633      	mov	r3, r6
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4628      	mov	r0, r5
 8007dcc:	9700      	str	r7, [sp, #0]
 8007dce:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007dd0:	f000 f9d4 	bl	800817c <_printf_common>
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f040 8090 	bne.w	8007efa <_printf_float+0x1d6>
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	b011      	add	sp, #68	@ 0x44
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8007df0:	b148      	cbz	r0, 8007e06 <_printf_float+0xe2>
 8007df2:	464b      	mov	r3, r9
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfb8      	it	lt
 8007df8:	232d      	movlt	r3, #45	@ 0x2d
 8007dfa:	4a80      	ldr	r2, [pc, #512]	@ (8007ffc <_printf_float+0x2d8>)
 8007dfc:	bfb8      	it	lt
 8007dfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e02:	4b7f      	ldr	r3, [pc, #508]	@ (8008000 <_printf_float+0x2dc>)
 8007e04:	e7d3      	b.n	8007dae <_printf_float+0x8a>
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	d13f      	bne.n	8007e90 <_printf_float+0x16c>
 8007e10:	2306      	movs	r3, #6
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	9206      	str	r2, [sp, #24]
 8007e1e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e20:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007e24:	aa0d      	add	r2, sp, #52	@ 0x34
 8007e26:	9203      	str	r2, [sp, #12]
 8007e28:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007e2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	4642      	mov	r2, r8
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4628      	mov	r0, r5
 8007e38:	464b      	mov	r3, r9
 8007e3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007e3c:	f7ff fed4 	bl	8007be8 <__cvt>
 8007e40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e42:	4680      	mov	r8, r0
 8007e44:	2947      	cmp	r1, #71	@ 0x47
 8007e46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e48:	d128      	bne.n	8007e9c <_printf_float+0x178>
 8007e4a:	1cc8      	adds	r0, r1, #3
 8007e4c:	db02      	blt.n	8007e54 <_printf_float+0x130>
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	4299      	cmp	r1, r3
 8007e52:	dd40      	ble.n	8007ed6 <_printf_float+0x1b2>
 8007e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e58:	fa5f fa8a 	uxtb.w	sl, sl
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	3901      	subs	r1, #1
 8007e60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e64:	910d      	str	r1, [sp, #52]	@ 0x34
 8007e66:	f7ff ff23 	bl	8007cb0 <__exponent>
 8007e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	1813      	adds	r3, r2, r0
 8007e70:	2a01      	cmp	r2, #1
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	dc02      	bgt.n	8007e7c <_printf_float+0x158>
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	07d2      	lsls	r2, r2, #31
 8007e7a:	d501      	bpl.n	8007e80 <_printf_float+0x15c>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d09e      	beq.n	8007dc6 <_printf_float+0xa2>
 8007e88:	232d      	movs	r3, #45	@ 0x2d
 8007e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e8e:	e79a      	b.n	8007dc6 <_printf_float+0xa2>
 8007e90:	2947      	cmp	r1, #71	@ 0x47
 8007e92:	d1bf      	bne.n	8007e14 <_printf_float+0xf0>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1bd      	bne.n	8007e14 <_printf_float+0xf0>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e7ba      	b.n	8007e12 <_printf_float+0xee>
 8007e9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ea0:	d9dc      	bls.n	8007e5c <_printf_float+0x138>
 8007ea2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ea6:	d118      	bne.n	8007eda <_printf_float+0x1b6>
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	dd0b      	ble.n	8007ec6 <_printf_float+0x1a2>
 8007eae:	6121      	str	r1, [r4, #16]
 8007eb0:	b913      	cbnz	r3, 8007eb8 <_printf_float+0x194>
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	d502      	bpl.n	8007ebe <_printf_float+0x19a>
 8007eb8:	3301      	adds	r3, #1
 8007eba:	440b      	add	r3, r1
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ec4:	e7dc      	b.n	8007e80 <_printf_float+0x15c>
 8007ec6:	b913      	cbnz	r3, 8007ece <_printf_float+0x1aa>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	07d2      	lsls	r2, r2, #31
 8007ecc:	d501      	bpl.n	8007ed2 <_printf_float+0x1ae>
 8007ece:	3302      	adds	r3, #2
 8007ed0:	e7f4      	b.n	8007ebc <_printf_float+0x198>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f2      	b.n	8007ebc <_printf_float+0x198>
 8007ed6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	4299      	cmp	r1, r3
 8007ede:	db05      	blt.n	8007eec <_printf_float+0x1c8>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	6121      	str	r1, [r4, #16]
 8007ee4:	07d8      	lsls	r0, r3, #31
 8007ee6:	d5ea      	bpl.n	8007ebe <_printf_float+0x19a>
 8007ee8:	1c4b      	adds	r3, r1, #1
 8007eea:	e7e7      	b.n	8007ebc <_printf_float+0x198>
 8007eec:	2900      	cmp	r1, #0
 8007eee:	bfcc      	ite	gt
 8007ef0:	2201      	movgt	r2, #1
 8007ef2:	f1c1 0202 	rsble	r2, r1, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	e7e0      	b.n	8007ebc <_printf_float+0x198>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	055a      	lsls	r2, r3, #21
 8007efe:	d407      	bmi.n	8007f10 <_printf_float+0x1ec>
 8007f00:	6923      	ldr	r3, [r4, #16]
 8007f02:	4642      	mov	r2, r8
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d12b      	bne.n	8007f66 <_printf_float+0x242>
 8007f0e:	e764      	b.n	8007dda <_printf_float+0xb6>
 8007f10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f14:	f240 80dc 	bls.w	80080d0 <_printf_float+0x3ac>
 8007f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f7f8 fd42 	bl	80009a8 <__aeabi_dcmpeq>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d033      	beq.n	8007f90 <_printf_float+0x26c>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	4a35      	ldr	r2, [pc, #212]	@ (8008004 <_printf_float+0x2e0>)
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f43f af51 	beq.w	8007dda <_printf_float+0xb6>
 8007f38:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	db02      	blt.n	8007f46 <_printf_float+0x222>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	07d8      	lsls	r0, r3, #31
 8007f44:	d50f      	bpl.n	8007f66 <_printf_float+0x242>
 8007f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f af42 	beq.w	8007dda <_printf_float+0xb6>
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f5e:	f104 0a1a 	add.w	sl, r4, #26
 8007f62:	45c8      	cmp	r8, r9
 8007f64:	dc09      	bgt.n	8007f7a <_printf_float+0x256>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	079b      	lsls	r3, r3, #30
 8007f6a:	f100 8102 	bmi.w	8008172 <_printf_float+0x44e>
 8007f6e:	68e0      	ldr	r0, [r4, #12]
 8007f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f72:	4298      	cmp	r0, r3
 8007f74:	bfb8      	it	lt
 8007f76:	4618      	movlt	r0, r3
 8007f78:	e731      	b.n	8007dde <_printf_float+0xba>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	f43f af28 	beq.w	8007dda <_printf_float+0xb6>
 8007f8a:	f109 0901 	add.w	r9, r9, #1
 8007f8e:	e7e8      	b.n	8007f62 <_printf_float+0x23e>
 8007f90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dc38      	bgt.n	8008008 <_printf_float+0x2e4>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	4a19      	ldr	r2, [pc, #100]	@ (8008004 <_printf_float+0x2e0>)
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f af1a 	beq.w	8007dda <_printf_float+0xb6>
 8007fa6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007faa:	ea59 0303 	orrs.w	r3, r9, r3
 8007fae:	d102      	bne.n	8007fb6 <_printf_float+0x292>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	d5d7      	bpl.n	8007f66 <_printf_float+0x242>
 8007fb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b8      	blx	r7
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	f43f af0a 	beq.w	8007dda <_printf_float+0xb6>
 8007fc6:	f04f 0a00 	mov.w	sl, #0
 8007fca:	f104 0b1a 	add.w	fp, r4, #26
 8007fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	4553      	cmp	r3, sl
 8007fd4:	dc01      	bgt.n	8007fda <_printf_float+0x2b6>
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	e793      	b.n	8007f02 <_printf_float+0x1de>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	465a      	mov	r2, fp
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f aef8 	beq.w	8007dda <_printf_float+0xb6>
 8007fea:	f10a 0a01 	add.w	sl, sl, #1
 8007fee:	e7ee      	b.n	8007fce <_printf_float+0x2aa>
 8007ff0:	7fefffff 	.word	0x7fefffff
 8007ff4:	0800a8c2 	.word	0x0800a8c2
 8007ff8:	0800a8c6 	.word	0x0800a8c6
 8007ffc:	0800a8ca 	.word	0x0800a8ca
 8008000:	0800a8ce 	.word	0x0800a8ce
 8008004:	0800a8d2 	.word	0x0800a8d2
 8008008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800800a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800800e:	4553      	cmp	r3, sl
 8008010:	bfa8      	it	ge
 8008012:	4653      	movge	r3, sl
 8008014:	2b00      	cmp	r3, #0
 8008016:	4699      	mov	r9, r3
 8008018:	dc36      	bgt.n	8008088 <_printf_float+0x364>
 800801a:	f04f 0b00 	mov.w	fp, #0
 800801e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008022:	f104 021a 	add.w	r2, r4, #26
 8008026:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008028:	930a      	str	r3, [sp, #40]	@ 0x28
 800802a:	eba3 0309 	sub.w	r3, r3, r9
 800802e:	455b      	cmp	r3, fp
 8008030:	dc31      	bgt.n	8008096 <_printf_float+0x372>
 8008032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008034:	459a      	cmp	sl, r3
 8008036:	dc3a      	bgt.n	80080ae <_printf_float+0x38a>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	07da      	lsls	r2, r3, #31
 800803c:	d437      	bmi.n	80080ae <_printf_float+0x38a>
 800803e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008040:	ebaa 0903 	sub.w	r9, sl, r3
 8008044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008046:	ebaa 0303 	sub.w	r3, sl, r3
 800804a:	4599      	cmp	r9, r3
 800804c:	bfa8      	it	ge
 800804e:	4699      	movge	r9, r3
 8008050:	f1b9 0f00 	cmp.w	r9, #0
 8008054:	dc33      	bgt.n	80080be <_printf_float+0x39a>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805e:	f104 0b1a 	add.w	fp, r4, #26
 8008062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008064:	ebaa 0303 	sub.w	r3, sl, r3
 8008068:	eba3 0309 	sub.w	r3, r3, r9
 800806c:	4543      	cmp	r3, r8
 800806e:	f77f af7a 	ble.w	8007f66 <_printf_float+0x242>
 8008072:	2301      	movs	r3, #1
 8008074:	465a      	mov	r2, fp
 8008076:	4631      	mov	r1, r6
 8008078:	4628      	mov	r0, r5
 800807a:	47b8      	blx	r7
 800807c:	3001      	adds	r0, #1
 800807e:	f43f aeac 	beq.w	8007dda <_printf_float+0xb6>
 8008082:	f108 0801 	add.w	r8, r8, #1
 8008086:	e7ec      	b.n	8008062 <_printf_float+0x33e>
 8008088:	4642      	mov	r2, r8
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	d1c2      	bne.n	800801a <_printf_float+0x2f6>
 8008094:	e6a1      	b.n	8007dda <_printf_float+0xb6>
 8008096:	2301      	movs	r3, #1
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	920a      	str	r2, [sp, #40]	@ 0x28
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	f43f ae9a 	beq.w	8007dda <_printf_float+0xb6>
 80080a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080a8:	f10b 0b01 	add.w	fp, fp, #1
 80080ac:	e7bb      	b.n	8008026 <_printf_float+0x302>
 80080ae:	4631      	mov	r1, r6
 80080b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1c0      	bne.n	800803e <_printf_float+0x31a>
 80080bc:	e68d      	b.n	8007dda <_printf_float+0xb6>
 80080be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c0:	464b      	mov	r3, r9
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	4442      	add	r2, r8
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	d1c3      	bne.n	8008056 <_printf_float+0x332>
 80080ce:	e684      	b.n	8007dda <_printf_float+0xb6>
 80080d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80080d4:	f1ba 0f01 	cmp.w	sl, #1
 80080d8:	dc01      	bgt.n	80080de <_printf_float+0x3ba>
 80080da:	07db      	lsls	r3, r3, #31
 80080dc:	d536      	bpl.n	800814c <_printf_float+0x428>
 80080de:	2301      	movs	r3, #1
 80080e0:	4642      	mov	r2, r8
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae76 	beq.w	8007dda <_printf_float+0xb6>
 80080ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	f43f ae6e 	beq.w	8007dda <_printf_float+0xb6>
 80080fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810a:	f7f8 fc4d 	bl	80009a8 <__aeabi_dcmpeq>
 800810e:	b9c0      	cbnz	r0, 8008142 <_printf_float+0x41e>
 8008110:	4653      	mov	r3, sl
 8008112:	f108 0201 	add.w	r2, r8, #1
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	d10c      	bne.n	800813a <_printf_float+0x416>
 8008120:	e65b      	b.n	8007dda <_printf_float+0xb6>
 8008122:	2301      	movs	r3, #1
 8008124:	465a      	mov	r2, fp
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f ae54 	beq.w	8007dda <_printf_float+0xb6>
 8008132:	f108 0801 	add.w	r8, r8, #1
 8008136:	45d0      	cmp	r8, sl
 8008138:	dbf3      	blt.n	8008122 <_printf_float+0x3fe>
 800813a:	464b      	mov	r3, r9
 800813c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008140:	e6e0      	b.n	8007f04 <_printf_float+0x1e0>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	f104 0b1a 	add.w	fp, r4, #26
 800814a:	e7f4      	b.n	8008136 <_printf_float+0x412>
 800814c:	2301      	movs	r3, #1
 800814e:	4642      	mov	r2, r8
 8008150:	e7e1      	b.n	8008116 <_printf_float+0x3f2>
 8008152:	2301      	movs	r3, #1
 8008154:	464a      	mov	r2, r9
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f ae3c 	beq.w	8007dda <_printf_float+0xb6>
 8008162:	f108 0801 	add.w	r8, r8, #1
 8008166:	68e3      	ldr	r3, [r4, #12]
 8008168:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800816a:	1a5b      	subs	r3, r3, r1
 800816c:	4543      	cmp	r3, r8
 800816e:	dcf0      	bgt.n	8008152 <_printf_float+0x42e>
 8008170:	e6fd      	b.n	8007f6e <_printf_float+0x24a>
 8008172:	f04f 0800 	mov.w	r8, #0
 8008176:	f104 0919 	add.w	r9, r4, #25
 800817a:	e7f4      	b.n	8008166 <_printf_float+0x442>

0800817c <_printf_common>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	4616      	mov	r6, r2
 8008182:	4698      	mov	r8, r3
 8008184:	688a      	ldr	r2, [r1, #8]
 8008186:	690b      	ldr	r3, [r1, #16]
 8008188:	4607      	mov	r7, r0
 800818a:	4293      	cmp	r3, r2
 800818c:	bfb8      	it	lt
 800818e:	4613      	movlt	r3, r2
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008196:	460c      	mov	r4, r1
 8008198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800819c:	b10a      	cbz	r2, 80081a2 <_printf_common+0x26>
 800819e:	3301      	adds	r3, #1
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	0699      	lsls	r1, r3, #26
 80081a6:	bf42      	ittt	mi
 80081a8:	6833      	ldrmi	r3, [r6, #0]
 80081aa:	3302      	addmi	r3, #2
 80081ac:	6033      	strmi	r3, [r6, #0]
 80081ae:	6825      	ldr	r5, [r4, #0]
 80081b0:	f015 0506 	ands.w	r5, r5, #6
 80081b4:	d106      	bne.n	80081c4 <_printf_common+0x48>
 80081b6:	f104 0a19 	add.w	sl, r4, #25
 80081ba:	68e3      	ldr	r3, [r4, #12]
 80081bc:	6832      	ldr	r2, [r6, #0]
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	dc2b      	bgt.n	800821c <_printf_common+0xa0>
 80081c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	3b00      	subs	r3, #0
 80081cc:	bf18      	it	ne
 80081ce:	2301      	movne	r3, #1
 80081d0:	0692      	lsls	r2, r2, #26
 80081d2:	d430      	bmi.n	8008236 <_printf_common+0xba>
 80081d4:	4641      	mov	r1, r8
 80081d6:	4638      	mov	r0, r7
 80081d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081dc:	47c8      	blx	r9
 80081de:	3001      	adds	r0, #1
 80081e0:	d023      	beq.n	800822a <_printf_common+0xae>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	f003 0306 	and.w	r3, r3, #6
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	bf14      	ite	ne
 80081ee:	2500      	movne	r5, #0
 80081f0:	6833      	ldreq	r3, [r6, #0]
 80081f2:	f04f 0600 	mov.w	r6, #0
 80081f6:	bf08      	it	eq
 80081f8:	68e5      	ldreq	r5, [r4, #12]
 80081fa:	f104 041a 	add.w	r4, r4, #26
 80081fe:	bf08      	it	eq
 8008200:	1aed      	subeq	r5, r5, r3
 8008202:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008206:	bf08      	it	eq
 8008208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800820c:	4293      	cmp	r3, r2
 800820e:	bfc4      	itt	gt
 8008210:	1a9b      	subgt	r3, r3, r2
 8008212:	18ed      	addgt	r5, r5, r3
 8008214:	42b5      	cmp	r5, r6
 8008216:	d11a      	bne.n	800824e <_printf_common+0xd2>
 8008218:	2000      	movs	r0, #0
 800821a:	e008      	b.n	800822e <_printf_common+0xb2>
 800821c:	2301      	movs	r3, #1
 800821e:	4652      	mov	r2, sl
 8008220:	4641      	mov	r1, r8
 8008222:	4638      	mov	r0, r7
 8008224:	47c8      	blx	r9
 8008226:	3001      	adds	r0, #1
 8008228:	d103      	bne.n	8008232 <_printf_common+0xb6>
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	3501      	adds	r5, #1
 8008234:	e7c1      	b.n	80081ba <_printf_common+0x3e>
 8008236:	2030      	movs	r0, #48	@ 0x30
 8008238:	18e1      	adds	r1, r4, r3
 800823a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008244:	4422      	add	r2, r4
 8008246:	3302      	adds	r3, #2
 8008248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800824c:	e7c2      	b.n	80081d4 <_printf_common+0x58>
 800824e:	2301      	movs	r3, #1
 8008250:	4622      	mov	r2, r4
 8008252:	4641      	mov	r1, r8
 8008254:	4638      	mov	r0, r7
 8008256:	47c8      	blx	r9
 8008258:	3001      	adds	r0, #1
 800825a:	d0e6      	beq.n	800822a <_printf_common+0xae>
 800825c:	3601      	adds	r6, #1
 800825e:	e7d9      	b.n	8008214 <_printf_common+0x98>

08008260 <_printf_i>:
 8008260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	7e0f      	ldrb	r7, [r1, #24]
 8008266:	4691      	mov	r9, r2
 8008268:	2f78      	cmp	r7, #120	@ 0x78
 800826a:	4680      	mov	r8, r0
 800826c:	460c      	mov	r4, r1
 800826e:	469a      	mov	sl, r3
 8008270:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008276:	d807      	bhi.n	8008288 <_printf_i+0x28>
 8008278:	2f62      	cmp	r7, #98	@ 0x62
 800827a:	d80a      	bhi.n	8008292 <_printf_i+0x32>
 800827c:	2f00      	cmp	r7, #0
 800827e:	f000 80d3 	beq.w	8008428 <_printf_i+0x1c8>
 8008282:	2f58      	cmp	r7, #88	@ 0x58
 8008284:	f000 80ba 	beq.w	80083fc <_printf_i+0x19c>
 8008288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800828c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008290:	e03a      	b.n	8008308 <_printf_i+0xa8>
 8008292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008296:	2b15      	cmp	r3, #21
 8008298:	d8f6      	bhi.n	8008288 <_printf_i+0x28>
 800829a:	a101      	add	r1, pc, #4	@ (adr r1, 80082a0 <_printf_i+0x40>)
 800829c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	08008289 	.word	0x08008289
 80082ac:	08008289 	.word	0x08008289
 80082b0:	08008289 	.word	0x08008289
 80082b4:	08008289 	.word	0x08008289
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008289 	.word	0x08008289
 80082c0:	08008289 	.word	0x08008289
 80082c4:	08008289 	.word	0x08008289
 80082c8:	08008289 	.word	0x08008289
 80082cc:	0800840f 	.word	0x0800840f
 80082d0:	08008337 	.word	0x08008337
 80082d4:	080083c9 	.word	0x080083c9
 80082d8:	08008289 	.word	0x08008289
 80082dc:	08008289 	.word	0x08008289
 80082e0:	08008431 	.word	0x08008431
 80082e4:	08008289 	.word	0x08008289
 80082e8:	08008337 	.word	0x08008337
 80082ec:	08008289 	.word	0x08008289
 80082f0:	08008289 	.word	0x08008289
 80082f4:	080083d1 	.word	0x080083d1
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	1d1a      	adds	r2, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6032      	str	r2, [r6, #0]
 8008300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008308:	2301      	movs	r3, #1
 800830a:	e09e      	b.n	800844a <_printf_i+0x1ea>
 800830c:	6833      	ldr	r3, [r6, #0]
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	1d19      	adds	r1, r3, #4
 8008312:	6031      	str	r1, [r6, #0]
 8008314:	0606      	lsls	r6, r0, #24
 8008316:	d501      	bpl.n	800831c <_printf_i+0xbc>
 8008318:	681d      	ldr	r5, [r3, #0]
 800831a:	e003      	b.n	8008324 <_printf_i+0xc4>
 800831c:	0645      	lsls	r5, r0, #25
 800831e:	d5fb      	bpl.n	8008318 <_printf_i+0xb8>
 8008320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008324:	2d00      	cmp	r5, #0
 8008326:	da03      	bge.n	8008330 <_printf_i+0xd0>
 8008328:	232d      	movs	r3, #45	@ 0x2d
 800832a:	426d      	negs	r5, r5
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008330:	230a      	movs	r3, #10
 8008332:	4859      	ldr	r0, [pc, #356]	@ (8008498 <_printf_i+0x238>)
 8008334:	e011      	b.n	800835a <_printf_i+0xfa>
 8008336:	6821      	ldr	r1, [r4, #0]
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	0608      	lsls	r0, r1, #24
 800833c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008340:	d402      	bmi.n	8008348 <_printf_i+0xe8>
 8008342:	0649      	lsls	r1, r1, #25
 8008344:	bf48      	it	mi
 8008346:	b2ad      	uxthmi	r5, r5
 8008348:	2f6f      	cmp	r7, #111	@ 0x6f
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	bf14      	ite	ne
 800834e:	230a      	movne	r3, #10
 8008350:	2308      	moveq	r3, #8
 8008352:	4851      	ldr	r0, [pc, #324]	@ (8008498 <_printf_i+0x238>)
 8008354:	2100      	movs	r1, #0
 8008356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800835a:	6866      	ldr	r6, [r4, #4]
 800835c:	2e00      	cmp	r6, #0
 800835e:	bfa8      	it	ge
 8008360:	6821      	ldrge	r1, [r4, #0]
 8008362:	60a6      	str	r6, [r4, #8]
 8008364:	bfa4      	itt	ge
 8008366:	f021 0104 	bicge.w	r1, r1, #4
 800836a:	6021      	strge	r1, [r4, #0]
 800836c:	b90d      	cbnz	r5, 8008372 <_printf_i+0x112>
 800836e:	2e00      	cmp	r6, #0
 8008370:	d04b      	beq.n	800840a <_printf_i+0x1aa>
 8008372:	4616      	mov	r6, r2
 8008374:	fbb5 f1f3 	udiv	r1, r5, r3
 8008378:	fb03 5711 	mls	r7, r3, r1, r5
 800837c:	5dc7      	ldrb	r7, [r0, r7]
 800837e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008382:	462f      	mov	r7, r5
 8008384:	42bb      	cmp	r3, r7
 8008386:	460d      	mov	r5, r1
 8008388:	d9f4      	bls.n	8008374 <_printf_i+0x114>
 800838a:	2b08      	cmp	r3, #8
 800838c:	d10b      	bne.n	80083a6 <_printf_i+0x146>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	07df      	lsls	r7, r3, #31
 8008392:	d508      	bpl.n	80083a6 <_printf_i+0x146>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	6861      	ldr	r1, [r4, #4]
 8008398:	4299      	cmp	r1, r3
 800839a:	bfde      	ittt	le
 800839c:	2330      	movle	r3, #48	@ 0x30
 800839e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083a6:	1b92      	subs	r2, r2, r6
 80083a8:	6122      	str	r2, [r4, #16]
 80083aa:	464b      	mov	r3, r9
 80083ac:	4621      	mov	r1, r4
 80083ae:	4640      	mov	r0, r8
 80083b0:	f8cd a000 	str.w	sl, [sp]
 80083b4:	aa03      	add	r2, sp, #12
 80083b6:	f7ff fee1 	bl	800817c <_printf_common>
 80083ba:	3001      	adds	r0, #1
 80083bc:	d14a      	bne.n	8008454 <_printf_i+0x1f4>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	b004      	add	sp, #16
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	f043 0320 	orr.w	r3, r3, #32
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	2778      	movs	r7, #120	@ 0x78
 80083d2:	4832      	ldr	r0, [pc, #200]	@ (800849c <_printf_i+0x23c>)
 80083d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	6831      	ldr	r1, [r6, #0]
 80083dc:	061f      	lsls	r7, r3, #24
 80083de:	f851 5b04 	ldr.w	r5, [r1], #4
 80083e2:	d402      	bmi.n	80083ea <_printf_i+0x18a>
 80083e4:	065f      	lsls	r7, r3, #25
 80083e6:	bf48      	it	mi
 80083e8:	b2ad      	uxthmi	r5, r5
 80083ea:	6031      	str	r1, [r6, #0]
 80083ec:	07d9      	lsls	r1, r3, #31
 80083ee:	bf44      	itt	mi
 80083f0:	f043 0320 	orrmi.w	r3, r3, #32
 80083f4:	6023      	strmi	r3, [r4, #0]
 80083f6:	b11d      	cbz	r5, 8008400 <_printf_i+0x1a0>
 80083f8:	2310      	movs	r3, #16
 80083fa:	e7ab      	b.n	8008354 <_printf_i+0xf4>
 80083fc:	4826      	ldr	r0, [pc, #152]	@ (8008498 <_printf_i+0x238>)
 80083fe:	e7e9      	b.n	80083d4 <_printf_i+0x174>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	f023 0320 	bic.w	r3, r3, #32
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	e7f6      	b.n	80083f8 <_printf_i+0x198>
 800840a:	4616      	mov	r6, r2
 800840c:	e7bd      	b.n	800838a <_printf_i+0x12a>
 800840e:	6833      	ldr	r3, [r6, #0]
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	1d18      	adds	r0, r3, #4
 8008414:	6961      	ldr	r1, [r4, #20]
 8008416:	6030      	str	r0, [r6, #0]
 8008418:	062e      	lsls	r6, r5, #24
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	d501      	bpl.n	8008422 <_printf_i+0x1c2>
 800841e:	6019      	str	r1, [r3, #0]
 8008420:	e002      	b.n	8008428 <_printf_i+0x1c8>
 8008422:	0668      	lsls	r0, r5, #25
 8008424:	d5fb      	bpl.n	800841e <_printf_i+0x1be>
 8008426:	8019      	strh	r1, [r3, #0]
 8008428:	2300      	movs	r3, #0
 800842a:	4616      	mov	r6, r2
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	e7bc      	b.n	80083aa <_printf_i+0x14a>
 8008430:	6833      	ldr	r3, [r6, #0]
 8008432:	2100      	movs	r1, #0
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	6032      	str	r2, [r6, #0]
 8008438:	681e      	ldr	r6, [r3, #0]
 800843a:	6862      	ldr	r2, [r4, #4]
 800843c:	4630      	mov	r0, r6
 800843e:	f000 f9e4 	bl	800880a <memchr>
 8008442:	b108      	cbz	r0, 8008448 <_printf_i+0x1e8>
 8008444:	1b80      	subs	r0, r0, r6
 8008446:	6060      	str	r0, [r4, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008452:	e7aa      	b.n	80083aa <_printf_i+0x14a>
 8008454:	4632      	mov	r2, r6
 8008456:	4649      	mov	r1, r9
 8008458:	4640      	mov	r0, r8
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	47d0      	blx	sl
 800845e:	3001      	adds	r0, #1
 8008460:	d0ad      	beq.n	80083be <_printf_i+0x15e>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	079b      	lsls	r3, r3, #30
 8008466:	d413      	bmi.n	8008490 <_printf_i+0x230>
 8008468:	68e0      	ldr	r0, [r4, #12]
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	4298      	cmp	r0, r3
 800846e:	bfb8      	it	lt
 8008470:	4618      	movlt	r0, r3
 8008472:	e7a6      	b.n	80083c2 <_printf_i+0x162>
 8008474:	2301      	movs	r3, #1
 8008476:	4632      	mov	r2, r6
 8008478:	4649      	mov	r1, r9
 800847a:	4640      	mov	r0, r8
 800847c:	47d0      	blx	sl
 800847e:	3001      	adds	r0, #1
 8008480:	d09d      	beq.n	80083be <_printf_i+0x15e>
 8008482:	3501      	adds	r5, #1
 8008484:	68e3      	ldr	r3, [r4, #12]
 8008486:	9903      	ldr	r1, [sp, #12]
 8008488:	1a5b      	subs	r3, r3, r1
 800848a:	42ab      	cmp	r3, r5
 800848c:	dcf2      	bgt.n	8008474 <_printf_i+0x214>
 800848e:	e7eb      	b.n	8008468 <_printf_i+0x208>
 8008490:	2500      	movs	r5, #0
 8008492:	f104 0619 	add.w	r6, r4, #25
 8008496:	e7f5      	b.n	8008484 <_printf_i+0x224>
 8008498:	0800a8d4 	.word	0x0800a8d4
 800849c:	0800a8e5 	.word	0x0800a8e5

080084a0 <std>:
 80084a0:	2300      	movs	r3, #0
 80084a2:	b510      	push	{r4, lr}
 80084a4:	4604      	mov	r4, r0
 80084a6:	e9c0 3300 	strd	r3, r3, [r0]
 80084aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ae:	6083      	str	r3, [r0, #8]
 80084b0:	8181      	strh	r1, [r0, #12]
 80084b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80084b4:	81c2      	strh	r2, [r0, #14]
 80084b6:	6183      	str	r3, [r0, #24]
 80084b8:	4619      	mov	r1, r3
 80084ba:	2208      	movs	r2, #8
 80084bc:	305c      	adds	r0, #92	@ 0x5c
 80084be:	f000 f914 	bl	80086ea <memset>
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x58>)
 80084c4:	6224      	str	r4, [r4, #32]
 80084c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80084c8:	4b0c      	ldr	r3, [pc, #48]	@ (80084fc <std+0x5c>)
 80084ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <std+0x60>)
 80084ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <std+0x64>)
 80084d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <std+0x68>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d006      	beq.n	80084e8 <std+0x48>
 80084da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084de:	4294      	cmp	r4, r2
 80084e0:	d002      	beq.n	80084e8 <std+0x48>
 80084e2:	33d0      	adds	r3, #208	@ 0xd0
 80084e4:	429c      	cmp	r4, r3
 80084e6:	d105      	bne.n	80084f4 <std+0x54>
 80084e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f0:	f000 b988 	b.w	8008804 <__retarget_lock_init_recursive>
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	bf00      	nop
 80084f8:	08008665 	.word	0x08008665
 80084fc:	08008687 	.word	0x08008687
 8008500:	080086bf 	.word	0x080086bf
 8008504:	080086e3 	.word	0x080086e3
 8008508:	2000042c 	.word	0x2000042c

0800850c <stdio_exit_handler>:
 800850c:	4a02      	ldr	r2, [pc, #8]	@ (8008518 <stdio_exit_handler+0xc>)
 800850e:	4903      	ldr	r1, [pc, #12]	@ (800851c <stdio_exit_handler+0x10>)
 8008510:	4803      	ldr	r0, [pc, #12]	@ (8008520 <stdio_exit_handler+0x14>)
 8008512:	f000 b869 	b.w	80085e8 <_fwalk_sglue>
 8008516:	bf00      	nop
 8008518:	2000002c 	.word	0x2000002c
 800851c:	0800a009 	.word	0x0800a009
 8008520:	2000003c 	.word	0x2000003c

08008524 <cleanup_stdio>:
 8008524:	6841      	ldr	r1, [r0, #4]
 8008526:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <cleanup_stdio+0x34>)
 8008528:	b510      	push	{r4, lr}
 800852a:	4299      	cmp	r1, r3
 800852c:	4604      	mov	r4, r0
 800852e:	d001      	beq.n	8008534 <cleanup_stdio+0x10>
 8008530:	f001 fd6a 	bl	800a008 <_fflush_r>
 8008534:	68a1      	ldr	r1, [r4, #8]
 8008536:	4b09      	ldr	r3, [pc, #36]	@ (800855c <cleanup_stdio+0x38>)
 8008538:	4299      	cmp	r1, r3
 800853a:	d002      	beq.n	8008542 <cleanup_stdio+0x1e>
 800853c:	4620      	mov	r0, r4
 800853e:	f001 fd63 	bl	800a008 <_fflush_r>
 8008542:	68e1      	ldr	r1, [r4, #12]
 8008544:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <cleanup_stdio+0x3c>)
 8008546:	4299      	cmp	r1, r3
 8008548:	d004      	beq.n	8008554 <cleanup_stdio+0x30>
 800854a:	4620      	mov	r0, r4
 800854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008550:	f001 bd5a 	b.w	800a008 <_fflush_r>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	bf00      	nop
 8008558:	2000042c 	.word	0x2000042c
 800855c:	20000494 	.word	0x20000494
 8008560:	200004fc 	.word	0x200004fc

08008564 <global_stdio_init.part.0>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <global_stdio_init.part.0+0x30>)
 8008568:	4c0b      	ldr	r4, [pc, #44]	@ (8008598 <global_stdio_init.part.0+0x34>)
 800856a:	4a0c      	ldr	r2, [pc, #48]	@ (800859c <global_stdio_init.part.0+0x38>)
 800856c:	4620      	mov	r0, r4
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	2104      	movs	r1, #4
 8008572:	2200      	movs	r2, #0
 8008574:	f7ff ff94 	bl	80084a0 <std>
 8008578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800857c:	2201      	movs	r2, #1
 800857e:	2109      	movs	r1, #9
 8008580:	f7ff ff8e 	bl	80084a0 <std>
 8008584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008588:	2202      	movs	r2, #2
 800858a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858e:	2112      	movs	r1, #18
 8008590:	f7ff bf86 	b.w	80084a0 <std>
 8008594:	20000564 	.word	0x20000564
 8008598:	2000042c 	.word	0x2000042c
 800859c:	0800850d 	.word	0x0800850d

080085a0 <__sfp_lock_acquire>:
 80085a0:	4801      	ldr	r0, [pc, #4]	@ (80085a8 <__sfp_lock_acquire+0x8>)
 80085a2:	f000 b930 	b.w	8008806 <__retarget_lock_acquire_recursive>
 80085a6:	bf00      	nop
 80085a8:	2000056d 	.word	0x2000056d

080085ac <__sfp_lock_release>:
 80085ac:	4801      	ldr	r0, [pc, #4]	@ (80085b4 <__sfp_lock_release+0x8>)
 80085ae:	f000 b92b 	b.w	8008808 <__retarget_lock_release_recursive>
 80085b2:	bf00      	nop
 80085b4:	2000056d 	.word	0x2000056d

080085b8 <__sinit>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4604      	mov	r4, r0
 80085bc:	f7ff fff0 	bl	80085a0 <__sfp_lock_acquire>
 80085c0:	6a23      	ldr	r3, [r4, #32]
 80085c2:	b11b      	cbz	r3, 80085cc <__sinit+0x14>
 80085c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c8:	f7ff bff0 	b.w	80085ac <__sfp_lock_release>
 80085cc:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <__sinit+0x28>)
 80085ce:	6223      	str	r3, [r4, #32]
 80085d0:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <__sinit+0x2c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f5      	bne.n	80085c4 <__sinit+0xc>
 80085d8:	f7ff ffc4 	bl	8008564 <global_stdio_init.part.0>
 80085dc:	e7f2      	b.n	80085c4 <__sinit+0xc>
 80085de:	bf00      	nop
 80085e0:	08008525 	.word	0x08008525
 80085e4:	20000564 	.word	0x20000564

080085e8 <_fwalk_sglue>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	4607      	mov	r7, r0
 80085ee:	4688      	mov	r8, r1
 80085f0:	4614      	mov	r4, r2
 80085f2:	2600      	movs	r6, #0
 80085f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f8:	f1b9 0901 	subs.w	r9, r9, #1
 80085fc:	d505      	bpl.n	800860a <_fwalk_sglue+0x22>
 80085fe:	6824      	ldr	r4, [r4, #0]
 8008600:	2c00      	cmp	r4, #0
 8008602:	d1f7      	bne.n	80085f4 <_fwalk_sglue+0xc>
 8008604:	4630      	mov	r0, r6
 8008606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d907      	bls.n	8008620 <_fwalk_sglue+0x38>
 8008610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008614:	3301      	adds	r3, #1
 8008616:	d003      	beq.n	8008620 <_fwalk_sglue+0x38>
 8008618:	4629      	mov	r1, r5
 800861a:	4638      	mov	r0, r7
 800861c:	47c0      	blx	r8
 800861e:	4306      	orrs	r6, r0
 8008620:	3568      	adds	r5, #104	@ 0x68
 8008622:	e7e9      	b.n	80085f8 <_fwalk_sglue+0x10>

08008624 <siprintf>:
 8008624:	b40e      	push	{r1, r2, r3}
 8008626:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800862a:	b500      	push	{lr}
 800862c:	b09c      	sub	sp, #112	@ 0x70
 800862e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008630:	9002      	str	r0, [sp, #8]
 8008632:	9006      	str	r0, [sp, #24]
 8008634:	9107      	str	r1, [sp, #28]
 8008636:	9104      	str	r1, [sp, #16]
 8008638:	4808      	ldr	r0, [pc, #32]	@ (800865c <siprintf+0x38>)
 800863a:	4909      	ldr	r1, [pc, #36]	@ (8008660 <siprintf+0x3c>)
 800863c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008640:	9105      	str	r1, [sp, #20]
 8008642:	6800      	ldr	r0, [r0, #0]
 8008644:	a902      	add	r1, sp, #8
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	f001 fb62 	bl	8009d10 <_svfiprintf_r>
 800864c:	2200      	movs	r2, #0
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	b01c      	add	sp, #112	@ 0x70
 8008654:	f85d eb04 	ldr.w	lr, [sp], #4
 8008658:	b003      	add	sp, #12
 800865a:	4770      	bx	lr
 800865c:	20000038 	.word	0x20000038
 8008660:	ffff0208 	.word	0xffff0208

08008664 <__sread>:
 8008664:	b510      	push	{r4, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	f000 f86c 	bl	8008748 <_read_r>
 8008670:	2800      	cmp	r0, #0
 8008672:	bfab      	itete	ge
 8008674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008676:	89a3      	ldrhlt	r3, [r4, #12]
 8008678:	181b      	addge	r3, r3, r0
 800867a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800867e:	bfac      	ite	ge
 8008680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008682:	81a3      	strhlt	r3, [r4, #12]
 8008684:	bd10      	pop	{r4, pc}

08008686 <__swrite>:
 8008686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	461f      	mov	r7, r3
 800868c:	898b      	ldrh	r3, [r1, #12]
 800868e:	4605      	mov	r5, r0
 8008690:	05db      	lsls	r3, r3, #23
 8008692:	460c      	mov	r4, r1
 8008694:	4616      	mov	r6, r2
 8008696:	d505      	bpl.n	80086a4 <__swrite+0x1e>
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a0:	f000 f840 	bl	8008724 <_lseek_r>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	4632      	mov	r2, r6
 80086a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	4628      	mov	r0, r5
 80086b0:	463b      	mov	r3, r7
 80086b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	f000 b867 	b.w	800878c <_write_r>

080086be <__sseek>:
 80086be:	b510      	push	{r4, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c6:	f000 f82d 	bl	8008724 <_lseek_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	bf15      	itete	ne
 80086d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086da:	81a3      	strheq	r3, [r4, #12]
 80086dc:	bf18      	it	ne
 80086de:	81a3      	strhne	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__sclose>:
 80086e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e6:	f000 b80d 	b.w	8008704 <_close_r>

080086ea <memset>:
 80086ea:	4603      	mov	r3, r0
 80086ec:	4402      	add	r2, r0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d100      	bne.n	80086f4 <memset+0xa>
 80086f2:	4770      	bx	lr
 80086f4:	f803 1b01 	strb.w	r1, [r3], #1
 80086f8:	e7f9      	b.n	80086ee <memset+0x4>
	...

080086fc <_localeconv_r>:
 80086fc:	4800      	ldr	r0, [pc, #0]	@ (8008700 <_localeconv_r+0x4>)
 80086fe:	4770      	bx	lr
 8008700:	20000178 	.word	0x20000178

08008704 <_close_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	2300      	movs	r3, #0
 8008708:	4d05      	ldr	r5, [pc, #20]	@ (8008720 <_close_r+0x1c>)
 800870a:	4604      	mov	r4, r0
 800870c:	4608      	mov	r0, r1
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	f7fa faeb 	bl	8002cea <_close>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_close_r+0x1a>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_close_r+0x1a>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20000568 	.word	0x20000568

08008724 <_lseek_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	2200      	movs	r2, #0
 800872e:	4d05      	ldr	r5, [pc, #20]	@ (8008744 <_lseek_r+0x20>)
 8008730:	602a      	str	r2, [r5, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	f7fa fafd 	bl	8002d32 <_lseek>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_lseek_r+0x1e>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_lseek_r+0x1e>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	20000568 	.word	0x20000568

08008748 <_read_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	2200      	movs	r2, #0
 8008752:	4d05      	ldr	r5, [pc, #20]	@ (8008768 <_read_r+0x20>)
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7fa fa8e 	bl	8002c78 <_read>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_read_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_read_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000568 	.word	0x20000568

0800876c <_sbrk_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	2300      	movs	r3, #0
 8008770:	4d05      	ldr	r5, [pc, #20]	@ (8008788 <_sbrk_r+0x1c>)
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	602b      	str	r3, [r5, #0]
 8008778:	f7fa fae8 	bl	8002d4c <_sbrk>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_sbrk_r+0x1a>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_sbrk_r+0x1a>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20000568 	.word	0x20000568

0800878c <_write_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	2200      	movs	r2, #0
 8008796:	4d05      	ldr	r5, [pc, #20]	@ (80087ac <_write_r+0x20>)
 8008798:	602a      	str	r2, [r5, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	f7fa fa89 	bl	8002cb2 <_write>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_write_r+0x1e>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_write_r+0x1e>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000568 	.word	0x20000568

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	@ (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000038 	.word	0x20000038

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	2600      	movs	r6, #0
 80087c0:	4d0c      	ldr	r5, [pc, #48]	@ (80087f4 <__libc_init_array+0x38>)
 80087c2:	4c0d      	ldr	r4, [pc, #52]	@ (80087f8 <__libc_init_array+0x3c>)
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	f001 ffa8 	bl	800a720 <_init>
 80087d0:	2600      	movs	r6, #0
 80087d2:	4d0a      	ldr	r5, [pc, #40]	@ (80087fc <__libc_init_array+0x40>)
 80087d4:	4c0a      	ldr	r4, [pc, #40]	@ (8008800 <__libc_init_array+0x44>)
 80087d6:	1b64      	subs	r4, r4, r5
 80087d8:	10a4      	asrs	r4, r4, #2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	0800ac38 	.word	0x0800ac38
 80087f8:	0800ac38 	.word	0x0800ac38
 80087fc:	0800ac38 	.word	0x0800ac38
 8008800:	0800ac3c 	.word	0x0800ac3c

08008804 <__retarget_lock_init_recursive>:
 8008804:	4770      	bx	lr

08008806 <__retarget_lock_acquire_recursive>:
 8008806:	4770      	bx	lr

08008808 <__retarget_lock_release_recursive>:
 8008808:	4770      	bx	lr

0800880a <memchr>:
 800880a:	4603      	mov	r3, r0
 800880c:	b510      	push	{r4, lr}
 800880e:	b2c9      	uxtb	r1, r1
 8008810:	4402      	add	r2, r0
 8008812:	4293      	cmp	r3, r2
 8008814:	4618      	mov	r0, r3
 8008816:	d101      	bne.n	800881c <memchr+0x12>
 8008818:	2000      	movs	r0, #0
 800881a:	e003      	b.n	8008824 <memchr+0x1a>
 800881c:	7804      	ldrb	r4, [r0, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	428c      	cmp	r4, r1
 8008822:	d1f6      	bne.n	8008812 <memchr+0x8>
 8008824:	bd10      	pop	{r4, pc}

08008826 <quorem>:
 8008826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6903      	ldr	r3, [r0, #16]
 800882c:	690c      	ldr	r4, [r1, #16]
 800882e:	4607      	mov	r7, r0
 8008830:	42a3      	cmp	r3, r4
 8008832:	db7e      	blt.n	8008932 <quorem+0x10c>
 8008834:	3c01      	subs	r4, #1
 8008836:	00a3      	lsls	r3, r4, #2
 8008838:	f100 0514 	add.w	r5, r0, #20
 800883c:	f101 0814 	add.w	r8, r1, #20
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800884c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008850:	3301      	adds	r3, #1
 8008852:	429a      	cmp	r2, r3
 8008854:	fbb2 f6f3 	udiv	r6, r2, r3
 8008858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800885c:	d32e      	bcc.n	80088bc <quorem+0x96>
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	46c4      	mov	ip, r8
 8008864:	46ae      	mov	lr, r5
 8008866:	46d3      	mov	fp, sl
 8008868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800886c:	b298      	uxth	r0, r3
 800886e:	fb06 a000 	mla	r0, r6, r0, sl
 8008872:	0c1b      	lsrs	r3, r3, #16
 8008874:	0c02      	lsrs	r2, r0, #16
 8008876:	fb06 2303 	mla	r3, r6, r3, r2
 800887a:	f8de 2000 	ldr.w	r2, [lr]
 800887e:	b280      	uxth	r0, r0
 8008880:	b292      	uxth	r2, r2
 8008882:	1a12      	subs	r2, r2, r0
 8008884:	445a      	add	r2, fp
 8008886:	f8de 0000 	ldr.w	r0, [lr]
 800888a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888e:	b29b      	uxth	r3, r3
 8008890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008898:	b292      	uxth	r2, r2
 800889a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800889e:	45e1      	cmp	r9, ip
 80088a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088a4:	f84e 2b04 	str.w	r2, [lr], #4
 80088a8:	d2de      	bcs.n	8008868 <quorem+0x42>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	58eb      	ldr	r3, [r5, r3]
 80088ae:	b92b      	cbnz	r3, 80088bc <quorem+0x96>
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	3b04      	subs	r3, #4
 80088b4:	429d      	cmp	r5, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	d32f      	bcc.n	800891a <quorem+0xf4>
 80088ba:	613c      	str	r4, [r7, #16]
 80088bc:	4638      	mov	r0, r7
 80088be:	f001 f8c3 	bl	8009a48 <__mcmp>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	db25      	blt.n	8008912 <quorem+0xec>
 80088c6:	4629      	mov	r1, r5
 80088c8:	2000      	movs	r0, #0
 80088ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80088ce:	f8d1 c000 	ldr.w	ip, [r1]
 80088d2:	fa1f fe82 	uxth.w	lr, r2
 80088d6:	fa1f f38c 	uxth.w	r3, ip
 80088da:	eba3 030e 	sub.w	r3, r3, lr
 80088de:	4403      	add	r3, r0
 80088e0:	0c12      	lsrs	r2, r2, #16
 80088e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f0:	45c1      	cmp	r9, r8
 80088f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088f6:	f841 3b04 	str.w	r3, [r1], #4
 80088fa:	d2e6      	bcs.n	80088ca <quorem+0xa4>
 80088fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008904:	b922      	cbnz	r2, 8008910 <quorem+0xea>
 8008906:	3b04      	subs	r3, #4
 8008908:	429d      	cmp	r5, r3
 800890a:	461a      	mov	r2, r3
 800890c:	d30b      	bcc.n	8008926 <quorem+0x100>
 800890e:	613c      	str	r4, [r7, #16]
 8008910:	3601      	adds	r6, #1
 8008912:	4630      	mov	r0, r6
 8008914:	b003      	add	sp, #12
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	6812      	ldr	r2, [r2, #0]
 800891c:	3b04      	subs	r3, #4
 800891e:	2a00      	cmp	r2, #0
 8008920:	d1cb      	bne.n	80088ba <quorem+0x94>
 8008922:	3c01      	subs	r4, #1
 8008924:	e7c6      	b.n	80088b4 <quorem+0x8e>
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	3b04      	subs	r3, #4
 800892a:	2a00      	cmp	r2, #0
 800892c:	d1ef      	bne.n	800890e <quorem+0xe8>
 800892e:	3c01      	subs	r4, #1
 8008930:	e7ea      	b.n	8008908 <quorem+0xe2>
 8008932:	2000      	movs	r0, #0
 8008934:	e7ee      	b.n	8008914 <quorem+0xee>
	...

08008938 <_dtoa_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	4614      	mov	r4, r2
 800893e:	461d      	mov	r5, r3
 8008940:	69c7      	ldr	r7, [r0, #28]
 8008942:	b097      	sub	sp, #92	@ 0x5c
 8008944:	4683      	mov	fp, r0
 8008946:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800894a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800894c:	b97f      	cbnz	r7, 800896e <_dtoa_r+0x36>
 800894e:	2010      	movs	r0, #16
 8008950:	f7ff f88c 	bl	8007a6c <malloc>
 8008954:	4602      	mov	r2, r0
 8008956:	f8cb 001c 	str.w	r0, [fp, #28]
 800895a:	b920      	cbnz	r0, 8008966 <_dtoa_r+0x2e>
 800895c:	21ef      	movs	r1, #239	@ 0xef
 800895e:	4ba8      	ldr	r3, [pc, #672]	@ (8008c00 <_dtoa_r+0x2c8>)
 8008960:	48a8      	ldr	r0, [pc, #672]	@ (8008c04 <_dtoa_r+0x2cc>)
 8008962:	f001 fba1 	bl	800a0a8 <__assert_func>
 8008966:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800896a:	6007      	str	r7, [r0, #0]
 800896c:	60c7      	str	r7, [r0, #12]
 800896e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	b159      	cbz	r1, 800898e <_dtoa_r+0x56>
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	2301      	movs	r3, #1
 800897a:	4093      	lsls	r3, r2
 800897c:	604a      	str	r2, [r1, #4]
 800897e:	608b      	str	r3, [r1, #8]
 8008980:	4658      	mov	r0, fp
 8008982:	f000 fe29 	bl	80095d8 <_Bfree>
 8008986:	2200      	movs	r2, #0
 8008988:	f8db 301c 	ldr.w	r3, [fp, #28]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	1e2b      	subs	r3, r5, #0
 8008990:	bfaf      	iteee	ge
 8008992:	2300      	movge	r3, #0
 8008994:	2201      	movlt	r2, #1
 8008996:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800899a:	9303      	strlt	r3, [sp, #12]
 800899c:	bfa8      	it	ge
 800899e:	6033      	strge	r3, [r6, #0]
 80089a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089a4:	4b98      	ldr	r3, [pc, #608]	@ (8008c08 <_dtoa_r+0x2d0>)
 80089a6:	bfb8      	it	lt
 80089a8:	6032      	strlt	r2, [r6, #0]
 80089aa:	ea33 0308 	bics.w	r3, r3, r8
 80089ae:	d112      	bne.n	80089d6 <_dtoa_r+0x9e>
 80089b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089bc:	4323      	orrs	r3, r4
 80089be:	f000 8550 	beq.w	8009462 <_dtoa_r+0xb2a>
 80089c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008c0c <_dtoa_r+0x2d4>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8552 	beq.w	8009472 <_dtoa_r+0xb3a>
 80089ce:	f10a 0303 	add.w	r3, sl, #3
 80089d2:	f000 bd4c 	b.w	800946e <_dtoa_r+0xb36>
 80089d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	f7f7 ffdf 	bl	80009a8 <__aeabi_dcmpeq>
 80089ea:	4607      	mov	r7, r0
 80089ec:	b158      	cbz	r0, 8008a06 <_dtoa_r+0xce>
 80089ee:	2301      	movs	r3, #1
 80089f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089f6:	b113      	cbz	r3, 80089fe <_dtoa_r+0xc6>
 80089f8:	4b85      	ldr	r3, [pc, #532]	@ (8008c10 <_dtoa_r+0x2d8>)
 80089fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008c14 <_dtoa_r+0x2dc>
 8008a02:	f000 bd36 	b.w	8009472 <_dtoa_r+0xb3a>
 8008a06:	ab14      	add	r3, sp, #80	@ 0x50
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	ab15      	add	r3, sp, #84	@ 0x54
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	4658      	mov	r0, fp
 8008a10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a14:	f001 f8c8 	bl	8009ba8 <__d2b>
 8008a18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a1c:	4681      	mov	r9, r0
 8008a1e:	2e00      	cmp	r6, #0
 8008a20:	d077      	beq.n	8008b12 <_dtoa_r+0x1da>
 8008a22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a38:	9712      	str	r7, [sp, #72]	@ 0x48
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4b76      	ldr	r3, [pc, #472]	@ (8008c18 <_dtoa_r+0x2e0>)
 8008a40:	f7f7 fb92 	bl	8000168 <__aeabi_dsub>
 8008a44:	a368      	add	r3, pc, #416	@ (adr r3, 8008be8 <_dtoa_r+0x2b0>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fd45 	bl	80004d8 <__aeabi_dmul>
 8008a4e:	a368      	add	r3, pc, #416	@ (adr r3, 8008bf0 <_dtoa_r+0x2b8>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f7f7 fb8a 	bl	800016c <__adddf3>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	f7f7 fcd1 	bl	8000404 <__aeabi_i2d>
 8008a62:	a365      	add	r3, pc, #404	@ (adr r3, 8008bf8 <_dtoa_r+0x2c0>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4620      	mov	r0, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f7 fb7a 	bl	800016c <__adddf3>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	f7f7 ffdc 	bl	8000a38 <__aeabi_d2iz>
 8008a80:	2200      	movs	r2, #0
 8008a82:	4607      	mov	r7, r0
 8008a84:	2300      	movs	r3, #0
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 ff97 	bl	80009bc <__aeabi_dcmplt>
 8008a8e:	b140      	cbz	r0, 8008aa2 <_dtoa_r+0x16a>
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7f7 fcb7 	bl	8000404 <__aeabi_i2d>
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f7f7 ff85 	bl	80009a8 <__aeabi_dcmpeq>
 8008a9e:	b900      	cbnz	r0, 8008aa2 <_dtoa_r+0x16a>
 8008aa0:	3f01      	subs	r7, #1
 8008aa2:	2f16      	cmp	r7, #22
 8008aa4:	d853      	bhi.n	8008b4e <_dtoa_r+0x216>
 8008aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8008c1c <_dtoa_r+0x2e4>)
 8008aac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 ff82 	bl	80009bc <__aeabi_dcmplt>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d04a      	beq.n	8008b52 <_dtoa_r+0x21a>
 8008abc:	2300      	movs	r3, #0
 8008abe:	3f01      	subs	r7, #1
 8008ac0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ac2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ac4:	1b9b      	subs	r3, r3, r6
 8008ac6:	1e5a      	subs	r2, r3, #1
 8008ac8:	bf46      	itte	mi
 8008aca:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ace:	2300      	movmi	r3, #0
 8008ad0:	f04f 0800 	movpl.w	r8, #0
 8008ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad6:	bf48      	it	mi
 8008ad8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	db3b      	blt.n	8008b56 <_dtoa_r+0x21e>
 8008ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae0:	970e      	str	r7, [sp, #56]	@ 0x38
 8008ae2:	443b      	add	r3, r7
 8008ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d866      	bhi.n	8008bbe <_dtoa_r+0x286>
 8008af0:	2b05      	cmp	r3, #5
 8008af2:	bfc4      	itt	gt
 8008af4:	3b04      	subgt	r3, #4
 8008af6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008af8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008afa:	bfc8      	it	gt
 8008afc:	2400      	movgt	r4, #0
 8008afe:	f1a3 0302 	sub.w	r3, r3, #2
 8008b02:	bfd8      	it	le
 8008b04:	2401      	movle	r4, #1
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d864      	bhi.n	8008bd4 <_dtoa_r+0x29c>
 8008b0a:	e8df f003 	tbb	[pc, r3]
 8008b0e:	382b      	.short	0x382b
 8008b10:	5636      	.short	0x5636
 8008b12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b16:	441e      	add	r6, r3
 8008b18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	bfc1      	itttt	gt
 8008b20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b24:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b30:	bfd6      	itet	le
 8008b32:	f1c3 0320 	rsble	r3, r3, #32
 8008b36:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b3a:	fa04 f003 	lslle.w	r0, r4, r3
 8008b3e:	f7f7 fc51 	bl	80003e4 <__aeabi_ui2d>
 8008b42:	2201      	movs	r2, #1
 8008b44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b48:	3e01      	subs	r6, #1
 8008b4a:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b4c:	e775      	b.n	8008a3a <_dtoa_r+0x102>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7b6      	b.n	8008ac0 <_dtoa_r+0x188>
 8008b52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008b54:	e7b5      	b.n	8008ac2 <_dtoa_r+0x18a>
 8008b56:	427b      	negs	r3, r7
 8008b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	eba8 0807 	sub.w	r8, r8, r7
 8008b60:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b62:	e7c2      	b.n	8008aea <_dtoa_r+0x1b2>
 8008b64:	2300      	movs	r3, #0
 8008b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dc35      	bgt.n	8008bda <_dtoa_r+0x2a2>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	461a      	mov	r2, r3
 8008b72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008b76:	9221      	str	r2, [sp, #132]	@ 0x84
 8008b78:	e00b      	b.n	8008b92 <_dtoa_r+0x25a>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e7f3      	b.n	8008b66 <_dtoa_r+0x22e>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	9307      	str	r3, [sp, #28]
 8008b8e:	bfb8      	it	lt
 8008b90:	2301      	movlt	r3, #1
 8008b92:	2100      	movs	r1, #0
 8008b94:	2204      	movs	r2, #4
 8008b96:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b9a:	f102 0514 	add.w	r5, r2, #20
 8008b9e:	429d      	cmp	r5, r3
 8008ba0:	d91f      	bls.n	8008be2 <_dtoa_r+0x2aa>
 8008ba2:	6041      	str	r1, [r0, #4]
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f000 fcd7 	bl	8009558 <_Balloc>
 8008baa:	4682      	mov	sl, r0
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d139      	bne.n	8008c24 <_dtoa_r+0x2ec>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c20 <_dtoa_r+0x2e8>)
 8008bb8:	e6d2      	b.n	8008960 <_dtoa_r+0x28>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7e0      	b.n	8008b80 <_dtoa_r+0x248>
 8008bbe:	2401      	movs	r4, #1
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008bc4:	9320      	str	r3, [sp, #128]	@ 0x80
 8008bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bca:	2200      	movs	r2, #0
 8008bcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008bd0:	2312      	movs	r3, #18
 8008bd2:	e7d0      	b.n	8008b76 <_dtoa_r+0x23e>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bd8:	e7f5      	b.n	8008bc6 <_dtoa_r+0x28e>
 8008bda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008be0:	e7d7      	b.n	8008b92 <_dtoa_r+0x25a>
 8008be2:	3101      	adds	r1, #1
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	e7d8      	b.n	8008b9a <_dtoa_r+0x262>
 8008be8:	636f4361 	.word	0x636f4361
 8008bec:	3fd287a7 	.word	0x3fd287a7
 8008bf0:	8b60c8b3 	.word	0x8b60c8b3
 8008bf4:	3fc68a28 	.word	0x3fc68a28
 8008bf8:	509f79fb 	.word	0x509f79fb
 8008bfc:	3fd34413 	.word	0x3fd34413
 8008c00:	0800a903 	.word	0x0800a903
 8008c04:	0800a91a 	.word	0x0800a91a
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	0800a8ff 	.word	0x0800a8ff
 8008c10:	0800a8d3 	.word	0x0800a8d3
 8008c14:	0800a8d2 	.word	0x0800a8d2
 8008c18:	3ff80000 	.word	0x3ff80000
 8008c1c:	0800aa10 	.word	0x0800aa10
 8008c20:	0800a972 	.word	0x0800a972
 8008c24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c28:	6018      	str	r0, [r3, #0]
 8008c2a:	9b07      	ldr	r3, [sp, #28]
 8008c2c:	2b0e      	cmp	r3, #14
 8008c2e:	f200 80a4 	bhi.w	8008d7a <_dtoa_r+0x442>
 8008c32:	2c00      	cmp	r4, #0
 8008c34:	f000 80a1 	beq.w	8008d7a <_dtoa_r+0x442>
 8008c38:	2f00      	cmp	r7, #0
 8008c3a:	dd33      	ble.n	8008ca4 <_dtoa_r+0x36c>
 8008c3c:	4b86      	ldr	r3, [pc, #536]	@ (8008e58 <_dtoa_r+0x520>)
 8008c3e:	f007 020f 	and.w	r2, r7, #15
 8008c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c46:	05f8      	lsls	r0, r7, #23
 8008c48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c54:	d516      	bpl.n	8008c84 <_dtoa_r+0x34c>
 8008c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c5a:	4b80      	ldr	r3, [pc, #512]	@ (8008e5c <_dtoa_r+0x524>)
 8008c5c:	2603      	movs	r6, #3
 8008c5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c62:	f7f7 fd63 	bl	800072c <__aeabi_ddiv>
 8008c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c6a:	f004 040f 	and.w	r4, r4, #15
 8008c6e:	4d7b      	ldr	r5, [pc, #492]	@ (8008e5c <_dtoa_r+0x524>)
 8008c70:	b954      	cbnz	r4, 8008c88 <_dtoa_r+0x350>
 8008c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c7a:	f7f7 fd57 	bl	800072c <__aeabi_ddiv>
 8008c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c82:	e028      	b.n	8008cd6 <_dtoa_r+0x39e>
 8008c84:	2602      	movs	r6, #2
 8008c86:	e7f2      	b.n	8008c6e <_dtoa_r+0x336>
 8008c88:	07e1      	lsls	r1, r4, #31
 8008c8a:	d508      	bpl.n	8008c9e <_dtoa_r+0x366>
 8008c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	1064      	asrs	r4, r4, #1
 8008ca0:	3508      	adds	r5, #8
 8008ca2:	e7e5      	b.n	8008c70 <_dtoa_r+0x338>
 8008ca4:	f000 80d2 	beq.w	8008e4c <_dtoa_r+0x514>
 8008ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cac:	427c      	negs	r4, r7
 8008cae:	4b6a      	ldr	r3, [pc, #424]	@ (8008e58 <_dtoa_r+0x520>)
 8008cb0:	f004 020f 	and.w	r2, r4, #15
 8008cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fc0c 	bl	80004d8 <__aeabi_dmul>
 8008cc0:	2602      	movs	r6, #2
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc8:	4d64      	ldr	r5, [pc, #400]	@ (8008e5c <_dtoa_r+0x524>)
 8008cca:	1124      	asrs	r4, r4, #4
 8008ccc:	2c00      	cmp	r4, #0
 8008cce:	f040 80b2 	bne.w	8008e36 <_dtoa_r+0x4fe>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1d3      	bne.n	8008c7e <_dtoa_r+0x346>
 8008cd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80b7 	beq.w	8008e50 <_dtoa_r+0x518>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8008e60 <_dtoa_r+0x528>)
 8008cea:	f7f7 fe67 	bl	80009bc <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f000 80ae 	beq.w	8008e50 <_dtoa_r+0x518>
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80aa 	beq.w	8008e50 <_dtoa_r+0x518>
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dd37      	ble.n	8008d72 <_dtoa_r+0x43a>
 8008d02:	1e7b      	subs	r3, r7, #1
 8008d04:	4620      	mov	r0, r4
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4b55      	ldr	r3, [pc, #340]	@ (8008e64 <_dtoa_r+0x52c>)
 8008d0e:	f7f7 fbe3 	bl	80004d8 <__aeabi_dmul>
 8008d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d16:	9c08      	ldr	r4, [sp, #32]
 8008d18:	3601      	adds	r6, #1
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7f7 fb72 	bl	8000404 <__aeabi_i2d>
 8008d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d24:	f7f7 fbd8 	bl	80004d8 <__aeabi_dmul>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e68 <_dtoa_r+0x530>)
 8008d2c:	f7f7 fa1e 	bl	800016c <__adddf3>
 8008d30:	4605      	mov	r5, r0
 8008d32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d36:	2c00      	cmp	r4, #0
 8008d38:	f040 809a 	bne.w	8008e70 <_dtoa_r+0x538>
 8008d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b4a      	ldr	r3, [pc, #296]	@ (8008e6c <_dtoa_r+0x534>)
 8008d44:	f7f7 fa10 	bl	8000168 <__aeabi_dsub>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4633      	mov	r3, r6
 8008d54:	f7f7 fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f040 828e 	bne.w	800927a <_dtoa_r+0x942>
 8008d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d62:	462a      	mov	r2, r5
 8008d64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d68:	f7f7 fe28 	bl	80009bc <__aeabi_dcmplt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f040 8127 	bne.w	8008fc0 <_dtoa_r+0x688>
 8008d72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f2c0 8163 	blt.w	8009048 <_dtoa_r+0x710>
 8008d82:	2f0e      	cmp	r7, #14
 8008d84:	f300 8160 	bgt.w	8009048 <_dtoa_r+0x710>
 8008d88:	4b33      	ldr	r3, [pc, #204]	@ (8008e58 <_dtoa_r+0x520>)
 8008d8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	da03      	bge.n	8008da4 <_dtoa_r+0x46c>
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f340 8100 	ble.w	8008fa4 <_dtoa_r+0x66c>
 8008da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008da8:	4656      	mov	r6, sl
 8008daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dae:	4620      	mov	r0, r4
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7f7 fcbb 	bl	800072c <__aeabi_ddiv>
 8008db6:	f7f7 fe3f 	bl	8000a38 <__aeabi_d2iz>
 8008dba:	4680      	mov	r8, r0
 8008dbc:	f7f7 fb22 	bl	8000404 <__aeabi_i2d>
 8008dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dc4:	f7f7 fb88 	bl	80004d8 <__aeabi_dmul>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 f9ca 	bl	8000168 <__aeabi_dsub>
 8008dd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008dd8:	9d07      	ldr	r5, [sp, #28]
 8008dda:	f806 4b01 	strb.w	r4, [r6], #1
 8008dde:	eba6 040a 	sub.w	r4, r6, sl
 8008de2:	42a5      	cmp	r5, r4
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	f040 8116 	bne.w	8009018 <_dtoa_r+0x6e0>
 8008dec:	f7f7 f9be 	bl	800016c <__adddf3>
 8008df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	f7f7 fdfe 	bl	80009f8 <__aeabi_dcmpgt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f040 80f8 	bne.w	8008ff2 <_dtoa_r+0x6ba>
 8008e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e06:	4620      	mov	r0, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7f7 fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8008e0e:	b118      	cbz	r0, 8008e18 <_dtoa_r+0x4e0>
 8008e10:	f018 0f01 	tst.w	r8, #1
 8008e14:	f040 80ed 	bne.w	8008ff2 <_dtoa_r+0x6ba>
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 fbdc 	bl	80095d8 <_Bfree>
 8008e20:	2300      	movs	r3, #0
 8008e22:	7033      	strb	r3, [r6, #0]
 8008e24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e26:	3701      	adds	r7, #1
 8008e28:	601f      	str	r7, [r3, #0]
 8008e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8320 	beq.w	8009472 <_dtoa_r+0xb3a>
 8008e32:	601e      	str	r6, [r3, #0]
 8008e34:	e31d      	b.n	8009472 <_dtoa_r+0xb3a>
 8008e36:	07e2      	lsls	r2, r4, #31
 8008e38:	d505      	bpl.n	8008e46 <_dtoa_r+0x50e>
 8008e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e3e:	f7f7 fb4b 	bl	80004d8 <__aeabi_dmul>
 8008e42:	2301      	movs	r3, #1
 8008e44:	3601      	adds	r6, #1
 8008e46:	1064      	asrs	r4, r4, #1
 8008e48:	3508      	adds	r5, #8
 8008e4a:	e73f      	b.n	8008ccc <_dtoa_r+0x394>
 8008e4c:	2602      	movs	r6, #2
 8008e4e:	e742      	b.n	8008cd6 <_dtoa_r+0x39e>
 8008e50:	9c07      	ldr	r4, [sp, #28]
 8008e52:	9704      	str	r7, [sp, #16]
 8008e54:	e761      	b.n	8008d1a <_dtoa_r+0x3e2>
 8008e56:	bf00      	nop
 8008e58:	0800aa10 	.word	0x0800aa10
 8008e5c:	0800a9e8 	.word	0x0800a9e8
 8008e60:	3ff00000 	.word	0x3ff00000
 8008e64:	40240000 	.word	0x40240000
 8008e68:	401c0000 	.word	0x401c0000
 8008e6c:	40140000 	.word	0x40140000
 8008e70:	4b70      	ldr	r3, [pc, #448]	@ (8009034 <_dtoa_r+0x6fc>)
 8008e72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e7c:	4454      	add	r4, sl
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d045      	beq.n	8008f0e <_dtoa_r+0x5d6>
 8008e82:	2000      	movs	r0, #0
 8008e84:	496c      	ldr	r1, [pc, #432]	@ (8009038 <_dtoa_r+0x700>)
 8008e86:	f7f7 fc51 	bl	800072c <__aeabi_ddiv>
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	f7f7 f96b 	bl	8000168 <__aeabi_dsub>
 8008e92:	4656      	mov	r6, sl
 8008e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9c:	f7f7 fdcc 	bl	8000a38 <__aeabi_d2iz>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f7f7 faaf 	bl	8000404 <__aeabi_i2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eae:	f7f7 f95b 	bl	8000168 <__aeabi_dsub>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	3530      	adds	r5, #48	@ 0x30
 8008eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ebc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ec0:	f806 5b01 	strb.w	r5, [r6], #1
 8008ec4:	f7f7 fd7a 	bl	80009bc <__aeabi_dcmplt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d163      	bne.n	8008f94 <_dtoa_r+0x65c>
 8008ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	495a      	ldr	r1, [pc, #360]	@ (800903c <_dtoa_r+0x704>)
 8008ed4:	f7f7 f948 	bl	8000168 <__aeabi_dsub>
 8008ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008edc:	f7f7 fd6e 	bl	80009bc <__aeabi_dcmplt>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	f040 8087 	bne.w	8008ff4 <_dtoa_r+0x6bc>
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	f43f af43 	beq.w	8008d72 <_dtoa_r+0x43a>
 8008eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4b53      	ldr	r3, [pc, #332]	@ (8009040 <_dtoa_r+0x708>)
 8008ef4:	f7f7 faf0 	bl	80004d8 <__aeabi_dmul>
 8008ef8:	2200      	movs	r2, #0
 8008efa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f02:	4b4f      	ldr	r3, [pc, #316]	@ (8009040 <_dtoa_r+0x708>)
 8008f04:	f7f7 fae8 	bl	80004d8 <__aeabi_dmul>
 8008f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f0c:	e7c4      	b.n	8008e98 <_dtoa_r+0x560>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7f7 fae1 	bl	80004d8 <__aeabi_dmul>
 8008f16:	4656      	mov	r6, sl
 8008f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f22:	f7f7 fd89 	bl	8000a38 <__aeabi_d2iz>
 8008f26:	4605      	mov	r5, r0
 8008f28:	f7f7 fa6c 	bl	8000404 <__aeabi_i2d>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f34:	f7f7 f918 	bl	8000168 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	3530      	adds	r5, #48	@ 0x30
 8008f3e:	f806 5b01 	strb.w	r5, [r6], #1
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	d124      	bne.n	8008f98 <_dtoa_r+0x660>
 8008f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f52:	4b39      	ldr	r3, [pc, #228]	@ (8009038 <_dtoa_r+0x700>)
 8008f54:	f7f7 f90a 	bl	800016c <__adddf3>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f60:	f7f7 fd4a 	bl	80009f8 <__aeabi_dcmpgt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d145      	bne.n	8008ff4 <_dtoa_r+0x6bc>
 8008f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4932      	ldr	r1, [pc, #200]	@ (8009038 <_dtoa_r+0x700>)
 8008f70:	f7f7 f8fa 	bl	8000168 <__aeabi_dsub>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f7c:	f7f7 fd1e 	bl	80009bc <__aeabi_dcmplt>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f43f aef6 	beq.w	8008d72 <_dtoa_r+0x43a>
 8008f86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008f88:	1e73      	subs	r3, r6, #1
 8008f8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f90:	2b30      	cmp	r3, #48	@ 0x30
 8008f92:	d0f8      	beq.n	8008f86 <_dtoa_r+0x64e>
 8008f94:	9f04      	ldr	r7, [sp, #16]
 8008f96:	e73f      	b.n	8008e18 <_dtoa_r+0x4e0>
 8008f98:	4b29      	ldr	r3, [pc, #164]	@ (8009040 <_dtoa_r+0x708>)
 8008f9a:	f7f7 fa9d 	bl	80004d8 <__aeabi_dmul>
 8008f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa2:	e7bc      	b.n	8008f1e <_dtoa_r+0x5e6>
 8008fa4:	d10c      	bne.n	8008fc0 <_dtoa_r+0x688>
 8008fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008faa:	2200      	movs	r2, #0
 8008fac:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <_dtoa_r+0x70c>)
 8008fae:	f7f7 fa93 	bl	80004d8 <__aeabi_dmul>
 8008fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fb6:	f7f7 fd15 	bl	80009e4 <__aeabi_dcmpge>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f000 815b 	beq.w	8009276 <_dtoa_r+0x93e>
 8008fc0:	2400      	movs	r4, #0
 8008fc2:	4625      	mov	r5, r4
 8008fc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fc6:	4656      	mov	r6, sl
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	2700      	movs	r7, #0
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4658      	mov	r0, fp
 8008fd2:	f000 fb01 	bl	80095d8 <_Bfree>
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	d0dc      	beq.n	8008f94 <_dtoa_r+0x65c>
 8008fda:	b12f      	cbz	r7, 8008fe8 <_dtoa_r+0x6b0>
 8008fdc:	42af      	cmp	r7, r5
 8008fde:	d003      	beq.n	8008fe8 <_dtoa_r+0x6b0>
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4658      	mov	r0, fp
 8008fe4:	f000 faf8 	bl	80095d8 <_Bfree>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4658      	mov	r0, fp
 8008fec:	f000 faf4 	bl	80095d8 <_Bfree>
 8008ff0:	e7d0      	b.n	8008f94 <_dtoa_r+0x65c>
 8008ff2:	9704      	str	r7, [sp, #16]
 8008ff4:	4633      	mov	r3, r6
 8008ff6:	461e      	mov	r6, r3
 8008ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ffc:	2a39      	cmp	r2, #57	@ 0x39
 8008ffe:	d107      	bne.n	8009010 <_dtoa_r+0x6d8>
 8009000:	459a      	cmp	sl, r3
 8009002:	d1f8      	bne.n	8008ff6 <_dtoa_r+0x6be>
 8009004:	9a04      	ldr	r2, [sp, #16]
 8009006:	3201      	adds	r2, #1
 8009008:	9204      	str	r2, [sp, #16]
 800900a:	2230      	movs	r2, #48	@ 0x30
 800900c:	f88a 2000 	strb.w	r2, [sl]
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	3201      	adds	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	e7bd      	b.n	8008f94 <_dtoa_r+0x65c>
 8009018:	2200      	movs	r2, #0
 800901a:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <_dtoa_r+0x708>)
 800901c:	f7f7 fa5c 	bl	80004d8 <__aeabi_dmul>
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	f7f7 fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f aebc 	beq.w	8008daa <_dtoa_r+0x472>
 8009032:	e6f1      	b.n	8008e18 <_dtoa_r+0x4e0>
 8009034:	0800aa10 	.word	0x0800aa10
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	40240000 	.word	0x40240000
 8009044:	40140000 	.word	0x40140000
 8009048:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800904a:	2a00      	cmp	r2, #0
 800904c:	f000 80db 	beq.w	8009206 <_dtoa_r+0x8ce>
 8009050:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009052:	2a01      	cmp	r2, #1
 8009054:	f300 80bf 	bgt.w	80091d6 <_dtoa_r+0x89e>
 8009058:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800905a:	2a00      	cmp	r2, #0
 800905c:	f000 80b7 	beq.w	80091ce <_dtoa_r+0x896>
 8009060:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009064:	4646      	mov	r6, r8
 8009066:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800906a:	2101      	movs	r1, #1
 800906c:	441a      	add	r2, r3
 800906e:	4658      	mov	r0, fp
 8009070:	4498      	add	r8, r3
 8009072:	9209      	str	r2, [sp, #36]	@ 0x24
 8009074:	f000 fb64 	bl	8009740 <__i2b>
 8009078:	4605      	mov	r5, r0
 800907a:	b15e      	cbz	r6, 8009094 <_dtoa_r+0x75c>
 800907c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	dd08      	ble.n	8009094 <_dtoa_r+0x75c>
 8009082:	42b3      	cmp	r3, r6
 8009084:	bfa8      	it	ge
 8009086:	4633      	movge	r3, r6
 8009088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800908a:	eba8 0803 	sub.w	r8, r8, r3
 800908e:	1af6      	subs	r6, r6, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	9309      	str	r3, [sp, #36]	@ 0x24
 8009094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009096:	b1f3      	cbz	r3, 80090d6 <_dtoa_r+0x79e>
 8009098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80b7 	beq.w	800920e <_dtoa_r+0x8d6>
 80090a0:	b18c      	cbz	r4, 80090c6 <_dtoa_r+0x78e>
 80090a2:	4629      	mov	r1, r5
 80090a4:	4622      	mov	r2, r4
 80090a6:	4658      	mov	r0, fp
 80090a8:	f000 fc08 	bl	80098bc <__pow5mult>
 80090ac:	464a      	mov	r2, r9
 80090ae:	4601      	mov	r1, r0
 80090b0:	4605      	mov	r5, r0
 80090b2:	4658      	mov	r0, fp
 80090b4:	f000 fb5a 	bl	800976c <__multiply>
 80090b8:	4649      	mov	r1, r9
 80090ba:	9004      	str	r0, [sp, #16]
 80090bc:	4658      	mov	r0, fp
 80090be:	f000 fa8b 	bl	80095d8 <_Bfree>
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	4699      	mov	r9, r3
 80090c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c8:	1b1a      	subs	r2, r3, r4
 80090ca:	d004      	beq.n	80090d6 <_dtoa_r+0x79e>
 80090cc:	4649      	mov	r1, r9
 80090ce:	4658      	mov	r0, fp
 80090d0:	f000 fbf4 	bl	80098bc <__pow5mult>
 80090d4:	4681      	mov	r9, r0
 80090d6:	2101      	movs	r1, #1
 80090d8:	4658      	mov	r0, fp
 80090da:	f000 fb31 	bl	8009740 <__i2b>
 80090de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e0:	4604      	mov	r4, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 81c9 	beq.w	800947a <_dtoa_r+0xb42>
 80090e8:	461a      	mov	r2, r3
 80090ea:	4601      	mov	r1, r0
 80090ec:	4658      	mov	r0, fp
 80090ee:	f000 fbe5 	bl	80098bc <__pow5mult>
 80090f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090f4:	4604      	mov	r4, r0
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	f300 808f 	bgt.w	800921a <_dtoa_r+0x8e2>
 80090fc:	9b02      	ldr	r3, [sp, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 8087 	bne.w	8009212 <_dtoa_r+0x8da>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 8083 	bne.w	8009216 <_dtoa_r+0x8de>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009116:	0d1b      	lsrs	r3, r3, #20
 8009118:	051b      	lsls	r3, r3, #20
 800911a:	b12b      	cbz	r3, 8009128 <_dtoa_r+0x7f0>
 800911c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911e:	f108 0801 	add.w	r8, r8, #1
 8009122:	3301      	adds	r3, #1
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	2301      	movs	r3, #1
 8009128:	930a      	str	r3, [sp, #40]	@ 0x28
 800912a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 81aa 	beq.w	8009486 <_dtoa_r+0xb4e>
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009138:	6918      	ldr	r0, [r3, #16]
 800913a:	f000 fab5 	bl	80096a8 <__hi0bits>
 800913e:	f1c0 0020 	rsb	r0, r0, #32
 8009142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009144:	4418      	add	r0, r3
 8009146:	f010 001f 	ands.w	r0, r0, #31
 800914a:	d071      	beq.n	8009230 <_dtoa_r+0x8f8>
 800914c:	f1c0 0320 	rsb	r3, r0, #32
 8009150:	2b04      	cmp	r3, #4
 8009152:	dd65      	ble.n	8009220 <_dtoa_r+0x8e8>
 8009154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009156:	f1c0 001c 	rsb	r0, r0, #28
 800915a:	4403      	add	r3, r0
 800915c:	4480      	add	r8, r0
 800915e:	4406      	add	r6, r0
 8009160:	9309      	str	r3, [sp, #36]	@ 0x24
 8009162:	f1b8 0f00 	cmp.w	r8, #0
 8009166:	dd05      	ble.n	8009174 <_dtoa_r+0x83c>
 8009168:	4649      	mov	r1, r9
 800916a:	4642      	mov	r2, r8
 800916c:	4658      	mov	r0, fp
 800916e:	f000 fbff 	bl	8009970 <__lshift>
 8009172:	4681      	mov	r9, r0
 8009174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	dd05      	ble.n	8009186 <_dtoa_r+0x84e>
 800917a:	4621      	mov	r1, r4
 800917c:	461a      	mov	r2, r3
 800917e:	4658      	mov	r0, fp
 8009180:	f000 fbf6 	bl	8009970 <__lshift>
 8009184:	4604      	mov	r4, r0
 8009186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d053      	beq.n	8009234 <_dtoa_r+0x8fc>
 800918c:	4621      	mov	r1, r4
 800918e:	4648      	mov	r0, r9
 8009190:	f000 fc5a 	bl	8009a48 <__mcmp>
 8009194:	2800      	cmp	r0, #0
 8009196:	da4d      	bge.n	8009234 <_dtoa_r+0x8fc>
 8009198:	1e7b      	subs	r3, r7, #1
 800919a:	4649      	mov	r1, r9
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	220a      	movs	r2, #10
 80091a0:	2300      	movs	r3, #0
 80091a2:	4658      	mov	r0, fp
 80091a4:	f000 fa3a 	bl	800961c <__multadd>
 80091a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091aa:	4681      	mov	r9, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 816c 	beq.w	800948a <_dtoa_r+0xb52>
 80091b2:	2300      	movs	r3, #0
 80091b4:	4629      	mov	r1, r5
 80091b6:	220a      	movs	r2, #10
 80091b8:	4658      	mov	r0, fp
 80091ba:	f000 fa2f 	bl	800961c <__multadd>
 80091be:	9b08      	ldr	r3, [sp, #32]
 80091c0:	4605      	mov	r5, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc61      	bgt.n	800928a <_dtoa_r+0x952>
 80091c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	dc3b      	bgt.n	8009244 <_dtoa_r+0x90c>
 80091cc:	e05d      	b.n	800928a <_dtoa_r+0x952>
 80091ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091d4:	e746      	b.n	8009064 <_dtoa_r+0x72c>
 80091d6:	9b07      	ldr	r3, [sp, #28]
 80091d8:	1e5c      	subs	r4, r3, #1
 80091da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091dc:	42a3      	cmp	r3, r4
 80091de:	bfbf      	itttt	lt
 80091e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80091e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80091e4:	1ae3      	sublt	r3, r4, r3
 80091e6:	18d2      	addlt	r2, r2, r3
 80091e8:	bfa8      	it	ge
 80091ea:	1b1c      	subge	r4, r3, r4
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	bfbe      	ittt	lt
 80091f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80091f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80091f4:	2400      	movlt	r4, #0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	bfb5      	itete	lt
 80091fa:	eba8 0603 	sublt.w	r6, r8, r3
 80091fe:	4646      	movge	r6, r8
 8009200:	2300      	movlt	r3, #0
 8009202:	9b07      	ldrge	r3, [sp, #28]
 8009204:	e730      	b.n	8009068 <_dtoa_r+0x730>
 8009206:	4646      	mov	r6, r8
 8009208:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800920a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800920c:	e735      	b.n	800907a <_dtoa_r+0x742>
 800920e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009210:	e75c      	b.n	80090cc <_dtoa_r+0x794>
 8009212:	2300      	movs	r3, #0
 8009214:	e788      	b.n	8009128 <_dtoa_r+0x7f0>
 8009216:	9b02      	ldr	r3, [sp, #8]
 8009218:	e786      	b.n	8009128 <_dtoa_r+0x7f0>
 800921a:	2300      	movs	r3, #0
 800921c:	930a      	str	r3, [sp, #40]	@ 0x28
 800921e:	e788      	b.n	8009132 <_dtoa_r+0x7fa>
 8009220:	d09f      	beq.n	8009162 <_dtoa_r+0x82a>
 8009222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009224:	331c      	adds	r3, #28
 8009226:	441a      	add	r2, r3
 8009228:	4498      	add	r8, r3
 800922a:	441e      	add	r6, r3
 800922c:	9209      	str	r2, [sp, #36]	@ 0x24
 800922e:	e798      	b.n	8009162 <_dtoa_r+0x82a>
 8009230:	4603      	mov	r3, r0
 8009232:	e7f6      	b.n	8009222 <_dtoa_r+0x8ea>
 8009234:	9b07      	ldr	r3, [sp, #28]
 8009236:	9704      	str	r7, [sp, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	dc20      	bgt.n	800927e <_dtoa_r+0x946>
 800923c:	9308      	str	r3, [sp, #32]
 800923e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009240:	2b02      	cmp	r3, #2
 8009242:	dd1e      	ble.n	8009282 <_dtoa_r+0x94a>
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f47f aebc 	bne.w	8008fc4 <_dtoa_r+0x68c>
 800924c:	4621      	mov	r1, r4
 800924e:	2205      	movs	r2, #5
 8009250:	4658      	mov	r0, fp
 8009252:	f000 f9e3 	bl	800961c <__multadd>
 8009256:	4601      	mov	r1, r0
 8009258:	4604      	mov	r4, r0
 800925a:	4648      	mov	r0, r9
 800925c:	f000 fbf4 	bl	8009a48 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	f77f aeaf 	ble.w	8008fc4 <_dtoa_r+0x68c>
 8009266:	2331      	movs	r3, #49	@ 0x31
 8009268:	4656      	mov	r6, sl
 800926a:	f806 3b01 	strb.w	r3, [r6], #1
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	3301      	adds	r3, #1
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	e6aa      	b.n	8008fcc <_dtoa_r+0x694>
 8009276:	9c07      	ldr	r4, [sp, #28]
 8009278:	9704      	str	r7, [sp, #16]
 800927a:	4625      	mov	r5, r4
 800927c:	e7f3      	b.n	8009266 <_dtoa_r+0x92e>
 800927e:	9b07      	ldr	r3, [sp, #28]
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8104 	beq.w	8009492 <_dtoa_r+0xb5a>
 800928a:	2e00      	cmp	r6, #0
 800928c:	dd05      	ble.n	800929a <_dtoa_r+0x962>
 800928e:	4629      	mov	r1, r5
 8009290:	4632      	mov	r2, r6
 8009292:	4658      	mov	r0, fp
 8009294:	f000 fb6c 	bl	8009970 <__lshift>
 8009298:	4605      	mov	r5, r0
 800929a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05a      	beq.n	8009356 <_dtoa_r+0xa1e>
 80092a0:	4658      	mov	r0, fp
 80092a2:	6869      	ldr	r1, [r5, #4]
 80092a4:	f000 f958 	bl	8009558 <_Balloc>
 80092a8:	4606      	mov	r6, r0
 80092aa:	b928      	cbnz	r0, 80092b8 <_dtoa_r+0x980>
 80092ac:	4602      	mov	r2, r0
 80092ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092b2:	4b83      	ldr	r3, [pc, #524]	@ (80094c0 <_dtoa_r+0xb88>)
 80092b4:	f7ff bb54 	b.w	8008960 <_dtoa_r+0x28>
 80092b8:	692a      	ldr	r2, [r5, #16]
 80092ba:	f105 010c 	add.w	r1, r5, #12
 80092be:	3202      	adds	r2, #2
 80092c0:	0092      	lsls	r2, r2, #2
 80092c2:	300c      	adds	r0, #12
 80092c4:	f000 fee2 	bl	800a08c <memcpy>
 80092c8:	2201      	movs	r2, #1
 80092ca:	4631      	mov	r1, r6
 80092cc:	4658      	mov	r0, fp
 80092ce:	f000 fb4f 	bl	8009970 <__lshift>
 80092d2:	462f      	mov	r7, r5
 80092d4:	4605      	mov	r5, r0
 80092d6:	f10a 0301 	add.w	r3, sl, #1
 80092da:	9307      	str	r3, [sp, #28]
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	4453      	add	r3, sl
 80092e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092e2:	9b02      	ldr	r3, [sp, #8]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	4621      	mov	r1, r4
 80092ee:	3b01      	subs	r3, #1
 80092f0:	4648      	mov	r0, r9
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	f7ff fa97 	bl	8008826 <quorem>
 80092f8:	4639      	mov	r1, r7
 80092fa:	9008      	str	r0, [sp, #32]
 80092fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009300:	4648      	mov	r0, r9
 8009302:	f000 fba1 	bl	8009a48 <__mcmp>
 8009306:	462a      	mov	r2, r5
 8009308:	9009      	str	r0, [sp, #36]	@ 0x24
 800930a:	4621      	mov	r1, r4
 800930c:	4658      	mov	r0, fp
 800930e:	f000 fbb7 	bl	8009a80 <__mdiff>
 8009312:	68c2      	ldr	r2, [r0, #12]
 8009314:	4606      	mov	r6, r0
 8009316:	bb02      	cbnz	r2, 800935a <_dtoa_r+0xa22>
 8009318:	4601      	mov	r1, r0
 800931a:	4648      	mov	r0, r9
 800931c:	f000 fb94 	bl	8009a48 <__mcmp>
 8009320:	4602      	mov	r2, r0
 8009322:	4631      	mov	r1, r6
 8009324:	4658      	mov	r0, fp
 8009326:	920c      	str	r2, [sp, #48]	@ 0x30
 8009328:	f000 f956 	bl	80095d8 <_Bfree>
 800932c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800932e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009330:	9e07      	ldr	r6, [sp, #28]
 8009332:	ea43 0102 	orr.w	r1, r3, r2
 8009336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009338:	4319      	orrs	r1, r3
 800933a:	d110      	bne.n	800935e <_dtoa_r+0xa26>
 800933c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009340:	d029      	beq.n	8009396 <_dtoa_r+0xa5e>
 8009342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd02      	ble.n	800934e <_dtoa_r+0xa16>
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	f883 8000 	strb.w	r8, [r3]
 8009354:	e63b      	b.n	8008fce <_dtoa_r+0x696>
 8009356:	4628      	mov	r0, r5
 8009358:	e7bb      	b.n	80092d2 <_dtoa_r+0x99a>
 800935a:	2201      	movs	r2, #1
 800935c:	e7e1      	b.n	8009322 <_dtoa_r+0x9ea>
 800935e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	db04      	blt.n	800936e <_dtoa_r+0xa36>
 8009364:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009366:	430b      	orrs	r3, r1
 8009368:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800936a:	430b      	orrs	r3, r1
 800936c:	d120      	bne.n	80093b0 <_dtoa_r+0xa78>
 800936e:	2a00      	cmp	r2, #0
 8009370:	dded      	ble.n	800934e <_dtoa_r+0xa16>
 8009372:	4649      	mov	r1, r9
 8009374:	2201      	movs	r2, #1
 8009376:	4658      	mov	r0, fp
 8009378:	f000 fafa 	bl	8009970 <__lshift>
 800937c:	4621      	mov	r1, r4
 800937e:	4681      	mov	r9, r0
 8009380:	f000 fb62 	bl	8009a48 <__mcmp>
 8009384:	2800      	cmp	r0, #0
 8009386:	dc03      	bgt.n	8009390 <_dtoa_r+0xa58>
 8009388:	d1e1      	bne.n	800934e <_dtoa_r+0xa16>
 800938a:	f018 0f01 	tst.w	r8, #1
 800938e:	d0de      	beq.n	800934e <_dtoa_r+0xa16>
 8009390:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009394:	d1d8      	bne.n	8009348 <_dtoa_r+0xa10>
 8009396:	2339      	movs	r3, #57	@ 0x39
 8009398:	9a02      	ldr	r2, [sp, #8]
 800939a:	7013      	strb	r3, [r2, #0]
 800939c:	4633      	mov	r3, r6
 800939e:	461e      	mov	r6, r3
 80093a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2a39      	cmp	r2, #57	@ 0x39
 80093a8:	d052      	beq.n	8009450 <_dtoa_r+0xb18>
 80093aa:	3201      	adds	r2, #1
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e60e      	b.n	8008fce <_dtoa_r+0x696>
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	dd07      	ble.n	80093c4 <_dtoa_r+0xa8c>
 80093b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093b8:	d0ed      	beq.n	8009396 <_dtoa_r+0xa5e>
 80093ba:	9a02      	ldr	r2, [sp, #8]
 80093bc:	f108 0301 	add.w	r3, r8, #1
 80093c0:	7013      	strb	r3, [r2, #0]
 80093c2:	e604      	b.n	8008fce <_dtoa_r+0x696>
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80093cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d028      	beq.n	8009424 <_dtoa_r+0xaec>
 80093d2:	4649      	mov	r1, r9
 80093d4:	2300      	movs	r3, #0
 80093d6:	220a      	movs	r2, #10
 80093d8:	4658      	mov	r0, fp
 80093da:	f000 f91f 	bl	800961c <__multadd>
 80093de:	42af      	cmp	r7, r5
 80093e0:	4681      	mov	r9, r0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	f04f 020a 	mov.w	r2, #10
 80093ea:	4639      	mov	r1, r7
 80093ec:	4658      	mov	r0, fp
 80093ee:	d107      	bne.n	8009400 <_dtoa_r+0xac8>
 80093f0:	f000 f914 	bl	800961c <__multadd>
 80093f4:	4607      	mov	r7, r0
 80093f6:	4605      	mov	r5, r0
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	3301      	adds	r3, #1
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	e774      	b.n	80092ea <_dtoa_r+0x9b2>
 8009400:	f000 f90c 	bl	800961c <__multadd>
 8009404:	4629      	mov	r1, r5
 8009406:	4607      	mov	r7, r0
 8009408:	2300      	movs	r3, #0
 800940a:	220a      	movs	r2, #10
 800940c:	4658      	mov	r0, fp
 800940e:	f000 f905 	bl	800961c <__multadd>
 8009412:	4605      	mov	r5, r0
 8009414:	e7f0      	b.n	80093f8 <_dtoa_r+0xac0>
 8009416:	9b08      	ldr	r3, [sp, #32]
 8009418:	2700      	movs	r7, #0
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfcc      	ite	gt
 800941e:	461e      	movgt	r6, r3
 8009420:	2601      	movle	r6, #1
 8009422:	4456      	add	r6, sl
 8009424:	4649      	mov	r1, r9
 8009426:	2201      	movs	r2, #1
 8009428:	4658      	mov	r0, fp
 800942a:	f000 faa1 	bl	8009970 <__lshift>
 800942e:	4621      	mov	r1, r4
 8009430:	4681      	mov	r9, r0
 8009432:	f000 fb09 	bl	8009a48 <__mcmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	dcb0      	bgt.n	800939c <_dtoa_r+0xa64>
 800943a:	d102      	bne.n	8009442 <_dtoa_r+0xb0a>
 800943c:	f018 0f01 	tst.w	r8, #1
 8009440:	d1ac      	bne.n	800939c <_dtoa_r+0xa64>
 8009442:	4633      	mov	r3, r6
 8009444:	461e      	mov	r6, r3
 8009446:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800944a:	2a30      	cmp	r2, #48	@ 0x30
 800944c:	d0fa      	beq.n	8009444 <_dtoa_r+0xb0c>
 800944e:	e5be      	b.n	8008fce <_dtoa_r+0x696>
 8009450:	459a      	cmp	sl, r3
 8009452:	d1a4      	bne.n	800939e <_dtoa_r+0xa66>
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	3301      	adds	r3, #1
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	2331      	movs	r3, #49	@ 0x31
 800945c:	f88a 3000 	strb.w	r3, [sl]
 8009460:	e5b5      	b.n	8008fce <_dtoa_r+0x696>
 8009462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009464:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80094c4 <_dtoa_r+0xb8c>
 8009468:	b11b      	cbz	r3, 8009472 <_dtoa_r+0xb3a>
 800946a:	f10a 0308 	add.w	r3, sl, #8
 800946e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4650      	mov	r0, sl
 8009474:	b017      	add	sp, #92	@ 0x5c
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800947c:	2b01      	cmp	r3, #1
 800947e:	f77f ae3d 	ble.w	80090fc <_dtoa_r+0x7c4>
 8009482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009484:	930a      	str	r3, [sp, #40]	@ 0x28
 8009486:	2001      	movs	r0, #1
 8009488:	e65b      	b.n	8009142 <_dtoa_r+0x80a>
 800948a:	9b08      	ldr	r3, [sp, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f77f aed6 	ble.w	800923e <_dtoa_r+0x906>
 8009492:	4656      	mov	r6, sl
 8009494:	4621      	mov	r1, r4
 8009496:	4648      	mov	r0, r9
 8009498:	f7ff f9c5 	bl	8008826 <quorem>
 800949c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	f806 8b01 	strb.w	r8, [r6], #1
 80094a6:	eba6 020a 	sub.w	r2, r6, sl
 80094aa:	4293      	cmp	r3, r2
 80094ac:	ddb3      	ble.n	8009416 <_dtoa_r+0xade>
 80094ae:	4649      	mov	r1, r9
 80094b0:	2300      	movs	r3, #0
 80094b2:	220a      	movs	r2, #10
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 f8b1 	bl	800961c <__multadd>
 80094ba:	4681      	mov	r9, r0
 80094bc:	e7ea      	b.n	8009494 <_dtoa_r+0xb5c>
 80094be:	bf00      	nop
 80094c0:	0800a972 	.word	0x0800a972
 80094c4:	0800a8f6 	.word	0x0800a8f6

080094c8 <_free_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4605      	mov	r5, r0
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d040      	beq.n	8009552 <_free_r+0x8a>
 80094d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d4:	1f0c      	subs	r4, r1, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bfb8      	it	lt
 80094da:	18e4      	addlt	r4, r4, r3
 80094dc:	f7fe fb78 	bl	8007bd0 <__malloc_lock>
 80094e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009554 <_free_r+0x8c>)
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	b933      	cbnz	r3, 80094f4 <_free_r+0x2c>
 80094e6:	6063      	str	r3, [r4, #4]
 80094e8:	6014      	str	r4, [r2, #0]
 80094ea:	4628      	mov	r0, r5
 80094ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f0:	f7fe bb74 	b.w	8007bdc <__malloc_unlock>
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	d908      	bls.n	800950a <_free_r+0x42>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	1821      	adds	r1, r4, r0
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf01      	itttt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	e7ed      	b.n	80094e6 <_free_r+0x1e>
 800950a:	461a      	mov	r2, r3
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	b10b      	cbz	r3, 8009514 <_free_r+0x4c>
 8009510:	42a3      	cmp	r3, r4
 8009512:	d9fa      	bls.n	800950a <_free_r+0x42>
 8009514:	6811      	ldr	r1, [r2, #0]
 8009516:	1850      	adds	r0, r2, r1
 8009518:	42a0      	cmp	r0, r4
 800951a:	d10b      	bne.n	8009534 <_free_r+0x6c>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	4401      	add	r1, r0
 8009520:	1850      	adds	r0, r2, r1
 8009522:	4283      	cmp	r3, r0
 8009524:	6011      	str	r1, [r2, #0]
 8009526:	d1e0      	bne.n	80094ea <_free_r+0x22>
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	4408      	add	r0, r1
 800952e:	6010      	str	r0, [r2, #0]
 8009530:	6053      	str	r3, [r2, #4]
 8009532:	e7da      	b.n	80094ea <_free_r+0x22>
 8009534:	d902      	bls.n	800953c <_free_r+0x74>
 8009536:	230c      	movs	r3, #12
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	e7d6      	b.n	80094ea <_free_r+0x22>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	1821      	adds	r1, r4, r0
 8009540:	428b      	cmp	r3, r1
 8009542:	bf01      	itttt	eq
 8009544:	6819      	ldreq	r1, [r3, #0]
 8009546:	685b      	ldreq	r3, [r3, #4]
 8009548:	1809      	addeq	r1, r1, r0
 800954a:	6021      	streq	r1, [r4, #0]
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	6054      	str	r4, [r2, #4]
 8009550:	e7cb      	b.n	80094ea <_free_r+0x22>
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20000428 	.word	0x20000428

08009558 <_Balloc>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	69c6      	ldr	r6, [r0, #28]
 800955c:	4604      	mov	r4, r0
 800955e:	460d      	mov	r5, r1
 8009560:	b976      	cbnz	r6, 8009580 <_Balloc+0x28>
 8009562:	2010      	movs	r0, #16
 8009564:	f7fe fa82 	bl	8007a6c <malloc>
 8009568:	4602      	mov	r2, r0
 800956a:	61e0      	str	r0, [r4, #28]
 800956c:	b920      	cbnz	r0, 8009578 <_Balloc+0x20>
 800956e:	216b      	movs	r1, #107	@ 0x6b
 8009570:	4b17      	ldr	r3, [pc, #92]	@ (80095d0 <_Balloc+0x78>)
 8009572:	4818      	ldr	r0, [pc, #96]	@ (80095d4 <_Balloc+0x7c>)
 8009574:	f000 fd98 	bl	800a0a8 <__assert_func>
 8009578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800957c:	6006      	str	r6, [r0, #0]
 800957e:	60c6      	str	r6, [r0, #12]
 8009580:	69e6      	ldr	r6, [r4, #28]
 8009582:	68f3      	ldr	r3, [r6, #12]
 8009584:	b183      	cbz	r3, 80095a8 <_Balloc+0x50>
 8009586:	69e3      	ldr	r3, [r4, #28]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800958e:	b9b8      	cbnz	r0, 80095c0 <_Balloc+0x68>
 8009590:	2101      	movs	r1, #1
 8009592:	fa01 f605 	lsl.w	r6, r1, r5
 8009596:	1d72      	adds	r2, r6, #5
 8009598:	4620      	mov	r0, r4
 800959a:	0092      	lsls	r2, r2, #2
 800959c:	f000 fda2 	bl	800a0e4 <_calloc_r>
 80095a0:	b160      	cbz	r0, 80095bc <_Balloc+0x64>
 80095a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095a6:	e00e      	b.n	80095c6 <_Balloc+0x6e>
 80095a8:	2221      	movs	r2, #33	@ 0x21
 80095aa:	2104      	movs	r1, #4
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fd99 	bl	800a0e4 <_calloc_r>
 80095b2:	69e3      	ldr	r3, [r4, #28]
 80095b4:	60f0      	str	r0, [r6, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e4      	bne.n	8009586 <_Balloc+0x2e>
 80095bc:	2000      	movs	r0, #0
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	6802      	ldr	r2, [r0, #0]
 80095c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095c6:	2300      	movs	r3, #0
 80095c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095cc:	e7f7      	b.n	80095be <_Balloc+0x66>
 80095ce:	bf00      	nop
 80095d0:	0800a903 	.word	0x0800a903
 80095d4:	0800a983 	.word	0x0800a983

080095d8 <_Bfree>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	69c6      	ldr	r6, [r0, #28]
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Bfree+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7fe fa42 	bl	8007a6c <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	61e8      	str	r0, [r5, #28]
 80095ec:	b920      	cbnz	r0, 80095f8 <_Bfree+0x20>
 80095ee:	218f      	movs	r1, #143	@ 0x8f
 80095f0:	4b08      	ldr	r3, [pc, #32]	@ (8009614 <_Bfree+0x3c>)
 80095f2:	4809      	ldr	r0, [pc, #36]	@ (8009618 <_Bfree+0x40>)
 80095f4:	f000 fd58 	bl	800a0a8 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	b13c      	cbz	r4, 8009612 <_Bfree+0x3a>
 8009602:	69eb      	ldr	r3, [r5, #28]
 8009604:	6862      	ldr	r2, [r4, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800960c:	6021      	str	r1, [r4, #0]
 800960e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	0800a903 	.word	0x0800a903
 8009618:	0800a983 	.word	0x0800a983

0800961c <__multadd>:
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	4607      	mov	r7, r0
 8009622:	460c      	mov	r4, r1
 8009624:	461e      	mov	r6, r3
 8009626:	2000      	movs	r0, #0
 8009628:	690d      	ldr	r5, [r1, #16]
 800962a:	f101 0c14 	add.w	ip, r1, #20
 800962e:	f8dc 3000 	ldr.w	r3, [ip]
 8009632:	3001      	adds	r0, #1
 8009634:	b299      	uxth	r1, r3
 8009636:	fb02 6101 	mla	r1, r2, r1, r6
 800963a:	0c1e      	lsrs	r6, r3, #16
 800963c:	0c0b      	lsrs	r3, r1, #16
 800963e:	fb02 3306 	mla	r3, r2, r6, r3
 8009642:	b289      	uxth	r1, r1
 8009644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009648:	4285      	cmp	r5, r0
 800964a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800964e:	f84c 1b04 	str.w	r1, [ip], #4
 8009652:	dcec      	bgt.n	800962e <__multadd+0x12>
 8009654:	b30e      	cbz	r6, 800969a <__multadd+0x7e>
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	42ab      	cmp	r3, r5
 800965a:	dc19      	bgt.n	8009690 <__multadd+0x74>
 800965c:	6861      	ldr	r1, [r4, #4]
 800965e:	4638      	mov	r0, r7
 8009660:	3101      	adds	r1, #1
 8009662:	f7ff ff79 	bl	8009558 <_Balloc>
 8009666:	4680      	mov	r8, r0
 8009668:	b928      	cbnz	r0, 8009676 <__multadd+0x5a>
 800966a:	4602      	mov	r2, r0
 800966c:	21ba      	movs	r1, #186	@ 0xba
 800966e:	4b0c      	ldr	r3, [pc, #48]	@ (80096a0 <__multadd+0x84>)
 8009670:	480c      	ldr	r0, [pc, #48]	@ (80096a4 <__multadd+0x88>)
 8009672:	f000 fd19 	bl	800a0a8 <__assert_func>
 8009676:	6922      	ldr	r2, [r4, #16]
 8009678:	f104 010c 	add.w	r1, r4, #12
 800967c:	3202      	adds	r2, #2
 800967e:	0092      	lsls	r2, r2, #2
 8009680:	300c      	adds	r0, #12
 8009682:	f000 fd03 	bl	800a08c <memcpy>
 8009686:	4621      	mov	r1, r4
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ffa5 	bl	80095d8 <_Bfree>
 800968e:	4644      	mov	r4, r8
 8009690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009694:	3501      	adds	r5, #1
 8009696:	615e      	str	r6, [r3, #20]
 8009698:	6125      	str	r5, [r4, #16]
 800969a:	4620      	mov	r0, r4
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	0800a972 	.word	0x0800a972
 80096a4:	0800a983 	.word	0x0800a983

080096a8 <__hi0bits>:
 80096a8:	4603      	mov	r3, r0
 80096aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096ae:	bf3a      	itte	cc
 80096b0:	0403      	lslcc	r3, r0, #16
 80096b2:	2010      	movcc	r0, #16
 80096b4:	2000      	movcs	r0, #0
 80096b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096ba:	bf3c      	itt	cc
 80096bc:	021b      	lslcc	r3, r3, #8
 80096be:	3008      	addcc	r0, #8
 80096c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c4:	bf3c      	itt	cc
 80096c6:	011b      	lslcc	r3, r3, #4
 80096c8:	3004      	addcc	r0, #4
 80096ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ce:	bf3c      	itt	cc
 80096d0:	009b      	lslcc	r3, r3, #2
 80096d2:	3002      	addcc	r0, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db05      	blt.n	80096e4 <__hi0bits+0x3c>
 80096d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096dc:	f100 0001 	add.w	r0, r0, #1
 80096e0:	bf08      	it	eq
 80096e2:	2020      	moveq	r0, #32
 80096e4:	4770      	bx	lr

080096e6 <__lo0bits>:
 80096e6:	6803      	ldr	r3, [r0, #0]
 80096e8:	4602      	mov	r2, r0
 80096ea:	f013 0007 	ands.w	r0, r3, #7
 80096ee:	d00b      	beq.n	8009708 <__lo0bits+0x22>
 80096f0:	07d9      	lsls	r1, r3, #31
 80096f2:	d421      	bmi.n	8009738 <__lo0bits+0x52>
 80096f4:	0798      	lsls	r0, r3, #30
 80096f6:	bf49      	itett	mi
 80096f8:	085b      	lsrmi	r3, r3, #1
 80096fa:	089b      	lsrpl	r3, r3, #2
 80096fc:	2001      	movmi	r0, #1
 80096fe:	6013      	strmi	r3, [r2, #0]
 8009700:	bf5c      	itt	pl
 8009702:	2002      	movpl	r0, #2
 8009704:	6013      	strpl	r3, [r2, #0]
 8009706:	4770      	bx	lr
 8009708:	b299      	uxth	r1, r3
 800970a:	b909      	cbnz	r1, 8009710 <__lo0bits+0x2a>
 800970c:	2010      	movs	r0, #16
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	b2d9      	uxtb	r1, r3
 8009712:	b909      	cbnz	r1, 8009718 <__lo0bits+0x32>
 8009714:	3008      	adds	r0, #8
 8009716:	0a1b      	lsrs	r3, r3, #8
 8009718:	0719      	lsls	r1, r3, #28
 800971a:	bf04      	itt	eq
 800971c:	091b      	lsreq	r3, r3, #4
 800971e:	3004      	addeq	r0, #4
 8009720:	0799      	lsls	r1, r3, #30
 8009722:	bf04      	itt	eq
 8009724:	089b      	lsreq	r3, r3, #2
 8009726:	3002      	addeq	r0, #2
 8009728:	07d9      	lsls	r1, r3, #31
 800972a:	d403      	bmi.n	8009734 <__lo0bits+0x4e>
 800972c:	085b      	lsrs	r3, r3, #1
 800972e:	f100 0001 	add.w	r0, r0, #1
 8009732:	d003      	beq.n	800973c <__lo0bits+0x56>
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4770      	bx	lr
 8009738:	2000      	movs	r0, #0
 800973a:	4770      	bx	lr
 800973c:	2020      	movs	r0, #32
 800973e:	4770      	bx	lr

08009740 <__i2b>:
 8009740:	b510      	push	{r4, lr}
 8009742:	460c      	mov	r4, r1
 8009744:	2101      	movs	r1, #1
 8009746:	f7ff ff07 	bl	8009558 <_Balloc>
 800974a:	4602      	mov	r2, r0
 800974c:	b928      	cbnz	r0, 800975a <__i2b+0x1a>
 800974e:	f240 1145 	movw	r1, #325	@ 0x145
 8009752:	4b04      	ldr	r3, [pc, #16]	@ (8009764 <__i2b+0x24>)
 8009754:	4804      	ldr	r0, [pc, #16]	@ (8009768 <__i2b+0x28>)
 8009756:	f000 fca7 	bl	800a0a8 <__assert_func>
 800975a:	2301      	movs	r3, #1
 800975c:	6144      	str	r4, [r0, #20]
 800975e:	6103      	str	r3, [r0, #16]
 8009760:	bd10      	pop	{r4, pc}
 8009762:	bf00      	nop
 8009764:	0800a972 	.word	0x0800a972
 8009768:	0800a983 	.word	0x0800a983

0800976c <__multiply>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4614      	mov	r4, r2
 8009772:	690a      	ldr	r2, [r1, #16]
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	460f      	mov	r7, r1
 8009778:	429a      	cmp	r2, r3
 800977a:	bfa2      	ittt	ge
 800977c:	4623      	movge	r3, r4
 800977e:	460c      	movge	r4, r1
 8009780:	461f      	movge	r7, r3
 8009782:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009786:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	eb0a 0609 	add.w	r6, sl, r9
 8009792:	42b3      	cmp	r3, r6
 8009794:	b085      	sub	sp, #20
 8009796:	bfb8      	it	lt
 8009798:	3101      	addlt	r1, #1
 800979a:	f7ff fedd 	bl	8009558 <_Balloc>
 800979e:	b930      	cbnz	r0, 80097ae <__multiply+0x42>
 80097a0:	4602      	mov	r2, r0
 80097a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097a6:	4b43      	ldr	r3, [pc, #268]	@ (80098b4 <__multiply+0x148>)
 80097a8:	4843      	ldr	r0, [pc, #268]	@ (80098b8 <__multiply+0x14c>)
 80097aa:	f000 fc7d 	bl	800a0a8 <__assert_func>
 80097ae:	f100 0514 	add.w	r5, r0, #20
 80097b2:	462b      	mov	r3, r5
 80097b4:	2200      	movs	r2, #0
 80097b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097ba:	4543      	cmp	r3, r8
 80097bc:	d321      	bcc.n	8009802 <__multiply+0x96>
 80097be:	f107 0114 	add.w	r1, r7, #20
 80097c2:	f104 0214 	add.w	r2, r4, #20
 80097c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80097ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	1b13      	subs	r3, r2, r4
 80097d2:	3b15      	subs	r3, #21
 80097d4:	f023 0303 	bic.w	r3, r3, #3
 80097d8:	3304      	adds	r3, #4
 80097da:	f104 0715 	add.w	r7, r4, #21
 80097de:	42ba      	cmp	r2, r7
 80097e0:	bf38      	it	cc
 80097e2:	2304      	movcc	r3, #4
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	9b02      	ldr	r3, [sp, #8]
 80097e8:	9103      	str	r1, [sp, #12]
 80097ea:	428b      	cmp	r3, r1
 80097ec:	d80c      	bhi.n	8009808 <__multiply+0x9c>
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	dd03      	ble.n	80097fa <__multiply+0x8e>
 80097f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d05a      	beq.n	80098b0 <__multiply+0x144>
 80097fa:	6106      	str	r6, [r0, #16]
 80097fc:	b005      	add	sp, #20
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	f843 2b04 	str.w	r2, [r3], #4
 8009806:	e7d8      	b.n	80097ba <__multiply+0x4e>
 8009808:	f8b1 a000 	ldrh.w	sl, [r1]
 800980c:	f1ba 0f00 	cmp.w	sl, #0
 8009810:	d023      	beq.n	800985a <__multiply+0xee>
 8009812:	46a9      	mov	r9, r5
 8009814:	f04f 0c00 	mov.w	ip, #0
 8009818:	f104 0e14 	add.w	lr, r4, #20
 800981c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009820:	f8d9 3000 	ldr.w	r3, [r9]
 8009824:	fa1f fb87 	uxth.w	fp, r7
 8009828:	b29b      	uxth	r3, r3
 800982a:	fb0a 330b 	mla	r3, sl, fp, r3
 800982e:	4463      	add	r3, ip
 8009830:	f8d9 c000 	ldr.w	ip, [r9]
 8009834:	0c3f      	lsrs	r7, r7, #16
 8009836:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800983a:	fb0a c707 	mla	r7, sl, r7, ip
 800983e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009842:	b29b      	uxth	r3, r3
 8009844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009848:	4572      	cmp	r2, lr
 800984a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800984e:	f849 3b04 	str.w	r3, [r9], #4
 8009852:	d8e3      	bhi.n	800981c <__multiply+0xb0>
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	f845 c003 	str.w	ip, [r5, r3]
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	3104      	adds	r1, #4
 800985e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009862:	f1b9 0f00 	cmp.w	r9, #0
 8009866:	d021      	beq.n	80098ac <__multiply+0x140>
 8009868:	46ae      	mov	lr, r5
 800986a:	f04f 0a00 	mov.w	sl, #0
 800986e:	682b      	ldr	r3, [r5, #0]
 8009870:	f104 0c14 	add.w	ip, r4, #20
 8009874:	f8bc b000 	ldrh.w	fp, [ip]
 8009878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800987c:	b29b      	uxth	r3, r3
 800987e:	fb09 770b 	mla	r7, r9, fp, r7
 8009882:	4457      	add	r7, sl
 8009884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009888:	f84e 3b04 	str.w	r3, [lr], #4
 800988c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009894:	f8be 3000 	ldrh.w	r3, [lr]
 8009898:	4562      	cmp	r2, ip
 800989a:	fb09 330a 	mla	r3, r9, sl, r3
 800989e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80098a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098a6:	d8e5      	bhi.n	8009874 <__multiply+0x108>
 80098a8:	9f01      	ldr	r7, [sp, #4]
 80098aa:	51eb      	str	r3, [r5, r7]
 80098ac:	3504      	adds	r5, #4
 80098ae:	e79a      	b.n	80097e6 <__multiply+0x7a>
 80098b0:	3e01      	subs	r6, #1
 80098b2:	e79c      	b.n	80097ee <__multiply+0x82>
 80098b4:	0800a972 	.word	0x0800a972
 80098b8:	0800a983 	.word	0x0800a983

080098bc <__pow5mult>:
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	4615      	mov	r5, r2
 80098c2:	f012 0203 	ands.w	r2, r2, #3
 80098c6:	4607      	mov	r7, r0
 80098c8:	460e      	mov	r6, r1
 80098ca:	d007      	beq.n	80098dc <__pow5mult+0x20>
 80098cc:	4c25      	ldr	r4, [pc, #148]	@ (8009964 <__pow5mult+0xa8>)
 80098ce:	3a01      	subs	r2, #1
 80098d0:	2300      	movs	r3, #0
 80098d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098d6:	f7ff fea1 	bl	800961c <__multadd>
 80098da:	4606      	mov	r6, r0
 80098dc:	10ad      	asrs	r5, r5, #2
 80098de:	d03d      	beq.n	800995c <__pow5mult+0xa0>
 80098e0:	69fc      	ldr	r4, [r7, #28]
 80098e2:	b97c      	cbnz	r4, 8009904 <__pow5mult+0x48>
 80098e4:	2010      	movs	r0, #16
 80098e6:	f7fe f8c1 	bl	8007a6c <malloc>
 80098ea:	4602      	mov	r2, r0
 80098ec:	61f8      	str	r0, [r7, #28]
 80098ee:	b928      	cbnz	r0, 80098fc <__pow5mult+0x40>
 80098f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009968 <__pow5mult+0xac>)
 80098f6:	481d      	ldr	r0, [pc, #116]	@ (800996c <__pow5mult+0xb0>)
 80098f8:	f000 fbd6 	bl	800a0a8 <__assert_func>
 80098fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009900:	6004      	str	r4, [r0, #0]
 8009902:	60c4      	str	r4, [r0, #12]
 8009904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800990c:	b94c      	cbnz	r4, 8009922 <__pow5mult+0x66>
 800990e:	f240 2171 	movw	r1, #625	@ 0x271
 8009912:	4638      	mov	r0, r7
 8009914:	f7ff ff14 	bl	8009740 <__i2b>
 8009918:	2300      	movs	r3, #0
 800991a:	4604      	mov	r4, r0
 800991c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009920:	6003      	str	r3, [r0, #0]
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	07eb      	lsls	r3, r5, #31
 8009928:	d50a      	bpl.n	8009940 <__pow5mult+0x84>
 800992a:	4631      	mov	r1, r6
 800992c:	4622      	mov	r2, r4
 800992e:	4638      	mov	r0, r7
 8009930:	f7ff ff1c 	bl	800976c <__multiply>
 8009934:	4680      	mov	r8, r0
 8009936:	4631      	mov	r1, r6
 8009938:	4638      	mov	r0, r7
 800993a:	f7ff fe4d 	bl	80095d8 <_Bfree>
 800993e:	4646      	mov	r6, r8
 8009940:	106d      	asrs	r5, r5, #1
 8009942:	d00b      	beq.n	800995c <__pow5mult+0xa0>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	b938      	cbnz	r0, 8009958 <__pow5mult+0x9c>
 8009948:	4622      	mov	r2, r4
 800994a:	4621      	mov	r1, r4
 800994c:	4638      	mov	r0, r7
 800994e:	f7ff ff0d 	bl	800976c <__multiply>
 8009952:	6020      	str	r0, [r4, #0]
 8009954:	f8c0 9000 	str.w	r9, [r0]
 8009958:	4604      	mov	r4, r0
 800995a:	e7e4      	b.n	8009926 <__pow5mult+0x6a>
 800995c:	4630      	mov	r0, r6
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009962:	bf00      	nop
 8009964:	0800a9dc 	.word	0x0800a9dc
 8009968:	0800a903 	.word	0x0800a903
 800996c:	0800a983 	.word	0x0800a983

08009970 <__lshift>:
 8009970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	460c      	mov	r4, r1
 8009976:	4607      	mov	r7, r0
 8009978:	4691      	mov	r9, r2
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	6849      	ldr	r1, [r1, #4]
 800997e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009988:	f108 0601 	add.w	r6, r8, #1
 800998c:	42b3      	cmp	r3, r6
 800998e:	db0b      	blt.n	80099a8 <__lshift+0x38>
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff fde1 	bl	8009558 <_Balloc>
 8009996:	4605      	mov	r5, r0
 8009998:	b948      	cbnz	r0, 80099ae <__lshift+0x3e>
 800999a:	4602      	mov	r2, r0
 800999c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099a0:	4b27      	ldr	r3, [pc, #156]	@ (8009a40 <__lshift+0xd0>)
 80099a2:	4828      	ldr	r0, [pc, #160]	@ (8009a44 <__lshift+0xd4>)
 80099a4:	f000 fb80 	bl	800a0a8 <__assert_func>
 80099a8:	3101      	adds	r1, #1
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	e7ee      	b.n	800998c <__lshift+0x1c>
 80099ae:	2300      	movs	r3, #0
 80099b0:	f100 0114 	add.w	r1, r0, #20
 80099b4:	f100 0210 	add.w	r2, r0, #16
 80099b8:	4618      	mov	r0, r3
 80099ba:	4553      	cmp	r3, sl
 80099bc:	db33      	blt.n	8009a26 <__lshift+0xb6>
 80099be:	6920      	ldr	r0, [r4, #16]
 80099c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099c4:	f104 0314 	add.w	r3, r4, #20
 80099c8:	f019 091f 	ands.w	r9, r9, #31
 80099cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099d4:	d02b      	beq.n	8009a2e <__lshift+0xbe>
 80099d6:	468a      	mov	sl, r1
 80099d8:	2200      	movs	r2, #0
 80099da:	f1c9 0e20 	rsb	lr, r9, #32
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	fa00 f009 	lsl.w	r0, r0, r9
 80099e4:	4310      	orrs	r0, r2
 80099e6:	f84a 0b04 	str.w	r0, [sl], #4
 80099ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ee:	459c      	cmp	ip, r3
 80099f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80099f4:	d8f3      	bhi.n	80099de <__lshift+0x6e>
 80099f6:	ebac 0304 	sub.w	r3, ip, r4
 80099fa:	3b15      	subs	r3, #21
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	3304      	adds	r3, #4
 8009a02:	f104 0015 	add.w	r0, r4, #21
 8009a06:	4584      	cmp	ip, r0
 8009a08:	bf38      	it	cc
 8009a0a:	2304      	movcc	r3, #4
 8009a0c:	50ca      	str	r2, [r1, r3]
 8009a0e:	b10a      	cbz	r2, 8009a14 <__lshift+0xa4>
 8009a10:	f108 0602 	add.w	r6, r8, #2
 8009a14:	3e01      	subs	r6, #1
 8009a16:	4638      	mov	r0, r7
 8009a18:	4621      	mov	r1, r4
 8009a1a:	612e      	str	r6, [r5, #16]
 8009a1c:	f7ff fddc 	bl	80095d8 <_Bfree>
 8009a20:	4628      	mov	r0, r5
 8009a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	e7c5      	b.n	80099ba <__lshift+0x4a>
 8009a2e:	3904      	subs	r1, #4
 8009a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a34:	459c      	cmp	ip, r3
 8009a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a3a:	d8f9      	bhi.n	8009a30 <__lshift+0xc0>
 8009a3c:	e7ea      	b.n	8009a14 <__lshift+0xa4>
 8009a3e:	bf00      	nop
 8009a40:	0800a972 	.word	0x0800a972
 8009a44:	0800a983 	.word	0x0800a983

08009a48 <__mcmp>:
 8009a48:	4603      	mov	r3, r0
 8009a4a:	690a      	ldr	r2, [r1, #16]
 8009a4c:	6900      	ldr	r0, [r0, #16]
 8009a4e:	b530      	push	{r4, r5, lr}
 8009a50:	1a80      	subs	r0, r0, r2
 8009a52:	d10e      	bne.n	8009a72 <__mcmp+0x2a>
 8009a54:	3314      	adds	r3, #20
 8009a56:	3114      	adds	r1, #20
 8009a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a68:	4295      	cmp	r5, r2
 8009a6a:	d003      	beq.n	8009a74 <__mcmp+0x2c>
 8009a6c:	d205      	bcs.n	8009a7a <__mcmp+0x32>
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a72:	bd30      	pop	{r4, r5, pc}
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d3f3      	bcc.n	8009a60 <__mcmp+0x18>
 8009a78:	e7fb      	b.n	8009a72 <__mcmp+0x2a>
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	e7f9      	b.n	8009a72 <__mcmp+0x2a>
	...

08009a80 <__mdiff>:
 8009a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4689      	mov	r9, r1
 8009a86:	4606      	mov	r6, r0
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	f7ff ffdb 	bl	8009a48 <__mcmp>
 8009a92:	1e05      	subs	r5, r0, #0
 8009a94:	d112      	bne.n	8009abc <__mdiff+0x3c>
 8009a96:	4629      	mov	r1, r5
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff fd5d 	bl	8009558 <_Balloc>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <__mdiff+0x2e>
 8009aa2:	f240 2137 	movw	r1, #567	@ 0x237
 8009aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ba0 <__mdiff+0x120>)
 8009aa8:	483e      	ldr	r0, [pc, #248]	@ (8009ba4 <__mdiff+0x124>)
 8009aaa:	f000 fafd 	bl	800a0a8 <__assert_func>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	b003      	add	sp, #12
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	bfbc      	itt	lt
 8009abe:	464b      	movlt	r3, r9
 8009ac0:	46a1      	movlt	r9, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ac8:	bfba      	itte	lt
 8009aca:	461c      	movlt	r4, r3
 8009acc:	2501      	movlt	r5, #1
 8009ace:	2500      	movge	r5, #0
 8009ad0:	f7ff fd42 	bl	8009558 <_Balloc>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	b918      	cbnz	r0, 8009ae0 <__mdiff+0x60>
 8009ad8:	f240 2145 	movw	r1, #581	@ 0x245
 8009adc:	4b30      	ldr	r3, [pc, #192]	@ (8009ba0 <__mdiff+0x120>)
 8009ade:	e7e3      	b.n	8009aa8 <__mdiff+0x28>
 8009ae0:	f100 0b14 	add.w	fp, r0, #20
 8009ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ae8:	f109 0310 	add.w	r3, r9, #16
 8009aec:	60c5      	str	r5, [r0, #12]
 8009aee:	f04f 0c00 	mov.w	ip, #0
 8009af2:	f109 0514 	add.w	r5, r9, #20
 8009af6:	46d9      	mov	r9, fp
 8009af8:	6926      	ldr	r6, [r4, #16]
 8009afa:	f104 0e14 	add.w	lr, r4, #20
 8009afe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b12:	b281      	uxth	r1, r0
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	fa1f f38a 	uxth.w	r3, sl
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	0c00      	lsrs	r0, r0, #16
 8009b1e:	4463      	add	r3, ip
 8009b20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b2e:	4576      	cmp	r6, lr
 8009b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b34:	f849 3b04 	str.w	r3, [r9], #4
 8009b38:	d8e6      	bhi.n	8009b08 <__mdiff+0x88>
 8009b3a:	1b33      	subs	r3, r6, r4
 8009b3c:	3b15      	subs	r3, #21
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	3415      	adds	r4, #21
 8009b44:	3304      	adds	r3, #4
 8009b46:	42a6      	cmp	r6, r4
 8009b48:	bf38      	it	cc
 8009b4a:	2304      	movcc	r3, #4
 8009b4c:	441d      	add	r5, r3
 8009b4e:	445b      	add	r3, fp
 8009b50:	461e      	mov	r6, r3
 8009b52:	462c      	mov	r4, r5
 8009b54:	4544      	cmp	r4, r8
 8009b56:	d30e      	bcc.n	8009b76 <__mdiff+0xf6>
 8009b58:	f108 0103 	add.w	r1, r8, #3
 8009b5c:	1b49      	subs	r1, r1, r5
 8009b5e:	f021 0103 	bic.w	r1, r1, #3
 8009b62:	3d03      	subs	r5, #3
 8009b64:	45a8      	cmp	r8, r5
 8009b66:	bf38      	it	cc
 8009b68:	2100      	movcc	r1, #0
 8009b6a:	440b      	add	r3, r1
 8009b6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b70:	b199      	cbz	r1, 8009b9a <__mdiff+0x11a>
 8009b72:	6117      	str	r7, [r2, #16]
 8009b74:	e79e      	b.n	8009ab4 <__mdiff+0x34>
 8009b76:	46e6      	mov	lr, ip
 8009b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b7c:	fa1f fc81 	uxth.w	ip, r1
 8009b80:	44f4      	add	ip, lr
 8009b82:	0c08      	lsrs	r0, r1, #16
 8009b84:	4471      	add	r1, lr
 8009b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b8a:	b289      	uxth	r1, r1
 8009b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b94:	f846 1b04 	str.w	r1, [r6], #4
 8009b98:	e7dc      	b.n	8009b54 <__mdiff+0xd4>
 8009b9a:	3f01      	subs	r7, #1
 8009b9c:	e7e6      	b.n	8009b6c <__mdiff+0xec>
 8009b9e:	bf00      	nop
 8009ba0:	0800a972 	.word	0x0800a972
 8009ba4:	0800a983 	.word	0x0800a983

08009ba8 <__d2b>:
 8009ba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009bac:	2101      	movs	r1, #1
 8009bae:	4690      	mov	r8, r2
 8009bb0:	4699      	mov	r9, r3
 8009bb2:	9e08      	ldr	r6, [sp, #32]
 8009bb4:	f7ff fcd0 	bl	8009558 <_Balloc>
 8009bb8:	4604      	mov	r4, r0
 8009bba:	b930      	cbnz	r0, 8009bca <__d2b+0x22>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bc2:	4b23      	ldr	r3, [pc, #140]	@ (8009c50 <__d2b+0xa8>)
 8009bc4:	4823      	ldr	r0, [pc, #140]	@ (8009c54 <__d2b+0xac>)
 8009bc6:	f000 fa6f 	bl	800a0a8 <__assert_func>
 8009bca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bd2:	b10d      	cbz	r5, 8009bd8 <__d2b+0x30>
 8009bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	f1b8 0300 	subs.w	r3, r8, #0
 8009bde:	d024      	beq.n	8009c2a <__d2b+0x82>
 8009be0:	4668      	mov	r0, sp
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	f7ff fd7f 	bl	80096e6 <__lo0bits>
 8009be8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bec:	b1d8      	cbz	r0, 8009c26 <__d2b+0x7e>
 8009bee:	f1c0 0320 	rsb	r3, r0, #32
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	40c2      	lsrs	r2, r0
 8009bfa:	6163      	str	r3, [r4, #20]
 8009bfc:	9201      	str	r2, [sp, #4]
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bf0c      	ite	eq
 8009c04:	2201      	moveq	r2, #1
 8009c06:	2202      	movne	r2, #2
 8009c08:	61a3      	str	r3, [r4, #24]
 8009c0a:	6122      	str	r2, [r4, #16]
 8009c0c:	b1ad      	cbz	r5, 8009c3a <__d2b+0x92>
 8009c0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c12:	4405      	add	r5, r0
 8009c14:	6035      	str	r5, [r6, #0]
 8009c16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1c:	6018      	str	r0, [r3, #0]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	b002      	add	sp, #8
 8009c22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009c26:	6161      	str	r1, [r4, #20]
 8009c28:	e7e9      	b.n	8009bfe <__d2b+0x56>
 8009c2a:	a801      	add	r0, sp, #4
 8009c2c:	f7ff fd5b 	bl	80096e6 <__lo0bits>
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	6163      	str	r3, [r4, #20]
 8009c36:	3020      	adds	r0, #32
 8009c38:	e7e7      	b.n	8009c0a <__d2b+0x62>
 8009c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c42:	6030      	str	r0, [r6, #0]
 8009c44:	6918      	ldr	r0, [r3, #16]
 8009c46:	f7ff fd2f 	bl	80096a8 <__hi0bits>
 8009c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c4e:	e7e4      	b.n	8009c1a <__d2b+0x72>
 8009c50:	0800a972 	.word	0x0800a972
 8009c54:	0800a983 	.word	0x0800a983

08009c58 <__ssputs_r>:
 8009c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5c:	461f      	mov	r7, r3
 8009c5e:	688e      	ldr	r6, [r1, #8]
 8009c60:	4682      	mov	sl, r0
 8009c62:	42be      	cmp	r6, r7
 8009c64:	460c      	mov	r4, r1
 8009c66:	4690      	mov	r8, r2
 8009c68:	680b      	ldr	r3, [r1, #0]
 8009c6a:	d82d      	bhi.n	8009cc8 <__ssputs_r+0x70>
 8009c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c74:	d026      	beq.n	8009cc4 <__ssputs_r+0x6c>
 8009c76:	6965      	ldr	r5, [r4, #20]
 8009c78:	6909      	ldr	r1, [r1, #16]
 8009c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c7e:	eba3 0901 	sub.w	r9, r3, r1
 8009c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c86:	1c7b      	adds	r3, r7, #1
 8009c88:	444b      	add	r3, r9
 8009c8a:	106d      	asrs	r5, r5, #1
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	bf38      	it	cc
 8009c90:	461d      	movcc	r5, r3
 8009c92:	0553      	lsls	r3, r2, #21
 8009c94:	d527      	bpl.n	8009ce6 <__ssputs_r+0x8e>
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7fd ff1a 	bl	8007ad0 <_malloc_r>
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b360      	cbz	r0, 8009cfa <__ssputs_r+0xa2>
 8009ca0:	464a      	mov	r2, r9
 8009ca2:	6921      	ldr	r1, [r4, #16]
 8009ca4:	f000 f9f2 	bl	800a08c <memcpy>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	6126      	str	r6, [r4, #16]
 8009cb6:	444e      	add	r6, r9
 8009cb8:	6026      	str	r6, [r4, #0]
 8009cba:	463e      	mov	r6, r7
 8009cbc:	6165      	str	r5, [r4, #20]
 8009cbe:	eba5 0509 	sub.w	r5, r5, r9
 8009cc2:	60a5      	str	r5, [r4, #8]
 8009cc4:	42be      	cmp	r6, r7
 8009cc6:	d900      	bls.n	8009cca <__ssputs_r+0x72>
 8009cc8:	463e      	mov	r6, r7
 8009cca:	4632      	mov	r2, r6
 8009ccc:	4641      	mov	r1, r8
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	f000 f9c2 	bl	800a058 <memmove>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	68a3      	ldr	r3, [r4, #8]
 8009cd8:	1b9b      	subs	r3, r3, r6
 8009cda:	60a3      	str	r3, [r4, #8]
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	4433      	add	r3, r6
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	f000 fa22 	bl	800a130 <_realloc_r>
 8009cec:	4606      	mov	r6, r0
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d1e0      	bne.n	8009cb4 <__ssputs_r+0x5c>
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	6921      	ldr	r1, [r4, #16]
 8009cf6:	f7ff fbe7 	bl	80094c8 <_free_r>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	f8ca 3000 	str.w	r3, [sl]
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	e7e9      	b.n	8009ce2 <__ssputs_r+0x8a>
	...

08009d10 <_svfiprintf_r>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	4698      	mov	r8, r3
 8009d16:	898b      	ldrh	r3, [r1, #12]
 8009d18:	4607      	mov	r7, r0
 8009d1a:	061b      	lsls	r3, r3, #24
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	4614      	mov	r4, r2
 8009d20:	b09d      	sub	sp, #116	@ 0x74
 8009d22:	d510      	bpl.n	8009d46 <_svfiprintf_r+0x36>
 8009d24:	690b      	ldr	r3, [r1, #16]
 8009d26:	b973      	cbnz	r3, 8009d46 <_svfiprintf_r+0x36>
 8009d28:	2140      	movs	r1, #64	@ 0x40
 8009d2a:	f7fd fed1 	bl	8007ad0 <_malloc_r>
 8009d2e:	6028      	str	r0, [r5, #0]
 8009d30:	6128      	str	r0, [r5, #16]
 8009d32:	b930      	cbnz	r0, 8009d42 <_svfiprintf_r+0x32>
 8009d34:	230c      	movs	r3, #12
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	b01d      	add	sp, #116	@ 0x74
 8009d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d42:	2340      	movs	r3, #64	@ 0x40
 8009d44:	616b      	str	r3, [r5, #20]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d50:	2330      	movs	r3, #48	@ 0x30
 8009d52:	f04f 0901 	mov.w	r9, #1
 8009d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009ef4 <_svfiprintf_r+0x1e4>
 8009d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d62:	4623      	mov	r3, r4
 8009d64:	469a      	mov	sl, r3
 8009d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6a:	b10a      	cbz	r2, 8009d70 <_svfiprintf_r+0x60>
 8009d6c:	2a25      	cmp	r2, #37	@ 0x25
 8009d6e:	d1f9      	bne.n	8009d64 <_svfiprintf_r+0x54>
 8009d70:	ebba 0b04 	subs.w	fp, sl, r4
 8009d74:	d00b      	beq.n	8009d8e <_svfiprintf_r+0x7e>
 8009d76:	465b      	mov	r3, fp
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff ff6b 	bl	8009c58 <__ssputs_r>
 8009d82:	3001      	adds	r0, #1
 8009d84:	f000 80a7 	beq.w	8009ed6 <_svfiprintf_r+0x1c6>
 8009d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d8a:	445a      	add	r2, fp
 8009d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 809f 	beq.w	8009ed6 <_svfiprintf_r+0x1c6>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da2:	f10a 0a01 	add.w	sl, sl, #1
 8009da6:	9304      	str	r3, [sp, #16]
 8009da8:	9307      	str	r3, [sp, #28]
 8009daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8009db0:	4654      	mov	r4, sl
 8009db2:	2205      	movs	r2, #5
 8009db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db8:	484e      	ldr	r0, [pc, #312]	@ (8009ef4 <_svfiprintf_r+0x1e4>)
 8009dba:	f7fe fd26 	bl	800880a <memchr>
 8009dbe:	9a04      	ldr	r2, [sp, #16]
 8009dc0:	b9d8      	cbnz	r0, 8009dfa <_svfiprintf_r+0xea>
 8009dc2:	06d0      	lsls	r0, r2, #27
 8009dc4:	bf44      	itt	mi
 8009dc6:	2320      	movmi	r3, #32
 8009dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dcc:	0711      	lsls	r1, r2, #28
 8009dce:	bf44      	itt	mi
 8009dd0:	232b      	movmi	r3, #43	@ 0x2b
 8009dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ddc:	d015      	beq.n	8009e0a <_svfiprintf_r+0xfa>
 8009dde:	4654      	mov	r4, sl
 8009de0:	2000      	movs	r0, #0
 8009de2:	f04f 0c0a 	mov.w	ip, #10
 8009de6:	9a07      	ldr	r2, [sp, #28]
 8009de8:	4621      	mov	r1, r4
 8009dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dee:	3b30      	subs	r3, #48	@ 0x30
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d94b      	bls.n	8009e8c <_svfiprintf_r+0x17c>
 8009df4:	b1b0      	cbz	r0, 8009e24 <_svfiprintf_r+0x114>
 8009df6:	9207      	str	r2, [sp, #28]
 8009df8:	e014      	b.n	8009e24 <_svfiprintf_r+0x114>
 8009dfa:	eba0 0308 	sub.w	r3, r0, r8
 8009dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009e02:	4313      	orrs	r3, r2
 8009e04:	46a2      	mov	sl, r4
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	e7d2      	b.n	8009db0 <_svfiprintf_r+0xa0>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	1d19      	adds	r1, r3, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	9103      	str	r1, [sp, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfbb      	ittet	lt
 8009e16:	425b      	neglt	r3, r3
 8009e18:	f042 0202 	orrlt.w	r2, r2, #2
 8009e1c:	9307      	strge	r3, [sp, #28]
 8009e1e:	9307      	strlt	r3, [sp, #28]
 8009e20:	bfb8      	it	lt
 8009e22:	9204      	strlt	r2, [sp, #16]
 8009e24:	7823      	ldrb	r3, [r4, #0]
 8009e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e28:	d10a      	bne.n	8009e40 <_svfiprintf_r+0x130>
 8009e2a:	7863      	ldrb	r3, [r4, #1]
 8009e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e2e:	d132      	bne.n	8009e96 <_svfiprintf_r+0x186>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	3402      	adds	r4, #2
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	9203      	str	r2, [sp, #12]
 8009e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009ef8 <_svfiprintf_r+0x1e8>
 8009e44:	2203      	movs	r2, #3
 8009e46:	4650      	mov	r0, sl
 8009e48:	7821      	ldrb	r1, [r4, #0]
 8009e4a:	f7fe fcde 	bl	800880a <memchr>
 8009e4e:	b138      	cbz	r0, 8009e60 <_svfiprintf_r+0x150>
 8009e50:	2240      	movs	r2, #64	@ 0x40
 8009e52:	9b04      	ldr	r3, [sp, #16]
 8009e54:	eba0 000a 	sub.w	r0, r0, sl
 8009e58:	4082      	lsls	r2, r0
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e64:	2206      	movs	r2, #6
 8009e66:	4825      	ldr	r0, [pc, #148]	@ (8009efc <_svfiprintf_r+0x1ec>)
 8009e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e6c:	f7fe fccd 	bl	800880a <memchr>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d036      	beq.n	8009ee2 <_svfiprintf_r+0x1d2>
 8009e74:	4b22      	ldr	r3, [pc, #136]	@ (8009f00 <_svfiprintf_r+0x1f0>)
 8009e76:	bb1b      	cbnz	r3, 8009ec0 <_svfiprintf_r+0x1b0>
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	3307      	adds	r3, #7
 8009e7c:	f023 0307 	bic.w	r3, r3, #7
 8009e80:	3308      	adds	r3, #8
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e86:	4433      	add	r3, r6
 8009e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e8a:	e76a      	b.n	8009d62 <_svfiprintf_r+0x52>
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	2001      	movs	r0, #1
 8009e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e94:	e7a8      	b.n	8009de8 <_svfiprintf_r+0xd8>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f04f 0c0a 	mov.w	ip, #10
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	3401      	adds	r4, #1
 8009ea0:	9305      	str	r3, [sp, #20]
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea8:	3a30      	subs	r2, #48	@ 0x30
 8009eaa:	2a09      	cmp	r2, #9
 8009eac:	d903      	bls.n	8009eb6 <_svfiprintf_r+0x1a6>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0c6      	beq.n	8009e40 <_svfiprintf_r+0x130>
 8009eb2:	9105      	str	r1, [sp, #20]
 8009eb4:	e7c4      	b.n	8009e40 <_svfiprintf_r+0x130>
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	2301      	movs	r3, #1
 8009eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebe:	e7f0      	b.n	8009ea2 <_svfiprintf_r+0x192>
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f04 <_svfiprintf_r+0x1f4>)
 8009eca:	a904      	add	r1, sp, #16
 8009ecc:	f7fd ff2a 	bl	8007d24 <_printf_float>
 8009ed0:	1c42      	adds	r2, r0, #1
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	d1d6      	bne.n	8009e84 <_svfiprintf_r+0x174>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	065b      	lsls	r3, r3, #25
 8009eda:	f53f af2d 	bmi.w	8009d38 <_svfiprintf_r+0x28>
 8009ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ee0:	e72c      	b.n	8009d3c <_svfiprintf_r+0x2c>
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4638      	mov	r0, r7
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <_svfiprintf_r+0x1f4>)
 8009eec:	a904      	add	r1, sp, #16
 8009eee:	f7fe f9b7 	bl	8008260 <_printf_i>
 8009ef2:	e7ed      	b.n	8009ed0 <_svfiprintf_r+0x1c0>
 8009ef4:	0800aad8 	.word	0x0800aad8
 8009ef8:	0800aade 	.word	0x0800aade
 8009efc:	0800aae2 	.word	0x0800aae2
 8009f00:	08007d25 	.word	0x08007d25
 8009f04:	08009c59 	.word	0x08009c59

08009f08 <__sflush_r>:
 8009f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	0716      	lsls	r6, r2, #28
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	d454      	bmi.n	8009fc0 <__sflush_r+0xb8>
 8009f16:	684b      	ldr	r3, [r1, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	dc02      	bgt.n	8009f22 <__sflush_r+0x1a>
 8009f1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd48      	ble.n	8009fb4 <__sflush_r+0xac>
 8009f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	d045      	beq.n	8009fb4 <__sflush_r+0xac>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f2e:	682f      	ldr	r7, [r5, #0]
 8009f30:	6a21      	ldr	r1, [r4, #32]
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	d030      	beq.n	8009f98 <__sflush_r+0x90>
 8009f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	0759      	lsls	r1, r3, #29
 8009f3c:	d505      	bpl.n	8009f4a <__sflush_r+0x42>
 8009f3e:	6863      	ldr	r3, [r4, #4]
 8009f40:	1ad2      	subs	r2, r2, r3
 8009f42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f44:	b10b      	cbz	r3, 8009f4a <__sflush_r+0x42>
 8009f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f48:	1ad2      	subs	r2, r2, r3
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f50:	6a21      	ldr	r1, [r4, #32]
 8009f52:	47b0      	blx	r6
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	d106      	bne.n	8009f68 <__sflush_r+0x60>
 8009f5a:	6829      	ldr	r1, [r5, #0]
 8009f5c:	291d      	cmp	r1, #29
 8009f5e:	d82b      	bhi.n	8009fb8 <__sflush_r+0xb0>
 8009f60:	4a28      	ldr	r2, [pc, #160]	@ (800a004 <__sflush_r+0xfc>)
 8009f62:	410a      	asrs	r2, r1
 8009f64:	07d6      	lsls	r6, r2, #31
 8009f66:	d427      	bmi.n	8009fb8 <__sflush_r+0xb0>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	6062      	str	r2, [r4, #4]
 8009f6c:	6922      	ldr	r2, [r4, #16]
 8009f6e:	04d9      	lsls	r1, r3, #19
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	d504      	bpl.n	8009f7e <__sflush_r+0x76>
 8009f74:	1c42      	adds	r2, r0, #1
 8009f76:	d101      	bne.n	8009f7c <__sflush_r+0x74>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b903      	cbnz	r3, 8009f7e <__sflush_r+0x76>
 8009f7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f80:	602f      	str	r7, [r5, #0]
 8009f82:	b1b9      	cbz	r1, 8009fb4 <__sflush_r+0xac>
 8009f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f88:	4299      	cmp	r1, r3
 8009f8a:	d002      	beq.n	8009f92 <__sflush_r+0x8a>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f7ff fa9b 	bl	80094c8 <_free_r>
 8009f92:	2300      	movs	r3, #0
 8009f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f96:	e00d      	b.n	8009fb4 <__sflush_r+0xac>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b0      	blx	r6
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	1c50      	adds	r0, r2, #1
 8009fa2:	d1c9      	bne.n	8009f38 <__sflush_r+0x30>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0c6      	beq.n	8009f38 <__sflush_r+0x30>
 8009faa:	2b1d      	cmp	r3, #29
 8009fac:	d001      	beq.n	8009fb2 <__sflush_r+0xaa>
 8009fae:	2b16      	cmp	r3, #22
 8009fb0:	d11d      	bne.n	8009fee <__sflush_r+0xe6>
 8009fb2:	602f      	str	r7, [r5, #0]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e021      	b.n	8009ffc <__sflush_r+0xf4>
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fbc:	b21b      	sxth	r3, r3
 8009fbe:	e01a      	b.n	8009ff6 <__sflush_r+0xee>
 8009fc0:	690f      	ldr	r7, [r1, #16]
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	d0f6      	beq.n	8009fb4 <__sflush_r+0xac>
 8009fc6:	0793      	lsls	r3, r2, #30
 8009fc8:	bf18      	it	ne
 8009fca:	2300      	movne	r3, #0
 8009fcc:	680e      	ldr	r6, [r1, #0]
 8009fce:	bf08      	it	eq
 8009fd0:	694b      	ldreq	r3, [r1, #20]
 8009fd2:	1bf6      	subs	r6, r6, r7
 8009fd4:	600f      	str	r7, [r1, #0]
 8009fd6:	608b      	str	r3, [r1, #8]
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	ddeb      	ble.n	8009fb4 <__sflush_r+0xac>
 8009fdc:	4633      	mov	r3, r6
 8009fde:	463a      	mov	r2, r7
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	6a21      	ldr	r1, [r4, #32]
 8009fe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009fe8:	47e0      	blx	ip
 8009fea:	2800      	cmp	r0, #0
 8009fec:	dc07      	bgt.n	8009ffe <__sflush_r+0xf6>
 8009fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffe:	4407      	add	r7, r0
 800a000:	1a36      	subs	r6, r6, r0
 800a002:	e7e9      	b.n	8009fd8 <__sflush_r+0xd0>
 800a004:	dfbffffe 	.word	0xdfbffffe

0800a008 <_fflush_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	690b      	ldr	r3, [r1, #16]
 800a00c:	4605      	mov	r5, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	b913      	cbnz	r3, 800a018 <_fflush_r+0x10>
 800a012:	2500      	movs	r5, #0
 800a014:	4628      	mov	r0, r5
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	b118      	cbz	r0, 800a022 <_fflush_r+0x1a>
 800a01a:	6a03      	ldr	r3, [r0, #32]
 800a01c:	b90b      	cbnz	r3, 800a022 <_fflush_r+0x1a>
 800a01e:	f7fe facb 	bl	80085b8 <__sinit>
 800a022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0f3      	beq.n	800a012 <_fflush_r+0xa>
 800a02a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a02c:	07d0      	lsls	r0, r2, #31
 800a02e:	d404      	bmi.n	800a03a <_fflush_r+0x32>
 800a030:	0599      	lsls	r1, r3, #22
 800a032:	d402      	bmi.n	800a03a <_fflush_r+0x32>
 800a034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a036:	f7fe fbe6 	bl	8008806 <__retarget_lock_acquire_recursive>
 800a03a:	4628      	mov	r0, r5
 800a03c:	4621      	mov	r1, r4
 800a03e:	f7ff ff63 	bl	8009f08 <__sflush_r>
 800a042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a044:	4605      	mov	r5, r0
 800a046:	07da      	lsls	r2, r3, #31
 800a048:	d4e4      	bmi.n	800a014 <_fflush_r+0xc>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	059b      	lsls	r3, r3, #22
 800a04e:	d4e1      	bmi.n	800a014 <_fflush_r+0xc>
 800a050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a052:	f7fe fbd9 	bl	8008808 <__retarget_lock_release_recursive>
 800a056:	e7dd      	b.n	800a014 <_fflush_r+0xc>

0800a058 <memmove>:
 800a058:	4288      	cmp	r0, r1
 800a05a:	b510      	push	{r4, lr}
 800a05c:	eb01 0402 	add.w	r4, r1, r2
 800a060:	d902      	bls.n	800a068 <memmove+0x10>
 800a062:	4284      	cmp	r4, r0
 800a064:	4623      	mov	r3, r4
 800a066:	d807      	bhi.n	800a078 <memmove+0x20>
 800a068:	1e43      	subs	r3, r0, #1
 800a06a:	42a1      	cmp	r1, r4
 800a06c:	d008      	beq.n	800a080 <memmove+0x28>
 800a06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a076:	e7f8      	b.n	800a06a <memmove+0x12>
 800a078:	4601      	mov	r1, r0
 800a07a:	4402      	add	r2, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d100      	bne.n	800a082 <memmove+0x2a>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08a:	e7f7      	b.n	800a07c <memmove+0x24>

0800a08c <memcpy>:
 800a08c:	440a      	add	r2, r1
 800a08e:	4291      	cmp	r1, r2
 800a090:	f100 33ff 	add.w	r3, r0, #4294967295
 800a094:	d100      	bne.n	800a098 <memcpy+0xc>
 800a096:	4770      	bx	lr
 800a098:	b510      	push	{r4, lr}
 800a09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09e:	4291      	cmp	r1, r2
 800a0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a4:	d1f9      	bne.n	800a09a <memcpy+0xe>
 800a0a6:	bd10      	pop	{r4, pc}

0800a0a8 <__assert_func>:
 800a0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0aa:	4614      	mov	r4, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <__assert_func+0x2c>)
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68d8      	ldr	r0, [r3, #12]
 800a0b6:	b954      	cbnz	r4, 800a0ce <__assert_func+0x26>
 800a0b8:	4b07      	ldr	r3, [pc, #28]	@ (800a0d8 <__assert_func+0x30>)
 800a0ba:	461c      	mov	r4, r3
 800a0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0c0:	9100      	str	r1, [sp, #0]
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	4905      	ldr	r1, [pc, #20]	@ (800a0dc <__assert_func+0x34>)
 800a0c6:	f000 f86f 	bl	800a1a8 <fiprintf>
 800a0ca:	f000 f87f 	bl	800a1cc <abort>
 800a0ce:	4b04      	ldr	r3, [pc, #16]	@ (800a0e0 <__assert_func+0x38>)
 800a0d0:	e7f4      	b.n	800a0bc <__assert_func+0x14>
 800a0d2:	bf00      	nop
 800a0d4:	20000038 	.word	0x20000038
 800a0d8:	0800ab2e 	.word	0x0800ab2e
 800a0dc:	0800ab00 	.word	0x0800ab00
 800a0e0:	0800aaf3 	.word	0x0800aaf3

0800a0e4 <_calloc_r>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a0ea:	b93c      	cbnz	r4, 800a0fc <_calloc_r+0x18>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7fd fcef 	bl	8007ad0 <_malloc_r>
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <_calloc_r+0x1e>
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	220c      	movs	r2, #12
 800a0fe:	6002      	str	r2, [r0, #0]
 800a100:	e7f9      	b.n	800a0f6 <_calloc_r+0x12>
 800a102:	462a      	mov	r2, r5
 800a104:	4621      	mov	r1, r4
 800a106:	f7fe faf0 	bl	80086ea <memset>
 800a10a:	e7f5      	b.n	800a0f8 <_calloc_r+0x14>

0800a10c <__ascii_mbtowc>:
 800a10c:	b082      	sub	sp, #8
 800a10e:	b901      	cbnz	r1, 800a112 <__ascii_mbtowc+0x6>
 800a110:	a901      	add	r1, sp, #4
 800a112:	b142      	cbz	r2, 800a126 <__ascii_mbtowc+0x1a>
 800a114:	b14b      	cbz	r3, 800a12a <__ascii_mbtowc+0x1e>
 800a116:	7813      	ldrb	r3, [r2, #0]
 800a118:	600b      	str	r3, [r1, #0]
 800a11a:	7812      	ldrb	r2, [r2, #0]
 800a11c:	1e10      	subs	r0, r2, #0
 800a11e:	bf18      	it	ne
 800a120:	2001      	movne	r0, #1
 800a122:	b002      	add	sp, #8
 800a124:	4770      	bx	lr
 800a126:	4610      	mov	r0, r2
 800a128:	e7fb      	b.n	800a122 <__ascii_mbtowc+0x16>
 800a12a:	f06f 0001 	mvn.w	r0, #1
 800a12e:	e7f8      	b.n	800a122 <__ascii_mbtowc+0x16>

0800a130 <_realloc_r>:
 800a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a134:	4680      	mov	r8, r0
 800a136:	4615      	mov	r5, r2
 800a138:	460c      	mov	r4, r1
 800a13a:	b921      	cbnz	r1, 800a146 <_realloc_r+0x16>
 800a13c:	4611      	mov	r1, r2
 800a13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a142:	f7fd bcc5 	b.w	8007ad0 <_malloc_r>
 800a146:	b92a      	cbnz	r2, 800a154 <_realloc_r+0x24>
 800a148:	f7ff f9be 	bl	80094c8 <_free_r>
 800a14c:	2400      	movs	r4, #0
 800a14e:	4620      	mov	r0, r4
 800a150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a154:	f000 f841 	bl	800a1da <_malloc_usable_size_r>
 800a158:	4285      	cmp	r5, r0
 800a15a:	4606      	mov	r6, r0
 800a15c:	d802      	bhi.n	800a164 <_realloc_r+0x34>
 800a15e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a162:	d8f4      	bhi.n	800a14e <_realloc_r+0x1e>
 800a164:	4629      	mov	r1, r5
 800a166:	4640      	mov	r0, r8
 800a168:	f7fd fcb2 	bl	8007ad0 <_malloc_r>
 800a16c:	4607      	mov	r7, r0
 800a16e:	2800      	cmp	r0, #0
 800a170:	d0ec      	beq.n	800a14c <_realloc_r+0x1c>
 800a172:	42b5      	cmp	r5, r6
 800a174:	462a      	mov	r2, r5
 800a176:	4621      	mov	r1, r4
 800a178:	bf28      	it	cs
 800a17a:	4632      	movcs	r2, r6
 800a17c:	f7ff ff86 	bl	800a08c <memcpy>
 800a180:	4621      	mov	r1, r4
 800a182:	4640      	mov	r0, r8
 800a184:	f7ff f9a0 	bl	80094c8 <_free_r>
 800a188:	463c      	mov	r4, r7
 800a18a:	e7e0      	b.n	800a14e <_realloc_r+0x1e>

0800a18c <__ascii_wctomb>:
 800a18c:	4603      	mov	r3, r0
 800a18e:	4608      	mov	r0, r1
 800a190:	b141      	cbz	r1, 800a1a4 <__ascii_wctomb+0x18>
 800a192:	2aff      	cmp	r2, #255	@ 0xff
 800a194:	d904      	bls.n	800a1a0 <__ascii_wctomb+0x14>
 800a196:	228a      	movs	r2, #138	@ 0x8a
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	4770      	bx	lr
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	700a      	strb	r2, [r1, #0]
 800a1a4:	4770      	bx	lr
	...

0800a1a8 <fiprintf>:
 800a1a8:	b40e      	push	{r1, r2, r3}
 800a1aa:	b503      	push	{r0, r1, lr}
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	4805      	ldr	r0, [pc, #20]	@ (800a1c8 <fiprintf+0x20>)
 800a1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b6:	6800      	ldr	r0, [r0, #0]
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	f000 f83d 	bl	800a238 <_vfiprintf_r>
 800a1be:	b002      	add	sp, #8
 800a1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1c4:	b003      	add	sp, #12
 800a1c6:	4770      	bx	lr
 800a1c8:	20000038 	.word	0x20000038

0800a1cc <abort>:
 800a1cc:	2006      	movs	r0, #6
 800a1ce:	b508      	push	{r3, lr}
 800a1d0:	f000 fa06 	bl	800a5e0 <raise>
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7f8 fd44 	bl	8002c62 <_exit>

0800a1da <_malloc_usable_size_r>:
 800a1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1de:	1f18      	subs	r0, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bfbc      	itt	lt
 800a1e4:	580b      	ldrlt	r3, [r1, r0]
 800a1e6:	18c0      	addlt	r0, r0, r3
 800a1e8:	4770      	bx	lr

0800a1ea <__sfputc_r>:
 800a1ea:	6893      	ldr	r3, [r2, #8]
 800a1ec:	b410      	push	{r4}
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	6093      	str	r3, [r2, #8]
 800a1f4:	da07      	bge.n	800a206 <__sfputc_r+0x1c>
 800a1f6:	6994      	ldr	r4, [r2, #24]
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	db01      	blt.n	800a200 <__sfputc_r+0x16>
 800a1fc:	290a      	cmp	r1, #10
 800a1fe:	d102      	bne.n	800a206 <__sfputc_r+0x1c>
 800a200:	bc10      	pop	{r4}
 800a202:	f000 b931 	b.w	800a468 <__swbuf_r>
 800a206:	6813      	ldr	r3, [r2, #0]
 800a208:	1c58      	adds	r0, r3, #1
 800a20a:	6010      	str	r0, [r2, #0]
 800a20c:	7019      	strb	r1, [r3, #0]
 800a20e:	4608      	mov	r0, r1
 800a210:	bc10      	pop	{r4}
 800a212:	4770      	bx	lr

0800a214 <__sfputs_r>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	4606      	mov	r6, r0
 800a218:	460f      	mov	r7, r1
 800a21a:	4614      	mov	r4, r2
 800a21c:	18d5      	adds	r5, r2, r3
 800a21e:	42ac      	cmp	r4, r5
 800a220:	d101      	bne.n	800a226 <__sfputs_r+0x12>
 800a222:	2000      	movs	r0, #0
 800a224:	e007      	b.n	800a236 <__sfputs_r+0x22>
 800a226:	463a      	mov	r2, r7
 800a228:	4630      	mov	r0, r6
 800a22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22e:	f7ff ffdc 	bl	800a1ea <__sfputc_r>
 800a232:	1c43      	adds	r3, r0, #1
 800a234:	d1f3      	bne.n	800a21e <__sfputs_r+0xa>
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a238 <_vfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	460d      	mov	r5, r1
 800a23e:	4614      	mov	r4, r2
 800a240:	4698      	mov	r8, r3
 800a242:	4606      	mov	r6, r0
 800a244:	b09d      	sub	sp, #116	@ 0x74
 800a246:	b118      	cbz	r0, 800a250 <_vfiprintf_r+0x18>
 800a248:	6a03      	ldr	r3, [r0, #32]
 800a24a:	b90b      	cbnz	r3, 800a250 <_vfiprintf_r+0x18>
 800a24c:	f7fe f9b4 	bl	80085b8 <__sinit>
 800a250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a252:	07d9      	lsls	r1, r3, #31
 800a254:	d405      	bmi.n	800a262 <_vfiprintf_r+0x2a>
 800a256:	89ab      	ldrh	r3, [r5, #12]
 800a258:	059a      	lsls	r2, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_vfiprintf_r+0x2a>
 800a25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a25e:	f7fe fad2 	bl	8008806 <__retarget_lock_acquire_recursive>
 800a262:	89ab      	ldrh	r3, [r5, #12]
 800a264:	071b      	lsls	r3, r3, #28
 800a266:	d501      	bpl.n	800a26c <_vfiprintf_r+0x34>
 800a268:	692b      	ldr	r3, [r5, #16]
 800a26a:	b99b      	cbnz	r3, 800a294 <_vfiprintf_r+0x5c>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4630      	mov	r0, r6
 800a270:	f000 f938 	bl	800a4e4 <__swsetup_r>
 800a274:	b170      	cbz	r0, 800a294 <_vfiprintf_r+0x5c>
 800a276:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a278:	07dc      	lsls	r4, r3, #31
 800a27a:	d504      	bpl.n	800a286 <_vfiprintf_r+0x4e>
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	b01d      	add	sp, #116	@ 0x74
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	0598      	lsls	r0, r3, #22
 800a28a:	d4f7      	bmi.n	800a27c <_vfiprintf_r+0x44>
 800a28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a28e:	f7fe fabb 	bl	8008808 <__retarget_lock_release_recursive>
 800a292:	e7f3      	b.n	800a27c <_vfiprintf_r+0x44>
 800a294:	2300      	movs	r3, #0
 800a296:	9309      	str	r3, [sp, #36]	@ 0x24
 800a298:	2320      	movs	r3, #32
 800a29a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a29e:	2330      	movs	r3, #48	@ 0x30
 800a2a0:	f04f 0901 	mov.w	r9, #1
 800a2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a454 <_vfiprintf_r+0x21c>
 800a2ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2b0:	4623      	mov	r3, r4
 800a2b2:	469a      	mov	sl, r3
 800a2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b8:	b10a      	cbz	r2, 800a2be <_vfiprintf_r+0x86>
 800a2ba:	2a25      	cmp	r2, #37	@ 0x25
 800a2bc:	d1f9      	bne.n	800a2b2 <_vfiprintf_r+0x7a>
 800a2be:	ebba 0b04 	subs.w	fp, sl, r4
 800a2c2:	d00b      	beq.n	800a2dc <_vfiprintf_r+0xa4>
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7ff ffa2 	bl	800a214 <__sfputs_r>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	f000 80a7 	beq.w	800a424 <_vfiprintf_r+0x1ec>
 800a2d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2d8:	445a      	add	r2, fp
 800a2da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 809f 	beq.w	800a424 <_vfiprintf_r+0x1ec>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2f0:	f10a 0a01 	add.w	sl, sl, #1
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2fe:	4654      	mov	r4, sl
 800a300:	2205      	movs	r2, #5
 800a302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a306:	4853      	ldr	r0, [pc, #332]	@ (800a454 <_vfiprintf_r+0x21c>)
 800a308:	f7fe fa7f 	bl	800880a <memchr>
 800a30c:	9a04      	ldr	r2, [sp, #16]
 800a30e:	b9d8      	cbnz	r0, 800a348 <_vfiprintf_r+0x110>
 800a310:	06d1      	lsls	r1, r2, #27
 800a312:	bf44      	itt	mi
 800a314:	2320      	movmi	r3, #32
 800a316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a31a:	0713      	lsls	r3, r2, #28
 800a31c:	bf44      	itt	mi
 800a31e:	232b      	movmi	r3, #43	@ 0x2b
 800a320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a324:	f89a 3000 	ldrb.w	r3, [sl]
 800a328:	2b2a      	cmp	r3, #42	@ 0x2a
 800a32a:	d015      	beq.n	800a358 <_vfiprintf_r+0x120>
 800a32c:	4654      	mov	r4, sl
 800a32e:	2000      	movs	r0, #0
 800a330:	f04f 0c0a 	mov.w	ip, #10
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	4621      	mov	r1, r4
 800a338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a33c:	3b30      	subs	r3, #48	@ 0x30
 800a33e:	2b09      	cmp	r3, #9
 800a340:	d94b      	bls.n	800a3da <_vfiprintf_r+0x1a2>
 800a342:	b1b0      	cbz	r0, 800a372 <_vfiprintf_r+0x13a>
 800a344:	9207      	str	r2, [sp, #28]
 800a346:	e014      	b.n	800a372 <_vfiprintf_r+0x13a>
 800a348:	eba0 0308 	sub.w	r3, r0, r8
 800a34c:	fa09 f303 	lsl.w	r3, r9, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	46a2      	mov	sl, r4
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	e7d2      	b.n	800a2fe <_vfiprintf_r+0xc6>
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	1d19      	adds	r1, r3, #4
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	9103      	str	r1, [sp, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	bfbb      	ittet	lt
 800a364:	425b      	neglt	r3, r3
 800a366:	f042 0202 	orrlt.w	r2, r2, #2
 800a36a:	9307      	strge	r3, [sp, #28]
 800a36c:	9307      	strlt	r3, [sp, #28]
 800a36e:	bfb8      	it	lt
 800a370:	9204      	strlt	r2, [sp, #16]
 800a372:	7823      	ldrb	r3, [r4, #0]
 800a374:	2b2e      	cmp	r3, #46	@ 0x2e
 800a376:	d10a      	bne.n	800a38e <_vfiprintf_r+0x156>
 800a378:	7863      	ldrb	r3, [r4, #1]
 800a37a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a37c:	d132      	bne.n	800a3e4 <_vfiprintf_r+0x1ac>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3402      	adds	r4, #2
 800a382:	1d1a      	adds	r2, r3, #4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	9203      	str	r2, [sp, #12]
 800a388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a38c:	9305      	str	r3, [sp, #20]
 800a38e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a458 <_vfiprintf_r+0x220>
 800a392:	2203      	movs	r2, #3
 800a394:	4650      	mov	r0, sl
 800a396:	7821      	ldrb	r1, [r4, #0]
 800a398:	f7fe fa37 	bl	800880a <memchr>
 800a39c:	b138      	cbz	r0, 800a3ae <_vfiprintf_r+0x176>
 800a39e:	2240      	movs	r2, #64	@ 0x40
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	eba0 000a 	sub.w	r0, r0, sl
 800a3a6:	4082      	lsls	r2, r0
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b2:	2206      	movs	r2, #6
 800a3b4:	4829      	ldr	r0, [pc, #164]	@ (800a45c <_vfiprintf_r+0x224>)
 800a3b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3ba:	f7fe fa26 	bl	800880a <memchr>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d03f      	beq.n	800a442 <_vfiprintf_r+0x20a>
 800a3c2:	4b27      	ldr	r3, [pc, #156]	@ (800a460 <_vfiprintf_r+0x228>)
 800a3c4:	bb1b      	cbnz	r3, 800a40e <_vfiprintf_r+0x1d6>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	3307      	adds	r3, #7
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	9303      	str	r3, [sp, #12]
 800a3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d4:	443b      	add	r3, r7
 800a3d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3d8:	e76a      	b.n	800a2b0 <_vfiprintf_r+0x78>
 800a3da:	460c      	mov	r4, r1
 800a3dc:	2001      	movs	r0, #1
 800a3de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e2:	e7a8      	b.n	800a336 <_vfiprintf_r+0xfe>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f04f 0c0a 	mov.w	ip, #10
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	3401      	adds	r4, #1
 800a3ee:	9305      	str	r3, [sp, #20]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f6:	3a30      	subs	r2, #48	@ 0x30
 800a3f8:	2a09      	cmp	r2, #9
 800a3fa:	d903      	bls.n	800a404 <_vfiprintf_r+0x1cc>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0c6      	beq.n	800a38e <_vfiprintf_r+0x156>
 800a400:	9105      	str	r1, [sp, #20]
 800a402:	e7c4      	b.n	800a38e <_vfiprintf_r+0x156>
 800a404:	4604      	mov	r4, r0
 800a406:	2301      	movs	r3, #1
 800a408:	fb0c 2101 	mla	r1, ip, r1, r2
 800a40c:	e7f0      	b.n	800a3f0 <_vfiprintf_r+0x1b8>
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	462a      	mov	r2, r5
 800a414:	4630      	mov	r0, r6
 800a416:	4b13      	ldr	r3, [pc, #76]	@ (800a464 <_vfiprintf_r+0x22c>)
 800a418:	a904      	add	r1, sp, #16
 800a41a:	f7fd fc83 	bl	8007d24 <_printf_float>
 800a41e:	4607      	mov	r7, r0
 800a420:	1c78      	adds	r0, r7, #1
 800a422:	d1d6      	bne.n	800a3d2 <_vfiprintf_r+0x19a>
 800a424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a426:	07d9      	lsls	r1, r3, #31
 800a428:	d405      	bmi.n	800a436 <_vfiprintf_r+0x1fe>
 800a42a:	89ab      	ldrh	r3, [r5, #12]
 800a42c:	059a      	lsls	r2, r3, #22
 800a42e:	d402      	bmi.n	800a436 <_vfiprintf_r+0x1fe>
 800a430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a432:	f7fe f9e9 	bl	8008808 <__retarget_lock_release_recursive>
 800a436:	89ab      	ldrh	r3, [r5, #12]
 800a438:	065b      	lsls	r3, r3, #25
 800a43a:	f53f af1f 	bmi.w	800a27c <_vfiprintf_r+0x44>
 800a43e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a440:	e71e      	b.n	800a280 <_vfiprintf_r+0x48>
 800a442:	ab03      	add	r3, sp, #12
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	462a      	mov	r2, r5
 800a448:	4630      	mov	r0, r6
 800a44a:	4b06      	ldr	r3, [pc, #24]	@ (800a464 <_vfiprintf_r+0x22c>)
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	f7fd ff07 	bl	8008260 <_printf_i>
 800a452:	e7e4      	b.n	800a41e <_vfiprintf_r+0x1e6>
 800a454:	0800aad8 	.word	0x0800aad8
 800a458:	0800aade 	.word	0x0800aade
 800a45c:	0800aae2 	.word	0x0800aae2
 800a460:	08007d25 	.word	0x08007d25
 800a464:	0800a215 	.word	0x0800a215

0800a468 <__swbuf_r>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	460e      	mov	r6, r1
 800a46c:	4614      	mov	r4, r2
 800a46e:	4605      	mov	r5, r0
 800a470:	b118      	cbz	r0, 800a47a <__swbuf_r+0x12>
 800a472:	6a03      	ldr	r3, [r0, #32]
 800a474:	b90b      	cbnz	r3, 800a47a <__swbuf_r+0x12>
 800a476:	f7fe f89f 	bl	80085b8 <__sinit>
 800a47a:	69a3      	ldr	r3, [r4, #24]
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	071a      	lsls	r2, r3, #28
 800a482:	d501      	bpl.n	800a488 <__swbuf_r+0x20>
 800a484:	6923      	ldr	r3, [r4, #16]
 800a486:	b943      	cbnz	r3, 800a49a <__swbuf_r+0x32>
 800a488:	4621      	mov	r1, r4
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 f82a 	bl	800a4e4 <__swsetup_r>
 800a490:	b118      	cbz	r0, 800a49a <__swbuf_r+0x32>
 800a492:	f04f 37ff 	mov.w	r7, #4294967295
 800a496:	4638      	mov	r0, r7
 800a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	b2f6      	uxtb	r6, r6
 800a4a0:	1a98      	subs	r0, r3, r2
 800a4a2:	6963      	ldr	r3, [r4, #20]
 800a4a4:	4637      	mov	r7, r6
 800a4a6:	4283      	cmp	r3, r0
 800a4a8:	dc05      	bgt.n	800a4b6 <__swbuf_r+0x4e>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7ff fdab 	bl	800a008 <_fflush_r>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d1ed      	bne.n	800a492 <__swbuf_r+0x2a>
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	60a3      	str	r3, [r4, #8]
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	6022      	str	r2, [r4, #0]
 800a4c2:	701e      	strb	r6, [r3, #0]
 800a4c4:	6962      	ldr	r2, [r4, #20]
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d004      	beq.n	800a4d6 <__swbuf_r+0x6e>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	07db      	lsls	r3, r3, #31
 800a4d0:	d5e1      	bpl.n	800a496 <__swbuf_r+0x2e>
 800a4d2:	2e0a      	cmp	r6, #10
 800a4d4:	d1df      	bne.n	800a496 <__swbuf_r+0x2e>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7ff fd95 	bl	800a008 <_fflush_r>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d0d9      	beq.n	800a496 <__swbuf_r+0x2e>
 800a4e2:	e7d6      	b.n	800a492 <__swbuf_r+0x2a>

0800a4e4 <__swsetup_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4b29      	ldr	r3, [pc, #164]	@ (800a58c <__swsetup_r+0xa8>)
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	b118      	cbz	r0, 800a4f8 <__swsetup_r+0x14>
 800a4f0:	6a03      	ldr	r3, [r0, #32]
 800a4f2:	b90b      	cbnz	r3, 800a4f8 <__swsetup_r+0x14>
 800a4f4:	f7fe f860 	bl	80085b8 <__sinit>
 800a4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fc:	0719      	lsls	r1, r3, #28
 800a4fe:	d422      	bmi.n	800a546 <__swsetup_r+0x62>
 800a500:	06da      	lsls	r2, r3, #27
 800a502:	d407      	bmi.n	800a514 <__swsetup_r+0x30>
 800a504:	2209      	movs	r2, #9
 800a506:	602a      	str	r2, [r5, #0]
 800a508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	e033      	b.n	800a57c <__swsetup_r+0x98>
 800a514:	0758      	lsls	r0, r3, #29
 800a516:	d512      	bpl.n	800a53e <__swsetup_r+0x5a>
 800a518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a51a:	b141      	cbz	r1, 800a52e <__swsetup_r+0x4a>
 800a51c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a520:	4299      	cmp	r1, r3
 800a522:	d002      	beq.n	800a52a <__swsetup_r+0x46>
 800a524:	4628      	mov	r0, r5
 800a526:	f7fe ffcf 	bl	80094c8 <_free_r>
 800a52a:	2300      	movs	r3, #0
 800a52c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	2300      	movs	r3, #0
 800a538:	6063      	str	r3, [r4, #4]
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	f043 0308 	orr.w	r3, r3, #8
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	b94b      	cbnz	r3, 800a55e <__swsetup_r+0x7a>
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a554:	d003      	beq.n	800a55e <__swsetup_r+0x7a>
 800a556:	4621      	mov	r1, r4
 800a558:	4628      	mov	r0, r5
 800a55a:	f000 f882 	bl	800a662 <__smakebuf_r>
 800a55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a562:	f013 0201 	ands.w	r2, r3, #1
 800a566:	d00a      	beq.n	800a57e <__swsetup_r+0x9a>
 800a568:	2200      	movs	r2, #0
 800a56a:	60a2      	str	r2, [r4, #8]
 800a56c:	6962      	ldr	r2, [r4, #20]
 800a56e:	4252      	negs	r2, r2
 800a570:	61a2      	str	r2, [r4, #24]
 800a572:	6922      	ldr	r2, [r4, #16]
 800a574:	b942      	cbnz	r2, 800a588 <__swsetup_r+0xa4>
 800a576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a57a:	d1c5      	bne.n	800a508 <__swsetup_r+0x24>
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	0799      	lsls	r1, r3, #30
 800a580:	bf58      	it	pl
 800a582:	6962      	ldrpl	r2, [r4, #20]
 800a584:	60a2      	str	r2, [r4, #8]
 800a586:	e7f4      	b.n	800a572 <__swsetup_r+0x8e>
 800a588:	2000      	movs	r0, #0
 800a58a:	e7f7      	b.n	800a57c <__swsetup_r+0x98>
 800a58c:	20000038 	.word	0x20000038

0800a590 <_raise_r>:
 800a590:	291f      	cmp	r1, #31
 800a592:	b538      	push	{r3, r4, r5, lr}
 800a594:	4605      	mov	r5, r0
 800a596:	460c      	mov	r4, r1
 800a598:	d904      	bls.n	800a5a4 <_raise_r+0x14>
 800a59a:	2316      	movs	r3, #22
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5a6:	b112      	cbz	r2, 800a5ae <_raise_r+0x1e>
 800a5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5ac:	b94b      	cbnz	r3, 800a5c2 <_raise_r+0x32>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f830 	bl	800a614 <_getpid_r>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5be:	f000 b817 	b.w	800a5f0 <_kill_r>
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d00a      	beq.n	800a5dc <_raise_r+0x4c>
 800a5c6:	1c59      	adds	r1, r3, #1
 800a5c8:	d103      	bne.n	800a5d2 <_raise_r+0x42>
 800a5ca:	2316      	movs	r3, #22
 800a5cc:	6003      	str	r3, [r0, #0]
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	e7e7      	b.n	800a5a2 <_raise_r+0x12>
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5da:	4798      	blx	r3
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e7e0      	b.n	800a5a2 <_raise_r+0x12>

0800a5e0 <raise>:
 800a5e0:	4b02      	ldr	r3, [pc, #8]	@ (800a5ec <raise+0xc>)
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	f7ff bfd3 	b.w	800a590 <_raise_r>
 800a5ea:	bf00      	nop
 800a5ec:	20000038 	.word	0x20000038

0800a5f0 <_kill_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4d06      	ldr	r5, [pc, #24]	@ (800a610 <_kill_r+0x20>)
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	f7f8 fb20 	bl	8002c42 <_kill>
 800a602:	1c43      	adds	r3, r0, #1
 800a604:	d102      	bne.n	800a60c <_kill_r+0x1c>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	b103      	cbz	r3, 800a60c <_kill_r+0x1c>
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	bf00      	nop
 800a610:	20000568 	.word	0x20000568

0800a614 <_getpid_r>:
 800a614:	f7f8 bb0e 	b.w	8002c34 <_getpid>

0800a618 <__swhatbuf_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	460c      	mov	r4, r1
 800a61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a620:	4615      	mov	r5, r2
 800a622:	2900      	cmp	r1, #0
 800a624:	461e      	mov	r6, r3
 800a626:	b096      	sub	sp, #88	@ 0x58
 800a628:	da0c      	bge.n	800a644 <__swhatbuf_r+0x2c>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	2100      	movs	r1, #0
 800a62e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a632:	bf14      	ite	ne
 800a634:	2340      	movne	r3, #64	@ 0x40
 800a636:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a63a:	2000      	movs	r0, #0
 800a63c:	6031      	str	r1, [r6, #0]
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	b016      	add	sp, #88	@ 0x58
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	466a      	mov	r2, sp
 800a646:	f000 f849 	bl	800a6dc <_fstat_r>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	dbed      	blt.n	800a62a <__swhatbuf_r+0x12>
 800a64e:	9901      	ldr	r1, [sp, #4]
 800a650:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a654:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a658:	4259      	negs	r1, r3
 800a65a:	4159      	adcs	r1, r3
 800a65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a660:	e7eb      	b.n	800a63a <__swhatbuf_r+0x22>

0800a662 <__smakebuf_r>:
 800a662:	898b      	ldrh	r3, [r1, #12]
 800a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a666:	079d      	lsls	r5, r3, #30
 800a668:	4606      	mov	r6, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	d507      	bpl.n	800a67e <__smakebuf_r+0x1c>
 800a66e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	6123      	str	r3, [r4, #16]
 800a676:	2301      	movs	r3, #1
 800a678:	6163      	str	r3, [r4, #20]
 800a67a:	b003      	add	sp, #12
 800a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a67e:	466a      	mov	r2, sp
 800a680:	ab01      	add	r3, sp, #4
 800a682:	f7ff ffc9 	bl	800a618 <__swhatbuf_r>
 800a686:	9f00      	ldr	r7, [sp, #0]
 800a688:	4605      	mov	r5, r0
 800a68a:	4639      	mov	r1, r7
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7fd fa1f 	bl	8007ad0 <_malloc_r>
 800a692:	b948      	cbnz	r0, 800a6a8 <__smakebuf_r+0x46>
 800a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d4ee      	bmi.n	800a67a <__smakebuf_r+0x18>
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	f043 0302 	orr.w	r3, r3, #2
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7e2      	b.n	800a66e <__smakebuf_r+0xc>
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	9b01      	ldr	r3, [sp, #4]
 800a6b6:	6020      	str	r0, [r4, #0]
 800a6b8:	b15b      	cbz	r3, 800a6d2 <__smakebuf_r+0x70>
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c0:	f000 f81e 	bl	800a700 <_isatty_r>
 800a6c4:	b128      	cbz	r0, 800a6d2 <__smakebuf_r+0x70>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	f043 0301 	orr.w	r3, r3, #1
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	431d      	orrs	r5, r3
 800a6d6:	81a5      	strh	r5, [r4, #12]
 800a6d8:	e7cf      	b.n	800a67a <__smakebuf_r+0x18>
	...

0800a6dc <_fstat_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	2300      	movs	r3, #0
 800a6e0:	4d06      	ldr	r5, [pc, #24]	@ (800a6fc <_fstat_r+0x20>)
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	f7f8 fb09 	bl	8002d00 <_fstat>
 800a6ee:	1c43      	adds	r3, r0, #1
 800a6f0:	d102      	bne.n	800a6f8 <_fstat_r+0x1c>
 800a6f2:	682b      	ldr	r3, [r5, #0]
 800a6f4:	b103      	cbz	r3, 800a6f8 <_fstat_r+0x1c>
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	bd38      	pop	{r3, r4, r5, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000568 	.word	0x20000568

0800a700 <_isatty_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	2300      	movs	r3, #0
 800a704:	4d05      	ldr	r5, [pc, #20]	@ (800a71c <_isatty_r+0x1c>)
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f8 fb07 	bl	8002d1e <_isatty>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_isatty_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_isatty_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	20000568 	.word	0x20000568

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
