
Nexus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007af0  08007af0  00009090  2**0
                  CONTENTS
  4 .ARM          00000000  08007af0  08007af0  00009090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007af0  08007af0  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007af0  08007af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007af4  08007af4  00008af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08007af8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000090  08007b88  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007b88  00009410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011495  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e84  00000000  00000000  0001a54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0001e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cf1  00000000  00000000  0001eff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014de7  00000000  00000000  00038ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d25b  00000000  00000000  0004dacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dad2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000dad70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000df540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08007918 	.word	0x08007918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08007918 	.word	0x08007918

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_f2uiz>:
 8000bf8:	0042      	lsls	r2, r0, #1
 8000bfa:	d20e      	bcs.n	8000c1a <__aeabi_f2uiz+0x22>
 8000bfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c00:	d30b      	bcc.n	8000c1a <__aeabi_f2uiz+0x22>
 8000c02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c0a:	d409      	bmi.n	8000c20 <__aeabi_f2uiz+0x28>
 8000c0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c14:	fa23 f002 	lsr.w	r0, r3, r2
 8000c18:	4770      	bx	lr
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	4770      	bx	lr
 8000c20:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c24:	d101      	bne.n	8000c2a <__aeabi_f2uiz+0x32>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	d102      	bne.n	8000c30 <__aeabi_f2uiz+0x38>
 8000c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <MPU_6050_init>:
#include <main.h>
#include <stdint.h>

extern I2C_HandleTypeDef hi2c1;

void MPU_6050_init(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af04      	add	r7, sp, #16

	//Inicializamos la configuracion del MPU6050
	 HAL_StatusTypeDef check_connection = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1) + 0 , 1, 100); //Status check from the MPU6050
 8000c3e:	2364      	movs	r3, #100	@ 0x64
 8000c40:	2201      	movs	r2, #1
 8000c42:	21d0      	movs	r1, #208	@ 0xd0
 8000c44:	4846      	ldr	r0, [pc, #280]	@ (8000d60 <MPU_6050_init+0x128>)
 8000c46:	f003 fae1 	bl	800420c <HAL_I2C_IsDeviceReady>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	if (check_connection == HAL_OK){
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d111      	bne.n	8000c78 <MPU_6050_init+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c5a:	4842      	ldr	r0, [pc, #264]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000c5c:	f002 fe18 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c60:	2064      	movs	r0, #100	@ 0x64
 8000c62:	f001 fded 	bl	8002840 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6c:	483d      	ldr	r0, [pc, #244]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000c6e:	f002 fe0f 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c72:	2064      	movs	r0, #100	@ 0x64
 8000c74:	f001 fde4 	bl	8002840 <HAL_Delay>
	}
	uint8_t gyro_scale = FS_GYRO_500;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef gyro_config = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &gyro_scale, 1, 100); //Gyroscope scale configuration (MAX)
 8000c7c:	2364      	movs	r3, #100	@ 0x64
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	2301      	movs	r3, #1
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	1cfb      	adds	r3, r7, #3
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	221b      	movs	r2, #27
 8000c8c:	21d0      	movs	r1, #208	@ 0xd0
 8000c8e:	4834      	ldr	r0, [pc, #208]	@ (8000d60 <MPU_6050_init+0x128>)
 8000c90:	f002 ff5a 	bl	8003b48 <HAL_I2C_Mem_Write>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71bb      	strb	r3, [r7, #6]

	if (gyro_config == HAL_OK){
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d111      	bne.n	8000cc2 <MPU_6050_init+0x8a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca4:	482f      	ldr	r0, [pc, #188]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000ca6:	f002 fdf3 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000caa:	2064      	movs	r0, #100	@ 0x64
 8000cac:	f001 fdc8 	bl	8002840 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000cb8:	f002 fdea 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000cbc:	2064      	movs	r0, #100	@ 0x64
 8000cbe:	f001 fdbf 	bl	8002840 <HAL_Delay>
	}

	uint8_t acc_scale = FS_ACC_4G;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef acc_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &acc_scale, 1, 100); //Accelerometer scale set up (+-4G)
 8000cc6:	2364      	movs	r3, #100	@ 0x64
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	1cbb      	adds	r3, r7, #2
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	221c      	movs	r2, #28
 8000cd6:	21d0      	movs	r1, #208	@ 0xd0
 8000cd8:	4821      	ldr	r0, [pc, #132]	@ (8000d60 <MPU_6050_init+0x128>)
 8000cda:	f002 ff35 	bl	8003b48 <HAL_I2C_Mem_Write>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	717b      	strb	r3, [r7, #5]

	if (acc_config == HAL_OK){
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d111      	bne.n	8000d0c <MPU_6050_init+0xd4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cee:	481d      	ldr	r0, [pc, #116]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000cf0:	f002 fdce 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000cf4:	2064      	movs	r0, #100	@ 0x64
 8000cf6:	f001 fda3 	bl	8002840 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d00:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000d02:	f002 fdc5 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d06:	2064      	movs	r0, #100	@ 0x64
 8000d08:	f001 fd9a 	bl	8002840 <HAL_Delay>
	}

	uint8_t temp_activation = FS_TEMP;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef temp_config =  HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp_activation, 1, 100); //Disable "Sleep Mode" and enable the internal temperature sensor
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	1c7b      	adds	r3, r7, #1
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	226b      	movs	r2, #107	@ 0x6b
 8000d20:	21d0      	movs	r1, #208	@ 0xd0
 8000d22:	480f      	ldr	r0, [pc, #60]	@ (8000d60 <MPU_6050_init+0x128>)
 8000d24:	f002 ff10 	bl	8003b48 <HAL_I2C_Mem_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	713b      	strb	r3, [r7, #4]

	if (temp_config == HAL_OK){
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d111      	bne.n	8000d56 <MPU_6050_init+0x11e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d38:	480a      	ldr	r0, [pc, #40]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000d3a:	f002 fda9 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f001 fd7e 	bl	8002840 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MPU_6050_init+0x12c>)
 8000d4c:	f002 fda0 	bl	8003890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f001 fd75 	bl	8002840 <HAL_Delay>
	}
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000124 	.word	0x20000124
 8000d64:	40010800 	.word	0x40010800

08000d68 <MPU_6050_Get_Acc_X>:

signed short int MPU_6050_Get_Acc_X(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af04      	add	r7, sp, #16
	uint8_t raw_acc_x[2];
	int16_t acc_x = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_X, 1, raw_acc_x, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8000d72:	2364      	movs	r3, #100	@ 0x64
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2302      	movs	r3, #2
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	223b      	movs	r2, #59	@ 0x3b
 8000d82:	21d1      	movs	r1, #209	@ 0xd1
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <MPU_6050_Get_Acc_X+0x3c>)
 8000d86:	f002 ffd9 	bl	8003d3c <HAL_I2C_Mem_Read>
	acc_x = (((int16_t) raw_acc_x[0] << 8) + raw_acc_x[1]);
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	797a      	ldrb	r2, [r7, #5]
 8000d92:	4413      	add	r3, r2
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	80fb      	strh	r3, [r7, #6]
    return acc_x;
 8000d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000124 	.word	0x20000124

08000da8 <MPU_6050_Get_Acc_Y>:

signed short int MPU_6050_Get_Acc_Y(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af04      	add	r7, sp, #16
	uint8_t raw_acc_y[2];
	int16_t acc_y = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Y, 1, raw_acc_y, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8000db2:	2364      	movs	r3, #100	@ 0x64
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2302      	movs	r3, #2
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	223d      	movs	r2, #61	@ 0x3d
 8000dc2:	21d1      	movs	r1, #209	@ 0xd1
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <MPU_6050_Get_Acc_Y+0x3c>)
 8000dc6:	f002 ffb9 	bl	8003d3c <HAL_I2C_Mem_Read>
	acc_y = (((int16_t) raw_acc_y[0] << 8) + raw_acc_y[1]);
 8000dca:	793b      	ldrb	r3, [r7, #4]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	797a      	ldrb	r2, [r7, #5]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	80fb      	strh	r3, [r7, #6]
	return acc_y;
 8000dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000124 	.word	0x20000124

08000de8 <MPU_6050_Get_Acc_Z>:

signed short int MPU_6050_Get_Acc_Z(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
	uint8_t raw_acc_z[2];
	int16_t acc_z = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	80fb      	strh	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_ACC_Z, 1, raw_acc_z, 2, 100); //Mandamos medir por I2C el registro asociado a las variables de memoria del dato de Aceleracion en X
 8000df2:	2364      	movs	r3, #100	@ 0x64
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2302      	movs	r3, #2
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	223f      	movs	r2, #63	@ 0x3f
 8000e02:	21d1      	movs	r1, #209	@ 0xd1
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <MPU_6050_Get_Acc_Z+0x3c>)
 8000e06:	f002 ff99 	bl	8003d3c <HAL_I2C_Mem_Read>
	acc_z = (((int16_t) raw_acc_z[0] << 8) + raw_acc_z[1]);
 8000e0a:	793b      	ldrb	r3, [r7, #4]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	797a      	ldrb	r2, [r7, #5]
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	80fb      	strh	r3, [r7, #6]
	return acc_z;
 8000e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000124 	.word	0x20000124

08000e28 <MPU_6050_Get_Temp>:

float MPU_6050_Get_Temp(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	81fb      	strh	r3, [r7, #14]
	float temp = 0;
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1) + 1, REG_READ_TEMP, 1, temp_data, 2, 100);
 8000e38:	2364      	movs	r3, #100	@ 0x64
 8000e3a:	9302      	str	r3, [sp, #8]
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	2241      	movs	r2, #65	@ 0x41
 8000e48:	21d1      	movs	r1, #209	@ 0xd1
 8000e4a:	4817      	ldr	r0, [pc, #92]	@ (8000ea8 <MPU_6050_Get_Temp+0x80>)
 8000e4c:	f002 ff76 	bl	8003d3c <HAL_I2C_Mem_Read>
	raw_temp = (temp_data[0] << 8 | temp_data[1]);
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	81fb      	strh	r3, [r7, #14]
	temp = (raw_temp/340.0) + 36.53;
 8000e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fac6 	bl	80003f4 <__aeabi_i2d>
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MPU_6050_Get_Temp+0x84>)
 8000e6e:	f7ff fc55 	bl	800071c <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	a309      	add	r3, pc, #36	@ (adr r3, 8000ea0 <MPU_6050_Get_Temp+0x78>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff f96c 	bl	800015c <__adddf3>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fd56 	bl	800093c <__aeabi_d2f>
 8000e90:	4603      	mov	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
	return temp;
 8000e94:	68bb      	ldr	r3, [r7, #8]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0a3d70a4 	.word	0x0a3d70a4
 8000ea4:	404243d7 	.word	0x404243d7
 8000ea8:	20000124 	.word	0x20000124
 8000eac:	40754000 	.word	0x40754000

08000eb0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <SELECT+0x18>)
 8000eba:	f002 fce9 	bl	8003890 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f001 fcbe 	bl	8002840 <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010800 	.word	0x40010800

08000ecc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <DESELECT+0x18>)
 8000ed6:	f002 fcdb 	bl	8003890 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f001 fcb0 	bl	8002840 <HAL_Delay>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010800 	.word	0x40010800

08000ee8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ef2:	bf00      	nop
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <SPI_TxByte+0x30>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d1f8      	bne.n	8000ef4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f02:	1df9      	adds	r1, r7, #7
 8000f04:	2364      	movs	r3, #100	@ 0x64
 8000f06:	2201      	movs	r2, #1
 8000f08:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <SPI_TxByte+0x30>)
 8000f0a:	f005 fa15 	bl	8006338 <HAL_SPI_Transmit>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000018c 	.word	0x2000018c

08000f1c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f28:	bf00      	nop
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <SPI_TxBuffer+0x30>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d1f8      	bne.n	8000f2a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	2364      	movs	r3, #100	@ 0x64
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <SPI_TxBuffer+0x30>)
 8000f40:	f005 f9fa 	bl	8006338 <HAL_SPI_Transmit>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000018c 	.word	0x2000018c

08000f50 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5a:	bf00      	nop
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <SPI_RxByte+0x34>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d1f8      	bne.n	8000f5c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f6a:	1dba      	adds	r2, r7, #6
 8000f6c:	1df9      	adds	r1, r7, #7
 8000f6e:	2364      	movs	r3, #100	@ 0x64
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <SPI_RxByte+0x34>)
 8000f76:	f005 fb22 	bl	80065be <HAL_SPI_TransmitReceive>

	return data;
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000018c 	.word	0x2000018c

08000f88 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f90:	f7ff ffde 	bl	8000f50 <SPI_RxByte>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <SD_ReadyWait+0x30>)
 8000fac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fb0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fb2:	f7ff ffcd 	bl	8000f50 <SPI_RxByte>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2bff      	cmp	r3, #255	@ 0xff
 8000fbe:	d003      	beq.n	8000fc8 <SD_ReadyWait+0x24>
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SD_ReadyWait+0x30>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f4      	bne.n	8000fb2 <SD_ReadyWait+0xe>

	return res;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000ae 	.word	0x200000ae

08000fd8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fde:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000fe2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fe4:	f7ff ff72 	bl	8000ecc <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e005      	b.n	8000ffa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000fee:	20ff      	movs	r0, #255	@ 0xff
 8000ff0:	f7ff ff7a 	bl	8000ee8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	ddf6      	ble.n	8000fee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001000:	f7ff ff56 	bl	8000eb0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001004:	2340      	movs	r3, #64	@ 0x40
 8001006:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001018:	2395      	movs	r3, #149	@ 0x95
 800101a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800101c:	463b      	mov	r3, r7
 800101e:	2106      	movs	r1, #6
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff7b 	bl	8000f1c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001026:	e002      	b.n	800102e <SD_PowerOn+0x56>
	{
		cnt--;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3b01      	subs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800102e:	f7ff ff8f 	bl	8000f50 <SPI_RxByte>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d002      	beq.n	800103e <SD_PowerOn+0x66>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f4      	bne.n	8001028 <SD_PowerOn+0x50>
	}

	DESELECT();
 800103e:	f7ff ff45 	bl	8000ecc <DESELECT>
	SPI_TxByte(0XFF);
 8001042:	20ff      	movs	r0, #255	@ 0xff
 8001044:	f7ff ff50 	bl	8000ee8 <SPI_TxByte>

	PowerFlag = 1;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <SD_PowerOn+0x80>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000b1 	.word	0x200000b1

0800105c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001060:	4b03      	ldr	r3, [pc, #12]	@ (8001070 <SD_PowerOff+0x14>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200000b1 	.word	0x200000b1

08001074 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001078:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <SD_CheckPower+0x10>)
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200000b1 	.word	0x200000b1

08001088 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <SD_RxDataBlock+0x58>)
 8001094:	22c8      	movs	r2, #200	@ 0xc8
 8001096:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001098:	f7ff ff5a 	bl	8000f50 <SPI_RxByte>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2bff      	cmp	r3, #255	@ 0xff
 80010a4:	d103      	bne.n	80010ae <SD_RxDataBlock+0x26>
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <SD_RxDataBlock+0x58>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f4      	bne.n	8001098 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80010b2:	d001      	beq.n	80010b8 <SD_RxDataBlock+0x30>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e00f      	b.n	80010d8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff62 	bl	8000f88 <SPI_RxBytePtr>
	} while(len--);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	603a      	str	r2, [r7, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f4      	bne.n	80010b8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010ce:	f7ff ff3f 	bl	8000f50 <SPI_RxByte>
	SPI_RxByte();
 80010d2:	f7ff ff3d 	bl	8000f50 <SPI_RxByte>

	return TRUE;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000ac 	.word	0x200000ac

080010e4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010f4:	f7ff ff56 	bl	8000fa4 <SD_ReadyWait>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2bff      	cmp	r3, #255	@ 0xff
 80010fc:	d001      	beq.n	8001102 <SD_TxDataBlock+0x1e>
 80010fe:	2300      	movs	r3, #0
 8001100:	e02f      	b.n	8001162 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff feef 	bl	8000ee8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2bfd      	cmp	r3, #253	@ 0xfd
 800110e:	d020      	beq.n	8001152 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff01 	bl	8000f1c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800111a:	f7ff ff19 	bl	8000f50 <SPI_RxByte>
		SPI_RxByte();
 800111e:	f7ff ff17 	bl	8000f50 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001122:	e00b      	b.n	800113c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001124:	f7ff ff14 	bl	8000f50 <SPI_RxByte>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2b05      	cmp	r3, #5
 8001134:	d006      	beq.n	8001144 <SD_TxDataBlock+0x60>
			i++;
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	3301      	adds	r3, #1
 800113a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	2b40      	cmp	r3, #64	@ 0x40
 8001140:	d9f0      	bls.n	8001124 <SD_TxDataBlock+0x40>
 8001142:	e000      	b.n	8001146 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001144:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001146:	bf00      	nop
 8001148:	f7ff ff02 	bl	8000f50 <SPI_RxByte>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0fa      	beq.n	8001148 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2b05      	cmp	r3, #5
 800115a:	d101      	bne.n	8001160 <SD_TxDataBlock+0x7c>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	6039      	str	r1, [r7, #0]
 8001174:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001176:	f7ff ff15 	bl	8000fa4 <SD_ReadyWait>
 800117a:	4603      	mov	r3, r0
 800117c:	2bff      	cmp	r3, #255	@ 0xff
 800117e:	d001      	beq.n	8001184 <SD_SendCmd+0x1a>
 8001180:	23ff      	movs	r3, #255	@ 0xff
 8001182:	e042      	b.n	800120a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff feae 	bl	8000ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fea8 	bl	8000ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fea2 	bl	8000ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fe9c 	bl	8000ee8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe97 	bl	8000ee8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b40      	cmp	r3, #64	@ 0x40
 80011be:	d102      	bne.n	80011c6 <SD_SendCmd+0x5c>
 80011c0:	2395      	movs	r3, #149	@ 0x95
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e007      	b.n	80011d6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b48      	cmp	r3, #72	@ 0x48
 80011ca:	d102      	bne.n	80011d2 <SD_SendCmd+0x68>
 80011cc:	2387      	movs	r3, #135	@ 0x87
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <SD_SendCmd+0x6c>
	else crc = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe85 	bl	8000ee8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b4c      	cmp	r3, #76	@ 0x4c
 80011e2:	d101      	bne.n	80011e8 <SD_SendCmd+0x7e>
 80011e4:	f7ff feb4 	bl	8000f50 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011e8:	230a      	movs	r3, #10
 80011ea:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011ec:	f7ff feb0 	bl	8000f50 <SPI_RxByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da05      	bge.n	8001208 <SD_SendCmd+0x9e>
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	3b01      	subs	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f1      	bne.n	80011ec <SD_SendCmd+0x82>

	return res;
 8001208:	7b7b      	ldrb	r3, [r7, #13]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SD_disk_initialize+0x14>
 8001224:	2301      	movs	r3, #1
 8001226:	e0d1      	b.n	80013cc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001228:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <SD_disk_initialize+0x1c0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <SD_disk_initialize+0x2a>
 8001236:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <SD_disk_initialize+0x1c0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	e0c6      	b.n	80013cc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800123e:	f7ff fecb 	bl	8000fd8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001242:	f7ff fe35 	bl	8000eb0 <SELECT>

	/* check disk type */
	type = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800124a:	2100      	movs	r1, #0
 800124c:	2040      	movs	r0, #64	@ 0x40
 800124e:	f7ff ff8c 	bl	800116a <SD_SendCmd>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	f040 80a1 	bne.w	800139c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800125a:	4b5f      	ldr	r3, [pc, #380]	@ (80013d8 <SD_disk_initialize+0x1c4>)
 800125c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001260:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001262:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001266:	2048      	movs	r0, #72	@ 0x48
 8001268:	f7ff ff7f 	bl	800116a <SD_SendCmd>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d155      	bne.n	800131e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e00c      	b.n	8001292 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001278:	7bfc      	ldrb	r4, [r7, #15]
 800127a:	f7ff fe69 	bl	8000f50 <SPI_RxByte>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	f104 0310 	add.w	r3, r4, #16
 8001286:	443b      	add	r3, r7
 8001288:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	3301      	adds	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d9ef      	bls.n	8001278 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d17e      	bne.n	800139c <SD_disk_initialize+0x188>
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	2baa      	cmp	r3, #170	@ 0xaa
 80012a2:	d17b      	bne.n	800139c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012a4:	2100      	movs	r1, #0
 80012a6:	2077      	movs	r0, #119	@ 0x77
 80012a8:	f7ff ff5f 	bl	800116a <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d807      	bhi.n	80012c2 <SD_disk_initialize+0xae>
 80012b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b6:	2069      	movs	r0, #105	@ 0x69
 80012b8:	f7ff ff57 	bl	800116a <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012c2:	4b45      	ldr	r3, [pc, #276]	@ (80013d8 <SD_disk_initialize+0x1c4>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ec      	bne.n	80012a4 <SD_disk_initialize+0x90>
 80012ca:	e000      	b.n	80012ce <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012cc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012ce:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <SD_disk_initialize+0x1c4>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d062      	beq.n	800139c <SD_disk_initialize+0x188>
 80012d6:	2100      	movs	r1, #0
 80012d8:	207a      	movs	r0, #122	@ 0x7a
 80012da:	f7ff ff46 	bl	800116a <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15b      	bne.n	800139c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00c      	b.n	8001304 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012ea:	7bfc      	ldrb	r4, [r7, #15]
 80012ec:	f7ff fe30 	bl	8000f50 <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9ef      	bls.n	80012ea <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_initialize+0x104>
 8001314:	230c      	movs	r3, #12
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0x106>
 8001318:	2304      	movs	r3, #4
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	e03e      	b.n	800139c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800131e:	2100      	movs	r1, #0
 8001320:	2077      	movs	r0, #119	@ 0x77
 8001322:	f7ff ff22 	bl	800116a <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d808      	bhi.n	800133e <SD_disk_initialize+0x12a>
 800132c:	2100      	movs	r1, #0
 800132e:	2069      	movs	r0, #105	@ 0x69
 8001330:	f7ff ff1b 	bl	800116a <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d801      	bhi.n	800133e <SD_disk_initialize+0x12a>
 800133a:	2302      	movs	r3, #2
 800133c:	e000      	b.n	8001340 <SD_disk_initialize+0x12c>
 800133e:	2301      	movs	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10e      	bne.n	8001366 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001348:	2100      	movs	r1, #0
 800134a:	2077      	movs	r0, #119	@ 0x77
 800134c:	f7ff ff0d 	bl	800116a <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d80e      	bhi.n	8001374 <SD_disk_initialize+0x160>
 8001356:	2100      	movs	r1, #0
 8001358:	2069      	movs	r0, #105	@ 0x69
 800135a:	f7ff ff06 	bl	800116a <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <SD_disk_initialize+0x160>
 8001364:	e00c      	b.n	8001380 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001366:	2100      	movs	r1, #0
 8001368:	2041      	movs	r0, #65	@ 0x41
 800136a:	f7ff fefe 	bl	800116a <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <SD_disk_initialize+0x1c4>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e2      	bne.n	8001342 <SD_disk_initialize+0x12e>
 800137c:	e000      	b.n	8001380 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800137e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <SD_disk_initialize+0x1c4>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <SD_disk_initialize+0x184>
 8001388:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800138c:	2050      	movs	r0, #80	@ 0x50
 800138e:	f7ff feec 	bl	800116a <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SD_disk_initialize+0x188>
 8001398:	2300      	movs	r3, #0
 800139a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <SD_disk_initialize+0x1c8>)
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013a2:	f7ff fd93 	bl	8000ecc <DESELECT>
	SPI_RxByte();
 80013a6:	f7ff fdd3 	bl	8000f50 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <SD_disk_initialize+0x1c0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SD_disk_initialize+0x1c0>)
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e001      	b.n	80013c6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013c2:	f7ff fe4b 	bl	800105c <SD_PowerOff>
	}

	return Stat;
 80013c6:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <SD_disk_initialize+0x1c0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200000ac 	.word	0x200000ac
 80013dc:	200000b0 	.word	0x200000b0

080013e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SD_disk_status+0x14>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e002      	b.n	80013fa <SD_disk_status+0x1a>
	return Stat;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <SD_disk_status+0x24>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000000 	.word	0x20000000

08001408 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <SD_disk_read+0x1c>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <SD_disk_read+0x20>
 8001424:	2304      	movs	r3, #4
 8001426:	e051      	b.n	80014cc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001428:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <SD_disk_read+0xcc>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SD_disk_read+0x32>
 8001436:	2303      	movs	r3, #3
 8001438:	e048      	b.n	80014cc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <SD_disk_read+0xd0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <SD_disk_read+0x44>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	607b      	str	r3, [r7, #4]

	SELECT();
 800144c:	f7ff fd30 	bl	8000eb0 <SELECT>

	if (count == 1)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d111      	bne.n	800147a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	2051      	movs	r0, #81	@ 0x51
 800145a:	f7ff fe86 	bl	800116a <SD_SendCmd>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d129      	bne.n	80014b8 <SD_disk_read+0xb0>
 8001464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f7ff fe0d 	bl	8001088 <SD_RxDataBlock>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d021      	beq.n	80014b8 <SD_disk_read+0xb0>
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	e01e      	b.n	80014b8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	2052      	movs	r0, #82	@ 0x52
 800147e:	f7ff fe74 	bl	800116a <SD_SendCmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d117      	bne.n	80014b8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148c:	68b8      	ldr	r0, [r7, #8]
 800148e:	f7ff fdfb 	bl	8001088 <SD_RxDataBlock>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <SD_disk_read+0xa6>
				buff += 512;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800149e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ed      	bne.n	8001488 <SD_disk_read+0x80>
 80014ac:	e000      	b.n	80014b0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014ae:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014b0:	2100      	movs	r1, #0
 80014b2:	204c      	movs	r0, #76	@ 0x4c
 80014b4:	f7ff fe59 	bl	800116a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014b8:	f7ff fd08 	bl	8000ecc <DESELECT>
	SPI_RxByte();
 80014bc:	f7ff fd48 	bl	8000f50 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	200000b0 	.word	0x200000b0

080014dc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <SD_disk_write+0x1c>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <SD_disk_write+0x20>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e06b      	b.n	80015d4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <SD_disk_write+0x100>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SD_disk_write+0x32>
 800150a:	2303      	movs	r3, #3
 800150c:	e062      	b.n	80015d4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800150e:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <SD_disk_write+0x100>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SD_disk_write+0x44>
 800151c:	2302      	movs	r3, #2
 800151e:	e059      	b.n	80015d4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <SD_disk_write+0x104>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <SD_disk_write+0x56>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	607b      	str	r3, [r7, #4]

	SELECT();
 8001532:	f7ff fcbd 	bl	8000eb0 <SELECT>

	if (count == 1)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d110      	bne.n	800155e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	2058      	movs	r0, #88	@ 0x58
 8001540:	f7ff fe13 	bl	800116a <SD_SendCmd>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d13a      	bne.n	80015c0 <SD_disk_write+0xe4>
 800154a:	21fe      	movs	r1, #254	@ 0xfe
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f7ff fdc9 	bl	80010e4 <SD_TxDataBlock>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d033      	beq.n	80015c0 <SD_disk_write+0xe4>
			count = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	e030      	b.n	80015c0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <SD_disk_write+0x104>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800156a:	2100      	movs	r1, #0
 800156c:	2077      	movs	r0, #119	@ 0x77
 800156e:	f7ff fdfc 	bl	800116a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	2057      	movs	r0, #87	@ 0x57
 8001576:	f7ff fdf8 	bl	800116a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2059      	movs	r0, #89	@ 0x59
 800157e:	f7ff fdf4 	bl	800116a <SD_SendCmd>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11b      	bne.n	80015c0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001588:	21fc      	movs	r1, #252	@ 0xfc
 800158a:	68b8      	ldr	r0, [r7, #8]
 800158c:	f7ff fdaa 	bl	80010e4 <SD_TxDataBlock>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00a      	beq.n	80015ac <SD_disk_write+0xd0>
				buff += 512;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800159c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ee      	bne.n	8001588 <SD_disk_write+0xac>
 80015aa:	e000      	b.n	80015ae <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015ac:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015ae:	21fd      	movs	r1, #253	@ 0xfd
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fd97 	bl	80010e4 <SD_TxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <SD_disk_write+0xe4>
			{
				count = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015c0:	f7ff fc84 	bl	8000ecc <DESELECT>
	SPI_RxByte();
 80015c4:	f7ff fcc4 	bl	8000f50 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	200000b0 	.word	0x200000b0

080015e4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b08b      	sub	sp, #44	@ 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	603a      	str	r2, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	460b      	mov	r3, r1
 80015f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SD_disk_ioctl+0x1e>
 80015fe:	2304      	movs	r3, #4
 8001600:	e113      	b.n	800182a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d124      	bne.n	8001658 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d012      	beq.n	800163c <SD_disk_ioctl+0x58>
 8001616:	2b02      	cmp	r3, #2
 8001618:	dc1a      	bgt.n	8001650 <SD_disk_ioctl+0x6c>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <SD_disk_ioctl+0x40>
 800161e:	2b01      	cmp	r3, #1
 8001620:	d006      	beq.n	8001630 <SD_disk_ioctl+0x4c>
 8001622:	e015      	b.n	8001650 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001624:	f7ff fd1a 	bl	800105c <SD_PowerOff>
			res = RES_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800162e:	e0fa      	b.n	8001826 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001630:	f7ff fcd2 	bl	8000fd8 <SD_PowerOn>
			res = RES_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800163a:	e0f4      	b.n	8001826 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	1c5c      	adds	r4, r3, #1
 8001640:	f7ff fd18 	bl	8001074 <SD_CheckPower>
 8001644:	4603      	mov	r3, r0
 8001646:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800164e:	e0ea      	b.n	8001826 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001650:	2304      	movs	r3, #4
 8001652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001656:	e0e6      	b.n	8001826 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001658:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <SD_disk_ioctl+0x250>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SD_disk_ioctl+0x86>
 8001666:	2303      	movs	r3, #3
 8001668:	e0df      	b.n	800182a <SD_disk_ioctl+0x246>

		SELECT();
 800166a:	f7ff fc21 	bl	8000eb0 <SELECT>

		switch (ctrl)
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	2b0d      	cmp	r3, #13
 8001672:	f200 80c9 	bhi.w	8001808 <SD_disk_ioctl+0x224>
 8001676:	a201      	add	r2, pc, #4	@ (adr r2, 800167c <SD_disk_ioctl+0x98>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	08001773 	.word	0x08001773
 8001680:	080016b5 	.word	0x080016b5
 8001684:	08001763 	.word	0x08001763
 8001688:	08001809 	.word	0x08001809
 800168c:	08001809 	.word	0x08001809
 8001690:	08001809 	.word	0x08001809
 8001694:	08001809 	.word	0x08001809
 8001698:	08001809 	.word	0x08001809
 800169c:	08001809 	.word	0x08001809
 80016a0:	08001809 	.word	0x08001809
 80016a4:	08001809 	.word	0x08001809
 80016a8:	08001785 	.word	0x08001785
 80016ac:	080017a9 	.word	0x080017a9
 80016b0:	080017cd 	.word	0x080017cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016b4:	2100      	movs	r1, #0
 80016b6:	2049      	movs	r0, #73	@ 0x49
 80016b8:	f7ff fd57 	bl	800116a <SD_SendCmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80a6 	bne.w	8001810 <SD_disk_ioctl+0x22c>
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2110      	movs	r1, #16
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fcdc 	bl	8001088 <SD_RxDataBlock>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 809c 	beq.w	8001810 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80016d8:	7b3b      	ldrb	r3, [r7, #12]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10d      	bne.n	80016fe <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016e2:	7d7b      	ldrb	r3, [r7, #21]
 80016e4:	461a      	mov	r2, r3
 80016e6:	7d3b      	ldrb	r3, [r7, #20]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016f4:	8bfb      	ldrh	r3, [r7, #30]
 80016f6:	029a      	lsls	r2, r3, #10
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e02d      	b.n	800175a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016fe:	7c7b      	ldrb	r3, [r7, #17]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	b2da      	uxtb	r2, r3
 8001706:	7dbb      	ldrb	r3, [r7, #22]
 8001708:	09db      	lsrs	r3, r3, #7
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4413      	add	r3, r2
 800170e:	b2da      	uxtb	r2, r3
 8001710:	7d7b      	ldrb	r3, [r7, #21]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0306 	and.w	r3, r3, #6
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4413      	add	r3, r2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3302      	adds	r3, #2
 8001722:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001726:	7d3b      	ldrb	r3, [r7, #20]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	7cfb      	ldrb	r3, [r7, #19]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29a      	uxth	r2, r3
 8001738:	7cbb      	ldrb	r3, [r7, #18]
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	b29b      	uxth	r3, r3
 800173e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	3301      	adds	r3, #1
 800174a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800174c:	8bfa      	ldrh	r2, [r7, #30]
 800174e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001752:	3b09      	subs	r3, #9
 8001754:	409a      	lsls	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001760:	e056      	b.n	8001810 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001770:	e055      	b.n	800181e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001772:	f7ff fc17 	bl	8000fa4 <SD_ReadyWait>
 8001776:	4603      	mov	r3, r0
 8001778:	2bff      	cmp	r3, #255	@ 0xff
 800177a:	d14b      	bne.n	8001814 <SD_disk_ioctl+0x230>
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001782:	e047      	b.n	8001814 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001784:	2100      	movs	r1, #0
 8001786:	2049      	movs	r0, #73	@ 0x49
 8001788:	f7ff fcef 	bl	800116a <SD_SendCmd>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d142      	bne.n	8001818 <SD_disk_ioctl+0x234>
 8001792:	2110      	movs	r1, #16
 8001794:	6a38      	ldr	r0, [r7, #32]
 8001796:	f7ff fc77 	bl	8001088 <SD_RxDataBlock>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03b      	beq.n	8001818 <SD_disk_ioctl+0x234>
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80017a6:	e037      	b.n	8001818 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017a8:	2100      	movs	r1, #0
 80017aa:	204a      	movs	r0, #74	@ 0x4a
 80017ac:	f7ff fcdd 	bl	800116a <SD_SendCmd>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d132      	bne.n	800181c <SD_disk_ioctl+0x238>
 80017b6:	2110      	movs	r1, #16
 80017b8:	6a38      	ldr	r0, [r7, #32]
 80017ba:	f7ff fc65 	bl	8001088 <SD_RxDataBlock>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d02b      	beq.n	800181c <SD_disk_ioctl+0x238>
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80017ca:	e027      	b.n	800181c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017cc:	2100      	movs	r1, #0
 80017ce:	207a      	movs	r0, #122	@ 0x7a
 80017d0:	f7ff fccb 	bl	800116a <SD_SendCmd>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017e0:	e00b      	b.n	80017fa <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80017e2:	6a3c      	ldr	r4, [r7, #32]
 80017e4:	1c63      	adds	r3, r4, #1
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	f7ff fbb2 	bl	8000f50 <SPI_RxByte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017f4:	3301      	adds	r3, #1
 80017f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d9ef      	bls.n	80017e2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001808:	2304      	movs	r3, #4
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800180e:	e006      	b.n	800181e <SD_disk_ioctl+0x23a>
			break;
 8001810:	bf00      	nop
 8001812:	e004      	b.n	800181e <SD_disk_ioctl+0x23a>
			break;
 8001814:	bf00      	nop
 8001816:	e002      	b.n	800181e <SD_disk_ioctl+0x23a>
			break;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <SD_disk_ioctl+0x23a>
			break;
 800181c:	bf00      	nop
		}

		DESELECT();
 800181e:	f7ff fb55 	bl	8000ecc <DESELECT>
		SPI_RxByte();
 8001822:	f7ff fb95 	bl	8000f50 <SPI_RxByte>
	}

	return res;
 8001826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800182a:	4618      	mov	r0, r3
 800182c:	372c      	adds	r7, #44	@ 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	20000000 	.word	0x20000000

08001838 <HAL_CAN_RxFifo0MsgPendingCallback>:

const char *array_elementos[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001840:	4b5c      	ldr	r3, [pc, #368]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001842:	4a5d      	ldr	r2, [pc, #372]	@ (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f001 fa26 	bl	8002c98 <HAL_CAN_GetRxMessage>
	count++;
 800184c:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001856:	701a      	strb	r2, [r3, #0]

	switch (RxHeader.StdId){
 8001858:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001860:	f040 80a4 	bne.w	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0x174>
////			Coolant_Temp = (uint8_t)RxData[3];
//			break;

		case 0x120:

			Engine_Speed = (uint8_t)RxData[0];
 8001864:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800186c:	601a      	str	r2, [r3, #0]
			Engine_Speed = (int)Engine_Speed *100;
 800186e:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2264      	movs	r2, #100	@ 0x64
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4a51      	ldr	r2, [pc, #324]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800187a:	6013      	str	r3, [r2, #0]
			Throttle_Pos = (uint8_t)RxData[1];
 800187c:	4b4d      	ldr	r3, [pc, #308]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800187e:	785a      	ldrb	r2, [r3, #1]
 8001880:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001882:	701a      	strb	r2, [r3, #0]
			Coolant_Temp = (uint8_t)RxData[2];
 8001884:	4b4b      	ldr	r3, [pc, #300]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001886:	789a      	ldrb	r2, [r3, #2]
 8001888:	4b4f      	ldr	r3, [pc, #316]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800188a:	701a      	strb	r2, [r3, #0]
			Battery_Voltage = (uint8_t)RxData[3];
 800188c:	4b49      	ldr	r3, [pc, #292]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800188e:	78da      	ldrb	r2, [r3, #3]
 8001890:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001892:	701a      	strb	r2, [r3, #0]

			Brake_Pressure = (int16_t)RxData[4]<<8 | RxData[5];
 8001894:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	4b45      	ldr	r3, [pc, #276]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80018a8:	801a      	strh	r2, [r3, #0]


			sprintf(RPM_text, "%d", Engine_Speed);
 80018aa:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4948      	ldr	r1, [pc, #288]	@ (80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80018b2:	4849      	ldr	r0, [pc, #292]	@ (80019d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80018b4:	f005 fc2e 	bl	8007114 <siprintf>
			NEXTION_SendText(&huart1, "revValue", RPM_text, "RPM");
 80018b8:	4b48      	ldr	r3, [pc, #288]	@ (80019dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80018ba:	4a47      	ldr	r2, [pc, #284]	@ (80019d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80018bc:	4948      	ldr	r1, [pc, #288]	@ (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80018be:	4849      	ldr	r0, [pc, #292]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80018c0:	f000 fb58 	bl	8001f74 <NEXTION_SendText>
			NEXTION_Send_Revs(&huart1, Engine_Speed);
 80018c4:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4846      	ldr	r0, [pc, #280]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80018cc:	f000 fbc0 	bl	8002050 <NEXTION_Send_Revs>


			NEXTION_SendNumber(&huart1, "acePedal", Throttle_Pos);
 80018d0:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4944      	ldr	r1, [pc, #272]	@ (80019e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80018d8:	4842      	ldr	r0, [pc, #264]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80018da:	f000 fb8d 	bl	8001ff8 <NEXTION_SendNumber>

			sprintf(Coolant_Text, "%d", Coolant_Temp);
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	493b      	ldr	r1, [pc, #236]	@ (80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80018e6:	4841      	ldr	r0, [pc, #260]	@ (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80018e8:	f005 fc14 	bl	8007114 <siprintf>
			NEXTION_SendText(&huart1,"engineTemp",Coolant_Text,"\xB0");
 80018ec:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80018ee:	4a3f      	ldr	r2, [pc, #252]	@ (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80018f0:	4940      	ldr	r1, [pc, #256]	@ (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80018f2:	483c      	ldr	r0, [pc, #240]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80018f4:	f000 fb3e 	bl	8001f74 <NEXTION_SendText>
			//Creamos el condicional para los colores de la temperatura de refrigerante
			if (Coolant_Temp<95){
 80018f8:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b5e      	cmp	r3, #94	@ 0x5e
 80018fe:	d806      	bhi.n	800190e <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
				NEXTION_estado_color(&huart1, "engineTemp", 36609);
 8001900:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8001904:	493b      	ldr	r1, [pc, #236]	@ (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001906:	4837      	ldr	r0, [pc, #220]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001908:	f000 fcb6 	bl	8002278 <NEXTION_estado_color>
 800190c:	e014      	b.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			}
			else if((Coolant_Temp>=95)&&(Coolant_Temp<=99)){
 800190e:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b5e      	cmp	r3, #94	@ 0x5e
 8001914:	d90a      	bls.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b63      	cmp	r3, #99	@ 0x63
 800191c:	d806      	bhi.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
				NEXTION_estado_color(&huart1, "engineTemp", 64520);
 800191e:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 8001922:	4934      	ldr	r1, [pc, #208]	@ (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001924:	482f      	ldr	r0, [pc, #188]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001926:	f000 fca7 	bl	8002278 <NEXTION_estado_color>
 800192a:	e005      	b.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
			}
			else{
				NEXTION_estado_color(&huart1, "engineTemp", 63488);
 800192c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001930:	4930      	ldr	r1, [pc, #192]	@ (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001932:	482c      	ldr	r0, [pc, #176]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001934:	f000 fca0 	bl	8002278 <NEXTION_estado_color>
			}


			sprintf(Battery_Text, "%d",Battery_Voltage);
 8001938:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4925      	ldr	r1, [pc, #148]	@ (80019d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001940:	482d      	ldr	r0, [pc, #180]	@ (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001942:	f005 fbe7 	bl	8007114 <siprintf>
			NEXTION_SendText(&huart1,"voltage",Battery_Text,"V");
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001948:	4a2b      	ldr	r2, [pc, #172]	@ (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800194a:	492d      	ldr	r1, [pc, #180]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800194c:	4825      	ldr	r0, [pc, #148]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800194e:	f000 fb11 	bl	8001f74 <NEXTION_SendText>
			//Creamos el condicional para los colores de la bateria
			if (Battery_Voltage>=12.5){
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d906      	bls.n	8001968 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
				NEXTION_estado_color(&huart1, "voltage", 36609);
 800195a:	f648 7201 	movw	r2, #36609	@ 0x8f01
 800195e:	4928      	ldr	r1, [pc, #160]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001960:	4820      	ldr	r0, [pc, #128]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001962:	f000 fc89 	bl	8002278 <NEXTION_estado_color>
 8001966:	e014      	b.n	8001992 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
			}
			else if((Battery_Voltage<12.5)&&(Battery_Voltage>=12)){
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d80a      	bhi.n	8001986 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b0b      	cmp	r3, #11
 8001976:	d906      	bls.n	8001986 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				NEXTION_estado_color(&huart1, "voltage", 64520);
 8001978:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 800197c:	4920      	ldr	r1, [pc, #128]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800197e:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001980:	f000 fc7a 	bl	8002278 <NEXTION_estado_color>
 8001984:	e005      	b.n	8001992 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
			}
			else{
				NEXTION_estado_color(&huart1, "voltage", 63488);
 8001986:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800198a:	491d      	ldr	r1, [pc, #116]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800198c:	4815      	ldr	r0, [pc, #84]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800198e:	f000 fc73 	bl	8002278 <NEXTION_estado_color>
			}


			NEXTION_SendNumber(&huart1, "brakePedal", Brake_Pressure);
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	461a      	mov	r2, r3
 800199a:	491a      	ldr	r1, [pc, #104]	@ (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800199e:	f000 fb2b 	bl	8001ff8 <NEXTION_SendNumber>

			Gear = (uint8_t)RxData[6];
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80019a4:	799a      	ldrb	r2, [r3, #6]
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80019a8:	701a      	strb	r2, [r3, #0]

			break;
 80019aa:	bf00      	nop
	}

//	if (RxHeader.StdId == 0x118){
//	Message_Ready118 = 1;
//	}
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000248 	.word	0x20000248
 80019b8:	2000022c 	.word	0x2000022c
 80019bc:	20000250 	.word	0x20000250
 80019c0:	20000254 	.word	0x20000254
 80019c4:	20000258 	.word	0x20000258
 80019c8:	20000259 	.word	0x20000259
 80019cc:	2000025a 	.word	0x2000025a
 80019d0:	2000025c 	.word	0x2000025c
 80019d4:	0800796c 	.word	0x0800796c
 80019d8:	20000270 	.word	0x20000270
 80019dc:	08007970 	.word	0x08007970
 80019e0:	08007938 	.word	0x08007938
 80019e4:	200001e4 	.word	0x200001e4
 80019e8:	08007974 	.word	0x08007974
 80019ec:	20000284 	.word	0x20000284
 80019f0:	08007980 	.word	0x08007980
 80019f4:	08007984 	.word	0x08007984
 80019f8:	20000298 	.word	0x20000298
 80019fc:	08007990 	.word	0x08007990
 8001a00:	08007994 	.word	0x08007994
 8001a04:	0800799c 	.word	0x0800799c
 8001a08:	2000025e 	.word	0x2000025e

08001a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a12:	f000 feb3 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a16:	f000 f8a9 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1a:	f000 fa2d 	bl	8001e78 <MX_GPIO_Init>
  MX_CAN_Init();
 8001a1e:	f000 f8ff 	bl	8001c20 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001a22:	f000 f9ff 	bl	8001e24 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001a26:	f000 f97d 	bl	8001d24 <MX_RTC_Init>
  MX_SPI2_Init();
 8001a2a:	f000 f9c5 	bl	8001db8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001a2e:	f005 f9ed 	bl	8006e0c <MX_FATFS_Init>
  MX_I2C1_Init();
 8001a32:	f000 f949 	bl	8001cc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  NEXTION_SendPageChange(&huart1,"page2");
 8001a36:	493d      	ldr	r1, [pc, #244]	@ (8001b2c <main+0x120>)
 8001a38:	483d      	ldr	r0, [pc, #244]	@ (8001b30 <main+0x124>)
 8001a3a:	f000 fbb9 	bl	80021b0 <NEXTION_SendPageChange>
  HAL_Delay(2800);
 8001a3e:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
 8001a42:	f000 fefd 	bl	8002840 <HAL_Delay>

             //Mostrar dashware page
  NEXTION_SendPageChange(&huart1,"page1");
 8001a46:	493b      	ldr	r1, [pc, #236]	@ (8001b34 <main+0x128>)
 8001a48:	4839      	ldr	r0, [pc, #228]	@ (8001b30 <main+0x124>)
 8001a4a:	f000 fbb1 	bl	80021b0 <NEXTION_SendPageChange>

             //Inicializar interfaz a negro (por si se quedó la página con estilos a rojo por alguna alerta provocada por NEXTION_Alert())
  NEXTION_Alert(&huart1, 0);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4837      	ldr	r0, [pc, #220]	@ (8001b30 <main+0x124>)
 8001a52:	f000 fbd7 	bl	8002204 <NEXTION_Alert>

  HAL_CAN_Start(&hcan);
 8001a56:	4838      	ldr	r0, [pc, #224]	@ (8001b38 <main+0x12c>)
 8001a58:	f001 f8da 	bl	8002c10 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4836      	ldr	r0, [pc, #216]	@ (8001b38 <main+0x12c>)
 8001a60:	f001 fa3b 	bl	8002eda <HAL_CAN_ActivateNotification>

  MPU_6050_init();
 8001a64:	f7ff f8e8 	bl	8000c38 <MPU_6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4934      	ldr	r1, [pc, #208]	@ (8001b3c <main+0x130>)
 8001a6c:	4834      	ldr	r0, [pc, #208]	@ (8001b40 <main+0x134>)
 8001a6e:	f004 f8e9 	bl	8005c44 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a72:	2200      	movs	r2, #0
 8001a74:	4933      	ldr	r1, [pc, #204]	@ (8001b44 <main+0x138>)
 8001a76:	4832      	ldr	r0, [pc, #200]	@ (8001b40 <main+0x134>)
 8001a78:	f003 ff56 	bl	8005928 <HAL_RTC_GetTime>

	sprintf(Date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <main+0x130>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <main+0x130>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <main+0x130>)
 8001a8a:	78db      	ldrb	r3, [r3, #3]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	492d      	ldr	r1, [pc, #180]	@ (8001b48 <main+0x13c>)
 8001a92:	482e      	ldr	r0, [pc, #184]	@ (8001b4c <main+0x140>)
 8001a94:	f005 fb3e 	bl	8007114 <siprintf>
	sprintf(Time,"Time: %02d.%02d.%02d\t",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001a98:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <main+0x138>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <main+0x138>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <main+0x138>)
 8001aa6:	789b      	ldrb	r3, [r3, #2]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <main+0x144>)
 8001aae:	4829      	ldr	r0, [pc, #164]	@ (8001b54 <main+0x148>)
 8001ab0:	f005 fb30 	bl	8007114 <siprintf>

	Acc_X = MPU_6050_Get_Acc_X()/1000;
 8001ab4:	f7ff f958 	bl	8000d68 <MPU_6050_Get_Acc_X>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <main+0x14c>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	1192      	asrs	r2, r2, #6
 8001ac2:	17db      	asrs	r3, r3, #31
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f841 	bl	8000b50 <__aeabi_i2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a22      	ldr	r2, [pc, #136]	@ (8001b5c <main+0x150>)
 8001ad2:	6013      	str	r3, [r2, #0]
	Acc_Y = MPU_6050_Get_Acc_Y()/1000;
 8001ad4:	f7ff f968 	bl	8000da8 <MPU_6050_Get_Acc_Y>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <main+0x14c>)
 8001adc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae0:	1192      	asrs	r2, r2, #6
 8001ae2:	17db      	asrs	r3, r3, #31
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f831 	bl	8000b50 <__aeabi_i2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b60 <main+0x154>)
 8001af2:	6013      	str	r3, [r2, #0]
	Acc_Z = MPU_6050_Get_Acc_Z()/1000;
 8001af4:	f7ff f978 	bl	8000de8 <MPU_6050_Get_Acc_Z>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <main+0x14c>)
 8001afc:	fb82 1203 	smull	r1, r2, r2, r3
 8001b00:	1192      	asrs	r2, r2, #6
 8001b02:	17db      	asrs	r3, r3, #31
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f821 	bl	8000b50 <__aeabi_i2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <main+0x158>)
 8001b12:	6013      	str	r3, [r2, #0]
	MPU_6050_Temp = MPU_6050_Get_Temp();
 8001b14:	f7ff f988 	bl	8000e28 <MPU_6050_Get_Temp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f86c 	bl	8000bf8 <__aeabi_f2uiz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <main+0x15c>)
 8001b26:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001b28:	bf00      	nop
 8001b2a:	e79d      	b.n	8001a68 <main+0x5c>
 8001b2c:	080079a8 	.word	0x080079a8
 8001b30:	200001e4 	.word	0x200001e4
 8001b34:	080079b0 	.word	0x080079b0
 8001b38:	200000fc 	.word	0x200000fc
 8001b3c:	200000f8 	.word	0x200000f8
 8001b40:	20000178 	.word	0x20000178
 8001b44:	200000f4 	.word	0x200000f4
 8001b48:	080079b8 	.word	0x080079b8
 8001b4c:	200000d4 	.word	0x200000d4
 8001b50:	080079d0 	.word	0x080079d0
 8001b54:	200000b4 	.word	0x200000b4
 8001b58:	10624dd3 	.word	0x10624dd3
 8001b5c:	20000260 	.word	0x20000260
 8001b60:	20000264 	.word	0x20000264
 8001b64:	20000268 	.word	0x20000268
 8001b68:	2000026c 	.word	0x2000026c

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	@ 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	2228      	movs	r2, #40	@ 0x28
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 faea 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bac:	2302      	movs	r3, #2
 8001bae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bb4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 f812 	bl	8004be8 <HAL_RCC_OscConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001bca:	f000 f9cd 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	230f      	movs	r3, #15
 8001bd0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2102      	movs	r1, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fa7e 	bl	80050ec <HAL_RCC_ClockConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bf6:	f000 f9b7 	bl	8001f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fbfe 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c12:	f000 f9a9 	bl	8001f68 <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3750      	adds	r7, #80	@ 0x50
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <MX_CAN_Init+0xa4>)
 8001c2a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c2e:	2204      	movs	r2, #4
 8001c30:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c38:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c40:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001c44:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001c72:	f000 fe09 	bl	8002888 <HAL_CAN_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f000 f974 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE; //It is needed to enable the filters
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // A filter bank is a FILTER used to classify different messages.Select the filter bank we are going to use and we are going to configure.
 8001c84:	230a      	movs	r3, #10
 8001c86:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Bank to recieve or send data(FIFO0 or FIFO1).We assing the CAN FIFO we are going to use to recieve the income data
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]

  canfilterconfig.FilterIdHigh = 0x200; //We select the MAXIMUM ID allowed to be recieved
 8001c8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c90:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0; //We select the MINIMUM ID allowed to be recieved. In case it is under the range it will be restricted
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  										// In case we use STD ID we need to move 5 bits to the left staring from the lower value bits.
  canfilterconfig.FilterMaskIdHigh = 0x140 ; //Sirve para comparar con entre el ID de filtro par que despues sea comparado el ID con el mensaje de entrada. Si la mascara no compara en un bit se tomara como bueno.
 8001c96:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c9a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x100;
 8001c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK; // This is the type of ID Filter we want to use. You can look up the types by looking in it directory
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  													// It works identifying the ID to let it pass through the filter
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; //We choose the width of the Filter Register we are going to use.
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  //It choose a range of bank filters dedicated to the slave(If write 13 it will use 13 to 27 to the CAN_2)
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  											//if there is only one peripheral available (CAN1 or CAN2) It is unuseless
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <MX_CAN_Init+0xa0>)
 8001cb4:	f000 fee3 	bl	8002a7e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200000fc 	.word	0x200000fc
 8001cc4:	40006400 	.word	0x40006400

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f001 fddb 	bl	80038c0 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 f92a 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000124 	.word	0x20000124
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	460a      	mov	r2, r1
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	460a      	mov	r2, r1
 8001d34:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <MX_RTC_Init+0x90>)
 8001d3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295
 8001d46:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001d48:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d50:	4817      	ldr	r0, [pc, #92]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d52:	f003 fcc5 	bl	80056e0 <HAL_RTC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001d5c:	f000 f904 	bl	8001f68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4619      	mov	r1, r3
 8001d72:	480f      	ldr	r0, [pc, #60]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d74:	f003 fd40 	bl	80057f8 <HAL_RTC_SetTime>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001d7e:	f000 f8f3 	bl	8001f68 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JULY;
 8001d86:	2307      	movs	r3, #7
 8001d88:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x9;
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8001d8e:	2324      	movs	r3, #36	@ 0x24
 8001d90:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	2201      	movs	r2, #1
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_RTC_Init+0x8c>)
 8001d9a:	f003 fe9d 	bl	8005ad8 <HAL_RTC_SetDate>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001da4:	f000 f8e0 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000178 	.word	0x20000178
 8001db4:	40002800 	.word	0x40002800

08001db8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dbe:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <MX_SPI2_Init+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dca:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001e04:	220a      	movs	r2, #10
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <MX_SPI2_Init+0x64>)
 8001e0a:	f004 fa11 	bl	8006230 <HAL_SPI_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e14:	f000 f8a8 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000018c 	.word	0x2000018c
 8001e20:	40003800 	.word	0x40003800

08001e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <MX_USART1_UART_Init+0x50>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f004 fe06 	bl	8006a6c <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e66:	f000 f87f 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200001e4 	.word	0x200001e4
 8001e74:	40013800 	.word	0x40013800

08001e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <MX_GPIO_Init+0xe0>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4820      	ldr	r0, [pc, #128]	@ (8001f5c <MX_GPIO_Init+0xe4>)
 8001eda:	f001 fcd9 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8001ee4:	481e      	ldr	r0, [pc, #120]	@ (8001f60 <MX_GPIO_Init+0xe8>)
 8001ee6:	f001 fcd3 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef0:	481c      	ldr	r0, [pc, #112]	@ (8001f64 <MX_GPIO_Init+0xec>)
 8001ef2:	f001 fccd 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4813      	ldr	r0, [pc, #76]	@ (8001f5c <MX_GPIO_Init+0xe4>)
 8001f0e:	f001 fb3b 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001f12:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <MX_GPIO_Init+0xe8>)
 8001f2c:	f001 fb2c 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <MX_GPIO_Init+0xec>)
 8001f4a:	f001 fb1d 	bl	8003588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40010800 	.word	0x40010800

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <Error_Handler+0x8>

08001f74 <NEXTION_SendText>:
const char *array_elementos_a_poner_rojo_por_alerta[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};
const uint8_t Cmd_End[3] = {0xff, 0xff, 0xff};


// Función para actualizar objeto obj de la interfaz con un valor text
void NEXTION_SendText(UART_HandleTypeDef *huart, char *obj, char *text, char *units) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8001f82:	2032      	movs	r0, #50	@ 0x32
 8001f84:	f005 f808 	bl	8006f98 <malloc>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	613b      	str	r3, [r7, #16]
    int len = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

    if (units == NULL || units[0] == '\0') {
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <NEXTION_SendText+0x2a>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <NEXTION_SendText+0x3a>
        len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, text);  // Agregar el texto al objeto
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4912      	ldr	r1, [pc, #72]	@ (8001fec <NEXTION_SendText+0x78>)
 8001fa4:	6938      	ldr	r0, [r7, #16]
 8001fa6:	f005 f8b5 	bl	8007114 <siprintf>
 8001faa:	6178      	str	r0, [r7, #20]
 8001fac:	e008      	b.n	8001fc0 <NEXTION_SendText+0x4c>
    } else {
        len = sprintf((char *)buffer, "%s.txt=\"%s%s\"", obj, text, units); // Agrega las unidades al texto del objeto
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	490e      	ldr	r1, [pc, #56]	@ (8001ff0 <NEXTION_SendText+0x7c>)
 8001fb8:	6938      	ldr	r0, [r7, #16]
 8001fba:	f005 f8ab 	bl	8007114 <siprintf>
 8001fbe:	6178      	str	r0, [r7, #20]
    }

    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc8:	6939      	ldr	r1, [r7, #16]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f004 fd9e 	bl	8006b0c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 8001fd0:	2364      	movs	r3, #100	@ 0x64
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <NEXTION_SendText+0x80>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f004 fd98 	bl	8006b0c <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8001fdc:	6938      	ldr	r0, [r7, #16]
 8001fde:	f004 ffe3 	bl	8006fa8 <free>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	08007a24 	.word	0x08007a24
 8001ff0:	08007a30 	.word	0x08007a30
 8001ff4:	08007a78 	.word	0x08007a78

08001ff8 <NEXTION_SendNumber>:

// Actualiza valores de las barras de frenado, aceleración y revoluciones
void NEXTION_SendNumber(UART_HandleTypeDef *huart, char *obj, int number) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8002004:	2032      	movs	r0, #50	@ 0x32
 8002006:	f004 ffc7 	bl	8006f98 <malloc>
 800200a:	4603      	mov	r3, r0
 800200c:	617b      	str	r3, [r7, #20]
    int len = sprintf((char *)buffer, "%s.val=%d", obj, number); // Inicializa el buffer con el objeto y el valor a inicializar
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	490d      	ldr	r1, [pc, #52]	@ (8002048 <NEXTION_SendNumber+0x50>)
 8002014:	6978      	ldr	r0, [r7, #20]
 8002016:	f005 f87d 	bl	8007114 <siprintf>
 800201a:	6138      	str	r0, [r7, #16]
    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	b29a      	uxth	r2, r3
 8002020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f004 fd70 	bl	8006b0c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 800202c:	2364      	movs	r3, #100	@ 0x64
 800202e:	2203      	movs	r2, #3
 8002030:	4906      	ldr	r1, [pc, #24]	@ (800204c <NEXTION_SendNumber+0x54>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f004 fd6a 	bl	8006b0c <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8002038:	6978      	ldr	r0, [r7, #20]
 800203a:	f004 ffb5 	bl	8006fa8 <free>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	08007a40 	.word	0x08007a40
 800204c:	08007a78 	.word	0x08007a78

08002050 <NEXTION_Send_Revs>:

// Función para actualizar los indicadores de revoluviones del dash
void NEXTION_Send_Revs(UART_HandleTypeDef *huart, int val) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    int resultado1 = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
    int resultado2 = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
    int resultado3 = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]

    if (val >= 0 && val < 3000) {
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db26      	blt.n	80020ba <NEXTION_Send_Revs+0x6a>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002072:	4293      	cmp	r3, r2
 8002074:	dc21      	bgt.n	80020ba <NEXTION_Send_Revs+0x6a>
        resultado1 = val / 30.0; // Rango 0-3000
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7fe f9bc 	bl	80003f4 <__aeabi_i2d>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b46      	ldr	r3, [pc, #280]	@ (800219c <NEXTION_Send_Revs+0x14c>)
 8002082:	f7fe fb4b 	bl	800071c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fc2d 	bl	80008ec <__aeabi_d2iz>
 8002092:	4603      	mov	r3, r0
 8002094:	617b      	str	r3, [r7, #20]
        resultado1 = (resultado1 + 10) / 20 * 20;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	330a      	adds	r3, #10
 800209a:	4a41      	ldr	r2, [pc, #260]	@ (80021a0 <NEXTION_Send_Revs+0x150>)
 800209c:	fb82 1203 	smull	r1, r2, r2, r3
 80020a0:	10d2      	asrs	r2, r2, #3
 80020a2:	17db      	asrs	r3, r3, #31
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	617b      	str	r3, [r7, #20]
        resultado2 = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e05d      	b.n	8002176 <NEXTION_Send_Revs+0x126>
    } else if (val >= 3000 && val < 6000) {
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80020c0:	4293      	cmp	r3, r2
 80020c2:	dd29      	ble.n	8002118 <NEXTION_Send_Revs+0xc8>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f241 726f 	movw	r2, #5999	@ 0x176f
 80020ca:	4293      	cmp	r3, r2
 80020cc:	dc24      	bgt.n	8002118 <NEXTION_Send_Revs+0xc8>
        resultado1 = 100;
 80020ce:	2364      	movs	r3, #100	@ 0x64
 80020d0:	617b      	str	r3, [r7, #20]
        resultado2 = (val - 3000) / 30.0; // Rango 3000-6000
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f98b 	bl	80003f4 <__aeabi_i2d>
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b2e      	ldr	r3, [pc, #184]	@ (800219c <NEXTION_Send_Revs+0x14c>)
 80020e4:	f7fe fb1a 	bl	800071c <__aeabi_ddiv>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fbfc 	bl	80008ec <__aeabi_d2iz>
 80020f4:	4603      	mov	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]
        resultado2 = (resultado2 + 10) / 20 * 20;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	330a      	adds	r3, #10
 80020fc:	4a28      	ldr	r2, [pc, #160]	@ (80021a0 <NEXTION_Send_Revs+0x150>)
 80020fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002102:	10d2      	asrs	r2, r2, #3
 8002104:	17db      	asrs	r3, r3, #31
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	613b      	str	r3, [r7, #16]

        resultado3 = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e02e      	b.n	8002176 <NEXTION_Send_Revs+0x126>
    } else if (val >= 6000 && val <= 9000) {
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800211e:	4293      	cmp	r3, r2
 8002120:	dd29      	ble.n	8002176 <NEXTION_Send_Revs+0x126>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f242 3228 	movw	r2, #9000	@ 0x2328
 8002128:	4293      	cmp	r3, r2
 800212a:	dc24      	bgt.n	8002176 <NEXTION_Send_Revs+0x126>
        resultado1 = 100;
 800212c:	2364      	movs	r3, #100	@ 0x64
 800212e:	617b      	str	r3, [r7, #20]
        resultado2 = 100;
 8002130:	2364      	movs	r3, #100	@ 0x64
 8002132:	613b      	str	r3, [r7, #16]
        resultado3 = (val - 6000) / 30.0; // Rango 6000-9000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f5a3 53bb 	sub.w	r3, r3, #5984	@ 0x1760
 800213a:	3b10      	subs	r3, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f959 	bl	80003f4 <__aeabi_i2d>
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <NEXTION_Send_Revs+0x14c>)
 8002148:	f7fe fae8 	bl	800071c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fbca 	bl	80008ec <__aeabi_d2iz>
 8002158:	4603      	mov	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]
        resultado3 = (resultado3 + 10) / 20 * 20;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	330a      	adds	r3, #10
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <NEXTION_Send_Revs+0x150>)
 8002162:	fb82 1203 	smull	r1, r2, r2, r3
 8002166:	10d2      	asrs	r2, r2, #3
 8002168:	17db      	asrs	r3, r3, #31
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	60fb      	str	r3, [r7, #12]

    }

    // Envía los resultados a las barras correspondientes
    NEXTION_SendNumber(huart,"led1", resultado1);
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <NEXTION_Send_Revs+0x154>)
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff3c 	bl	8001ff8 <NEXTION_SendNumber>
    NEXTION_SendNumber(huart,"led2", resultado2);
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4909      	ldr	r1, [pc, #36]	@ (80021a8 <NEXTION_Send_Revs+0x158>)
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff37 	bl	8001ff8 <NEXTION_SendNumber>
    NEXTION_SendNumber(huart,"led3", resultado3);
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4907      	ldr	r1, [pc, #28]	@ (80021ac <NEXTION_Send_Revs+0x15c>)
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff32 	bl	8001ff8 <NEXTION_SendNumber>
}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	403e0000 	.word	0x403e0000
 80021a0:	66666667 	.word	0x66666667
 80021a4:	08007a4c 	.word	0x08007a4c
 80021a8:	08007a54 	.word	0x08007a54
 80021ac:	08007a5c 	.word	0x08007a5c

080021b0 <NEXTION_SendPageChange>:

//Función para realizar la transicción de la landing view al dash
void NEXTION_SendPageChange(UART_HandleTypeDef *huart,char *page_name) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    // Reserva memoria para un buffer de 50 bytes
    uint8_t *buffer = malloc(50 * sizeof(char));
 80021ba:	2032      	movs	r0, #50	@ 0x32
 80021bc:	f004 feec 	bl	8006f98 <malloc>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
    // Inicializa el buffer con la instrucción para cambiar de página
    int len = sprintf((char *)buffer, "page %s", page_name);
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	490d      	ldr	r1, [pc, #52]	@ (80021fc <NEXTION_SendPageChange+0x4c>)
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f004 ffa3 	bl	8007114 <siprintf>
 80021ce:	60b8      	str	r0, [r7, #8]
    // Transmite el buffer a través de UART
    HAL_UART_Transmit(huart, buffer, len, 1000);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 fc96 	bl	8006b0c <HAL_UART_Transmit>
    // Transmite un comando para indicar el final del mensaje
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 80021e0:	2364      	movs	r3, #100	@ 0x64
 80021e2:	2203      	movs	r2, #3
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <NEXTION_SendPageChange+0x50>)
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fc90 	bl	8006b0c <HAL_UART_Transmit>
    // Libera la memoria asignada al buffer
    free(buffer);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f004 fedb 	bl	8006fa8 <free>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08007a64 	.word	0x08007a64
 8002200:	08007a78 	.word	0x08007a78

08002204 <NEXTION_Alert>:

//Función para actualizar todos los colores de los elementos a rojo por temperatura del motor o voltaje bateria elevados
void NEXTION_Alert(UART_HandleTypeDef *huart,int color) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]

	uint8_t *buffer = malloc(50 * sizeof(char));
 800220e:	2032      	movs	r0, #50	@ 0x32
 8002210:	f004 fec2 	bl	8006f98 <malloc>
 8002214:	4603      	mov	r3, r0
 8002216:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 7; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e01d      	b.n	800225a <NEXTION_Alert+0x56>

        // Formatea y transmite el mensaje para el elemento actual
        int len = sprintf((char *)buffer, "%s.bco=%d", array_elementos_a_poner_rojo_por_alerta[i], color);
 800221e:	4a13      	ldr	r2, [pc, #76]	@ (800226c <NEXTION_Alert+0x68>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	4911      	ldr	r1, [pc, #68]	@ (8002270 <NEXTION_Alert+0x6c>)
 800222a:	6938      	ldr	r0, [r7, #16]
 800222c:	f004 ff72 	bl	8007114 <siprintf>
 8002230:	60f8      	str	r0, [r7, #12]

        HAL_UART_Transmit(huart, buffer, len, 1000);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	b29a      	uxth	r2, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f004 fc65 	bl	8006b0c <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 8002242:	2364      	movs	r3, #100	@ 0x64
 8002244:	2203      	movs	r2, #3
 8002246:	490b      	ldr	r1, [pc, #44]	@ (8002274 <NEXTION_Alert+0x70>)
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f004 fc5f 	bl	8006b0c <HAL_UART_Transmit>

        // Libera el buffer
        free(buffer);
 800224e:	6938      	ldr	r0, [r7, #16]
 8002250:	f004 feaa 	bl	8006fa8 <free>
    for (int i = 0; i < 7; i++) {
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b06      	cmp	r3, #6
 800225e:	ddde      	ble.n	800221e <NEXTION_Alert+0x1a>
    }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000004 	.word	0x20000004
 8002270:	08007a6c 	.word	0x08007a6c
 8002274:	08007a78 	.word	0x08007a78

08002278 <NEXTION_estado_color>:

//Función para actualizar color estado de voltaje bateria y temperatura del motor
void NEXTION_estado_color(UART_HandleTypeDef *huart, char *obj, int color) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]

	uint8_t *buffer = malloc(50 * sizeof(char));
 8002284:	2032      	movs	r0, #50	@ 0x32
 8002286:	f004 fe87 	bl	8006f98 <malloc>
 800228a:	4603      	mov	r3, r0
 800228c:	617b      	str	r3, [r7, #20]

	// Formatea y transmite el mensaje para el elemento actual
	int len = sprintf((char *)buffer, "%s.bco=%d", obj, color);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	490d      	ldr	r1, [pc, #52]	@ (80022c8 <NEXTION_estado_color+0x50>)
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f004 ff3d 	bl	8007114 <siprintf>
 800229a:	6138      	str	r0, [r7, #16]

    HAL_UART_Transmit(huart, buffer, len, 1000);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f004 fc30 	bl	8006b0c <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 80022ac:	2364      	movs	r3, #100	@ 0x64
 80022ae:	2203      	movs	r2, #3
 80022b0:	4906      	ldr	r1, [pc, #24]	@ (80022cc <NEXTION_estado_color+0x54>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f004 fc2a 	bl	8006b0c <HAL_UART_Transmit>

    // Libera el buffer
    free(buffer);
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f004 fe75 	bl	8006fa8 <free>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	08007a6c 	.word	0x08007a6c
 80022cc:	08007a78 	.word	0x08007a78

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_MspInit+0x5c>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4a14      	ldr	r2, [pc, #80]	@ (800232c <HAL_MspInit+0x5c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6193      	str	r3, [r2, #24]
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_MspInit+0x5c>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <HAL_MspInit+0x5c>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <HAL_MspInit+0x5c>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_MspInit+0x5c>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_MspInit+0x60>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_MspInit+0x60>)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000

08002334 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <HAL_CAN_MspInit+0xd0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d153      	bne.n	80023fc <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002354:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 800235a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800235e:	61d3      	str	r3, [r2, #28]
 8002360:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_CAN_MspInit+0xd4>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	481c      	ldr	r0, [pc, #112]	@ (800240c <HAL_CAN_MspInit+0xd8>)
 800239a:	f001 f8f5 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4816      	ldr	r0, [pc, #88]	@ (800240c <HAL_CAN_MspInit+0xd8>)
 80023b4:	f001 f8e8 	bl	8003588 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80023b8:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_CAN_MspInit+0xdc>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002410 <HAL_CAN_MspInit+0xdc>)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2014      	movs	r0, #20
 80023e2:	f001 f89a 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80023e6:	2014      	movs	r0, #20
 80023e8:	f001 f8b3 	bl	8003552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2015      	movs	r0, #21
 80023f2:	f001 f892 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023f6:	2015      	movs	r0, #21
 80023f8:	f001 f8ab 	bl	8003552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	@ 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40006400 	.word	0x40006400
 8002408:	40021000 	.word	0x40021000
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <HAL_I2C_MspInit+0x70>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d123      	bne.n	800247c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a13      	ldr	r2, [pc, #76]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 800243a:	f043 0308 	orr.w	r3, r3, #8
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244c:	23c0      	movs	r3, #192	@ 0xc0
 800244e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002450:	2312      	movs	r3, #18
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4619      	mov	r1, r3
 800245e:	480b      	ldr	r0, [pc, #44]	@ (800248c <HAL_I2C_MspInit+0x78>)
 8002460:	f001 f892 	bl	8003588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 800246a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800246e:	61d3      	str	r3, [r2, #28]
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_I2C_MspInit+0x74>)
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40005400 	.word	0x40005400
 8002488:	40021000 	.word	0x40021000
 800248c:	40010c00 	.word	0x40010c00

08002490 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0b      	ldr	r2, [pc, #44]	@ (80024cc <HAL_RTC_MspInit+0x3c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d110      	bne.n	80024c4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80024a2:	f002 fb95 	bl	8004bd0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_RTC_MspInit+0x40>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <HAL_RTC_MspInit+0x40>)
 80024ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_RTC_MspInit+0x40>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RTC_MspInit+0x44>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40002800 	.word	0x40002800
 80024d0:	40021000 	.word	0x40021000
 80024d4:	4242043c 	.word	0x4242043c

080024d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002564 <HAL_SPI_MspInit+0x8c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d131      	bne.n	800255c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002502:	61d3      	str	r3, [r2, #28]
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_SPI_MspInit+0x90>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002528:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800252c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4619      	mov	r1, r3
 800253c:	480b      	ldr	r0, [pc, #44]	@ (800256c <HAL_SPI_MspInit+0x94>)
 800253e:	f001 f823 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002542:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	4805      	ldr	r0, [pc, #20]	@ (800256c <HAL_SPI_MspInit+0x94>)
 8002558:	f001 f816 	bl	8003588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40003800 	.word	0x40003800
 8002568:	40021000 	.word	0x40021000
 800256c:	40010c00 	.word	0x40010c00

08002570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <HAL_UART_MspInit+0x8c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d131      	bne.n	80025f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_UART_MspInit+0x90>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a1a      	ldr	r2, [pc, #104]	@ (8002600 <HAL_UART_MspInit+0x90>)
 8002596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_UART_MspInit+0x90>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_UART_MspInit+0x90>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <HAL_UART_MspInit+0x90>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_UART_MspInit+0x90>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4619      	mov	r1, r3
 80025d4:	480b      	ldr	r0, [pc, #44]	@ (8002604 <HAL_UART_MspInit+0x94>)
 80025d6:	f000 ffd7 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4619      	mov	r1, r3
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <HAL_UART_MspInit+0x94>)
 80025f0:	f000 ffca 	bl	8003588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40013800 	.word	0x40013800
 8002600:	40021000 	.word	0x40021000
 8002604:	40010800 	.word	0x40010800

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <NMI_Handler+0x4>

08002610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <MemManage_Handler+0x4>

08002620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <UsageFault_Handler+0x4>

08002630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
		if(Timer1 > 0)
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <SysTick_Handler+0x34>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <SysTick_Handler+0x18>
			Timer1--;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <SysTick_Handler+0x34>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <SysTick_Handler+0x34>)
 800266a:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 800266c:	4b07      	ldr	r3, [pc, #28]	@ (800268c <SysTick_Handler+0x38>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <SysTick_Handler+0x2c>
			Timer2--;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <SysTick_Handler+0x38>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <SysTick_Handler+0x38>)
 800267e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002680:	f000 f8c2 	bl	8002808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200000ac 	.word	0x200000ac
 800268c:	200000ae 	.word	0x200000ae

08002690 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002696:	f000 fc45 	bl	8002f24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200000fc 	.word	0x200000fc

080026a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <CAN1_RX1_IRQHandler+0x10>)
 80026aa:	f000 fc3b 	bl	8002f24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200000fc 	.word	0x200000fc

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f004 fd4c 	bl	8007184 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20005000 	.word	0x20005000
 8002718:	00000400 	.word	0x00000400
 800271c:	200002ac 	.word	0x200002ac
 8002720:	20000410 	.word	0x20000410

08002724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff fff8 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480b      	ldr	r0, [pc, #44]	@ (8002764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002736:	490c      	ldr	r1, [pc, #48]	@ (8002768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002738:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <LoopFillZerobss+0x16>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800274c:	4c09      	ldr	r4, [pc, #36]	@ (8002774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f004 fd19 	bl	8007190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800275e:	f7ff f955 	bl	8001a0c <main>
  bx lr
 8002762:	4770      	bx	lr
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800276c:	08007af8 	.word	0x08007af8
  ldr r2, =_sbss
 8002770:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002774:	20000410 	.word	0x20000410

08002778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC1_2_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_Init+0x28>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <HAL_Init+0x28>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 feb9 	bl	8003504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002792:	200f      	movs	r0, #15
 8002794:	f000 f808 	bl	80027a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002798:	f7ff fd9a 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_InitTick+0x54>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <HAL_InitTick+0x58>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027be:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fed1 	bl	800356e <HAL_SYSTICK_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00e      	b.n	80027f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d80a      	bhi.n	80027f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027dc:	2200      	movs	r2, #0
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f000 fe99 	bl	800351a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e8:	4a06      	ldr	r2, [pc, #24]	@ (8002804 <HAL_InitTick+0x5c>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000020 	.word	0x20000020
 8002800:	20000028 	.word	0x20000028
 8002804:	20000024 	.word	0x20000024

08002808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_IncTick+0x1c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_IncTick+0x20>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a03      	ldr	r2, [pc, #12]	@ (8002828 <HAL_IncTick+0x20>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000028 	.word	0x20000028
 8002828:	200002b0 	.word	0x200002b0

0800282c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b02      	ldr	r3, [pc, #8]	@ (800283c <HAL_GetTick+0x10>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	200002b0 	.word	0x200002b0

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff fff0 	bl	800282c <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffe0 	bl	800282c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000028 	.word	0x20000028

08002888 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0ed      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fd44 	bl	8002334 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028bc:	f7ff ffb6 	bl	800282c <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028c2:	e012      	b.n	80028ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028c4:	f7ff ffb2 	bl	800282c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b0a      	cmp	r3, #10
 80028d0:	d90b      	bls.n	80028ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0c5      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0e5      	beq.n	80028c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0202 	bic.w	r2, r2, #2
 8002906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002908:	f7ff ff90 	bl	800282c <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800290e:	e012      	b.n	8002936 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002910:	f7ff ff8c 	bl	800282c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b0a      	cmp	r3, #10
 800291c:	d90b      	bls.n	8002936 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2205      	movs	r2, #5
 800292e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e09f      	b.n	8002a76 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e5      	bne.n	8002910 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7e1b      	ldrb	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e007      	b.n	800296e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7e5b      	ldrb	r3, [r3, #25]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e9b      	ldrb	r3, [r3, #26]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e007      	b.n	80029c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0220 	bic.w	r2, r2, #32
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7edb      	ldrb	r3, [r3, #27]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0210 	bic.w	r2, r2, #16
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0210 	orr.w	r2, r2, #16
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7f1b      	ldrb	r3, [r3, #28]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0208 	bic.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7f5b      	ldrb	r3, [r3, #29]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0204 	orr.w	r2, r2, #4
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b087      	sub	sp, #28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d003      	beq.n	8002aa4 <HAL_CAN_ConfigFilter+0x26>
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	f040 80aa 	bne.w	8002bf8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2201      	movs	r2, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d123      	bne.n	8002b26 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3248      	adds	r2, #72	@ 0x48
 8002b06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	3348      	adds	r3, #72	@ 0x48
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d122      	bne.n	8002b74 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	3248      	adds	r2, #72	@ 0x48
 8002b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6a:	6979      	ldr	r1, [r7, #20]
 8002b6c:	3348      	adds	r3, #72	@ 0x48
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002b8e:	e007      	b.n	8002ba0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002bba:	e007      	b.n	8002bcc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e006      	b.n	8002c06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d12e      	bne.n	8002c82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7ff fdf6 	bl	800282c <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c42:	e012      	b.n	8002c6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c44:	f7ff fdf2 	bl	800282c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b0a      	cmp	r3, #10
 8002c50:	d90b      	bls.n	8002c6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e012      	b.n	8002c90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e006      	b.n	8002c90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d003      	beq.n	8002cbc <HAL_CAN_GetRxMessage+0x24>
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 8103 	bne.w	8002ec2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0f7      	b.n	8002ed0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0e8      	b.n	8002ed0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	331b      	adds	r3, #27
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	4413      	add	r3, r2
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0204 	and.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10c      	bne.n	8002d36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	331b      	adds	r3, #27
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0d5b      	lsrs	r3, r3, #21
 8002d2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e00b      	b.n	8002d4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	331b      	adds	r3, #27
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	331b      	adds	r3, #27
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	4413      	add	r3, r2
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0202 	and.w	r2, r3, #2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	331b      	adds	r3, #27
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	e00b      	b.n	8002d9c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	331b      	adds	r3, #27
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0a1a      	lsrs	r2, r3, #8
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0c1a      	lsrs	r2, r3, #16
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	3302      	adds	r3, #2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e1a      	lsrs	r2, r3, #24
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3304      	adds	r3, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0a1a      	lsrs	r2, r3, #8
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3305      	adds	r3, #5
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0c1a      	lsrs	r2, r3, #16
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3306      	adds	r3, #6
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e1a      	lsrs	r2, r3, #24
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	3307      	adds	r3, #7
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d108      	bne.n	8002eae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	e007      	b.n	8002ebe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e006      	b.n	8002ed0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <HAL_CAN_ActivateNotification+0x1e>
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d109      	bne.n	8002f0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e006      	b.n	8002f1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d07c      	beq.n	8003064 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f983 	bl	8003292 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f8c:	e016      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa0:	e00c      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	e002      	b.n	8002fbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f986 	bl	80032c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d024      	beq.n	8003010 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f962 	bl	80032a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fe0:	e016      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	e00c      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24
 8003008:	e002      	b.n	8003010 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f965 	bl	80032da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d024      	beq.n	8003064 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f941 	bl	80032b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003034:	e016      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
 8003048:	e00c      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
 800305c:	e002      	b.n	8003064 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f944 	bl	80032ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f92a 	bl	80032fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fbb8 	bl	8001838 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f90a 	bl	8003322 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8f2 	bl	8003310 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2210      	movs	r2, #16
 8003146:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8f3 	bl	8003334 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8eb 	bl	8003346 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07b      	beq.n	8003272 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d072      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d043      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d03e      	beq.n	800326a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031f2:	2b60      	cmp	r3, #96	@ 0x60
 80031f4:	d02b      	beq.n	800324e <HAL_CAN_IRQHandler+0x32a>
 80031f6:	2b60      	cmp	r3, #96	@ 0x60
 80031f8:	d82e      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 80031fa:	2b50      	cmp	r3, #80	@ 0x50
 80031fc:	d022      	beq.n	8003244 <HAL_CAN_IRQHandler+0x320>
 80031fe:	2b50      	cmp	r3, #80	@ 0x50
 8003200:	d82a      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 8003202:	2b40      	cmp	r3, #64	@ 0x40
 8003204:	d019      	beq.n	800323a <HAL_CAN_IRQHandler+0x316>
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d826      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 800320a:	2b30      	cmp	r3, #48	@ 0x30
 800320c:	d010      	beq.n	8003230 <HAL_CAN_IRQHandler+0x30c>
 800320e:	2b30      	cmp	r3, #48	@ 0x30
 8003210:	d822      	bhi.n	8003258 <HAL_CAN_IRQHandler+0x334>
 8003212:	2b10      	cmp	r3, #16
 8003214:	d002      	beq.n	800321c <HAL_CAN_IRQHandler+0x2f8>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d005      	beq.n	8003226 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800321a:	e01d      	b.n	8003258 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003224:	e019      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	f043 0310 	orr.w	r3, r3, #16
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800322e:	e014      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	f043 0320 	orr.w	r3, r3, #32
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003238:	e00f      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003242:	e00a      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800324c:	e005      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003256:	e000      	b.n	800325a <HAL_CAN_IRQHandler+0x336>
            break;
 8003258:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003268:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2204      	movs	r2, #4
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f867 	bl	8003358 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	@ 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003388:	4013      	ands	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339e:	4a04      	ldr	r2, [pc, #16]	@ (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	60d3      	str	r3, [r2, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b8:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <__NVIC_GetPriorityGrouping+0x18>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f003 0307 	and.w	r3, r3, #7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	db0b      	blt.n	80033fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	4906      	ldr	r1, [pc, #24]	@ (8003404 <__NVIC_EnableIRQ+0x34>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2001      	movs	r0, #1
 80033f2:	fa00 f202 	lsl.w	r2, r0, r2
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	@ (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	@ (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d0:	d301      	bcc.n	80034d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00f      	b.n	80034f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <SysTick_Config+0x40>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034de:	210f      	movs	r1, #15
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f7ff ff90 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Config+0x40>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <SysTick_Config+0x40>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff2d 	bl	800336c <__NVIC_SetPriorityGrouping>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800352c:	f7ff ff42 	bl	80033b4 <__NVIC_GetPriorityGrouping>
 8003530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f7ff ff90 	bl	800345c <NVIC_EncodePriority>
 800353c:	4602      	mov	r2, r0
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff5f 	bl	8003408 <__NVIC_SetPriority>
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff35 	bl	80033d0 <__NVIC_EnableIRQ>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff ffa2 	bl	80034c0 <SysTick_Config>
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b08b      	sub	sp, #44	@ 0x2c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359a:	e169      	b.n	8003870 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800359c:	2201      	movs	r2, #1
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f040 8158 	bne.w	800386a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a9a      	ldr	r2, [pc, #616]	@ (8003828 <HAL_GPIO_Init+0x2a0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d05e      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035c4:	4a98      	ldr	r2, [pc, #608]	@ (8003828 <HAL_GPIO_Init+0x2a0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d875      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035ca:	4a98      	ldr	r2, [pc, #608]	@ (800382c <HAL_GPIO_Init+0x2a4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d058      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035d0:	4a96      	ldr	r2, [pc, #600]	@ (800382c <HAL_GPIO_Init+0x2a4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d86f      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035d6:	4a96      	ldr	r2, [pc, #600]	@ (8003830 <HAL_GPIO_Init+0x2a8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d052      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035dc:	4a94      	ldr	r2, [pc, #592]	@ (8003830 <HAL_GPIO_Init+0x2a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d869      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035e2:	4a94      	ldr	r2, [pc, #592]	@ (8003834 <HAL_GPIO_Init+0x2ac>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d04c      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035e8:	4a92      	ldr	r2, [pc, #584]	@ (8003834 <HAL_GPIO_Init+0x2ac>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d863      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035ee:	4a92      	ldr	r2, [pc, #584]	@ (8003838 <HAL_GPIO_Init+0x2b0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d046      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
 80035f4:	4a90      	ldr	r2, [pc, #576]	@ (8003838 <HAL_GPIO_Init+0x2b0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d85d      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d82a      	bhi.n	8003654 <HAL_GPIO_Init+0xcc>
 80035fe:	2b12      	cmp	r3, #18
 8003600:	d859      	bhi.n	80036b6 <HAL_GPIO_Init+0x12e>
 8003602:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <HAL_GPIO_Init+0x80>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003683 	.word	0x08003683
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800366f 	.word	0x0800366f
 8003614:	080036b1 	.word	0x080036b1
 8003618:	080036b7 	.word	0x080036b7
 800361c:	080036b7 	.word	0x080036b7
 8003620:	080036b7 	.word	0x080036b7
 8003624:	080036b7 	.word	0x080036b7
 8003628:	080036b7 	.word	0x080036b7
 800362c:	080036b7 	.word	0x080036b7
 8003630:	080036b7 	.word	0x080036b7
 8003634:	080036b7 	.word	0x080036b7
 8003638:	080036b7 	.word	0x080036b7
 800363c:	080036b7 	.word	0x080036b7
 8003640:	080036b7 	.word	0x080036b7
 8003644:	080036b7 	.word	0x080036b7
 8003648:	080036b7 	.word	0x080036b7
 800364c:	08003665 	.word	0x08003665
 8003650:	08003679 	.word	0x08003679
 8003654:	4a79      	ldr	r2, [pc, #484]	@ (800383c <HAL_GPIO_Init+0x2b4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800365a:	e02c      	b.n	80036b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	623b      	str	r3, [r7, #32]
          break;
 8003662:	e029      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	3304      	adds	r3, #4
 800366a:	623b      	str	r3, [r7, #32]
          break;
 800366c:	e024      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	3308      	adds	r3, #8
 8003674:	623b      	str	r3, [r7, #32]
          break;
 8003676:	e01f      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	330c      	adds	r3, #12
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e01a      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800368a:	2304      	movs	r3, #4
 800368c:	623b      	str	r3, [r7, #32]
          break;
 800368e:	e013      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003698:	2308      	movs	r3, #8
 800369a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	611a      	str	r2, [r3, #16]
          break;
 80036a2:	e009      	b.n	80036b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036a4:	2308      	movs	r3, #8
 80036a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	615a      	str	r2, [r3, #20]
          break;
 80036ae:	e003      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036b0:	2300      	movs	r3, #0
 80036b2:	623b      	str	r3, [r7, #32]
          break;
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x130>
          break;
 80036b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2bff      	cmp	r3, #255	@ 0xff
 80036bc:	d801      	bhi.n	80036c2 <HAL_GPIO_Init+0x13a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_Init+0x13e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2bff      	cmp	r3, #255	@ 0xff
 80036cc:	d802      	bhi.n	80036d4 <HAL_GPIO_Init+0x14c>
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	e002      	b.n	80036da <HAL_GPIO_Init+0x152>
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	3b08      	subs	r3, #8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	210f      	movs	r1, #15
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	431a      	orrs	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80b1 	beq.w	800386a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003708:	4b4d      	ldr	r3, [pc, #308]	@ (8003840 <HAL_GPIO_Init+0x2b8>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	4a4c      	ldr	r2, [pc, #304]	@ (8003840 <HAL_GPIO_Init+0x2b8>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6193      	str	r3, [r2, #24]
 8003714:	4b4a      	ldr	r3, [pc, #296]	@ (8003840 <HAL_GPIO_Init+0x2b8>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003720:	4a48      	ldr	r2, [pc, #288]	@ (8003844 <HAL_GPIO_Init+0x2bc>)
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a40      	ldr	r2, [pc, #256]	@ (8003848 <HAL_GPIO_Init+0x2c0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_GPIO_Init+0x1ec>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3f      	ldr	r2, [pc, #252]	@ (800384c <HAL_GPIO_Init+0x2c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00d      	beq.n	8003770 <HAL_GPIO_Init+0x1e8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3e      	ldr	r2, [pc, #248]	@ (8003850 <HAL_GPIO_Init+0x2c8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <HAL_GPIO_Init+0x1e4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <HAL_GPIO_Init+0x2cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_GPIO_Init+0x1e0>
 8003764:	2303      	movs	r3, #3
 8003766:	e006      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003768:	2304      	movs	r3, #4
 800376a:	e004      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 800376c:	2302      	movs	r3, #2
 800376e:	e002      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_GPIO_Init+0x1ee>
 8003774:	2300      	movs	r3, #0
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	f002 0203 	and.w	r2, r2, #3
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	4093      	lsls	r3, r2
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003786:	492f      	ldr	r1, [pc, #188]	@ (8003844 <HAL_GPIO_Init+0x2bc>)
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	492c      	ldr	r1, [pc, #176]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	4928      	ldr	r1, [pc, #160]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037c8:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4922      	ldr	r1, [pc, #136]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e006      	b.n	80037e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	43db      	mvns	r3, r3
 80037de:	491e      	ldr	r1, [pc, #120]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4918      	ldr	r1, [pc, #96]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e006      	b.n	800380c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037fe:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	43db      	mvns	r3, r3
 8003806:	4914      	ldr	r1, [pc, #80]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 8003808:	4013      	ands	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	490e      	ldr	r1, [pc, #56]	@ (8003858 <HAL_GPIO_Init+0x2d0>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]
 8003824:	e021      	b.n	800386a <HAL_GPIO_Init+0x2e2>
 8003826:	bf00      	nop
 8003828:	10320000 	.word	0x10320000
 800382c:	10310000 	.word	0x10310000
 8003830:	10220000 	.word	0x10220000
 8003834:	10210000 	.word	0x10210000
 8003838:	10120000 	.word	0x10120000
 800383c:	10110000 	.word	0x10110000
 8003840:	40021000 	.word	0x40021000
 8003844:	40010000 	.word	0x40010000
 8003848:	40010800 	.word	0x40010800
 800384c:	40010c00 	.word	0x40010c00
 8003850:	40011000 	.word	0x40011000
 8003854:	40011400 	.word	0x40011400
 8003858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_GPIO_Init+0x304>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	43db      	mvns	r3, r3
 8003864:	4909      	ldr	r1, [pc, #36]	@ (800388c <HAL_GPIO_Init+0x304>)
 8003866:	4013      	ands	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	3301      	adds	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f47f ae8e 	bne.w	800359c <HAL_GPIO_Init+0x14>
  }
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	372c      	adds	r7, #44	@ 0x2c
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40010400 	.word	0x40010400

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ac:	e003      	b.n	80038b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	611a      	str	r2, [r3, #16]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e12b      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe fd94 	bl	8002414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003924:	f001 fd2a 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a81      	ldr	r2, [pc, #516]	@ (8003b34 <HAL_I2C_Init+0x274>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d807      	bhi.n	8003944 <HAL_I2C_Init+0x84>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a80      	ldr	r2, [pc, #512]	@ (8003b38 <HAL_I2C_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e006      	b.n	8003952 <HAL_I2C_Init+0x92>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a7d      	ldr	r2, [pc, #500]	@ (8003b3c <HAL_I2C_Init+0x27c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	bf94      	ite	ls
 800394c:	2301      	movls	r3, #1
 800394e:	2300      	movhi	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0e7      	b.n	8003b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a78      	ldr	r2, [pc, #480]	@ (8003b40 <HAL_I2C_Init+0x280>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9b      	lsrs	r3, r3, #18
 8003964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a6a      	ldr	r2, [pc, #424]	@ (8003b34 <HAL_I2C_Init+0x274>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d802      	bhi.n	8003994 <HAL_I2C_Init+0xd4>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	e009      	b.n	80039a8 <HAL_I2C_Init+0xe8>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	4a69      	ldr	r2, [pc, #420]	@ (8003b44 <HAL_I2C_Init+0x284>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	3301      	adds	r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	495c      	ldr	r1, [pc, #368]	@ (8003b34 <HAL_I2C_Init+0x274>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d819      	bhi.n	80039fc <HAL_I2C_Init+0x13c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e59      	subs	r1, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039dc:	400b      	ands	r3, r1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_I2C_Init+0x138>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e59      	subs	r1, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	e051      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039f8:	2304      	movs	r3, #4
 80039fa:	e04f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_I2C_Init+0x168>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	440b      	add	r3, r1
 8003a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e012      	b.n	8003a4e <HAL_I2C_Init+0x18e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x196>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e022      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10e      	bne.n	8003a7c <HAL_I2C_Init+0x1bc>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e58      	subs	r0, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	440b      	add	r3, r1
 8003a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Init+0x1dc>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1e58      	subs	r0, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	0099      	lsls	r1, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6911      	ldr	r1, [r2, #16]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7fe fe63 	bl	800282c <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	f040 80d9 	bne.w	8003d28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	496d      	ldr	r1, [pc, #436]	@ (8003d34 <HAL_I2C_Mem_Write+0x1ec>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fdef 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0cc      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Mem_Write+0x56>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e0c5      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2221      	movs	r2, #33	@ 0x21
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	@ 0x40
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a4d      	ldr	r2, [pc, #308]	@ (8003d38 <HAL_I2C_Mem_Write+0x1f0>)
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c06:	88f8      	ldrh	r0, [r7, #6]
 8003c08:	893a      	ldrh	r2, [r7, #8]
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4603      	mov	r3, r0
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fc26 	bl	8004468 <I2C_RequestMemoryWrite>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d052      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e081      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 feb4 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d107      	bne.n	8003c4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06b      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1aa      	bne.n	8003c26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fea7 	bl	8004a28 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d107      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e016      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	00100002 	.word	0x00100002
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	@ 0x30
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	4608      	mov	r0, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	817b      	strh	r3, [r7, #10]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	813b      	strh	r3, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d5a:	f7fe fd67 	bl	800282c <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	f040 8244 	bne.w	80041f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2319      	movs	r3, #25
 8003d74:	2201      	movs	r2, #1
 8003d76:	4982      	ldr	r1, [pc, #520]	@ (8003f80 <HAL_I2C_Mem_Read+0x244>)
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fcf3 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	e237      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Mem_Read+0x5a>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e230      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d007      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2222      	movs	r2, #34	@ 0x22
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	@ 0x40
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4a62      	ldr	r2, [pc, #392]	@ (8003f84 <HAL_I2C_Mem_Read+0x248>)
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dfe:	88f8      	ldrh	r0, [r7, #6]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fbc0 	bl	8004594 <I2C_RequestMemoryRead>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1ec      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e1c0      	b.n	80041d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d11e      	bne.n	8003e94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e66:	b672      	cpsid	i
}
 8003e68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e90:	b662      	cpsie	i
}
 8003e92:	e035      	b.n	8003f00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d11e      	bne.n	8003eda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ed6:	b662      	cpsie	i
}
 8003ed8:	e012      	b.n	8003f00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ee8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f00:	e166      	b.n	80041d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	f200 811f 	bhi.w	800414a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d123      	bne.n	8003f5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fdcd 	bl	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e167      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f5a:	e139      	b.n	80041d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d152      	bne.n	800400a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4906      	ldr	r1, [pc, #24]	@ (8003f88 <HAL_I2C_Mem_Read+0x24c>)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fbf8 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e13c      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
 8003f7e:	bf00      	nop
 8003f80:	00100002 	.word	0x00100002
 8003f84:	ffff0000 	.word	0xffff0000
 8003f88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f8c:	b672      	cpsid	i
}
 8003f8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fd2:	b662      	cpsie	i
}
 8003fd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004008:	e0e2      	b.n	80041d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	2200      	movs	r2, #0
 8004012:	497b      	ldr	r1, [pc, #492]	@ (8004200 <HAL_I2C_Mem_Read+0x4c4>)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fba5 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0e9      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004032:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004034:	b672      	cpsid	i
}
 8004036:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800406a:	4b66      	ldr	r3, [pc, #408]	@ (8004204 <HAL_I2C_Mem_Read+0x4c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	4a65      	ldr	r2, [pc, #404]	@ (8004208 <HAL_I2C_Mem_Read+0x4cc>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0a1a      	lsrs	r2, r3, #8
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00da      	lsls	r2, r3, #3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	3b01      	subs	r3, #1
 8004088:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d118      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040b2:	b662      	cpsie	i
}
 80040b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e09a      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d1d9      	bne.n	8004084 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004112:	b662      	cpsie	i
}
 8004114:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004148:	e042      	b.n	80041d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fcb2 	bl	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e04c      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d118      	bne.n	80041d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f47f ae94 	bne.w	8003f02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	@ 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	00010004 	.word	0x00010004
 8004204:	20000020 	.word	0x20000020
 8004208:	14f8b589 	.word	0x14f8b589

0800420c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	@ 0x28
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	460b      	mov	r3, r1
 800421a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7fe fb06 	bl	800282c <HAL_GetTick>
 8004220:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b20      	cmp	r3, #32
 8004230:	f040 8111 	bne.w	8004456 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2319      	movs	r3, #25
 800423a:	2201      	movs	r2, #1
 800423c:	4988      	ldr	r1, [pc, #544]	@ (8004460 <HAL_I2C_IsDeviceReady+0x254>)
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa90 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800424a:	2302      	movs	r3, #2
 800424c:	e104      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_I2C_IsDeviceReady+0x50>
 8004258:	2302      	movs	r3, #2
 800425a:	e0fd      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d007      	beq.n	8004282 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2224      	movs	r2, #36	@ 0x24
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a70      	ldr	r2, [pc, #448]	@ (8004464 <HAL_I2C_IsDeviceReady+0x258>)
 80042a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fa4e 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042dc:	d103      	bne.n	80042e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042e4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0b6      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042fa:	f7fe fa97 	bl	800282c <HAL_GetTick>
 80042fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800432e:	e025      	b.n	800437c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe fa7c 	bl	800282c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <HAL_I2C_IsDeviceReady+0x13a>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	22a0      	movs	r2, #160	@ 0xa0
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b02      	cmp	r3, #2
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2ba0      	cmp	r3, #160	@ 0xa0
 8004386:	d005      	beq.n	8004394 <HAL_I2C_IsDeviceReady+0x188>
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_I2C_IsDeviceReady+0x188>
 800438e:	7dbb      	ldrb	r3, [r7, #22]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0cd      	beq.n	8004330 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d129      	bne.n	80043fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2319      	movs	r3, #25
 80043d6:	2201      	movs	r2, #1
 80043d8:	4921      	ldr	r1, [pc, #132]	@ (8004460 <HAL_I2C_IsDeviceReady+0x254>)
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f9c2 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e036      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e02c      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004416:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	2319      	movs	r3, #25
 800441e:	2201      	movs	r2, #1
 8004420:	490f      	ldr	r1, [pc, #60]	@ (8004460 <HAL_I2C_IsDeviceReady+0x254>)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f99e 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e012      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	3301      	adds	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	f4ff af32 	bcc.w	80042a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
  }
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000

08004468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2200      	movs	r2, #0
 800449a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f960 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b8:	d103      	bne.n	80044c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e05f      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	492d      	ldr	r1, [pc, #180]	@ (8004590 <I2C_RequestMemoryWrite+0x128>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9bb 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04c      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa46 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b04      	cmp	r3, #4
 8004518:	d107      	bne.n	800452a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e02b      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d105      	bne.n	8004540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004534:	893b      	ldrh	r3, [r7, #8]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	611a      	str	r2, [r3, #16]
 800453e:	e021      	b.n	8004584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b29b      	uxth	r3, r3
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fa20 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	2b04      	cmp	r3, #4
 8004564:	d107      	bne.n	8004576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e005      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8c2 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f4:	d103      	bne.n	80045fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0aa      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	6a3a      	ldr	r2, [r7, #32]
 8004616:	4952      	ldr	r1, [pc, #328]	@ (8004760 <I2C_RequestMemoryRead+0x1cc>)
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f91d 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e097      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	6a39      	ldr	r1, [r7, #32]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f9a8 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b04      	cmp	r3, #4
 8004654:	d107      	bne.n	8004666 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e076      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	611a      	str	r2, [r3, #16]
 800467a:	e021      	b.n	80046c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468c:	6a39      	ldr	r1, [r7, #32]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f982 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d107      	bne.n	80046b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e050      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b6:	893b      	ldrh	r3, [r7, #8]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c2:	6a39      	ldr	r1, [r7, #32]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f967 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d107      	bne.n	80046e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e035      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2200      	movs	r2, #0
 8004704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f82b 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004722:	d103      	bne.n	800472c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e013      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	4906      	ldr	r1, [pc, #24]	@ (8004760 <I2C_RequestMemoryRead+0x1cc>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f886 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	00010002 	.word	0x00010002

08004764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	e048      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d044      	beq.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe f855 	bl	800282c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d139      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10d      	bne.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	e00c      	b.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d116      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e023      	b.n	8004850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d093      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004866:	e071      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004876:	d123      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e067      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d041      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fd ffb0 	bl	800282c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d136      	bne.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	43da      	mvns	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e021      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10c      	bne.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e00b      	b.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af6d 	bne.w	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a4:	e034      	b.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f8e3 	bl	8004b72 <I2C_IsAcknowledgeFailed>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e034      	b.n	8004a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d028      	beq.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fd ff35 	bl	800282c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11d      	bne.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d016      	beq.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	d1c3      	bne.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a34:	e034      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f89b 	bl	8004b72 <I2C_IsAcknowledgeFailed>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e034      	b.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d028      	beq.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fd feed 	bl	800282c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d016      	beq.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e007      	b.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d1c3      	bne.n	8004a36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac4:	e049      	b.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d119      	bne.n	8004b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e030      	b.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fd fe90 	bl	800282c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	d016      	beq.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e007      	b.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d1ae      	bne.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d11b      	bne.n	8004bc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	420e0020 	.word	0x420e0020

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e272      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8087 	beq.w	8004d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c08:	4b92      	ldr	r3, [pc, #584]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c14:	4b8f      	ldr	r3, [pc, #572]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d112      	bne.n	8004c46 <HAL_RCC_OscConfig+0x5e>
 8004c20:	4b8c      	ldr	r3, [pc, #560]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2c:	d10b      	bne.n	8004c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2e:	4b89      	ldr	r3, [pc, #548]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d06c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x12c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d168      	bne.n	8004d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e24c      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x76>
 8004c50:	4b80      	ldr	r3, [pc, #512]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a7f      	ldr	r2, [pc, #508]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e02e      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x98>
 8004c66:	4b7b      	ldr	r3, [pc, #492]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b78      	ldr	r3, [pc, #480]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a77      	ldr	r2, [pc, #476]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xbc>
 8004c8a:	4b72      	ldr	r3, [pc, #456]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a71      	ldr	r2, [pc, #452]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xd4>
 8004ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b68      	ldr	r3, [pc, #416]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a67      	ldr	r2, [pc, #412]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fdb2 	bl	800282c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fdae 	bl	800282c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	@ 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e200      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b5d      	ldr	r3, [pc, #372]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe4>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fd fd9e 	bl	800282c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fd9a 	bl	800282c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	@ 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1ec      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x10c>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d063      	beq.n	8004dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d22:	4b4c      	ldr	r3, [pc, #304]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d2e:	4b49      	ldr	r3, [pc, #292]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x18c>
 8004d3a:	4b46      	ldr	r3, [pc, #280]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	4b43      	ldr	r3, [pc, #268]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_RCC_OscConfig+0x176>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1c0      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4939      	ldr	r1, [pc, #228]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	e03a      	b.n	8004dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7c:	4b36      	ldr	r3, [pc, #216]	@ (8004e58 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fd fd53 	bl	800282c <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fd fd4f 	bl	800282c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1a1      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4927      	ldr	r1, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dbe:	4b26      	ldr	r3, [pc, #152]	@ (8004e58 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fd32 	bl	800282c <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fd2e 	bl	800282c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e180      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dde:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d03a      	beq.n	8004e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d019      	beq.n	8004e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfe:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <HAL_RCC_OscConfig+0x274>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e04:	f7fd fd12 	bl	800282c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fd0e 	bl	800282c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e160      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f000 face 	bl	80053cc <RCC_Delay>
 8004e30:	e01c      	b.n	8004e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_RCC_OscConfig+0x274>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e38:	f7fd fcf8 	bl	800282c <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3e:	e00f      	b.n	8004e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e40:	f7fd fcf4 	bl	800282c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d908      	bls.n	8004e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e146      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	42420000 	.word	0x42420000
 8004e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e60:	4b92      	ldr	r3, [pc, #584]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e9      	bne.n	8004e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80a6 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10d      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	4b88      	ldr	r3, [pc, #544]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4a87      	ldr	r2, [pc, #540]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e94:	61d3      	str	r3, [r2, #28]
 8004e96:	4b85      	ldr	r3, [pc, #532]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea6:	4b82      	ldr	r3, [pc, #520]	@ (80050b0 <HAL_RCC_OscConfig+0x4c8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d118      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80050b0 <HAL_RCC_OscConfig+0x4c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80050b0 <HAL_RCC_OscConfig+0x4c8>)
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ebe:	f7fd fcb5 	bl	800282c <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec6:	f7fd fcb1 	bl	800282c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b64      	cmp	r3, #100	@ 0x64
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e103      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed8:	4b75      	ldr	r3, [pc, #468]	@ (80050b0 <HAL_RCC_OscConfig+0x4c8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d106      	bne.n	8004efa <HAL_RCC_OscConfig+0x312>
 8004eec:	4b6f      	ldr	r3, [pc, #444]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6213      	str	r3, [r2, #32]
 8004ef8:	e02d      	b.n	8004f56 <HAL_RCC_OscConfig+0x36e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x334>
 8004f02:	4b6a      	ldr	r3, [pc, #424]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	4a69      	ldr	r2, [pc, #420]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	6213      	str	r3, [r2, #32]
 8004f0e:	4b67      	ldr	r3, [pc, #412]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4a66      	ldr	r2, [pc, #408]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f023 0304 	bic.w	r3, r3, #4
 8004f18:	6213      	str	r3, [r2, #32]
 8004f1a:	e01c      	b.n	8004f56 <HAL_RCC_OscConfig+0x36e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b05      	cmp	r3, #5
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCC_OscConfig+0x356>
 8004f24:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4a60      	ldr	r2, [pc, #384]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	6213      	str	r3, [r2, #32]
 8004f30:	4b5e      	ldr	r3, [pc, #376]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4a5d      	ldr	r2, [pc, #372]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	e00b      	b.n	8004f56 <HAL_RCC_OscConfig+0x36e>
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	4a5a      	ldr	r2, [pc, #360]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	6213      	str	r3, [r2, #32]
 8004f4a:	4b58      	ldr	r3, [pc, #352]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a57      	ldr	r2, [pc, #348]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d015      	beq.n	8004f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fd fc65 	bl	800282c <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fd fc61 	bl	800282c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e0b1      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ee      	beq.n	8004f66 <HAL_RCC_OscConfig+0x37e>
 8004f88:	e014      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8a:	f7fd fc4f 	bl	800282c <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f92:	f7fd fc4b 	bl	800282c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e09b      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa8:	4b40      	ldr	r3, [pc, #256]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ee      	bne.n	8004f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b3c      	ldr	r3, [pc, #240]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8087 	beq.w	80050de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fd0:	4b36      	ldr	r3, [pc, #216]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d061      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d146      	bne.n	8005072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe4:	4b33      	ldr	r3, [pc, #204]	@ (80050b4 <HAL_RCC_OscConfig+0x4cc>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fd fc1f 	bl	800282c <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fd fc1b 	bl	800282c <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e06d      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005004:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d108      	bne.n	800502c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800501a:	4b24      	ldr	r3, [pc, #144]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4921      	ldr	r1, [pc, #132]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502c:	4b1f      	ldr	r3, [pc, #124]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a19      	ldr	r1, [r3, #32]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	430b      	orrs	r3, r1
 800503e:	491b      	ldr	r1, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x4cc>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fd fbef 	bl	800282c <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd fbeb 	bl	800282c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e03d      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005064:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x46a>
 8005070:	e035      	b.n	80050de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCC_OscConfig+0x4cc>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd fbd8 	bl	800282c <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fd fbd4 	bl	800282c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e026      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_RCC_OscConfig+0x4c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x498>
 800509e:	e01e      	b.n	80050de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e019      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050b8:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_OscConfig+0x500>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000

080050ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0d0      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d910      	bls.n	8005130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	4965      	ldr	r1, [pc, #404]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a52      	ldr	r2, [pc, #328]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800516a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d040      	beq.n	800520c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d115      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	4b41      	ldr	r3, [pc, #260]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e073      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ba:	4b3d      	ldr	r3, [pc, #244]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06b      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4936      	ldr	r1, [pc, #216]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fd fb26 	bl	800282c <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	f7fd fb22 	bl	800282c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e053      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	4b2d      	ldr	r3, [pc, #180]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 020c 	and.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d1eb      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d210      	bcs.n	800523c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	4922      	ldr	r1, [pc, #136]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	@ (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x1d0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fa84 	bl	80027a8 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40022000 	.word	0x40022000
 80052b0:	40021000 	.word	0x40021000
 80052b4:	08007a7c 	.word	0x08007a7c
 80052b8:	20000020 	.word	0x20000020
 80052bc:	20000024 	.word	0x20000024

080052c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x94>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d002      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x30>
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d003      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x36>
 80052ee:	e027      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x98>)
 80052f2:	613b      	str	r3, [r7, #16]
      break;
 80052f4:	e027      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	0c9b      	lsrs	r3, r3, #18
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	4a17      	ldr	r2, [pc, #92]	@ (800535c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005300:	5cd3      	ldrb	r3, [r2, r3]
 8005302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d010      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800530e:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <HAL_RCC_GetSysClockFreq+0x94>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	0c5b      	lsrs	r3, r3, #17
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	4a11      	ldr	r2, [pc, #68]	@ (8005360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800531a:	5cd3      	ldrb	r3, [r2, r3]
 800531c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x98>)
 8005322:	fb03 f202 	mul.w	r2, r3, r2
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e004      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	613b      	str	r3, [r7, #16]
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x98>)
 8005342:	613b      	str	r3, [r7, #16]
      break;
 8005344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005346:	693b      	ldr	r3, [r7, #16]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	007a1200 	.word	0x007a1200
 800535c:	08007a94 	.word	0x08007a94
 8005360:	08007aa4 	.word	0x08007aa4
 8005364:	003d0900 	.word	0x003d0900

08005368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800536c:	4b02      	ldr	r3, [pc, #8]	@ (8005378 <HAL_RCC_GetHCLKFreq+0x10>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	20000020 	.word	0x20000020

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff2 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	0a1b      	lsrs	r3, r3, #8
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	08007a8c 	.word	0x08007a8c

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffde 	bl	8005368 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	0adb      	lsrs	r3, r3, #11
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	08007a8c 	.word	0x08007a8c

080053cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <RCC_Delay+0x34>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <RCC_Delay+0x38>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0a5b      	lsrs	r3, r3, #9
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053e8:	bf00      	nop
  }
  while (Delay --);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1e5a      	subs	r2, r3, #1
 80053ee:	60fa      	str	r2, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f9      	bne.n	80053e8 <RCC_Delay+0x1c>
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	20000020 	.word	0x20000020
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d07d      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005428:	4b4f      	ldr	r3, [pc, #316]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005434:	4b4c      	ldr	r3, [pc, #304]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	4a4b      	ldr	r2, [pc, #300]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543e:	61d3      	str	r3, [r2, #28]
 8005440:	4b49      	ldr	r3, [pc, #292]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	4b46      	ldr	r3, [pc, #280]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d118      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800545c:	4b43      	ldr	r3, [pc, #268]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a42      	ldr	r2, [pc, #264]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005468:	f7fd f9e0 	bl	800282c <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546e:	e008      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005470:	f7fd f9dc 	bl	800282c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	@ 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e06d      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b3a      	ldr	r3, [pc, #232]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800548e:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005496:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02e      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d027      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054c2:	4a29      	ldr	r2, [pc, #164]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d014      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fd f9ab 	bl	800282c <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054da:	f7fd f9a7 	bl	800282c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e036      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0ee      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4917      	ldr	r1, [pc, #92]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	4313      	orrs	r3, r2
 800550c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005514:	4b14      	ldr	r3, [pc, #80]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4a13      	ldr	r2, [pc, #76]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800551e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	490b      	ldr	r1, [pc, #44]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	4313      	orrs	r3, r2
 800553c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800554a:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	4904      	ldr	r1, [pc, #16]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000
 800556c:	40007000 	.word	0x40007000
 8005570:	42420440 	.word	0x42420440

08005574 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b10      	cmp	r3, #16
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b10      	cmp	r3, #16
 800559a:	f200 808a 	bhi.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d045      	beq.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d075      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80055aa:	e082      	b.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80055ac:	4b46      	ldr	r3, [pc, #280]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055b2:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d07b      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	0c9b      	lsrs	r3, r3, #18
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	4a41      	ldr	r2, [pc, #260]	@ (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80055c8:	5cd3      	ldrb	r3, [r2, r3]
 80055ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d015      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055d6:	4b3c      	ldr	r3, [pc, #240]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	0c5b      	lsrs	r3, r3, #17
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80055e2:	5cd3      	ldrb	r3, [r2, r3]
 80055e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80055f0:	4a38      	ldr	r2, [pc, #224]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e004      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4a34      	ldr	r2, [pc, #208]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800560c:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005618:	d102      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	61bb      	str	r3, [r7, #24]
      break;
 800561e:	e04a      	b.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4a2d      	ldr	r2, [pc, #180]	@ (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
      break;
 800562e:	e042      	b.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005630:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005640:	d108      	bne.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800564c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e01f      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800566c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e00f      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567e:	d11c      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005680:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d016      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800568c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005690:	61bb      	str	r3, [r7, #24]
      break;
 8005692:	e012      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005694:	e011      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005696:	f7ff fe85 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 800569a:	4602      	mov	r2, r0
 800569c:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	0b9b      	lsrs	r3, r3, #14
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	3301      	adds	r3, #1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	61bb      	str	r3, [r7, #24]
      break;
 80056b0:	e004      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80056ba:	bf00      	nop
    }
  }
  return (frequency);
 80056bc:	69bb      	ldr	r3, [r7, #24]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000
 80056cc:	08007aa8 	.word	0x08007aa8
 80056d0:	08007ab8 	.word	0x08007ab8
 80056d4:	007a1200 	.word	0x007a1200
 80056d8:	003d0900 	.word	0x003d0900
 80056dc:	aaaaaaab 	.word	0xaaaaaaab

080056e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e07a      	b.n	80057ec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	7c5b      	ldrb	r3, [r3, #17]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc fec2 	bl	8002490 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 faea 	bl	8005cec <HAL_RTC_WaitForSynchro>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e061      	b.n	80057ec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fba3 	bl	8005e74 <RTC_EnterInitMode>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e056      	b.n	80057ec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0207 	bic.w	r2, r2, #7
 800574c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <HAL_RTC_Init+0x114>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	4a26      	ldr	r2, [pc, #152]	@ (80057f4 <HAL_RTC_Init+0x114>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005762:	4b24      	ldr	r3, [pc, #144]	@ (80057f4 <HAL_RTC_Init+0x114>)
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4921      	ldr	r1, [pc, #132]	@ (80057f4 <HAL_RTC_Init+0x114>)
 8005770:	4313      	orrs	r3, r2
 8005772:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d003      	beq.n	8005786 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e00e      	b.n	80057a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005786:	2001      	movs	r0, #1
 8005788:	f7ff fef4 	bl	8005574 <HAL_RCCEx_GetPeriphCLKFreq>
 800578c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e026      	b.n	80057ec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	0c1a      	lsrs	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f002 020f 	and.w	r2, r2, #15
 80057b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	b292      	uxth	r2, r2
 80057ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fb81 	bl	8005ec4 <RTC_ExitInitMode>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2204      	movs	r2, #4
 80057cc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00c      	b.n	80057ec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40006c00 	.word	0x40006c00

080057f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_RTC_SetTime+0x20>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e080      	b.n	800591e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7c1b      	ldrb	r3, [r3, #16]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_RTC_SetTime+0x30>
 8005824:	2302      	movs	r3, #2
 8005826:	e07a      	b.n	800591e <HAL_RTC_SetTime+0x126>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2202      	movs	r2, #2
 8005832:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005844:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	4619      	mov	r1, r3
 800584e:	460b      	mov	r3, r1
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a5b      	subs	r3, r3, r1
 8005854:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005856:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800585c:	4413      	add	r3, r2
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e01e      	b.n	80058a0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fb71 	bl	8005f4e <RTC_Bcd2ToByte>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005874:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fb66 	bl	8005f4e <RTC_Bcd2ToByte>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	4613      	mov	r3, r2
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800588e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	789b      	ldrb	r3, [r3, #2]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb5a 	bl	8005f4e <RTC_Bcd2ToByte>
 800589a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800589c:	4423      	add	r3, r4
 800589e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fa7f 	bl	8005da6 <RTC_WriteTimeCounter>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2204      	movs	r2, #4
 80058b2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e02f      	b.n	800591e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0205 	bic.w	r2, r2, #5
 80058cc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fa90 	bl	8005df4 <RTC_ReadAlarmCounter>
 80058d4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d018      	beq.n	8005910 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d214      	bcs.n	8005910 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80058ec:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80058f0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fa96 	bl	8005e26 <RTC_WriteAlarmCounter>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2204      	movs	r2, #4
 8005904:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e006      	b.n	800591e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd90      	pop	{r4, r7, pc}
	...

08005928 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_RTC_GetTime+0x28>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0b5      	b.n	8005ac0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e0ac      	b.n	8005ac0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f9ed 	bl	8005d46 <RTC_ReadTimeCounter>
 800596c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	4a55      	ldr	r2, [pc, #340]	@ (8005ac8 <HAL_RTC_GetTime+0x1a0>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0adb      	lsrs	r3, r3, #11
 8005978:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4b52      	ldr	r3, [pc, #328]	@ (8005ac8 <HAL_RTC_GetTime+0x1a0>)
 800597e:	fba3 1302 	umull	r1, r3, r3, r2
 8005982:	0adb      	lsrs	r3, r3, #11
 8005984:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	4a4f      	ldr	r2, [pc, #316]	@ (8005acc <HAL_RTC_GetTime+0x1a4>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	4a4a      	ldr	r2, [pc, #296]	@ (8005ac8 <HAL_RTC_GetTime+0x1a0>)
 80059a0:	fba2 1203 	umull	r1, r2, r2, r3
 80059a4:	0ad2      	lsrs	r2, r2, #11
 80059a6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80059aa:	fb01 f202 	mul.w	r2, r1, r2
 80059ae:	1a9a      	subs	r2, r3, r2
 80059b0:	4b46      	ldr	r3, [pc, #280]	@ (8005acc <HAL_RTC_GetTime+0x1a4>)
 80059b2:	fba3 1302 	umull	r1, r3, r3, r2
 80059b6:	0959      	lsrs	r1, r3, #5
 80059b8:	460b      	mov	r3, r1
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a5b      	subs	r3, r3, r1
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	1ad1      	subs	r1, r2, r3
 80059c2:	b2ca      	uxtb	r2, r1
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b17      	cmp	r3, #23
 80059cc:	d955      	bls.n	8005a7a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad0 <HAL_RTC_GetTime+0x1a8>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80059da:	6939      	ldr	r1, [r7, #16]
 80059dc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad0 <HAL_RTC_GetTime+0x1a8>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	091a      	lsrs	r2, r3, #4
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1aca      	subs	r2, r1, r3
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f9fd 	bl	8005df4 <RTC_ReadAlarmCounter>
 80059fa:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d008      	beq.n	8005a16 <HAL_RTC_GetTime+0xee>
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d904      	bls.n	8005a16 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e002      	b.n	8005a1c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad4 <HAL_RTC_GetTime+0x1ac>)
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a2a:	69b9      	ldr	r1, [r7, #24]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f9ba 	bl	8005da6 <RTC_WriteTimeCounter>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e041      	b.n	8005ac0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d00c      	beq.n	8005a5e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005a4c:	69f9      	ldr	r1, [r7, #28]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f9e9 	bl	8005e26 <RTC_WriteAlarmCounter>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e030      	b.n	8005ac0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005a5e:	69f9      	ldr	r1, [r7, #28]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f9e0 	bl	8005e26 <RTC_WriteAlarmCounter>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e027      	b.n	8005ac0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005a70:	6979      	ldr	r1, [r7, #20]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fa88 	bl	8005f88 <RTC_DateUpdate>
 8005a78:	e003      	b.n	8005a82 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01a      	beq.n	8005abe <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fa41 	bl	8005f14 <RTC_ByteToBcd2>
 8005a92:	4603      	mov	r3, r0
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fa38 	bl	8005f14 <RTC_ByteToBcd2>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	789b      	ldrb	r3, [r3, #2]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fa2f 	bl	8005f14 <RTC_ByteToBcd2>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	91a2b3c5 	.word	0x91a2b3c5
 8005acc:	88888889 	.word	0x88888889
 8005ad0:	aaaaaaab 	.word	0xaaaaaaab
 8005ad4:	00015180 	.word	0x00015180

08005ad8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_RTC_SetDate+0x24>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e097      	b.n	8005c30 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	7c1b      	ldrb	r3, [r3, #16]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_RTC_SetDate+0x34>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e091      	b.n	8005c30 <HAL_RTC_SetDate+0x158>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2202      	movs	r2, #2
 8005b16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	78da      	ldrb	r2, [r3, #3]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785a      	ldrb	r2, [r3, #1]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	789a      	ldrb	r2, [r3, #2]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	739a      	strb	r2, [r3, #14]
 8005b36:	e01a      	b.n	8005b6e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	78db      	ldrb	r3, [r3, #3]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fa06 	bl	8005f4e <RTC_Bcd2ToByte>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f9fd 	bl	8005f4e <RTC_Bcd2ToByte>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	789b      	ldrb	r3, [r3, #2]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f9f4 	bl	8005f4e <RTC_Bcd2ToByte>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	7bdb      	ldrb	r3, [r3, #15]
 8005b72:	4618      	mov	r0, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	7b59      	ldrb	r1, [r3, #13]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	7b9b      	ldrb	r3, [r3, #14]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f000 fadf 	bl	8006140 <RTC_WeekDayNum>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	7b1a      	ldrb	r2, [r3, #12]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f8d7 	bl	8005d46 <RTC_ReadTimeCounter>
 8005b98:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	@ (8005c38 <HAL_RTC_SetDate+0x160>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0adb      	lsrs	r3, r3, #11
 8005ba4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b18      	cmp	r3, #24
 8005baa:	d93a      	bls.n	8005c22 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4a23      	ldr	r2, [pc, #140]	@ (8005c3c <HAL_RTC_SetDate+0x164>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	4a22      	ldr	r2, [pc, #136]	@ (8005c40 <HAL_RTC_SetDate+0x168>)
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005bc2:	69f9      	ldr	r1, [r7, #28]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f8ee 	bl	8005da6 <RTC_WriteTimeCounter>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e027      	b.n	8005c30 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f907 	bl	8005df4 <RTC_ReadAlarmCounter>
 8005be6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d018      	beq.n	8005c22 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d214      	bcs.n	8005c22 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005bfe:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005c02:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f90d 	bl	8005e26 <RTC_WriteAlarmCounter>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2204      	movs	r2, #4
 8005c16:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e006      	b.n	8005c30 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	91a2b3c5 	.word	0x91a2b3c5
 8005c3c:	aaaaaaab 	.word	0xaaaaaaab
 8005c40:	00015180 	.word	0x00015180

08005c44 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005c50:	f107 0314 	add.w	r3, r7, #20
 8005c54:	2100      	movs	r1, #0
 8005c56:	460a      	mov	r2, r1
 8005c58:	801a      	strh	r2, [r3, #0]
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_RTC_GetDate+0x26>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e03a      	b.n	8005ce4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	2200      	movs	r2, #0
 8005c74:	4619      	mov	r1, r3
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fe56 	bl	8005928 <HAL_RTC_GetTime>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e02e      	b.n	8005ce4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	7b1a      	ldrb	r2, [r3, #12]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	7bda      	ldrb	r2, [r3, #15]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	7b5a      	ldrb	r2, [r3, #13]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	7b9a      	ldrb	r2, [r3, #14]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01a      	beq.n	8005ce2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f92f 	bl	8005f14 <RTC_ByteToBcd2>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f926 	bl	8005f14 <RTC_ByteToBcd2>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	789b      	ldrb	r3, [r3, #2]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f91d 	bl	8005f14 <RTC_ByteToBcd2>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e01d      	b.n	8005d3e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005d12:	f7fc fd8b 	bl	800282c <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005d18:	e009      	b.n	8005d2e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005d1a:	f7fc fd87 	bl	800282c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d28:	d901      	bls.n	8005d2e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e007      	b.n	8005d3e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ee      	beq.n	8005d1a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b087      	sub	sp, #28
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	827b      	strh	r3, [r7, #18]
 8005d52:	2300      	movs	r3, #0
 8005d54:	823b      	strh	r3, [r7, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005d76:	8a7a      	ldrh	r2, [r7, #18]
 8005d78:	8a3b      	ldrh	r3, [r7, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d008      	beq.n	8005d90 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005d7e:	8a3b      	ldrh	r3, [r7, #16]
 8005d80:	041a      	lsls	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	e004      	b.n	8005d9a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005d90:	8a7b      	ldrh	r3, [r7, #18]
 8005d92:	041a      	lsls	r2, r3, #16
 8005d94:	89fb      	ldrh	r3, [r7, #14]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f85d 	bl	8005e74 <RTC_EnterInitMode>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
 8005dc4:	e011      	b.n	8005dea <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	0c12      	lsrs	r2, r2, #16
 8005dce:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f872 	bl	8005ec4 <RTC_ExitInitMode>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	81fb      	strh	r3, [r7, #14]
 8005e00:	2300      	movs	r3, #0
 8005e02:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005e14:	89fb      	ldrh	r3, [r7, #14]
 8005e16:	041a      	lsls	r2, r3, #16
 8005e18:	89bb      	ldrh	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f81d 	bl	8005e74 <RTC_EnterInitMode>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
 8005e44:	e011      	b.n	8005e6a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	0c12      	lsrs	r2, r2, #16
 8005e4e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	b292      	uxth	r2, r2
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f832 	bl	8005ec4 <RTC_ExitInitMode>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005e80:	f7fc fcd4 	bl	800282c <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e86:	e009      	b.n	8005e9c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e88:	f7fc fcd0 	bl	800282c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e96:	d901      	bls.n	8005e9c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e00f      	b.n	8005ebc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ee      	beq.n	8005e88 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0210 	orr.w	r2, r2, #16
 8005eb8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0210 	bic.w	r2, r2, #16
 8005ede:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005ee0:	f7fc fca4 	bl	800282c <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005ee6:	e009      	b.n	8005efc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005ee8:	f7fc fca0 	bl	800282c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef6:	d901      	bls.n	8005efc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e007      	b.n	8005f0c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0ee      	beq.n	8005ee8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005f22:	e005      	b.n	8005f30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	3b0a      	subs	r3, #10
 8005f2e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b09      	cmp	r3, #9
 8005f34:	d8f6      	bhi.n	8005f24 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	b2db      	uxtb	r3, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	091b      	lsrs	r3, r3, #4
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7bdb      	ldrb	r3, [r3, #15]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7b5b      	ldrb	r3, [r3, #13]
 8005fac:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7b9b      	ldrb	r3, [r3, #14]
 8005fb2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	e06f      	b.n	800609a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d011      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d00e      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d00b      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b07      	cmp	r3, #7
 8005fd0:	d008      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d005      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b0a      	cmp	r3, #10
 8005fdc:	d002      	beq.n	8005fe4 <RTC_DateUpdate+0x5c>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d117      	bne.n	8006014 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b1e      	cmp	r3, #30
 8005fe8:	d803      	bhi.n	8005ff2 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ff0:	e050      	b.n	8006094 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b0c      	cmp	r3, #12
 8005ff6:	d005      	beq.n	8006004 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ffe:	2301      	movs	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006002:	e047      	b.n	8006094 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006004:	2301      	movs	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006008:	2301      	movs	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
          year++;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	3301      	adds	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006012:	e03f      	b.n	8006094 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b04      	cmp	r3, #4
 8006018:	d008      	beq.n	800602c <RTC_DateUpdate+0xa4>
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b06      	cmp	r3, #6
 800601e:	d005      	beq.n	800602c <RTC_DateUpdate+0xa4>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b09      	cmp	r3, #9
 8006024:	d002      	beq.n	800602c <RTC_DateUpdate+0xa4>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b0b      	cmp	r3, #11
 800602a:	d10c      	bne.n	8006046 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b1d      	cmp	r3, #29
 8006030:	d803      	bhi.n	800603a <RTC_DateUpdate+0xb2>
      {
        day++;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3301      	adds	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006038:	e02c      	b.n	8006094 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006044:	e026      	b.n	8006094 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d123      	bne.n	8006094 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b1b      	cmp	r3, #27
 8006050:	d803      	bhi.n	800605a <RTC_DateUpdate+0xd2>
      {
        day++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e01c      	b.n	8006094 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b1c      	cmp	r3, #28
 800605e:	d111      	bne.n	8006084 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	b29b      	uxth	r3, r3
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f839 	bl	80060dc <RTC_IsLeapYear>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e00d      	b.n	8006094 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	3301      	adds	r3, #1
 800607c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800607e:	2301      	movs	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e007      	b.n	8006094 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b1d      	cmp	r3, #29
 8006088:	d104      	bne.n	8006094 <RTC_DateUpdate+0x10c>
      {
        month++;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3301      	adds	r3, #1
 800608e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006090:	2301      	movs	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d38b      	bcc.n	8005fba <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	6978      	ldr	r0, [r7, #20]
 80060c6:	f000 f83b 	bl	8006140 <RTC_WeekDayNum>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	731a      	strb	r2, [r3, #12]
}
 80060d2:	bf00      	nop
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e01d      	b.n	8006132 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4a10      	ldr	r2, [pc, #64]	@ (800613c <RTC_IsLeapYear+0x60>)
 80060fa:	fba2 1203 	umull	r1, r2, r2, r3
 80060fe:	0952      	lsrs	r2, r2, #5
 8006100:	2164      	movs	r1, #100	@ 0x64
 8006102:	fb01 f202 	mul.w	r2, r1, r2
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800610e:	2301      	movs	r3, #1
 8006110:	e00f      	b.n	8006132 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	4a09      	ldr	r2, [pc, #36]	@ (800613c <RTC_IsLeapYear+0x60>)
 8006116:	fba2 1203 	umull	r1, r2, r2, r3
 800611a:	09d2      	lsrs	r2, r2, #7
 800611c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8006120:	fb01 f202 	mul.w	r2, r1, r2
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006130:	2300      	movs	r3, #0
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	51eb851f 	.word	0x51eb851f

08006140 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
 800614c:	4613      	mov	r3, r2
 800614e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800615e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d82d      	bhi.n	80061c2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	4a2c      	ldr	r2, [pc, #176]	@ (8006224 <RTC_WeekDayNum+0xe4>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	085a      	lsrs	r2, r3, #1
 800617a:	78bb      	ldrb	r3, [r7, #2]
 800617c:	441a      	add	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	441a      	add	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3b01      	subs	r3, #1
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	3b01      	subs	r3, #1
 800618e:	4926      	ldr	r1, [pc, #152]	@ (8006228 <RTC_WeekDayNum+0xe8>)
 8006190:	fba1 1303 	umull	r1, r3, r1, r3
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	4922      	ldr	r1, [pc, #136]	@ (8006228 <RTC_WeekDayNum+0xe8>)
 800619e:	fba1 1303 	umull	r1, r3, r1, r3
 80061a2:	09db      	lsrs	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	4b20      	ldr	r3, [pc, #128]	@ (800622c <RTC_WeekDayNum+0xec>)
 80061aa:	fba3 1302 	umull	r1, r3, r3, r2
 80061ae:	1ad1      	subs	r1, r2, r3
 80061b0:	0849      	lsrs	r1, r1, #1
 80061b2:	440b      	add	r3, r1
 80061b4:	0899      	lsrs	r1, r3, #2
 80061b6:	460b      	mov	r3, r1
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	1a5b      	subs	r3, r3, r1
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e029      	b.n	8006216 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	4a15      	ldr	r2, [pc, #84]	@ (8006224 <RTC_WeekDayNum+0xe4>)
 80061d0:	fba2 2303 	umull	r2, r3, r2, r3
 80061d4:	085a      	lsrs	r2, r3, #1
 80061d6:	78bb      	ldrb	r3, [r7, #2]
 80061d8:	441a      	add	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	441a      	add	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4910      	ldr	r1, [pc, #64]	@ (8006228 <RTC_WeekDayNum+0xe8>)
 80061e8:	fba1 1303 	umull	r1, r3, r1, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	490d      	ldr	r1, [pc, #52]	@ (8006228 <RTC_WeekDayNum+0xe8>)
 80061f4:	fba1 1303 	umull	r1, r3, r1, r3
 80061f8:	09db      	lsrs	r3, r3, #7
 80061fa:	4413      	add	r3, r2
 80061fc:	1c9a      	adds	r2, r3, #2
 80061fe:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <RTC_WeekDayNum+0xec>)
 8006200:	fba3 1302 	umull	r1, r3, r3, r2
 8006204:	1ad1      	subs	r1, r2, r3
 8006206:	0849      	lsrs	r1, r1, #1
 8006208:	440b      	add	r3, r1
 800620a:	0899      	lsrs	r1, r3, #2
 800620c:	460b      	mov	r3, r1
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	1a5b      	subs	r3, r3, r1
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	b2db      	uxtb	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	38e38e39 	.word	0x38e38e39
 8006228:	51eb851f 	.word	0x51eb851f
 800622c:	24924925 	.word	0x24924925

08006230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e076      	b.n	8006330 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006252:	d009      	beq.n	8006268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
 800625a:	e005      	b.n	8006268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc f928 	bl	80024d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ec:	ea42 0103 	orr.w	r1, r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	0c1a      	lsrs	r2, r3, #16
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f002 0204 	and.w	r2, r2, #4
 800630e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800631e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_SPI_Transmit+0x22>
 8006356:	2302      	movs	r3, #2
 8006358:	e12d      	b.n	80065b6 <HAL_SPI_Transmit+0x27e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006362:	f7fc fa63 	bl	800282c <HAL_GetTick>
 8006366:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d002      	beq.n	800637e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006378:	2302      	movs	r3, #2
 800637a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800637c:	e116      	b.n	80065ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_SPI_Transmit+0x52>
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800638e:	e10d      	b.n	80065ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2203      	movs	r2, #3
 8006394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063d6:	d10f      	bne.n	80063f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b40      	cmp	r3, #64	@ 0x40
 8006404:	d007      	beq.n	8006416 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800641e:	d14f      	bne.n	80064c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_Transmit+0xf6>
 8006428:	8afb      	ldrh	r3, [r7, #22]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d142      	bne.n	80064b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	881a      	ldrh	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006452:	e02f      	b.n	80064b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b02      	cmp	r3, #2
 8006460:	d112      	bne.n	8006488 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006486:	e015      	b.n	80064b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006488:	f7fc f9d0 	bl	800282c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d803      	bhi.n	80064a0 <HAL_SPI_Transmit+0x168>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d102      	bne.n	80064a6 <HAL_SPI_Transmit+0x16e>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064b2:	e07b      	b.n	80065ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1ca      	bne.n	8006454 <HAL_SPI_Transmit+0x11c>
 80064be:	e050      	b.n	8006562 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Transmit+0x196>
 80064c8:	8afb      	ldrh	r3, [r7, #22]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d144      	bne.n	8006558 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064f4:	e030      	b.n	8006558 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b02      	cmp	r3, #2
 8006502:	d113      	bne.n	800652c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	86da      	strh	r2, [r3, #54]	@ 0x36
 800652a:	e015      	b.n	8006558 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800652c:	f7fc f97e 	bl	800282c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d803      	bhi.n	8006544 <HAL_SPI_Transmit+0x20c>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d102      	bne.n	800654a <HAL_SPI_Transmit+0x212>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006556:	e029      	b.n	80065ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1c9      	bne.n	80064f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa62 	bl	8006a30 <SPI_EndRxTxTransaction>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e003      	b.n	80065ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08c      	sub	sp, #48	@ 0x30
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065cc:	2301      	movs	r3, #1
 80065ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_SPI_TransmitReceive+0x26>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e198      	b.n	8006916 <HAL_SPI_TransmitReceive+0x358>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ec:	f7fc f91e 	bl	800282c <HAL_GetTick>
 80065f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800660a:	2b01      	cmp	r3, #1
 800660c:	d00f      	beq.n	800662e <HAL_SPI_TransmitReceive+0x70>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006614:	d107      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x68>
 800661e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006622:	2b04      	cmp	r3, #4
 8006624:	d003      	beq.n	800662e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006626:	2302      	movs	r3, #2
 8006628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800662c:	e16d      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x82>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x82>
 800663a:	887b      	ldrh	r3, [r7, #2]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006646:	e160      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b04      	cmp	r3, #4
 8006652:	d003      	beq.n	800665c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2205      	movs	r2, #5
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	887a      	ldrh	r2, [r7, #2]
 8006672:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	887a      	ldrh	r2, [r7, #2]
 800667e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d007      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b8:	d17c      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x10a>
 80066c2:	8b7b      	ldrh	r3, [r7, #26]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d16a      	bne.n	800679e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	881a      	ldrh	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	1c9a      	adds	r2, r3, #2
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ec:	e057      	b.n	800679e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d11b      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x176>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d016      	beq.n	8006734 <HAL_SPI_TransmitReceive+0x176>
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d113      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	881a      	ldrh	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d119      	bne.n	8006776 <HAL_SPI_TransmitReceive+0x1b8>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d014      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006756:	b292      	uxth	r2, r2
 8006758:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	1c9a      	adds	r2, r3, #2
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006772:	2301      	movs	r3, #1
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006776:	f7fc f859 	bl	800282c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006782:	429a      	cmp	r2, r3
 8006784:	d80b      	bhi.n	800679e <HAL_SPI_TransmitReceive+0x1e0>
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d007      	beq.n	800679e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800679c:	e0b5      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1a2      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x130>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d19d      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x130>
 80067b2:	e080      	b.n	80068b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x204>
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d16f      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e8:	e05b      	b.n	80068a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d11c      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x274>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x274>
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d114      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d119      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x2b6>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006870:	2301      	movs	r3, #1
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006874:	f7fb ffda 	bl	800282c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006880:	429a      	cmp	r2, r3
 8006882:	d803      	bhi.n	800688c <HAL_SPI_TransmitReceive+0x2ce>
 8006884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d102      	bne.n	8006892 <HAL_SPI_TransmitReceive+0x2d4>
 800688c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80068a0:	e033      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d19e      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x22c>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d199      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f8b8 	bl	8006a30 <SPI_EndRxTxTransaction>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d006      	beq.n	80068d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80068d2:	e01a      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006900:	e003      	b.n	800690a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006912:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006916:	4618      	mov	r0, r3
 8006918:	3730      	adds	r7, #48	@ 0x30
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006930:	f7fb ff7c 	bl	800282c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4413      	add	r3, r2
 800693e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006940:	f7fb ff74 	bl	800282c <HAL_GetTick>
 8006944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006946:	4b39      	ldr	r3, [pc, #228]	@ (8006a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	015b      	lsls	r3, r3, #5
 800694c:	0d1b      	lsrs	r3, r3, #20
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006956:	e054      	b.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d050      	beq.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006960:	f7fb ff64 	bl	800282c <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	429a      	cmp	r2, r3
 800696e:	d902      	bls.n	8006976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d13d      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800698e:	d111      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006998:	d004      	beq.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a2:	d107      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069bc:	d10f      	bne.n	80069de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e017      	b.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d19b      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000020 	.word	0x20000020

08006a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	@ 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff ff6a 	bl	8006920 <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e000      	b.n	8006a64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e042      	b.n	8006b04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fb fd6c 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	@ 0x24
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f91d 	bl	8006cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d16d      	bne.n	8006c08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_UART_Transmit+0x2c>
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e066      	b.n	8006c0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2221      	movs	r2, #33	@ 0x21
 8006b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b4a:	f7fb fe6f 	bl	800282c <HAL_GetTick>
 8006b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d108      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e003      	b.n	8006b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b80:	e02a      	b.n	8006bd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	@ 0x80
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f840 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e036      	b.n	8006c0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10b      	bne.n	8006bba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e007      	b.n	8006bca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1cf      	bne.n	8006b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2140      	movs	r1, #64	@ 0x40
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f810 	bl	8006c12 <UART_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b090      	sub	sp, #64	@ 0x40
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c22:	e050      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d04c      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c32:	f7fb fdfb 	bl	800282c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d241      	bcs.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c62:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c64:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	613b      	str	r3, [r7, #16]
   return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c96:	623a      	str	r2, [r7, #32]
 8006c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e00f      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	bf0c      	ite	eq
 8006cd6:	2301      	moveq	r3, #1
 8006cd8:	2300      	movne	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d09f      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3740      	adds	r7, #64	@ 0x40
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d2a:	f023 030c 	bic.w	r3, r3, #12
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	430b      	orrs	r3, r1
 8006d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2c      	ldr	r2, [pc, #176]	@ (8006e04 <UART_SetConfig+0x114>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d103      	bne.n	8006d60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d58:	f7fe fb24 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	e002      	b.n	8006d66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fe fb0c 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8006d64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009a      	lsls	r2, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <UART_SetConfig+0x118>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	0119      	lsls	r1, r3, #4
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009a      	lsls	r2, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e08 <UART_SetConfig+0x118>)
 8006d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2064      	movs	r0, #100	@ 0x64
 8006da6:	fb00 f303 	mul.w	r3, r0, r3
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	3332      	adds	r3, #50	@ 0x32
 8006db0:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <UART_SetConfig+0x118>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dbc:	4419      	add	r1, r3
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009a      	lsls	r2, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <UART_SetConfig+0x118>)
 8006dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2064      	movs	r0, #100	@ 0x64
 8006dde:	fb00 f303 	mul.w	r3, r0, r3
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	3332      	adds	r3, #50	@ 0x32
 8006de8:	4a07      	ldr	r2, [pc, #28]	@ (8006e08 <UART_SetConfig+0x118>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	440a      	add	r2, r1
 8006dfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40013800 	.word	0x40013800
 8006e08:	51eb851f 	.word	0x51eb851f

08006e0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e10:	4904      	ldr	r1, [pc, #16]	@ (8006e24 <MX_FATFS_Init+0x18>)
 8006e12:	4805      	ldr	r0, [pc, #20]	@ (8006e28 <MX_FATFS_Init+0x1c>)
 8006e14:	f000 f8b0 	bl	8006f78 <FATFS_LinkDriver>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <MX_FATFS_Init+0x20>)
 8006e1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e20:	bf00      	nop
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200002b8 	.word	0x200002b8
 8006e28:	2000002c 	.word	0x2000002c
 8006e2c:	200002b4 	.word	0x200002b4

08006e30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fa f9e9 	bl	8001214 <SD_disk_initialize>
 8006e42:	4603      	mov	r3, r0
 8006e44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4603      	mov	r3, r0
 8006e56:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fa fac0 	bl	80013e0 <SD_disk_status>
 8006e60:	4603      	mov	r3, r0
 8006e62:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006e7c:	7bf8      	ldrb	r0, [r7, #15]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	f7fa fac0 	bl	8001408 <SD_disk_read>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006ea4:	7bf8      	ldrb	r0, [r7, #15]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	f7fa fb16 	bl	80014dc <SD_disk_write>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	603a      	str	r2, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	79b9      	ldrb	r1, [r7, #6]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa fb86 	bl	80015e4 <SD_disk_ioctl>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006efa:	4b1e      	ldr	r3, [pc, #120]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006efc:	7a5b      	ldrb	r3, [r3, #9]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d831      	bhi.n	8006f68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f04:	4b1b      	ldr	r3, [pc, #108]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f06:	7a5b      	ldrb	r3, [r3, #9]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b19      	ldr	r3, [pc, #100]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006f12:	4b18      	ldr	r3, [pc, #96]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f14:	7a5b      	ldrb	r3, [r3, #9]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4a16      	ldr	r2, [pc, #88]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f24:	7a5b      	ldrb	r3, [r3, #9]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f2c:	4413      	add	r3, r2
 8006f2e:	79fa      	ldrb	r2, [r7, #7]
 8006f30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f32:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f34:	7a5b      	ldrb	r3, [r3, #9]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	b2d1      	uxtb	r1, r2
 8006f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f74 <FATFS_LinkDriverEx+0x90>)
 8006f3e:	7251      	strb	r1, [r2, #9]
 8006f40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f42:	7dbb      	ldrb	r3, [r7, #22]
 8006f44:	3330      	adds	r3, #48	@ 0x30
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	223a      	movs	r2, #58	@ 0x3a
 8006f52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3302      	adds	r3, #2
 8006f58:	222f      	movs	r2, #47	@ 0x2f
 8006f5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	3303      	adds	r3, #3
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr
 8006f74:	200002bc 	.word	0x200002bc

08006f78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f82:	2200      	movs	r2, #0
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff ffac 	bl	8006ee4 <FATFS_LinkDriverEx>
 8006f8c:	4603      	mov	r3, r0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <malloc>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	@ (8006fa4 <malloc+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f000 b82d 	b.w	8006ffc <_malloc_r>
 8006fa2:	bf00      	nop
 8006fa4:	20000040 	.word	0x20000040

08006fa8 <free>:
 8006fa8:	4b02      	ldr	r3, [pc, #8]	@ (8006fb4 <free+0xc>)
 8006faa:	4601      	mov	r1, r0
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	f000 b915 	b.w	80071dc <_free_r>
 8006fb2:	bf00      	nop
 8006fb4:	20000040 	.word	0x20000040

08006fb8 <sbrk_aligned>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4e0f      	ldr	r6, [pc, #60]	@ (8006ff8 <sbrk_aligned+0x40>)
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	6831      	ldr	r1, [r6, #0]
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	b911      	cbnz	r1, 8006fca <sbrk_aligned+0x12>
 8006fc4:	f000 f8ce 	bl	8007164 <_sbrk_r>
 8006fc8:	6030      	str	r0, [r6, #0]
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f8c9 	bl	8007164 <_sbrk_r>
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	d103      	bne.n	8006fde <sbrk_aligned+0x26>
 8006fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8006fda:	4620      	mov	r0, r4
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d0f8      	beq.n	8006fda <sbrk_aligned+0x22>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 f8ba 	bl	8007164 <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d1f2      	bne.n	8006fda <sbrk_aligned+0x22>
 8006ff4:	e7ef      	b.n	8006fd6 <sbrk_aligned+0x1e>
 8006ff6:	bf00      	nop
 8006ff8:	200002c8 	.word	0x200002c8

08006ffc <_malloc_r>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	1ccd      	adds	r5, r1, #3
 8007002:	f025 0503 	bic.w	r5, r5, #3
 8007006:	3508      	adds	r5, #8
 8007008:	2d0c      	cmp	r5, #12
 800700a:	bf38      	it	cc
 800700c:	250c      	movcc	r5, #12
 800700e:	2d00      	cmp	r5, #0
 8007010:	4606      	mov	r6, r0
 8007012:	db01      	blt.n	8007018 <_malloc_r+0x1c>
 8007014:	42a9      	cmp	r1, r5
 8007016:	d904      	bls.n	8007022 <_malloc_r+0x26>
 8007018:	230c      	movs	r3, #12
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	2000      	movs	r0, #0
 800701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070f8 <_malloc_r+0xfc>
 8007026:	f000 f869 	bl	80070fc <__malloc_lock>
 800702a:	f8d8 3000 	ldr.w	r3, [r8]
 800702e:	461c      	mov	r4, r3
 8007030:	bb44      	cbnz	r4, 8007084 <_malloc_r+0x88>
 8007032:	4629      	mov	r1, r5
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff ffbf 	bl	8006fb8 <sbrk_aligned>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	4604      	mov	r4, r0
 800703e:	d158      	bne.n	80070f2 <_malloc_r+0xf6>
 8007040:	f8d8 4000 	ldr.w	r4, [r8]
 8007044:	4627      	mov	r7, r4
 8007046:	2f00      	cmp	r7, #0
 8007048:	d143      	bne.n	80070d2 <_malloc_r+0xd6>
 800704a:	2c00      	cmp	r4, #0
 800704c:	d04b      	beq.n	80070e6 <_malloc_r+0xea>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	4639      	mov	r1, r7
 8007052:	4630      	mov	r0, r6
 8007054:	eb04 0903 	add.w	r9, r4, r3
 8007058:	f000 f884 	bl	8007164 <_sbrk_r>
 800705c:	4581      	cmp	r9, r0
 800705e:	d142      	bne.n	80070e6 <_malloc_r+0xea>
 8007060:	6821      	ldr	r1, [r4, #0]
 8007062:	4630      	mov	r0, r6
 8007064:	1a6d      	subs	r5, r5, r1
 8007066:	4629      	mov	r1, r5
 8007068:	f7ff ffa6 	bl	8006fb8 <sbrk_aligned>
 800706c:	3001      	adds	r0, #1
 800706e:	d03a      	beq.n	80070e6 <_malloc_r+0xea>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	442b      	add	r3, r5
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	f8d8 3000 	ldr.w	r3, [r8]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	bb62      	cbnz	r2, 80070d8 <_malloc_r+0xdc>
 800707e:	f8c8 7000 	str.w	r7, [r8]
 8007082:	e00f      	b.n	80070a4 <_malloc_r+0xa8>
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	1b52      	subs	r2, r2, r5
 8007088:	d420      	bmi.n	80070cc <_malloc_r+0xd0>
 800708a:	2a0b      	cmp	r2, #11
 800708c:	d917      	bls.n	80070be <_malloc_r+0xc2>
 800708e:	1961      	adds	r1, r4, r5
 8007090:	42a3      	cmp	r3, r4
 8007092:	6025      	str	r5, [r4, #0]
 8007094:	bf18      	it	ne
 8007096:	6059      	strne	r1, [r3, #4]
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	bf08      	it	eq
 800709c:	f8c8 1000 	streq.w	r1, [r8]
 80070a0:	5162      	str	r2, [r4, r5]
 80070a2:	604b      	str	r3, [r1, #4]
 80070a4:	4630      	mov	r0, r6
 80070a6:	f000 f82f 	bl	8007108 <__malloc_unlock>
 80070aa:	f104 000b 	add.w	r0, r4, #11
 80070ae:	1d23      	adds	r3, r4, #4
 80070b0:	f020 0007 	bic.w	r0, r0, #7
 80070b4:	1ac2      	subs	r2, r0, r3
 80070b6:	bf1c      	itt	ne
 80070b8:	1a1b      	subne	r3, r3, r0
 80070ba:	50a3      	strne	r3, [r4, r2]
 80070bc:	e7af      	b.n	800701e <_malloc_r+0x22>
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	bf0c      	ite	eq
 80070c4:	f8c8 2000 	streq.w	r2, [r8]
 80070c8:	605a      	strne	r2, [r3, #4]
 80070ca:	e7eb      	b.n	80070a4 <_malloc_r+0xa8>
 80070cc:	4623      	mov	r3, r4
 80070ce:	6864      	ldr	r4, [r4, #4]
 80070d0:	e7ae      	b.n	8007030 <_malloc_r+0x34>
 80070d2:	463c      	mov	r4, r7
 80070d4:	687f      	ldr	r7, [r7, #4]
 80070d6:	e7b6      	b.n	8007046 <_malloc_r+0x4a>
 80070d8:	461a      	mov	r2, r3
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d1fb      	bne.n	80070d8 <_malloc_r+0xdc>
 80070e0:	2300      	movs	r3, #0
 80070e2:	6053      	str	r3, [r2, #4]
 80070e4:	e7de      	b.n	80070a4 <_malloc_r+0xa8>
 80070e6:	230c      	movs	r3, #12
 80070e8:	4630      	mov	r0, r6
 80070ea:	6033      	str	r3, [r6, #0]
 80070ec:	f000 f80c 	bl	8007108 <__malloc_unlock>
 80070f0:	e794      	b.n	800701c <_malloc_r+0x20>
 80070f2:	6005      	str	r5, [r0, #0]
 80070f4:	e7d6      	b.n	80070a4 <_malloc_r+0xa8>
 80070f6:	bf00      	nop
 80070f8:	200002cc 	.word	0x200002cc

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	@ (8007104 <__malloc_lock+0x8>)
 80070fe:	f000 b86b 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	2000040c 	.word	0x2000040c

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	@ (8007110 <__malloc_unlock+0x8>)
 800710a:	f000 b866 	b.w	80071da <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	2000040c 	.word	0x2000040c

08007114 <siprintf>:
 8007114:	b40e      	push	{r1, r2, r3}
 8007116:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800711a:	b500      	push	{lr}
 800711c:	b09c      	sub	sp, #112	@ 0x70
 800711e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007120:	9002      	str	r0, [sp, #8]
 8007122:	9006      	str	r0, [sp, #24]
 8007124:	9107      	str	r1, [sp, #28]
 8007126:	9104      	str	r1, [sp, #16]
 8007128:	4808      	ldr	r0, [pc, #32]	@ (800714c <siprintf+0x38>)
 800712a:	4909      	ldr	r1, [pc, #36]	@ (8007150 <siprintf+0x3c>)
 800712c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007130:	9105      	str	r1, [sp, #20]
 8007132:	6800      	ldr	r0, [r0, #0]
 8007134:	a902      	add	r1, sp, #8
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	f000 f8f4 	bl	8007324 <_svfiprintf_r>
 800713c:	2200      	movs	r2, #0
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	b01c      	add	sp, #112	@ 0x70
 8007144:	f85d eb04 	ldr.w	lr, [sp], #4
 8007148:	b003      	add	sp, #12
 800714a:	4770      	bx	lr
 800714c:	20000040 	.word	0x20000040
 8007150:	ffff0208 	.word	0xffff0208

08007154 <memset>:
 8007154:	4603      	mov	r3, r0
 8007156:	4402      	add	r2, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <_sbrk_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	2300      	movs	r3, #0
 8007168:	4d05      	ldr	r5, [pc, #20]	@ (8007180 <_sbrk_r+0x1c>)
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fb faa2 	bl	80026b8 <_sbrk>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_sbrk_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_sbrk_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	20000408 	.word	0x20000408

08007184 <__errno>:
 8007184:	4b01      	ldr	r3, [pc, #4]	@ (800718c <__errno+0x8>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000040 	.word	0x20000040

08007190 <__libc_init_array>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	2600      	movs	r6, #0
 8007194:	4d0c      	ldr	r5, [pc, #48]	@ (80071c8 <__libc_init_array+0x38>)
 8007196:	4c0d      	ldr	r4, [pc, #52]	@ (80071cc <__libc_init_array+0x3c>)
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	42a6      	cmp	r6, r4
 800719e:	d109      	bne.n	80071b4 <__libc_init_array+0x24>
 80071a0:	f000 fbba 	bl	8007918 <_init>
 80071a4:	2600      	movs	r6, #0
 80071a6:	4d0a      	ldr	r5, [pc, #40]	@ (80071d0 <__libc_init_array+0x40>)
 80071a8:	4c0a      	ldr	r4, [pc, #40]	@ (80071d4 <__libc_init_array+0x44>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	42a6      	cmp	r6, r4
 80071b0:	d105      	bne.n	80071be <__libc_init_array+0x2e>
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b8:	4798      	blx	r3
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7ee      	b.n	800719c <__libc_init_array+0xc>
 80071be:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c2:	4798      	blx	r3
 80071c4:	3601      	adds	r6, #1
 80071c6:	e7f2      	b.n	80071ae <__libc_init_array+0x1e>
 80071c8:	08007af0 	.word	0x08007af0
 80071cc:	08007af0 	.word	0x08007af0
 80071d0:	08007af0 	.word	0x08007af0
 80071d4:	08007af4 	.word	0x08007af4

080071d8 <__retarget_lock_acquire_recursive>:
 80071d8:	4770      	bx	lr

080071da <__retarget_lock_release_recursive>:
 80071da:	4770      	bx	lr

080071dc <_free_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d040      	beq.n	8007266 <_free_r+0x8a>
 80071e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e8:	1f0c      	subs	r4, r1, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfb8      	it	lt
 80071ee:	18e4      	addlt	r4, r4, r3
 80071f0:	f7ff ff84 	bl	80070fc <__malloc_lock>
 80071f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007268 <_free_r+0x8c>)
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	b933      	cbnz	r3, 8007208 <_free_r+0x2c>
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6014      	str	r4, [r2, #0]
 80071fe:	4628      	mov	r0, r5
 8007200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007204:	f7ff bf80 	b.w	8007108 <__malloc_unlock>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d908      	bls.n	800721e <_free_r+0x42>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	1821      	adds	r1, r4, r0
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1809      	addeq	r1, r1, r0
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	e7ed      	b.n	80071fa <_free_r+0x1e>
 800721e:	461a      	mov	r2, r3
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b10b      	cbz	r3, 8007228 <_free_r+0x4c>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d9fa      	bls.n	800721e <_free_r+0x42>
 8007228:	6811      	ldr	r1, [r2, #0]
 800722a:	1850      	adds	r0, r2, r1
 800722c:	42a0      	cmp	r0, r4
 800722e:	d10b      	bne.n	8007248 <_free_r+0x6c>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	4401      	add	r1, r0
 8007234:	1850      	adds	r0, r2, r1
 8007236:	4283      	cmp	r3, r0
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	d1e0      	bne.n	80071fe <_free_r+0x22>
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4408      	add	r0, r1
 8007242:	6010      	str	r0, [r2, #0]
 8007244:	6053      	str	r3, [r2, #4]
 8007246:	e7da      	b.n	80071fe <_free_r+0x22>
 8007248:	d902      	bls.n	8007250 <_free_r+0x74>
 800724a:	230c      	movs	r3, #12
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	e7d6      	b.n	80071fe <_free_r+0x22>
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	1821      	adds	r1, r4, r0
 8007254:	428b      	cmp	r3, r1
 8007256:	bf01      	itttt	eq
 8007258:	6819      	ldreq	r1, [r3, #0]
 800725a:	685b      	ldreq	r3, [r3, #4]
 800725c:	1809      	addeq	r1, r1, r0
 800725e:	6021      	streq	r1, [r4, #0]
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	6054      	str	r4, [r2, #4]
 8007264:	e7cb      	b.n	80071fe <_free_r+0x22>
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	200002cc 	.word	0x200002cc

0800726c <__ssputs_r>:
 800726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	461f      	mov	r7, r3
 8007272:	688e      	ldr	r6, [r1, #8]
 8007274:	4682      	mov	sl, r0
 8007276:	42be      	cmp	r6, r7
 8007278:	460c      	mov	r4, r1
 800727a:	4690      	mov	r8, r2
 800727c:	680b      	ldr	r3, [r1, #0]
 800727e:	d82d      	bhi.n	80072dc <__ssputs_r+0x70>
 8007280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007288:	d026      	beq.n	80072d8 <__ssputs_r+0x6c>
 800728a:	6965      	ldr	r5, [r4, #20]
 800728c:	6909      	ldr	r1, [r1, #16]
 800728e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007292:	eba3 0901 	sub.w	r9, r3, r1
 8007296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800729a:	1c7b      	adds	r3, r7, #1
 800729c:	444b      	add	r3, r9
 800729e:	106d      	asrs	r5, r5, #1
 80072a0:	429d      	cmp	r5, r3
 80072a2:	bf38      	it	cc
 80072a4:	461d      	movcc	r5, r3
 80072a6:	0553      	lsls	r3, r2, #21
 80072a8:	d527      	bpl.n	80072fa <__ssputs_r+0x8e>
 80072aa:	4629      	mov	r1, r5
 80072ac:	f7ff fea6 	bl	8006ffc <_malloc_r>
 80072b0:	4606      	mov	r6, r0
 80072b2:	b360      	cbz	r0, 800730e <__ssputs_r+0xa2>
 80072b4:	464a      	mov	r2, r9
 80072b6:	6921      	ldr	r1, [r4, #16]
 80072b8:	f000 faea 	bl	8007890 <memcpy>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	444e      	add	r6, r9
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	463e      	mov	r6, r7
 80072d0:	6165      	str	r5, [r4, #20]
 80072d2:	eba5 0509 	sub.w	r5, r5, r9
 80072d6:	60a5      	str	r5, [r4, #8]
 80072d8:	42be      	cmp	r6, r7
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x72>
 80072dc:	463e      	mov	r6, r7
 80072de:	4632      	mov	r2, r6
 80072e0:	4641      	mov	r1, r8
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f000 faac 	bl	8007840 <memmove>
 80072e8:	2000      	movs	r0, #0
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	4433      	add	r3, r6
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	462a      	mov	r2, r5
 80072fc:	f000 fad6 	bl	80078ac <_realloc_r>
 8007300:	4606      	mov	r6, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d1e0      	bne.n	80072c8 <__ssputs_r+0x5c>
 8007306:	4650      	mov	r0, sl
 8007308:	6921      	ldr	r1, [r4, #16]
 800730a:	f7ff ff67 	bl	80071dc <_free_r>
 800730e:	230c      	movs	r3, #12
 8007310:	f8ca 3000 	str.w	r3, [sl]
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295
 800731a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	e7e9      	b.n	80072f6 <__ssputs_r+0x8a>
	...

08007324 <_svfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	4698      	mov	r8, r3
 800732a:	898b      	ldrh	r3, [r1, #12]
 800732c:	4607      	mov	r7, r0
 800732e:	061b      	lsls	r3, r3, #24
 8007330:	460d      	mov	r5, r1
 8007332:	4614      	mov	r4, r2
 8007334:	b09d      	sub	sp, #116	@ 0x74
 8007336:	d510      	bpl.n	800735a <_svfiprintf_r+0x36>
 8007338:	690b      	ldr	r3, [r1, #16]
 800733a:	b973      	cbnz	r3, 800735a <_svfiprintf_r+0x36>
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	f7ff fe5d 	bl	8006ffc <_malloc_r>
 8007342:	6028      	str	r0, [r5, #0]
 8007344:	6128      	str	r0, [r5, #16]
 8007346:	b930      	cbnz	r0, 8007356 <_svfiprintf_r+0x32>
 8007348:	230c      	movs	r3, #12
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	b01d      	add	sp, #116	@ 0x74
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	2340      	movs	r3, #64	@ 0x40
 8007358:	616b      	str	r3, [r5, #20]
 800735a:	2300      	movs	r3, #0
 800735c:	9309      	str	r3, [sp, #36]	@ 0x24
 800735e:	2320      	movs	r3, #32
 8007360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007364:	2330      	movs	r3, #48	@ 0x30
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	f8cd 800c 	str.w	r8, [sp, #12]
 800736e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007508 <_svfiprintf_r+0x1e4>
 8007372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007376:	4623      	mov	r3, r4
 8007378:	469a      	mov	sl, r3
 800737a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800737e:	b10a      	cbz	r2, 8007384 <_svfiprintf_r+0x60>
 8007380:	2a25      	cmp	r2, #37	@ 0x25
 8007382:	d1f9      	bne.n	8007378 <_svfiprintf_r+0x54>
 8007384:	ebba 0b04 	subs.w	fp, sl, r4
 8007388:	d00b      	beq.n	80073a2 <_svfiprintf_r+0x7e>
 800738a:	465b      	mov	r3, fp
 800738c:	4622      	mov	r2, r4
 800738e:	4629      	mov	r1, r5
 8007390:	4638      	mov	r0, r7
 8007392:	f7ff ff6b 	bl	800726c <__ssputs_r>
 8007396:	3001      	adds	r0, #1
 8007398:	f000 80a7 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 800739c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800739e:	445a      	add	r2, fp
 80073a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 809f 	beq.w	80074ea <_svfiprintf_r+0x1c6>
 80073ac:	2300      	movs	r3, #0
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b6:	f10a 0a01 	add.w	sl, sl, #1
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	9307      	str	r3, [sp, #28]
 80073be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c4:	4654      	mov	r4, sl
 80073c6:	2205      	movs	r2, #5
 80073c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073cc:	484e      	ldr	r0, [pc, #312]	@ (8007508 <_svfiprintf_r+0x1e4>)
 80073ce:	f000 fa51 	bl	8007874 <memchr>
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	b9d8      	cbnz	r0, 800740e <_svfiprintf_r+0xea>
 80073d6:	06d0      	lsls	r0, r2, #27
 80073d8:	bf44      	itt	mi
 80073da:	2320      	movmi	r3, #32
 80073dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e0:	0711      	lsls	r1, r2, #28
 80073e2:	bf44      	itt	mi
 80073e4:	232b      	movmi	r3, #43	@ 0x2b
 80073e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ea:	f89a 3000 	ldrb.w	r3, [sl]
 80073ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f0:	d015      	beq.n	800741e <_svfiprintf_r+0xfa>
 80073f2:	4654      	mov	r4, sl
 80073f4:	2000      	movs	r0, #0
 80073f6:	f04f 0c0a 	mov.w	ip, #10
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4621      	mov	r1, r4
 80073fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007402:	3b30      	subs	r3, #48	@ 0x30
 8007404:	2b09      	cmp	r3, #9
 8007406:	d94b      	bls.n	80074a0 <_svfiprintf_r+0x17c>
 8007408:	b1b0      	cbz	r0, 8007438 <_svfiprintf_r+0x114>
 800740a:	9207      	str	r2, [sp, #28]
 800740c:	e014      	b.n	8007438 <_svfiprintf_r+0x114>
 800740e:	eba0 0308 	sub.w	r3, r0, r8
 8007412:	fa09 f303 	lsl.w	r3, r9, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	46a2      	mov	sl, r4
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	e7d2      	b.n	80073c4 <_svfiprintf_r+0xa0>
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	1d19      	adds	r1, r3, #4
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	9103      	str	r1, [sp, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfbb      	ittet	lt
 800742a:	425b      	neglt	r3, r3
 800742c:	f042 0202 	orrlt.w	r2, r2, #2
 8007430:	9307      	strge	r3, [sp, #28]
 8007432:	9307      	strlt	r3, [sp, #28]
 8007434:	bfb8      	it	lt
 8007436:	9204      	strlt	r2, [sp, #16]
 8007438:	7823      	ldrb	r3, [r4, #0]
 800743a:	2b2e      	cmp	r3, #46	@ 0x2e
 800743c:	d10a      	bne.n	8007454 <_svfiprintf_r+0x130>
 800743e:	7863      	ldrb	r3, [r4, #1]
 8007440:	2b2a      	cmp	r3, #42	@ 0x2a
 8007442:	d132      	bne.n	80074aa <_svfiprintf_r+0x186>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3402      	adds	r4, #2
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800750c <_svfiprintf_r+0x1e8>
 8007458:	2203      	movs	r2, #3
 800745a:	4650      	mov	r0, sl
 800745c:	7821      	ldrb	r1, [r4, #0]
 800745e:	f000 fa09 	bl	8007874 <memchr>
 8007462:	b138      	cbz	r0, 8007474 <_svfiprintf_r+0x150>
 8007464:	2240      	movs	r2, #64	@ 0x40
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	4082      	lsls	r2, r0
 800746e:	4313      	orrs	r3, r2
 8007470:	3401      	adds	r4, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	2206      	movs	r2, #6
 800747a:	4825      	ldr	r0, [pc, #148]	@ (8007510 <_svfiprintf_r+0x1ec>)
 800747c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007480:	f000 f9f8 	bl	8007874 <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d036      	beq.n	80074f6 <_svfiprintf_r+0x1d2>
 8007488:	4b22      	ldr	r3, [pc, #136]	@ (8007514 <_svfiprintf_r+0x1f0>)
 800748a:	bb1b      	cbnz	r3, 80074d4 <_svfiprintf_r+0x1b0>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	9303      	str	r3, [sp, #12]
 8007498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749a:	4433      	add	r3, r6
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	e76a      	b.n	8007376 <_svfiprintf_r+0x52>
 80074a0:	460c      	mov	r4, r1
 80074a2:	2001      	movs	r0, #1
 80074a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a8:	e7a8      	b.n	80073fc <_svfiprintf_r+0xd8>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	4619      	mov	r1, r3
 80074b2:	3401      	adds	r4, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074bc:	3a30      	subs	r2, #48	@ 0x30
 80074be:	2a09      	cmp	r2, #9
 80074c0:	d903      	bls.n	80074ca <_svfiprintf_r+0x1a6>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0c6      	beq.n	8007454 <_svfiprintf_r+0x130>
 80074c6:	9105      	str	r1, [sp, #20]
 80074c8:	e7c4      	b.n	8007454 <_svfiprintf_r+0x130>
 80074ca:	4604      	mov	r4, r0
 80074cc:	2301      	movs	r3, #1
 80074ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d2:	e7f0      	b.n	80074b6 <_svfiprintf_r+0x192>
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	462a      	mov	r2, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <_svfiprintf_r+0x1f4>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	f3af 8000 	nop.w
 80074e4:	1c42      	adds	r2, r0, #1
 80074e6:	4606      	mov	r6, r0
 80074e8:	d1d6      	bne.n	8007498 <_svfiprintf_r+0x174>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	065b      	lsls	r3, r3, #25
 80074ee:	f53f af2d 	bmi.w	800734c <_svfiprintf_r+0x28>
 80074f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f4:	e72c      	b.n	8007350 <_svfiprintf_r+0x2c>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4638      	mov	r0, r7
 80074fe:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <_svfiprintf_r+0x1f4>)
 8007500:	a904      	add	r1, sp, #16
 8007502:	f000 f87d 	bl	8007600 <_printf_i>
 8007506:	e7ed      	b.n	80074e4 <_svfiprintf_r+0x1c0>
 8007508:	08007aba 	.word	0x08007aba
 800750c:	08007ac0 	.word	0x08007ac0
 8007510:	08007ac4 	.word	0x08007ac4
 8007514:	00000000 	.word	0x00000000
 8007518:	0800726d 	.word	0x0800726d

0800751c <_printf_common>:
 800751c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	4616      	mov	r6, r2
 8007522:	4698      	mov	r8, r3
 8007524:	688a      	ldr	r2, [r1, #8]
 8007526:	690b      	ldr	r3, [r1, #16]
 8007528:	4607      	mov	r7, r0
 800752a:	4293      	cmp	r3, r2
 800752c:	bfb8      	it	lt
 800752e:	4613      	movlt	r3, r2
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007536:	460c      	mov	r4, r1
 8007538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800753c:	b10a      	cbz	r2, 8007542 <_printf_common+0x26>
 800753e:	3301      	adds	r3, #1
 8007540:	6033      	str	r3, [r6, #0]
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	0699      	lsls	r1, r3, #26
 8007546:	bf42      	ittt	mi
 8007548:	6833      	ldrmi	r3, [r6, #0]
 800754a:	3302      	addmi	r3, #2
 800754c:	6033      	strmi	r3, [r6, #0]
 800754e:	6825      	ldr	r5, [r4, #0]
 8007550:	f015 0506 	ands.w	r5, r5, #6
 8007554:	d106      	bne.n	8007564 <_printf_common+0x48>
 8007556:	f104 0a19 	add.w	sl, r4, #25
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	6832      	ldr	r2, [r6, #0]
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	42ab      	cmp	r3, r5
 8007562:	dc2b      	bgt.n	80075bc <_printf_common+0xa0>
 8007564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	3b00      	subs	r3, #0
 800756c:	bf18      	it	ne
 800756e:	2301      	movne	r3, #1
 8007570:	0692      	lsls	r2, r2, #26
 8007572:	d430      	bmi.n	80075d6 <_printf_common+0xba>
 8007574:	4641      	mov	r1, r8
 8007576:	4638      	mov	r0, r7
 8007578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800757c:	47c8      	blx	r9
 800757e:	3001      	adds	r0, #1
 8007580:	d023      	beq.n	80075ca <_printf_common+0xae>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	f003 0306 	and.w	r3, r3, #6
 800758a:	2b04      	cmp	r3, #4
 800758c:	bf14      	ite	ne
 800758e:	2500      	movne	r5, #0
 8007590:	6833      	ldreq	r3, [r6, #0]
 8007592:	f04f 0600 	mov.w	r6, #0
 8007596:	bf08      	it	eq
 8007598:	68e5      	ldreq	r5, [r4, #12]
 800759a:	f104 041a 	add.w	r4, r4, #26
 800759e:	bf08      	it	eq
 80075a0:	1aed      	subeq	r5, r5, r3
 80075a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075a6:	bf08      	it	eq
 80075a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfc4      	itt	gt
 80075b0:	1a9b      	subgt	r3, r3, r2
 80075b2:	18ed      	addgt	r5, r5, r3
 80075b4:	42b5      	cmp	r5, r6
 80075b6:	d11a      	bne.n	80075ee <_printf_common+0xd2>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e008      	b.n	80075ce <_printf_common+0xb2>
 80075bc:	2301      	movs	r3, #1
 80075be:	4652      	mov	r2, sl
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d103      	bne.n	80075d2 <_printf_common+0xb6>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	3501      	adds	r5, #1
 80075d4:	e7c1      	b.n	800755a <_printf_common+0x3e>
 80075d6:	2030      	movs	r0, #48	@ 0x30
 80075d8:	18e1      	adds	r1, r4, r3
 80075da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075e4:	4422      	add	r2, r4
 80075e6:	3302      	adds	r3, #2
 80075e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075ec:	e7c2      	b.n	8007574 <_printf_common+0x58>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4622      	mov	r2, r4
 80075f2:	4641      	mov	r1, r8
 80075f4:	4638      	mov	r0, r7
 80075f6:	47c8      	blx	r9
 80075f8:	3001      	adds	r0, #1
 80075fa:	d0e6      	beq.n	80075ca <_printf_common+0xae>
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7d9      	b.n	80075b4 <_printf_common+0x98>

08007600 <_printf_i>:
 8007600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	7e0f      	ldrb	r7, [r1, #24]
 8007606:	4691      	mov	r9, r2
 8007608:	2f78      	cmp	r7, #120	@ 0x78
 800760a:	4680      	mov	r8, r0
 800760c:	460c      	mov	r4, r1
 800760e:	469a      	mov	sl, r3
 8007610:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007616:	d807      	bhi.n	8007628 <_printf_i+0x28>
 8007618:	2f62      	cmp	r7, #98	@ 0x62
 800761a:	d80a      	bhi.n	8007632 <_printf_i+0x32>
 800761c:	2f00      	cmp	r7, #0
 800761e:	f000 80d3 	beq.w	80077c8 <_printf_i+0x1c8>
 8007622:	2f58      	cmp	r7, #88	@ 0x58
 8007624:	f000 80ba 	beq.w	800779c <_printf_i+0x19c>
 8007628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800762c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007630:	e03a      	b.n	80076a8 <_printf_i+0xa8>
 8007632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007636:	2b15      	cmp	r3, #21
 8007638:	d8f6      	bhi.n	8007628 <_printf_i+0x28>
 800763a:	a101      	add	r1, pc, #4	@ (adr r1, 8007640 <_printf_i+0x40>)
 800763c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007640:	08007699 	.word	0x08007699
 8007644:	080076ad 	.word	0x080076ad
 8007648:	08007629 	.word	0x08007629
 800764c:	08007629 	.word	0x08007629
 8007650:	08007629 	.word	0x08007629
 8007654:	08007629 	.word	0x08007629
 8007658:	080076ad 	.word	0x080076ad
 800765c:	08007629 	.word	0x08007629
 8007660:	08007629 	.word	0x08007629
 8007664:	08007629 	.word	0x08007629
 8007668:	08007629 	.word	0x08007629
 800766c:	080077af 	.word	0x080077af
 8007670:	080076d7 	.word	0x080076d7
 8007674:	08007769 	.word	0x08007769
 8007678:	08007629 	.word	0x08007629
 800767c:	08007629 	.word	0x08007629
 8007680:	080077d1 	.word	0x080077d1
 8007684:	08007629 	.word	0x08007629
 8007688:	080076d7 	.word	0x080076d7
 800768c:	08007629 	.word	0x08007629
 8007690:	08007629 	.word	0x08007629
 8007694:	08007771 	.word	0x08007771
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	1d1a      	adds	r2, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6032      	str	r2, [r6, #0]
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09e      	b.n	80077ea <_printf_i+0x1ea>
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6031      	str	r1, [r6, #0]
 80076b4:	0606      	lsls	r6, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xbc>
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	e003      	b.n	80076c4 <_printf_i+0xc4>
 80076bc:	0645      	lsls	r5, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xb8>
 80076c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	da03      	bge.n	80076d0 <_printf_i+0xd0>
 80076c8:	232d      	movs	r3, #45	@ 0x2d
 80076ca:	426d      	negs	r5, r5
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d0:	230a      	movs	r3, #10
 80076d2:	4859      	ldr	r0, [pc, #356]	@ (8007838 <_printf_i+0x238>)
 80076d4:	e011      	b.n	80076fa <_printf_i+0xfa>
 80076d6:	6821      	ldr	r1, [r4, #0]
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	0608      	lsls	r0, r1, #24
 80076dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076e0:	d402      	bmi.n	80076e8 <_printf_i+0xe8>
 80076e2:	0649      	lsls	r1, r1, #25
 80076e4:	bf48      	it	mi
 80076e6:	b2ad      	uxthmi	r5, r5
 80076e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	bf14      	ite	ne
 80076ee:	230a      	movne	r3, #10
 80076f0:	2308      	moveq	r3, #8
 80076f2:	4851      	ldr	r0, [pc, #324]	@ (8007838 <_printf_i+0x238>)
 80076f4:	2100      	movs	r1, #0
 80076f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076fa:	6866      	ldr	r6, [r4, #4]
 80076fc:	2e00      	cmp	r6, #0
 80076fe:	bfa8      	it	ge
 8007700:	6821      	ldrge	r1, [r4, #0]
 8007702:	60a6      	str	r6, [r4, #8]
 8007704:	bfa4      	itt	ge
 8007706:	f021 0104 	bicge.w	r1, r1, #4
 800770a:	6021      	strge	r1, [r4, #0]
 800770c:	b90d      	cbnz	r5, 8007712 <_printf_i+0x112>
 800770e:	2e00      	cmp	r6, #0
 8007710:	d04b      	beq.n	80077aa <_printf_i+0x1aa>
 8007712:	4616      	mov	r6, r2
 8007714:	fbb5 f1f3 	udiv	r1, r5, r3
 8007718:	fb03 5711 	mls	r7, r3, r1, r5
 800771c:	5dc7      	ldrb	r7, [r0, r7]
 800771e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007722:	462f      	mov	r7, r5
 8007724:	42bb      	cmp	r3, r7
 8007726:	460d      	mov	r5, r1
 8007728:	d9f4      	bls.n	8007714 <_printf_i+0x114>
 800772a:	2b08      	cmp	r3, #8
 800772c:	d10b      	bne.n	8007746 <_printf_i+0x146>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	07df      	lsls	r7, r3, #31
 8007732:	d508      	bpl.n	8007746 <_printf_i+0x146>
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	6861      	ldr	r1, [r4, #4]
 8007738:	4299      	cmp	r1, r3
 800773a:	bfde      	ittt	le
 800773c:	2330      	movle	r3, #48	@ 0x30
 800773e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007746:	1b92      	subs	r2, r2, r6
 8007748:	6122      	str	r2, [r4, #16]
 800774a:	464b      	mov	r3, r9
 800774c:	4621      	mov	r1, r4
 800774e:	4640      	mov	r0, r8
 8007750:	f8cd a000 	str.w	sl, [sp]
 8007754:	aa03      	add	r2, sp, #12
 8007756:	f7ff fee1 	bl	800751c <_printf_common>
 800775a:	3001      	adds	r0, #1
 800775c:	d14a      	bne.n	80077f4 <_printf_i+0x1f4>
 800775e:	f04f 30ff 	mov.w	r0, #4294967295
 8007762:	b004      	add	sp, #16
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	f043 0320 	orr.w	r3, r3, #32
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	2778      	movs	r7, #120	@ 0x78
 8007772:	4832      	ldr	r0, [pc, #200]	@ (800783c <_printf_i+0x23c>)
 8007774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	6831      	ldr	r1, [r6, #0]
 800777c:	061f      	lsls	r7, r3, #24
 800777e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007782:	d402      	bmi.n	800778a <_printf_i+0x18a>
 8007784:	065f      	lsls	r7, r3, #25
 8007786:	bf48      	it	mi
 8007788:	b2ad      	uxthmi	r5, r5
 800778a:	6031      	str	r1, [r6, #0]
 800778c:	07d9      	lsls	r1, r3, #31
 800778e:	bf44      	itt	mi
 8007790:	f043 0320 	orrmi.w	r3, r3, #32
 8007794:	6023      	strmi	r3, [r4, #0]
 8007796:	b11d      	cbz	r5, 80077a0 <_printf_i+0x1a0>
 8007798:	2310      	movs	r3, #16
 800779a:	e7ab      	b.n	80076f4 <_printf_i+0xf4>
 800779c:	4826      	ldr	r0, [pc, #152]	@ (8007838 <_printf_i+0x238>)
 800779e:	e7e9      	b.n	8007774 <_printf_i+0x174>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	f023 0320 	bic.w	r3, r3, #32
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	e7f6      	b.n	8007798 <_printf_i+0x198>
 80077aa:	4616      	mov	r6, r2
 80077ac:	e7bd      	b.n	800772a <_printf_i+0x12a>
 80077ae:	6833      	ldr	r3, [r6, #0]
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	1d18      	adds	r0, r3, #4
 80077b4:	6961      	ldr	r1, [r4, #20]
 80077b6:	6030      	str	r0, [r6, #0]
 80077b8:	062e      	lsls	r6, r5, #24
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	d501      	bpl.n	80077c2 <_printf_i+0x1c2>
 80077be:	6019      	str	r1, [r3, #0]
 80077c0:	e002      	b.n	80077c8 <_printf_i+0x1c8>
 80077c2:	0668      	lsls	r0, r5, #25
 80077c4:	d5fb      	bpl.n	80077be <_printf_i+0x1be>
 80077c6:	8019      	strh	r1, [r3, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	4616      	mov	r6, r2
 80077cc:	6123      	str	r3, [r4, #16]
 80077ce:	e7bc      	b.n	800774a <_printf_i+0x14a>
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	2100      	movs	r1, #0
 80077d4:	1d1a      	adds	r2, r3, #4
 80077d6:	6032      	str	r2, [r6, #0]
 80077d8:	681e      	ldr	r6, [r3, #0]
 80077da:	6862      	ldr	r2, [r4, #4]
 80077dc:	4630      	mov	r0, r6
 80077de:	f000 f849 	bl	8007874 <memchr>
 80077e2:	b108      	cbz	r0, 80077e8 <_printf_i+0x1e8>
 80077e4:	1b80      	subs	r0, r0, r6
 80077e6:	6060      	str	r0, [r4, #4]
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	2300      	movs	r3, #0
 80077ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077f2:	e7aa      	b.n	800774a <_printf_i+0x14a>
 80077f4:	4632      	mov	r2, r6
 80077f6:	4649      	mov	r1, r9
 80077f8:	4640      	mov	r0, r8
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	47d0      	blx	sl
 80077fe:	3001      	adds	r0, #1
 8007800:	d0ad      	beq.n	800775e <_printf_i+0x15e>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	079b      	lsls	r3, r3, #30
 8007806:	d413      	bmi.n	8007830 <_printf_i+0x230>
 8007808:	68e0      	ldr	r0, [r4, #12]
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	4298      	cmp	r0, r3
 800780e:	bfb8      	it	lt
 8007810:	4618      	movlt	r0, r3
 8007812:	e7a6      	b.n	8007762 <_printf_i+0x162>
 8007814:	2301      	movs	r3, #1
 8007816:	4632      	mov	r2, r6
 8007818:	4649      	mov	r1, r9
 800781a:	4640      	mov	r0, r8
 800781c:	47d0      	blx	sl
 800781e:	3001      	adds	r0, #1
 8007820:	d09d      	beq.n	800775e <_printf_i+0x15e>
 8007822:	3501      	adds	r5, #1
 8007824:	68e3      	ldr	r3, [r4, #12]
 8007826:	9903      	ldr	r1, [sp, #12]
 8007828:	1a5b      	subs	r3, r3, r1
 800782a:	42ab      	cmp	r3, r5
 800782c:	dcf2      	bgt.n	8007814 <_printf_i+0x214>
 800782e:	e7eb      	b.n	8007808 <_printf_i+0x208>
 8007830:	2500      	movs	r5, #0
 8007832:	f104 0619 	add.w	r6, r4, #25
 8007836:	e7f5      	b.n	8007824 <_printf_i+0x224>
 8007838:	08007acb 	.word	0x08007acb
 800783c:	08007adc 	.word	0x08007adc

08007840 <memmove>:
 8007840:	4288      	cmp	r0, r1
 8007842:	b510      	push	{r4, lr}
 8007844:	eb01 0402 	add.w	r4, r1, r2
 8007848:	d902      	bls.n	8007850 <memmove+0x10>
 800784a:	4284      	cmp	r4, r0
 800784c:	4623      	mov	r3, r4
 800784e:	d807      	bhi.n	8007860 <memmove+0x20>
 8007850:	1e43      	subs	r3, r0, #1
 8007852:	42a1      	cmp	r1, r4
 8007854:	d008      	beq.n	8007868 <memmove+0x28>
 8007856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800785a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800785e:	e7f8      	b.n	8007852 <memmove+0x12>
 8007860:	4601      	mov	r1, r0
 8007862:	4402      	add	r2, r0
 8007864:	428a      	cmp	r2, r1
 8007866:	d100      	bne.n	800786a <memmove+0x2a>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800786e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007872:	e7f7      	b.n	8007864 <memmove+0x24>

08007874 <memchr>:
 8007874:	4603      	mov	r3, r0
 8007876:	b510      	push	{r4, lr}
 8007878:	b2c9      	uxtb	r1, r1
 800787a:	4402      	add	r2, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	4618      	mov	r0, r3
 8007880:	d101      	bne.n	8007886 <memchr+0x12>
 8007882:	2000      	movs	r0, #0
 8007884:	e003      	b.n	800788e <memchr+0x1a>
 8007886:	7804      	ldrb	r4, [r0, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	428c      	cmp	r4, r1
 800788c:	d1f6      	bne.n	800787c <memchr+0x8>
 800788e:	bd10      	pop	{r4, pc}

08007890 <memcpy>:
 8007890:	440a      	add	r2, r1
 8007892:	4291      	cmp	r1, r2
 8007894:	f100 33ff 	add.w	r3, r0, #4294967295
 8007898:	d100      	bne.n	800789c <memcpy+0xc>
 800789a:	4770      	bx	lr
 800789c:	b510      	push	{r4, lr}
 800789e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a2:	4291      	cmp	r1, r2
 80078a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a8:	d1f9      	bne.n	800789e <memcpy+0xe>
 80078aa:	bd10      	pop	{r4, pc}

080078ac <_realloc_r>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4680      	mov	r8, r0
 80078b2:	4615      	mov	r5, r2
 80078b4:	460c      	mov	r4, r1
 80078b6:	b921      	cbnz	r1, 80078c2 <_realloc_r+0x16>
 80078b8:	4611      	mov	r1, r2
 80078ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	f7ff bb9d 	b.w	8006ffc <_malloc_r>
 80078c2:	b92a      	cbnz	r2, 80078d0 <_realloc_r+0x24>
 80078c4:	f7ff fc8a 	bl	80071dc <_free_r>
 80078c8:	2400      	movs	r4, #0
 80078ca:	4620      	mov	r0, r4
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d0:	f000 f81a 	bl	8007908 <_malloc_usable_size_r>
 80078d4:	4285      	cmp	r5, r0
 80078d6:	4606      	mov	r6, r0
 80078d8:	d802      	bhi.n	80078e0 <_realloc_r+0x34>
 80078da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80078de:	d8f4      	bhi.n	80078ca <_realloc_r+0x1e>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4640      	mov	r0, r8
 80078e4:	f7ff fb8a 	bl	8006ffc <_malloc_r>
 80078e8:	4607      	mov	r7, r0
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0ec      	beq.n	80078c8 <_realloc_r+0x1c>
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	462a      	mov	r2, r5
 80078f2:	4621      	mov	r1, r4
 80078f4:	bf28      	it	cs
 80078f6:	4632      	movcs	r2, r6
 80078f8:	f7ff ffca 	bl	8007890 <memcpy>
 80078fc:	4621      	mov	r1, r4
 80078fe:	4640      	mov	r0, r8
 8007900:	f7ff fc6c 	bl	80071dc <_free_r>
 8007904:	463c      	mov	r4, r7
 8007906:	e7e0      	b.n	80078ca <_realloc_r+0x1e>

08007908 <_malloc_usable_size_r>:
 8007908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800790c:	1f18      	subs	r0, r3, #4
 800790e:	2b00      	cmp	r3, #0
 8007910:	bfbc      	itt	lt
 8007912:	580b      	ldrlt	r3, [r1, r0]
 8007914:	18c0      	addlt	r0, r0, r3
 8007916:	4770      	bx	lr

08007918 <_init>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	bf00      	nop
 800791c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791e:	bc08      	pop	{r3}
 8007920:	469e      	mov	lr, r3
 8007922:	4770      	bx	lr

08007924 <_fini>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr
