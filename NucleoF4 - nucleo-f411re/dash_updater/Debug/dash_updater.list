
dash_updater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040fc  080040fc  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  080040fc  080040fc  000050fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004104  08004104  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800410c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000084  08004190  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004190  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083d3  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f1  00000000  00000000  0000e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000fc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000588  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168bf  00000000  00000000  00010940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009453  00000000  00000000  000271ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f0b  00000000  00000000  00030652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b855d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  000b85a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000bad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003eac 	.word	0x08003eac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08003eac 	.word	0x08003eac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <procesarReceivedCan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void procesarReceivedCan(uint16_t valor) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
    // Generar un número aleatorio entre 0 y 9
    int random_value = rand() % 100;
 800057a:	f002 fb05 	bl	8002b88 <rand>
 800057e:	4603      	mov	r3, r0
 8000580:	4a97      	ldr	r2, [pc, #604]	@ (80007e0 <procesarReceivedCan+0x270>)
 8000582:	fb82 1203 	smull	r1, r2, r2, r3
 8000586:	1151      	asrs	r1, r2, #5
 8000588:	17da      	asrs	r2, r3, #31
 800058a:	1a8a      	subs	r2, r1, r2
 800058c:	2164      	movs	r1, #100	@ 0x64
 800058e:	fb01 f202 	mul.w	r2, r1, r2
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	617b      	str	r3, [r7, #20]
    int rev = rand() % 9000;
 8000596:	f002 faf7 	bl	8002b88 <rand>
 800059a:	4603      	mov	r3, r0
 800059c:	4a91      	ldr	r2, [pc, #580]	@ (80007e4 <procesarReceivedCan+0x274>)
 800059e:	fb82 1203 	smull	r1, r2, r2, r3
 80005a2:	1311      	asrs	r1, r2, #12
 80005a4:	17da      	asrs	r2, r3, #31
 80005a6:	1a8a      	subs	r2, r1, r2
 80005a8:	f242 3128 	movw	r1, #9000	@ 0x2328
 80005ac:	fb01 f202 	mul.w	r2, r1, r2
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	613b      	str	r3, [r7, #16]

    char text[4]; // Suponiendo que los valores aleatorios solo van de 0 a 9
    sprintf(text, "%d", random_value);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	498b      	ldr	r1, [pc, #556]	@ (80007e8 <procesarReceivedCan+0x278>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fc41 	bl	8002e44 <siprintf>

    // Añadir un retraso de 10ms
    HAL_Delay(10);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f000 fd50 	bl	8001068 <HAL_Delay>

    switch(valor) {
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f240 6255 	movw	r2, #1621	@ 0x655
 80005ce:	4293      	cmp	r3, r2
 80005d0:	f300 80fd 	bgt.w	80007ce <procesarReceivedCan+0x25e>
 80005d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80005d8:	da06      	bge.n	80005e8 <procesarReceivedCan+0x78>
 80005da:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80005de:	d037      	beq.n	8000650 <procesarReceivedCan+0xe0>
 80005e0:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80005e4:	d03c      	beq.n	8000660 <procesarReceivedCan+0xf0>

        case 0x648:
        	NEXTION_Send_Revs_v2(&huart1, rev);
            break;
        default:
            break;
 80005e6:	e0f2      	b.n	80007ce <procesarReceivedCan+0x25e>
    switch(valor) {
 80005e8:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80005ec:	2b15      	cmp	r3, #21
 80005ee:	f200 80ee 	bhi.w	80007ce <procesarReceivedCan+0x25e>
 80005f2:	a201      	add	r2, pc, #4	@ (adr r2, 80005f8 <procesarReceivedCan+0x88>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	080006e1 	.word	0x080006e1
 80005fc:	080006f7 	.word	0x080006f7
 8000600:	08000707 	.word	0x08000707
 8000604:	08000713 	.word	0x08000713
 8000608:	08000723 	.word	0x08000723
 800060c:	08000733 	.word	0x08000733
 8000610:	08000743 	.word	0x08000743
 8000614:	08000753 	.word	0x08000753
 8000618:	080007c5 	.word	0x080007c5
 800061c:	080007cf 	.word	0x080007cf
 8000620:	080007cf 	.word	0x080007cf
 8000624:	080007cf 	.word	0x080007cf
 8000628:	080007cf 	.word	0x080007cf
 800062c:	080007cf 	.word	0x080007cf
 8000630:	080007cf 	.word	0x080007cf
 8000634:	080007cf 	.word	0x080007cf
 8000638:	080007cf 	.word	0x080007cf
 800063c:	080007cf 	.word	0x080007cf
 8000640:	080007cf 	.word	0x080007cf
 8000644:	080007cf 	.word	0x080007cf
 8000648:	080007cf 	.word	0x080007cf
 800064c:	080006d5 	.word	0x080006d5
        	NEXTION_SendText(&huart1,"speed", text, NULL);
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	2300      	movs	r3, #0
 8000656:	4965      	ldr	r1, [pc, #404]	@ (80007ec <procesarReceivedCan+0x27c>)
 8000658:	4865      	ldr	r0, [pc, #404]	@ (80007f0 <procesarReceivedCan+0x280>)
 800065a:	f002 f851 	bl	8002700 <NEXTION_SendText>
            break;
 800065e:	e0bb      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"voltage", text, "V");
 8000660:	f107 020c 	add.w	r2, r7, #12
 8000664:	4b63      	ldr	r3, [pc, #396]	@ (80007f4 <procesarReceivedCan+0x284>)
 8000666:	4964      	ldr	r1, [pc, #400]	@ (80007f8 <procesarReceivedCan+0x288>)
 8000668:	4861      	ldr	r0, [pc, #388]	@ (80007f0 <procesarReceivedCan+0x280>)
 800066a:	f002 f849 	bl	8002700 <NEXTION_SendText>
        	if (random_value > 0 && random_value <= 50) {
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b00      	cmp	r3, #0
 8000672:	dd0d      	ble.n	8000690 <procesarReceivedCan+0x120>
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b32      	cmp	r3, #50	@ 0x32
 8000678:	dc0a      	bgt.n	8000690 <procesarReceivedCan+0x120>
        	    NEXTION_Alert(&huart1, 0); //black
 800067a:	2100      	movs	r1, #0
 800067c:	485c      	ldr	r0, [pc, #368]	@ (80007f0 <procesarReceivedCan+0x280>)
 800067e:	f002 f8d7 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "voltage", 36609);  //green-
 8000682:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8000686:	495c      	ldr	r1, [pc, #368]	@ (80007f8 <procesarReceivedCan+0x288>)
 8000688:	4859      	ldr	r0, [pc, #356]	@ (80007f0 <procesarReceivedCan+0x280>)
 800068a:	f002 f90b 	bl	80028a4 <NEXTION_estado_color>
 800068e:	e020      	b.n	80006d2 <procesarReceivedCan+0x162>
        	} else if (random_value > 50 && random_value <= 80) {
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	2b32      	cmp	r3, #50	@ 0x32
 8000694:	dd0d      	ble.n	80006b2 <procesarReceivedCan+0x142>
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b50      	cmp	r3, #80	@ 0x50
 800069a:	dc0a      	bgt.n	80006b2 <procesarReceivedCan+0x142>
        	    NEXTION_Alert(&huart1, 0); //black
 800069c:	2100      	movs	r1, #0
 800069e:	4854      	ldr	r0, [pc, #336]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006a0:	f002 f8c6 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "voltage", 64520); //orange
 80006a4:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 80006a8:	4953      	ldr	r1, [pc, #332]	@ (80007f8 <procesarReceivedCan+0x288>)
 80006aa:	4851      	ldr	r0, [pc, #324]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006ac:	f002 f8fa 	bl	80028a4 <NEXTION_estado_color>
 80006b0:	e00f      	b.n	80006d2 <procesarReceivedCan+0x162>
        	} else if (random_value > 91) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b5b      	cmp	r3, #91	@ 0x5b
 80006b6:	f340 808c 	ble.w	80007d2 <procesarReceivedCan+0x262>
        	    NEXTION_Alert(&huart1, 63488); // red
 80006ba:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80006be:	484c      	ldr	r0, [pc, #304]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006c0:	f002 f8b6 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "voltage", 63488); //red
 80006c4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80006c8:	494b      	ldr	r1, [pc, #300]	@ (80007f8 <procesarReceivedCan+0x288>)
 80006ca:	4849      	ldr	r0, [pc, #292]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006cc:	f002 f8ea 	bl	80028a4 <NEXTION_estado_color>
            break;
 80006d0:	e07f      	b.n	80007d2 <procesarReceivedCan+0x262>
 80006d2:	e07e      	b.n	80007d2 <procesarReceivedCan+0x262>
        	NEXTION_SendNumber(&huart1, "brakePedal", random_value);
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	4949      	ldr	r1, [pc, #292]	@ (80007fc <procesarReceivedCan+0x28c>)
 80006d8:	4845      	ldr	r0, [pc, #276]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006da:	f002 f853 	bl	8002784 <NEXTION_SendNumber>
            break;
 80006de:	e07b      	b.n	80007d8 <procesarReceivedCan+0x268>
        	strcpy(text, "2");
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2232      	movs	r2, #50	@ 0x32
 80006e6:	801a      	strh	r2, [r3, #0]
        	NEXTION_SendText(&huart1,"revValue", "car", " RPM");
 80006e8:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <procesarReceivedCan+0x290>)
 80006ea:	4a46      	ldr	r2, [pc, #280]	@ (8000804 <procesarReceivedCan+0x294>)
 80006ec:	4946      	ldr	r1, [pc, #280]	@ (8000808 <procesarReceivedCan+0x298>)
 80006ee:	4840      	ldr	r0, [pc, #256]	@ (80007f0 <procesarReceivedCan+0x280>)
 80006f0:	f002 f806 	bl	8002700 <NEXTION_SendText>
            break;
 80006f4:	e070      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"gear", text, NULL);
 80006f6:	f107 020c 	add.w	r2, r7, #12
 80006fa:	2300      	movs	r3, #0
 80006fc:	4943      	ldr	r1, [pc, #268]	@ (800080c <procesarReceivedCan+0x29c>)
 80006fe:	483c      	ldr	r0, [pc, #240]	@ (80007f0 <procesarReceivedCan+0x280>)
 8000700:	f001 fffe 	bl	8002700 <NEXTION_SendText>
            break;
 8000704:	e068      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendNumber(&huart1, "acePedal", random_value);
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	4941      	ldr	r1, [pc, #260]	@ (8000810 <procesarReceivedCan+0x2a0>)
 800070a:	4839      	ldr	r0, [pc, #228]	@ (80007f0 <procesarReceivedCan+0x280>)
 800070c:	f002 f83a 	bl	8002784 <NEXTION_SendNumber>
            break;
 8000710:	e062      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"brake1", text, "\xB0");
 8000712:	f107 020c 	add.w	r2, r7, #12
 8000716:	4b3f      	ldr	r3, [pc, #252]	@ (8000814 <procesarReceivedCan+0x2a4>)
 8000718:	493f      	ldr	r1, [pc, #252]	@ (8000818 <procesarReceivedCan+0x2a8>)
 800071a:	4835      	ldr	r0, [pc, #212]	@ (80007f0 <procesarReceivedCan+0x280>)
 800071c:	f001 fff0 	bl	8002700 <NEXTION_SendText>
            break;
 8000720:	e05a      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"brake2", text, "\xB0");
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <procesarReceivedCan+0x2a4>)
 8000728:	493c      	ldr	r1, [pc, #240]	@ (800081c <procesarReceivedCan+0x2ac>)
 800072a:	4831      	ldr	r0, [pc, #196]	@ (80007f0 <procesarReceivedCan+0x280>)
 800072c:	f001 ffe8 	bl	8002700 <NEXTION_SendText>
            break;
 8000730:	e052      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"brake3", text, "\xB0");
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	4b37      	ldr	r3, [pc, #220]	@ (8000814 <procesarReceivedCan+0x2a4>)
 8000738:	4939      	ldr	r1, [pc, #228]	@ (8000820 <procesarReceivedCan+0x2b0>)
 800073a:	482d      	ldr	r0, [pc, #180]	@ (80007f0 <procesarReceivedCan+0x280>)
 800073c:	f001 ffe0 	bl	8002700 <NEXTION_SendText>
            break;
 8000740:	e04a      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"brake4", text, "\xB0");
 8000742:	f107 020c 	add.w	r2, r7, #12
 8000746:	4b33      	ldr	r3, [pc, #204]	@ (8000814 <procesarReceivedCan+0x2a4>)
 8000748:	4936      	ldr	r1, [pc, #216]	@ (8000824 <procesarReceivedCan+0x2b4>)
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <procesarReceivedCan+0x280>)
 800074c:	f001 ffd8 	bl	8002700 <NEXTION_SendText>
            break;
 8000750:	e042      	b.n	80007d8 <procesarReceivedCan+0x268>
        	NEXTION_SendText(&huart1,"engineTemp", text, "\xB0");
 8000752:	f107 020c 	add.w	r2, r7, #12
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <procesarReceivedCan+0x2a4>)
 8000758:	4933      	ldr	r1, [pc, #204]	@ (8000828 <procesarReceivedCan+0x2b8>)
 800075a:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <procesarReceivedCan+0x280>)
 800075c:	f001 ffd0 	bl	8002700 <NEXTION_SendText>
        	if (random_value > 0 && random_value <= 50) {
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b00      	cmp	r3, #0
 8000764:	dd0d      	ble.n	8000782 <procesarReceivedCan+0x212>
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b32      	cmp	r3, #50	@ 0x32
 800076a:	dc0a      	bgt.n	8000782 <procesarReceivedCan+0x212>
        	    NEXTION_Alert(&huart1,0); //black
 800076c:	2100      	movs	r1, #0
 800076e:	4820      	ldr	r0, [pc, #128]	@ (80007f0 <procesarReceivedCan+0x280>)
 8000770:	f002 f85e 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "engineTemp", 36609);  //green
 8000774:	f648 7201 	movw	r2, #36609	@ 0x8f01
 8000778:	492b      	ldr	r1, [pc, #172]	@ (8000828 <procesarReceivedCan+0x2b8>)
 800077a:	481d      	ldr	r0, [pc, #116]	@ (80007f0 <procesarReceivedCan+0x280>)
 800077c:	f002 f892 	bl	80028a4 <NEXTION_estado_color>
 8000780:	e01f      	b.n	80007c2 <procesarReceivedCan+0x252>
        	} else if (random_value > 50 && random_value <= 80) {
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2b32      	cmp	r3, #50	@ 0x32
 8000786:	dd0d      	ble.n	80007a4 <procesarReceivedCan+0x234>
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b50      	cmp	r3, #80	@ 0x50
 800078c:	dc0a      	bgt.n	80007a4 <procesarReceivedCan+0x234>
        	    NEXTION_Alert(&huart1,0);
 800078e:	2100      	movs	r1, #0
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <procesarReceivedCan+0x280>)
 8000792:	f002 f84d 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "engineTemp", 64520); //orange
 8000796:	f64f 4208 	movw	r2, #64520	@ 0xfc08
 800079a:	4923      	ldr	r1, [pc, #140]	@ (8000828 <procesarReceivedCan+0x2b8>)
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <procesarReceivedCan+0x280>)
 800079e:	f002 f881 	bl	80028a4 <NEXTION_estado_color>
 80007a2:	e00e      	b.n	80007c2 <procesarReceivedCan+0x252>
        	} else if (random_value > 91) {
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b5b      	cmp	r3, #91	@ 0x5b
 80007a8:	dd15      	ble.n	80007d6 <procesarReceivedCan+0x266>
        	    NEXTION_Alert(&huart1,63488); // red
 80007aa:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80007ae:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <procesarReceivedCan+0x280>)
 80007b0:	f002 f83e 	bl	8002830 <NEXTION_Alert>
        	    NEXTION_estado_color(&huart1, "engineTemp", 63488); // red
 80007b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80007b8:	491b      	ldr	r1, [pc, #108]	@ (8000828 <procesarReceivedCan+0x2b8>)
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <procesarReceivedCan+0x280>)
 80007bc:	f002 f872 	bl	80028a4 <NEXTION_estado_color>
			break;
 80007c0:	e009      	b.n	80007d6 <procesarReceivedCan+0x266>
 80007c2:	e008      	b.n	80007d6 <procesarReceivedCan+0x266>
        	NEXTION_Send_Revs_v2(&huart1, rev);
 80007c4:	6939      	ldr	r1, [r7, #16]
 80007c6:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <procesarReceivedCan+0x280>)
 80007c8:	f002 f898 	bl	80028fc <NEXTION_Send_Revs_v2>
            break;
 80007cc:	e004      	b.n	80007d8 <procesarReceivedCan+0x268>
            break;
 80007ce:	bf00      	nop
 80007d0:	e002      	b.n	80007d8 <procesarReceivedCan+0x268>
            break;
 80007d2:	bf00      	nop
 80007d4:	e000      	b.n	80007d8 <procesarReceivedCan+0x268>
			break;
 80007d6:	bf00      	nop
    }
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	51eb851f 	.word	0x51eb851f
 80007e4:	7482296b 	.word	0x7482296b
 80007e8:	08003ec4 	.word	0x08003ec4
 80007ec:	08003ec8 	.word	0x08003ec8
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	08003ed0 	.word	0x08003ed0
 80007f8:	08003ed4 	.word	0x08003ed4
 80007fc:	08003edc 	.word	0x08003edc
 8000800:	08003ee8 	.word	0x08003ee8
 8000804:	08003ef0 	.word	0x08003ef0
 8000808:	08003ef4 	.word	0x08003ef4
 800080c:	08003f00 	.word	0x08003f00
 8000810:	08003f08 	.word	0x08003f08
 8000814:	08003f14 	.word	0x08003f14
 8000818:	08003f18 	.word	0x08003f18
 800081c:	08003f20 	.word	0x08003f20
 8000820:	08003f28 	.word	0x08003f28
 8000824:	08003f30 	.word	0x08003f30
 8000828:	08003f38 	.word	0x08003f38

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fba7 	bl	8000f84 <HAL_Init>

  /* USER CODE BEGIN Init */
    // Semilla para la generación de números aleatorios
    srand(time(NULL));
 8000836:	2000      	movs	r0, #0
 8000838:	f002 fc04 	bl	8003044 <time>
 800083c:	4602      	mov	r2, r0
 800083e:	460b      	mov	r3, r1
 8000840:	4613      	mov	r3, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f972 	bl	8002b2c <srand>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f894 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f950 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000850:	f000 f924 	bl	8000a9c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000854:	f000 f8f8 	bl	8000a48 <MX_USART1_UART_Init>
  //Mostrar landing view
  //NEXTION_SendPageChange(&huart1,"page0");
  //HAL_Delay(2800);
  //Mostrar dash view
  //NEXTION_SendPageChange(&huart1,"page2");
  HAL_Delay(3400);
 8000858:	f640 5048 	movw	r0, #3400	@ 0xd48
 800085c:	f000 fc04 	bl	8001068 <HAL_Delay>
  //Mostrar dash view
  //NEXTION_SendPageChange(&huart1,"page3");
  //HAL_Delay(2800);
  //Mostrar dash view
  NEXTION_SendPageChange(&huart1,"page1");
 8000860:	493f      	ldr	r1, [pc, #252]	@ (8000960 <main+0x134>)
 8000862:	4840      	ldr	r0, [pc, #256]	@ (8000964 <main+0x138>)
 8000864:	f001 ffba 	bl	80027dc <NEXTION_SendPageChange>

  //Inicializar interfaz a negro (por si se quedó con estilos a rojo por NEXTION_Alert())
  NEXTION_Alert(&huart1, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	483e      	ldr	r0, [pc, #248]	@ (8000964 <main+0x138>)
 800086c:	f001 ffe0 	bl	8002830 <NEXTION_Alert>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	//HAL_Delay(400);
	  	int randoom_value = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
	  	char text[20]; // Declarar variable donde alamcenar la conversión
	  	sprintf(text, "%d", randoom_value); //Inicializar la conversión
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	493b      	ldr	r1, [pc, #236]	@ (8000968 <main+0x13c>)
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fae2 	bl	8002e44 <siprintf>

	  	// Generar valor aleatorio entre 0 y 9
	  	int random_value = rand() % 12;
 8000880:	f002 f982 	bl	8002b88 <rand>
 8000884:	4602      	mov	r2, r0
 8000886:	4b39      	ldr	r3, [pc, #228]	@ (800096c <main+0x140>)
 8000888:	fb83 1302 	smull	r1, r3, r3, r2
 800088c:	1059      	asrs	r1, r3, #1
 800088e:	17d3      	asrs	r3, r2, #31
 8000890:	1ac9      	subs	r1, r1, r3
 8000892:	460b      	mov	r3, r1
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	440b      	add	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	61bb      	str	r3, [r7, #24]

	  	switch(random_value) {
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	2b0b      	cmp	r3, #11
 80008a2:	d857      	bhi.n	8000954 <main+0x128>
 80008a4:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <main+0x80>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008dd 	.word	0x080008dd
 80008b0:	080008e7 	.word	0x080008e7
 80008b4:	080008f1 	.word	0x080008f1
 80008b8:	080008fb 	.word	0x080008fb
 80008bc:	08000905 	.word	0x08000905
 80008c0:	0800090f 	.word	0x0800090f
 80008c4:	08000919 	.word	0x08000919
 80008c8:	08000923 	.word	0x08000923
 80008cc:	0800092d 	.word	0x0800092d
 80008d0:	08000937 	.word	0x08000937
 80008d4:	08000941 	.word	0x08000941
 80008d8:	0800094b 	.word	0x0800094b
	  		case 0:
	  			procesarReceivedCan(0x110);
 80008dc:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80008e0:	f7ff fe46 	bl	8000570 <procesarReceivedCan>
	  			break;
 80008e4:	e03a      	b.n	800095c <main+0x130>
	  		case 1:
	  			procesarReceivedCan(0x120);
 80008e6:	f44f 7090 	mov.w	r0, #288	@ 0x120
 80008ea:	f7ff fe41 	bl	8000570 <procesarReceivedCan>
	  			break;
 80008ee:	e035      	b.n	800095c <main+0x130>
	  		case 2:
	  			procesarReceivedCan(0x655);
 80008f0:	f240 6055 	movw	r0, #1621	@ 0x655
 80008f4:	f7ff fe3c 	bl	8000570 <procesarReceivedCan>
	  			break;
 80008f8:	e030      	b.n	800095c <main+0x130>
	  		case 3:
	  			procesarReceivedCan(0x640);
 80008fa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80008fe:	f7ff fe37 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000902:	e02b      	b.n	800095c <main+0x130>
	  		case 4:
	  			procesarReceivedCan(0x641);
 8000904:	f240 6041 	movw	r0, #1601	@ 0x641
 8000908:	f7ff fe32 	bl	8000570 <procesarReceivedCan>
	  			break;
 800090c:	e026      	b.n	800095c <main+0x130>
	  		case 5:
	  			procesarReceivedCan(0x642);
 800090e:	f240 6042 	movw	r0, #1602	@ 0x642
 8000912:	f7ff fe2d 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000916:	e021      	b.n	800095c <main+0x130>
	  		case 6:
	  			procesarReceivedCan(0x643);
 8000918:	f240 6043 	movw	r0, #1603	@ 0x643
 800091c:	f7ff fe28 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000920:	e01c      	b.n	800095c <main+0x130>
	  		case 7:
	  			procesarReceivedCan(0x644);
 8000922:	f240 6044 	movw	r0, #1604	@ 0x644
 8000926:	f7ff fe23 	bl	8000570 <procesarReceivedCan>
	  			break;
 800092a:	e017      	b.n	800095c <main+0x130>
	  		case 8:
	  			procesarReceivedCan(0x645);
 800092c:	f240 6045 	movw	r0, #1605	@ 0x645
 8000930:	f7ff fe1e 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000934:	e012      	b.n	800095c <main+0x130>
	  		case 9:
	  			procesarReceivedCan(0x646);
 8000936:	f240 6046 	movw	r0, #1606	@ 0x646
 800093a:	f7ff fe19 	bl	8000570 <procesarReceivedCan>
	  			break;
 800093e:	e00d      	b.n	800095c <main+0x130>
	  		case 10:
	  			procesarReceivedCan(0x647);
 8000940:	f240 6047 	movw	r0, #1607	@ 0x647
 8000944:	f7ff fe14 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000948:	e008      	b.n	800095c <main+0x130>
	  		case 11:
	  			procesarReceivedCan(0x648);
 800094a:	f44f 60c9 	mov.w	r0, #1608	@ 0x648
 800094e:	f7ff fe0f 	bl	8000570 <procesarReceivedCan>
	  			break;
 8000952:	e003      	b.n	800095c <main+0x130>
	  		default:
	  			printf("Número aleatorio fuera de rango\n");
 8000954:	4806      	ldr	r0, [pc, #24]	@ (8000970 <main+0x144>)
 8000956:	f002 fa6d 	bl	8002e34 <puts>
	  			break;
 800095a:	bf00      	nop
  {
 800095c:	e788      	b.n	8000870 <main+0x44>
 800095e:	bf00      	nop
 8000960:	08003f44 	.word	0x08003f44
 8000964:	200000a0 	.word	0x200000a0
 8000968:	08003ec4 	.word	0x08003ec4
 800096c:	2aaaaaab 	.word	0x2aaaaaab
 8000970:	08003f4c 	.word	0x08003f4c

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	@ 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	@ 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fb56 	bl	8003034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	4a27      	ldr	r2, [pc, #156]	@ (8000a40 <SystemClock_Config+0xcc>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e4:	2310      	movs	r3, #16
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fddc 	bl	80015b8 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a06:	f000 f8e1 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f83e 	bl	8001aa8 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a32:	f000 f8cb 	bl	8000bcc <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	@ 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART1_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a80:	f001 fa32 	bl	8001ee8 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f89f 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000a0 	.word	0x200000a0
 8000a98:	40011000 	.word	0x40011000

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f001 fa08 	bl	8001ee8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f875 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e8 	.word	0x200000e8
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <MX_GPIO_Init+0xd4>)
 8000b7c:	f000 fd02 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b98:	f000 fb70 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_GPIO_Init+0xd4>)
 8000bb4:	f000 fb62 	bl	800127c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020800 	.word	0x40020800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 fafc 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a32      	ldr	r2, [pc, #200]	@ (8000d10 <HAL_UART_MspInit+0xe8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12d      	bne.n	8000ca6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a30      	ldr	r2, [pc, #192]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a29      	ldr	r2, [pc, #164]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c94:	2307      	movs	r3, #7
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481e      	ldr	r0, [pc, #120]	@ (8000d18 <HAL_UART_MspInit+0xf0>)
 8000ca0:	f000 faec 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca4:	e030      	b.n	8000d08 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <HAL_UART_MspInit+0xf4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d12b      	bne.n	8000d08 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a16      	ldr	r2, [pc, #88]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_UART_MspInit+0xec>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0xf0>)
 8000d04:	f000 faba 	bl	800127c <HAL_GPIO_Init>
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	@ 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40011000 	.word	0x40011000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40004400 	.word	0x40004400

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f957 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_kill>:

int _kill(int pid, int sig)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d98:	f002 f9d8 	bl	800314c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2216      	movs	r2, #22
 8000da0:	601a      	str	r2, [r3, #0]
  return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_exit>:

void _exit (int status)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000db6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffe7 	bl	8000d8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <_exit+0x12>

08000dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e009      	b.n	8000e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf1      	blt.n	8000e10 <_write+0x12>
  }
  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f002 f93c 	bl	800314c <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000130 	.word	0x20000130
 8000f08:	20000288 	.word	0x20000288

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f002 f8fb 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fc63 	bl	800082c <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000f74:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 8000f78:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000f7c:	20000284 	.word	0x20000284

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f931 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe0e 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f93b 	bl	8001262 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f911 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000134 	.word	0x20000134

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000134 	.word	0x20000134

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5c 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb0 	bl	80011d0 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e159      	b.n	800154c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8148 	bne.w	8001546 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d005      	beq.n	80012ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d130      	bne.n	8001330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a2 	beq.w	8001546 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b57      	ldr	r3, [pc, #348]	@ (8001564 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	4a56      	ldr	r2, [pc, #344]	@ (8001564 <HAL_GPIO_Init+0x2e8>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001410:	6453      	str	r3, [r2, #68]	@ 0x44
 8001412:	4b54      	ldr	r3, [pc, #336]	@ (8001564 <HAL_GPIO_Init+0x2e8>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a52      	ldr	r2, [pc, #328]	@ (8001568 <HAL_GPIO_Init+0x2ec>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a49      	ldr	r2, [pc, #292]	@ (800156c <HAL_GPIO_Init+0x2f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x202>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a48      	ldr	r2, [pc, #288]	@ (8001570 <HAL_GPIO_Init+0x2f4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x1fe>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a47      	ldr	r2, [pc, #284]	@ (8001574 <HAL_GPIO_Init+0x2f8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x1fa>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a46      	ldr	r2, [pc, #280]	@ (8001578 <HAL_GPIO_Init+0x2fc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x1f6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a45      	ldr	r2, [pc, #276]	@ (800157c <HAL_GPIO_Init+0x300>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x1f2>
 800146a:	2304      	movs	r3, #4
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800146e:	2307      	movs	r3, #7
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	@ (8001568 <HAL_GPIO_Init+0x2ec>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <HAL_GPIO_Init+0x304>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001580 <HAL_GPIO_Init+0x304>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001580 <HAL_GPIO_Init+0x304>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a24      	ldr	r2, [pc, #144]	@ (8001580 <HAL_GPIO_Init+0x304>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f2:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <HAL_GPIO_Init+0x304>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001516:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <HAL_GPIO_Init+0x304>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_GPIO_Init+0x304>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_GPIO_Init+0x304>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f aea2 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40013800 	.word	0x40013800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40021000 	.word	0x40021000
 8001580:	40013c00 	.word	0x40013c00

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e267      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d075      	beq.n	80016c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d6:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b85      	ldr	r3, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b82      	ldr	r3, [pc, #520]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b7e      	ldr	r3, [pc, #504]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e242      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x74>
 800161e:	4b76      	ldr	r3, [pc, #472]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6f      	ldr	r2, [pc, #444]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6d      	ldr	r3, [pc, #436]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6c      	ldr	r2, [pc, #432]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 8001650:	4b69      	ldr	r3, [pc, #420]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a68      	ldr	r2, [pc, #416]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b66      	ldr	r3, [pc, #408]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a65      	ldr	r2, [pc, #404]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fcee 	bl	8001050 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fcea 	bl	8001050 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e207      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5b      	ldr	r3, [pc, #364]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xc0>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcda 	bl	8001050 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcd6 	bl	8001050 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1f3      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b51      	ldr	r3, [pc, #324]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0xe8>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1c7      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x244>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fc8f 	bl	8001050 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fc8b 	bl	8001050 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1a8      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4925      	ldr	r1, [pc, #148]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_RCC_OscConfig+0x244>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fc6e 	bl	8001050 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fc6a 	bl	8001050 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e187      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d036      	beq.n	8001810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_RCC_OscConfig+0x248>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fc4e 	bl	8001050 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc4a 	bl	8001050 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e167      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x200>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_OscConfig+0x248>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fc37 	bl	8001050 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc33 	bl	8001050 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d907      	bls.n	8001804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e150      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	42470000 	.word	0x42470000
 8001800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b88      	ldr	r3, [pc, #544]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ea      	bne.n	80017e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8097 	beq.w	800194c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b81      	ldr	r3, [pc, #516]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b7d      	ldr	r3, [pc, #500]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a7c      	ldr	r2, [pc, #496]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b77      	ldr	r3, [pc, #476]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b74      	ldr	r3, [pc, #464]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a73      	ldr	r2, [pc, #460]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fbf3 	bl	8001050 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fbef 	bl	8001050 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e10c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b6a      	ldr	r3, [pc, #424]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2ea>
 8001894:	4b64      	ldr	r3, [pc, #400]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001898:	4a63      	ldr	r2, [pc, #396]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x30c>
 80018aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018c4:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c8:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d0:	4b55      	ldr	r3, [pc, #340]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a54      	ldr	r2, [pc, #336]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fbb4 	bl	8001050 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fbb0 	bl	8001050 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0cb      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCC_OscConfig+0x334>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fb9e 	bl	8001050 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fb9a 	bl	8001050 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0b5      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a38      	ldr	r2, [pc, #224]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a1 	beq.w	8001a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001956:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d05c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d141      	bne.n	80019ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb6e 	bl	8001050 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fb6a 	bl	8001050 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e087      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	491b      	ldr	r1, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb43 	bl	8001050 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb3f 	bl	8001050 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e05c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x416>
 80019ec:	e054      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb2c 	bl	8001050 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fb28 	bl	8001050 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e045      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x444>
 8001a1a:	e03d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e038      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ec>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d028      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d121      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d111      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0cc      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b68      	ldr	r3, [pc, #416]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d044      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e067      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4934      	ldr	r1, [pc, #208]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff fa5a 	bl	8001050 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff fa56 	bl	8001050 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d20c      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9ba 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08004000 	.word	0x08004000
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b094      	sub	sp, #80	@ 0x50
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8c:	4b79      	ldr	r3, [pc, #484]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d00d      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f200 80e1 	bhi.w	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca6:	e0db      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001cac:	e0db      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cae:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb2:	e0d8      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0159      	lsls	r1, r3, #5
 8001cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf8:	0150      	lsls	r0, r2, #5
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4621      	mov	r1, r4
 8001d00:	1a51      	subs	r1, r2, r1
 8001d02:	6139      	str	r1, [r7, #16]
 8001d04:	4629      	mov	r1, r5
 8001d06:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d18:	4659      	mov	r1, fp
 8001d1a:	018b      	lsls	r3, r1, #6
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d22:	4651      	mov	r1, sl
 8001d24:	018a      	lsls	r2, r1, #6
 8001d26:	4651      	mov	r1, sl
 8001d28:	ebb2 0801 	subs.w	r8, r2, r1
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d46:	4690      	mov	r8, r2
 8001d48:	4699      	mov	r9, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	eb18 0303 	adds.w	r3, r8, r3
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	462b      	mov	r3, r5
 8001d54:	eb49 0303 	adc.w	r3, r9, r3
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d66:	4629      	mov	r1, r5
 8001d68:	024b      	lsls	r3, r1, #9
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d70:	4621      	mov	r1, r4
 8001d72:	024a      	lsls	r2, r1, #9
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d84:	f7fe fa7c 	bl	8000280 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d90:	e058      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b38      	ldr	r3, [pc, #224]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dac:	4642      	mov	r2, r8
 8001dae:	464b      	mov	r3, r9
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0159      	lsls	r1, r3, #5
 8001dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dbe:	0150      	lsls	r0, r2, #5
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de4:	ebb2 040a 	subs.w	r4, r2, sl
 8001de8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	00eb      	lsls	r3, r5, #3
 8001df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfa:	00e2      	lsls	r2, r4, #3
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	4643      	mov	r3, r8
 8001e02:	18e3      	adds	r3, r4, r3
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	464b      	mov	r3, r9
 8001e08:	eb45 0303 	adc.w	r3, r5, r3
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	028b      	lsls	r3, r1, #10
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e24:	4621      	mov	r1, r4
 8001e26:	028a      	lsls	r2, r1, #10
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	61fa      	str	r2, [r7, #28]
 8001e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e38:	f7fe fa22 	bl	8000280 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3750      	adds	r7, #80	@ 0x50
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08004010 	.word	0x08004010

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec4:	f7ff ffdc 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0b5b      	lsrs	r3, r3, #13
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08004010 	.word	0x08004010

08001ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e042      	b.n	8001f80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fe8a 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	@ 0x24
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f973 	bl	8002218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d175      	bne.n	8002094 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_UART_Transmit+0x2c>
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e06e      	b.n	8002096 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	@ 0x21
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fc6:	f7ff f843 	bl	8001050 <HAL_GetTick>
 8001fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	88fa      	ldrh	r2, [r7, #6]
 8001fd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe0:	d108      	bne.n	8001ff4 <HAL_UART_Transmit+0x6c>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d104      	bne.n	8001ff4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	e003      	b.n	8001ffc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ffc:	e02e      	b.n	800205c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f848 	bl	800209e <UART_WaitOnFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e03a      	b.n	8002096 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3302      	adds	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e007      	b.n	800204e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3301      	adds	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1cb      	bne.n	8001ffe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2200      	movs	r2, #0
 800206e:	2140      	movs	r1, #64	@ 0x40
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f814 	bl	800209e <UART_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e006      	b.n	8002096 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ae:	e03b      	b.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d037      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b8:	f7fe ffca 	bl	8001050 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	6a3a      	ldr	r2, [r7, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <UART_WaitOnFlagUntilTimeout+0x30>
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03a      	b.n	8002148 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d023      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b80      	cmp	r3, #128	@ 0x80
 80020e4:	d020      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b40      	cmp	r3, #64	@ 0x40
 80020ea:	d01d      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d116      	bne.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f81d 	bl	8002150 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2208      	movs	r2, #8
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00f      	b.n	8002148 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4013      	ands	r3, r2
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	429a      	cmp	r2, r3
 8002144:	d0b4      	beq.n	80020b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002150:	b480      	push	{r7}
 8002152:	b095      	sub	sp, #84	@ 0x54
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002162:	e853 3f00 	ldrex	r3, [r3]
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	330c      	adds	r3, #12
 8002176:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002178:	643a      	str	r2, [r7, #64]	@ 0x40
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800217c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800217e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002180:	e841 2300 	strex	r3, r2, [r1]
 8002184:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e5      	bne.n	8002158 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3314      	adds	r3, #20
 8002192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	e853 3f00 	ldrex	r3, [r3]
 800219a:	61fb      	str	r3, [r7, #28]
   return(result);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3314      	adds	r3, #20
 80021aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b4:	e841 2300 	strex	r3, r2, [r1]
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e5      	bne.n	800218c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d119      	bne.n	80021fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e853 3f00 	ldrex	r3, [r3]
 80021d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f023 0310 	bic.w	r3, r3, #16
 80021de:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021e8:	61ba      	str	r2, [r7, #24]
 80021ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	e841 2300 	strex	r3, r2, [r1]
 80021f4:	613b      	str	r3, [r7, #16]
   return(result);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e5      	bne.n	80021c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800220a:	bf00      	nop
 800220c:	3754      	adds	r7, #84	@ 0x54
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b0c0      	sub	sp, #256	@ 0x100
 800221e:	af00      	add	r7, sp, #0
 8002220:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	ea40 0301 	orr.w	r3, r0, r1
 8002240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	431a      	orrs	r2, r3
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	431a      	orrs	r2, r3
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002270:	f021 010c 	bic.w	r1, r1, #12
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800227e:	430b      	orrs	r3, r1
 8002280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002292:	6999      	ldr	r1, [r3, #24]
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	ea40 0301 	orr.w	r3, r0, r1
 800229e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b8f      	ldr	r3, [pc, #572]	@ (80024e4 <UART_SetConfig+0x2cc>)
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d005      	beq.n	80022b8 <UART_SetConfig+0xa0>
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b8d      	ldr	r3, [pc, #564]	@ (80024e8 <UART_SetConfig+0x2d0>)
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d104      	bne.n	80022c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022b8:	f7ff fe02 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80022bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022c0:	e003      	b.n	80022ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7ff fde9 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80022c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d4:	f040 810c 	bne.w	80024f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	1891      	adds	r1, r2, r2
 80022f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022f2:	415b      	adcs	r3, r3
 80022f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022fa:	4621      	mov	r1, r4
 80022fc:	eb12 0801 	adds.w	r8, r2, r1
 8002300:	4629      	mov	r1, r5
 8002302:	eb43 0901 	adc.w	r9, r3, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800231a:	4690      	mov	r8, r2
 800231c:	4699      	mov	r9, r3
 800231e:	4623      	mov	r3, r4
 8002320:	eb18 0303 	adds.w	r3, r8, r3
 8002324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002328:	462b      	mov	r3, r5
 800232a:	eb49 0303 	adc.w	r3, r9, r3
 800232e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800233e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002346:	460b      	mov	r3, r1
 8002348:	18db      	adds	r3, r3, r3
 800234a:	653b      	str	r3, [r7, #80]	@ 0x50
 800234c:	4613      	mov	r3, r2
 800234e:	eb42 0303 	adc.w	r3, r2, r3
 8002352:	657b      	str	r3, [r7, #84]	@ 0x54
 8002354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800235c:	f7fd ff90 	bl	8000280 <__aeabi_uldivmod>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4b61      	ldr	r3, [pc, #388]	@ (80024ec <UART_SetConfig+0x2d4>)
 8002366:	fba3 2302 	umull	r2, r3, r3, r2
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	011c      	lsls	r4, r3, #4
 800236e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002378:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800237c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	1891      	adds	r1, r2, r2
 8002386:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002388:	415b      	adcs	r3, r3
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800238c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002390:	4641      	mov	r1, r8
 8002392:	eb12 0a01 	adds.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb43 0b01 	adc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b0:	4692      	mov	sl, r2
 80023b2:	469b      	mov	fp, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	eb1a 0303 	adds.w	r3, sl, r3
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023be:	464b      	mov	r3, r9
 80023c0:	eb4b 0303 	adc.w	r3, fp, r3
 80023c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023dc:	460b      	mov	r3, r1
 80023de:	18db      	adds	r3, r3, r3
 80023e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023e2:	4613      	mov	r3, r2
 80023e4:	eb42 0303 	adc.w	r3, r2, r3
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023f2:	f7fd ff45 	bl	8000280 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <UART_SetConfig+0x2d4>)
 80023fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2264      	movs	r2, #100	@ 0x64
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	1acb      	subs	r3, r1, r3
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002412:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <UART_SetConfig+0x2d4>)
 8002414:	fba3 2302 	umull	r2, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002420:	441c      	add	r4, r3
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800242c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002434:	4642      	mov	r2, r8
 8002436:	464b      	mov	r3, r9
 8002438:	1891      	adds	r1, r2, r2
 800243a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800243c:	415b      	adcs	r3, r3
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002444:	4641      	mov	r1, r8
 8002446:	1851      	adds	r1, r2, r1
 8002448:	6339      	str	r1, [r7, #48]	@ 0x30
 800244a:	4649      	mov	r1, r9
 800244c:	414b      	adcs	r3, r1
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800245c:	4659      	mov	r1, fp
 800245e:	00cb      	lsls	r3, r1, #3
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002466:	4651      	mov	r1, sl
 8002468:	00ca      	lsls	r2, r1, #3
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	4603      	mov	r3, r0
 8002470:	4642      	mov	r2, r8
 8002472:	189b      	adds	r3, r3, r2
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002490:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002498:	460b      	mov	r3, r1
 800249a:	18db      	adds	r3, r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249e:	4613      	mov	r3, r2
 80024a0:	eb42 0303 	adc.w	r3, r2, r3
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024ae:	f7fd fee7 	bl	8000280 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <UART_SetConfig+0x2d4>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	2164      	movs	r1, #100	@ 0x64
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	3332      	adds	r3, #50	@ 0x32
 80024ca:	4a08      	ldr	r2, [pc, #32]	@ (80024ec <UART_SetConfig+0x2d4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	f003 0207 	and.w	r2, r3, #7
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4422      	add	r2, r4
 80024de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024e0:	e106      	b.n	80026f0 <UART_SetConfig+0x4d8>
 80024e2:	bf00      	nop
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40011400 	.word	0x40011400
 80024ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002502:	4642      	mov	r2, r8
 8002504:	464b      	mov	r3, r9
 8002506:	1891      	adds	r1, r2, r2
 8002508:	6239      	str	r1, [r7, #32]
 800250a:	415b      	adcs	r3, r3
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
 800250e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002512:	4641      	mov	r1, r8
 8002514:	1854      	adds	r4, r2, r1
 8002516:	4649      	mov	r1, r9
 8002518:	eb43 0501 	adc.w	r5, r3, r1
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	00eb      	lsls	r3, r5, #3
 8002526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252a:	00e2      	lsls	r2, r4, #3
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	4643      	mov	r3, r8
 8002532:	18e3      	adds	r3, r4, r3
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002538:	464b      	mov	r3, r9
 800253a:	eb45 0303 	adc.w	r3, r5, r3
 800253e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800254e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800255e:	4629      	mov	r1, r5
 8002560:	008b      	lsls	r3, r1, #2
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002568:	4621      	mov	r1, r4
 800256a:	008a      	lsls	r2, r1, #2
 800256c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002570:	f7fd fe86 	bl	8000280 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4b60      	ldr	r3, [pc, #384]	@ (80026fc <UART_SetConfig+0x4e4>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011c      	lsls	r4, r3, #4
 8002582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800258c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	1891      	adds	r1, r2, r2
 800259a:	61b9      	str	r1, [r7, #24]
 800259c:	415b      	adcs	r3, r3
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a4:	4641      	mov	r1, r8
 80025a6:	1851      	adds	r1, r2, r1
 80025a8:	6139      	str	r1, [r7, #16]
 80025aa:	4649      	mov	r1, r9
 80025ac:	414b      	adcs	r3, r1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025bc:	4659      	mov	r1, fp
 80025be:	00cb      	lsls	r3, r1, #3
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c6:	4651      	mov	r1, sl
 80025c8:	00ca      	lsls	r2, r1, #3
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	4642      	mov	r2, r8
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025d8:	464b      	mov	r3, r9
 80025da:	460a      	mov	r2, r1
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025fc:	4649      	mov	r1, r9
 80025fe:	008b      	lsls	r3, r1, #2
 8002600:	4641      	mov	r1, r8
 8002602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002606:	4641      	mov	r1, r8
 8002608:	008a      	lsls	r2, r1, #2
 800260a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800260e:	f7fd fe37 	bl	8000280 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4611      	mov	r1, r2
 8002618:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <UART_SetConfig+0x4e4>)
 800261a:	fba3 2301 	umull	r2, r3, r3, r1
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2264      	movs	r2, #100	@ 0x64
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	1acb      	subs	r3, r1, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	@ 0x32
 800262c:	4a33      	ldr	r2, [pc, #204]	@ (80026fc <UART_SetConfig+0x4e4>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002638:	441c      	add	r4, r3
 800263a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800263e:	2200      	movs	r2, #0
 8002640:	673b      	str	r3, [r7, #112]	@ 0x70
 8002642:	677a      	str	r2, [r7, #116]	@ 0x74
 8002644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	1891      	adds	r1, r2, r2
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	415b      	adcs	r3, r3
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002658:	4641      	mov	r1, r8
 800265a:	1851      	adds	r1, r2, r1
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	4649      	mov	r1, r9
 8002660:	414b      	adcs	r3, r1
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002670:	4659      	mov	r1, fp
 8002672:	00cb      	lsls	r3, r1, #3
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800267a:	4651      	mov	r1, sl
 800267c:	00ca      	lsls	r2, r1, #3
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	4603      	mov	r3, r0
 8002684:	4642      	mov	r2, r8
 8002686:	189b      	adds	r3, r3, r2
 8002688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800268a:	464b      	mov	r3, r9
 800268c:	460a      	mov	r2, r1
 800268e:	eb42 0303 	adc.w	r3, r2, r3
 8002692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	663b      	str	r3, [r7, #96]	@ 0x60
 800269e:	667a      	str	r2, [r7, #100]	@ 0x64
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026be:	f7fd fddf 	bl	8000280 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <UART_SetConfig+0x4e4>)
 80026c8:	fba3 1302 	umull	r1, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	2164      	movs	r1, #100	@ 0x64
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	3332      	adds	r3, #50	@ 0x32
 80026da:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <UART_SetConfig+0x4e4>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4422      	add	r2, r4
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026f6:	46bd      	mov	sp, r7
 80026f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <NEXTION_SendText>:
const char *array_elementos_a_poner_rojo_por_alerta[] = {"speed", "revValue", "gear", "brake1", "brake2", "brake3", "brake4"};
const uint8_t Cmd_End[3] = {0xff, 0xff, 0xff};


// Función para actualizar objeto obj de la interfaz con un valor text
void NEXTION_SendText(UART_HandleTypeDef *huart, char *obj, char *text, char *units) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 800270e:	2032      	movs	r0, #50	@ 0x32
 8002710:	f000 f94e 	bl	80029b0 <malloc>
 8002714:	4603      	mov	r3, r0
 8002716:	613b      	str	r3, [r7, #16]
    int len = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

    if (units == NULL || units[0] == '\0') {
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <NEXTION_SendText+0x2a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <NEXTION_SendText+0x3a>
        len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, text);  // Agregar el texto al objeto
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4912      	ldr	r1, [pc, #72]	@ (8002778 <NEXTION_SendText+0x78>)
 8002730:	6938      	ldr	r0, [r7, #16]
 8002732:	f000 fb87 	bl	8002e44 <siprintf>
 8002736:	6178      	str	r0, [r7, #20]
 8002738:	e008      	b.n	800274c <NEXTION_SendText+0x4c>
    } else {
        len = sprintf((char *)buffer, "%s.txt=\"%s%s\"", obj, text, units); // Agrega las unidades al texto del objeto
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	490e      	ldr	r1, [pc, #56]	@ (800277c <NEXTION_SendText+0x7c>)
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f000 fb7d 	bl	8002e44 <siprintf>
 800274a:	6178      	str	r0, [r7, #20]
    }

    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	b29a      	uxth	r2, r3
 8002750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fc16 	bl	8001f88 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 800275c:	2364      	movs	r3, #100	@ 0x64
 800275e:	2203      	movs	r2, #3
 8002760:	4907      	ldr	r1, [pc, #28]	@ (8002780 <NEXTION_SendText+0x80>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7ff fc10 	bl	8001f88 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 8002768:	6938      	ldr	r0, [r7, #16]
 800276a:	f000 f929 	bl	80029c0 <free>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	08003fac 	.word	0x08003fac
 800277c:	08003fb8 	.word	0x08003fb8
 8002780:	08004018 	.word	0x08004018

08002784 <NEXTION_SendNumber>:

// Actualiza valores de las barras de frenado, aceleración y revoluciones
void NEXTION_SendNumber(UART_HandleTypeDef *huart, char *obj, int number) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
    uint8_t *buffer = malloc(50 * sizeof(char)); // Reserva memoria para un buffer de 50 bytes
 8002790:	2032      	movs	r0, #50	@ 0x32
 8002792:	f000 f90d 	bl	80029b0 <malloc>
 8002796:	4603      	mov	r3, r0
 8002798:	617b      	str	r3, [r7, #20]
    int len = sprintf((char *)buffer, "%s.val=%d", obj, number); // Inicializa el buffer con el objeto y el valor a inicializar
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	490d      	ldr	r1, [pc, #52]	@ (80027d4 <NEXTION_SendNumber+0x50>)
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f000 fb4f 	bl	8002e44 <siprintf>
 80027a6:	6138      	str	r0, [r7, #16]
    HAL_UART_Transmit(huart, buffer, len, 1000); // Transmite el buffer a través de UART
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b0:	6979      	ldr	r1, [r7, #20]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fbe8 	bl	8001f88 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100); // Transmite Cmd_End para indicar que finalizó el mensaje
 80027b8:	2364      	movs	r3, #100	@ 0x64
 80027ba:	2203      	movs	r2, #3
 80027bc:	4906      	ldr	r1, [pc, #24]	@ (80027d8 <NEXTION_SendNumber+0x54>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fbe2 	bl	8001f88 <HAL_UART_Transmit>
    free(buffer); // Libera la memoria asignada al buffer
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f000 f8fb 	bl	80029c0 <free>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	08003fc8 	.word	0x08003fc8
 80027d8:	08004018 	.word	0x08004018

080027dc <NEXTION_SendPageChange>:
    NEXTION_SendNumber(huart,"led2", resultado2);
    NEXTION_SendNumber(huart,"led3", resultado3);
}

//Función para realizar la transicción de la landing view al dash
void NEXTION_SendPageChange(UART_HandleTypeDef *huart,char *page_name) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    // Reserva memoria para un buffer de 50 bytes
    uint8_t *buffer = malloc(50 * sizeof(char));
 80027e6:	2032      	movs	r0, #50	@ 0x32
 80027e8:	f000 f8e2 	bl	80029b0 <malloc>
 80027ec:	4603      	mov	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]
    // Inicializa el buffer con la instrucción para cambiar de página
    int len = sprintf((char *)buffer, "page %s", page_name);
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	490d      	ldr	r1, [pc, #52]	@ (8002828 <NEXTION_SendPageChange+0x4c>)
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb25 	bl	8002e44 <siprintf>
 80027fa:	60b8      	str	r0, [r7, #8]
    // Transmite el buffer a través de UART
    HAL_UART_Transmit(huart, buffer, len, 1000);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fbbe 	bl	8001f88 <HAL_UART_Transmit>
    // Transmite un comando para indicar el final del mensaje
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 800280c:	2364      	movs	r3, #100	@ 0x64
 800280e:	2203      	movs	r2, #3
 8002810:	4906      	ldr	r1, [pc, #24]	@ (800282c <NEXTION_SendPageChange+0x50>)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fbb8 	bl	8001f88 <HAL_UART_Transmit>
    // Libera la memoria asignada al buffer
    free(buffer);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f8d1 	bl	80029c0 <free>
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	08003fec 	.word	0x08003fec
 800282c:	08004018 	.word	0x08004018

08002830 <NEXTION_Alert>:

//Función para actualizar todos los colores de los elementos a rojo por temperatura del motor o voltaje bateria elevados
void NEXTION_Alert(UART_HandleTypeDef *huart,int color) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]

	uint8_t *buffer = malloc(50 * sizeof(char));
 800283a:	2032      	movs	r0, #50	@ 0x32
 800283c:	f000 f8b8 	bl	80029b0 <malloc>
 8002840:	4603      	mov	r3, r0
 8002842:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 7; i++) {
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e01d      	b.n	8002886 <NEXTION_Alert+0x56>

        // Formatea y transmite el mensaje para el elemento actual
        int len = sprintf((char *)buffer, "%s.bco=%d", array_elementos_a_poner_rojo_por_alerta[i], color);
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <NEXTION_Alert+0x68>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4911      	ldr	r1, [pc, #68]	@ (800289c <NEXTION_Alert+0x6c>)
 8002856:	6938      	ldr	r0, [r7, #16]
 8002858:	f000 faf4 	bl	8002e44 <siprintf>
 800285c:	60f8      	str	r0, [r7, #12]

        HAL_UART_Transmit(huart, buffer, len, 1000);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	b29a      	uxth	r2, r3
 8002862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002866:	6939      	ldr	r1, [r7, #16]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fb8d 	bl	8001f88 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 800286e:	2364      	movs	r3, #100	@ 0x64
 8002870:	2203      	movs	r2, #3
 8002872:	490b      	ldr	r1, [pc, #44]	@ (80028a0 <NEXTION_Alert+0x70>)
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fb87 	bl	8001f88 <HAL_UART_Transmit>

        // Libera el buffer
        free(buffer);
 800287a:	6938      	ldr	r0, [r7, #16]
 800287c:	f000 f8a0 	bl	80029c0 <free>
    for (int i = 0; i < 7; i++) {
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b06      	cmp	r3, #6
 800288a:	ddde      	ble.n	800284a <NEXTION_Alert+0x1a>
    }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000000c 	.word	0x2000000c
 800289c:	08003ff4 	.word	0x08003ff4
 80028a0:	08004018 	.word	0x08004018

080028a4 <NEXTION_estado_color>:

//Función para actualizar color estado de voltaje bateria y temperatura del motor
void NEXTION_estado_color(UART_HandleTypeDef *huart, char *obj, int color) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

	uint8_t *buffer = malloc(50 * sizeof(char));
 80028b0:	2032      	movs	r0, #50	@ 0x32
 80028b2:	f000 f87d 	bl	80029b0 <malloc>
 80028b6:	4603      	mov	r3, r0
 80028b8:	617b      	str	r3, [r7, #20]

	// Formatea y transmite el mensaje para el elemento actual
	int len = sprintf((char *)buffer, "%s.bco=%d", obj, color);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	490d      	ldr	r1, [pc, #52]	@ (80028f4 <NEXTION_estado_color+0x50>)
 80028c0:	6978      	ldr	r0, [r7, #20]
 80028c2:	f000 fabf 	bl	8002e44 <siprintf>
 80028c6:	6138      	str	r0, [r7, #16]

    HAL_UART_Transmit(huart, buffer, len, 1000);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fb58 	bl	8001f88 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, Cmd_End, 3, 100);
 80028d8:	2364      	movs	r3, #100	@ 0x64
 80028da:	2203      	movs	r2, #3
 80028dc:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <NEXTION_estado_color+0x54>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fb52 	bl	8001f88 <HAL_UART_Transmit>

    // Libera el buffer
    free(buffer);
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f000 f86b 	bl	80029c0 <free>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08003ff4 	.word	0x08003ff4
 80028f8:	08004018 	.word	0x08004018

080028fc <NEXTION_Send_Revs_v2>:

// Función para actualizar los indicadores de revoluviones del dash (rectángulos de colores)
void NEXTION_Send_Revs_v2(UART_HandleTypeDef *huart, int val) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
    int resultado1 = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
    int resultado2 = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
    int resultado3 = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]

    // Check the value ranges and assign corresponding color values
    if (val >= 0 && val < 3000) {
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0c      	blt.n	8002932 <NEXTION_Send_Revs_v2+0x36>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800291e:	4293      	cmp	r3, r2
 8002920:	dc07      	bgt.n	8002932 <NEXTION_Send_Revs_v2+0x36>
        resultado1 = 32736; // Color green for range 0-3000
 8002922:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 8002926:	617b      	str	r3, [r7, #20]
        resultado2 = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e025      	b.n	800297e <NEXTION_Send_Revs_v2+0x82>
    } else if (val >= 3000 && val < 6000) {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002938:	4293      	cmp	r3, r2
 800293a:	dd0d      	ble.n	8002958 <NEXTION_Send_Revs_v2+0x5c>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002942:	4293      	cmp	r3, r2
 8002944:	dc08      	bgt.n	8002958 <NEXTION_Send_Revs_v2+0x5c>
        resultado1 = 32736; // Color red for range 3000-6000
 8002946:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 800294a:	617b      	str	r3, [r7, #20]
        resultado2 = 63488;
 800294c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002950:	613b      	str	r3, [r7, #16]
        resultado3 = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e012      	b.n	800297e <NEXTION_Send_Revs_v2+0x82>
    } else if (val >= 6000 && val <= 9000) {
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800295e:	4293      	cmp	r3, r2
 8002960:	dd0d      	ble.n	800297e <NEXTION_Send_Revs_v2+0x82>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f242 3228 	movw	r2, #9000	@ 0x2328
 8002968:	4293      	cmp	r3, r2
 800296a:	dc08      	bgt.n	800297e <NEXTION_Send_Revs_v2+0x82>
        resultado1 = 32736; // Color blue for range 6000-9000
 800296c:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 8002970:	617b      	str	r3, [r7, #20]
        resultado2 = 63488;
 8002972:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002976:	613b      	str	r3, [r7, #16]
        resultado3 = 1055;
 8002978:	f240 431f 	movw	r3, #1055	@ 0x41f
 800297c:	60fb      	str	r3, [r7, #12]
    }

    // Send the color values to the corresponding LEDs on the Nextion display
    NEXTION_estado_color(huart, "led1", resultado1);
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <NEXTION_Send_Revs_v2+0xa8>)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff8e 	bl	80028a4 <NEXTION_estado_color>
    NEXTION_estado_color(huart, "led2", resultado2);
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <NEXTION_Send_Revs_v2+0xac>)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff89 	bl	80028a4 <NEXTION_estado_color>
    NEXTION_estado_color(huart, "led3", resultado3);
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4905      	ldr	r1, [pc, #20]	@ (80029ac <NEXTION_Send_Revs_v2+0xb0>)
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff84 	bl	80028a4 <NEXTION_estado_color>
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	08003fd4 	.word	0x08003fd4
 80029a8:	08003fdc 	.word	0x08003fdc
 80029ac:	08003fe4 	.word	0x08003fe4

080029b0 <malloc>:
 80029b0:	4b02      	ldr	r3, [pc, #8]	@ (80029bc <malloc+0xc>)
 80029b2:	4601      	mov	r1, r0
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	f000 b82d 	b.w	8002a14 <_malloc_r>
 80029ba:	bf00      	nop
 80029bc:	20000034 	.word	0x20000034

080029c0 <free>:
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <free+0xc>)
 80029c2:	4601      	mov	r1, r0
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f000 bc0d 	b.w	80031e4 <_free_r>
 80029ca:	bf00      	nop
 80029cc:	20000034 	.word	0x20000034

080029d0 <sbrk_aligned>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002a10 <sbrk_aligned+0x40>)
 80029d4:	460c      	mov	r4, r1
 80029d6:	6831      	ldr	r1, [r6, #0]
 80029d8:	4605      	mov	r5, r0
 80029da:	b911      	cbnz	r1, 80029e2 <sbrk_aligned+0x12>
 80029dc:	f000 fb94 	bl	8003108 <_sbrk_r>
 80029e0:	6030      	str	r0, [r6, #0]
 80029e2:	4621      	mov	r1, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	f000 fb8f 	bl	8003108 <_sbrk_r>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	d103      	bne.n	80029f6 <sbrk_aligned+0x26>
 80029ee:	f04f 34ff 	mov.w	r4, #4294967295
 80029f2:	4620      	mov	r0, r4
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
 80029f6:	1cc4      	adds	r4, r0, #3
 80029f8:	f024 0403 	bic.w	r4, r4, #3
 80029fc:	42a0      	cmp	r0, r4
 80029fe:	d0f8      	beq.n	80029f2 <sbrk_aligned+0x22>
 8002a00:	1a21      	subs	r1, r4, r0
 8002a02:	4628      	mov	r0, r5
 8002a04:	f000 fb80 	bl	8003108 <_sbrk_r>
 8002a08:	3001      	adds	r0, #1
 8002a0a:	d1f2      	bne.n	80029f2 <sbrk_aligned+0x22>
 8002a0c:	e7ef      	b.n	80029ee <sbrk_aligned+0x1e>
 8002a0e:	bf00      	nop
 8002a10:	20000138 	.word	0x20000138

08002a14 <_malloc_r>:
 8002a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a18:	1ccd      	adds	r5, r1, #3
 8002a1a:	f025 0503 	bic.w	r5, r5, #3
 8002a1e:	3508      	adds	r5, #8
 8002a20:	2d0c      	cmp	r5, #12
 8002a22:	bf38      	it	cc
 8002a24:	250c      	movcc	r5, #12
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	4606      	mov	r6, r0
 8002a2a:	db01      	blt.n	8002a30 <_malloc_r+0x1c>
 8002a2c:	42a9      	cmp	r1, r5
 8002a2e:	d904      	bls.n	8002a3a <_malloc_r+0x26>
 8002a30:	230c      	movs	r3, #12
 8002a32:	6033      	str	r3, [r6, #0]
 8002a34:	2000      	movs	r0, #0
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b10 <_malloc_r+0xfc>
 8002a3e:	f000 f869 	bl	8002b14 <__malloc_lock>
 8002a42:	f8d8 3000 	ldr.w	r3, [r8]
 8002a46:	461c      	mov	r4, r3
 8002a48:	bb44      	cbnz	r4, 8002a9c <_malloc_r+0x88>
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f7ff ffbf 	bl	80029d0 <sbrk_aligned>
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	4604      	mov	r4, r0
 8002a56:	d158      	bne.n	8002b0a <_malloc_r+0xf6>
 8002a58:	f8d8 4000 	ldr.w	r4, [r8]
 8002a5c:	4627      	mov	r7, r4
 8002a5e:	2f00      	cmp	r7, #0
 8002a60:	d143      	bne.n	8002aea <_malloc_r+0xd6>
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	d04b      	beq.n	8002afe <_malloc_r+0xea>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	4639      	mov	r1, r7
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	eb04 0903 	add.w	r9, r4, r3
 8002a70:	f000 fb4a 	bl	8003108 <_sbrk_r>
 8002a74:	4581      	cmp	r9, r0
 8002a76:	d142      	bne.n	8002afe <_malloc_r+0xea>
 8002a78:	6821      	ldr	r1, [r4, #0]
 8002a7a:	1a6d      	subs	r5, r5, r1
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f7ff ffa6 	bl	80029d0 <sbrk_aligned>
 8002a84:	3001      	adds	r0, #1
 8002a86:	d03a      	beq.n	8002afe <_malloc_r+0xea>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	442b      	add	r3, r5
 8002a8c:	6023      	str	r3, [r4, #0]
 8002a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	bb62      	cbnz	r2, 8002af0 <_malloc_r+0xdc>
 8002a96:	f8c8 7000 	str.w	r7, [r8]
 8002a9a:	e00f      	b.n	8002abc <_malloc_r+0xa8>
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	1b52      	subs	r2, r2, r5
 8002aa0:	d420      	bmi.n	8002ae4 <_malloc_r+0xd0>
 8002aa2:	2a0b      	cmp	r2, #11
 8002aa4:	d917      	bls.n	8002ad6 <_malloc_r+0xc2>
 8002aa6:	1961      	adds	r1, r4, r5
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	6025      	str	r5, [r4, #0]
 8002aac:	bf18      	it	ne
 8002aae:	6059      	strne	r1, [r3, #4]
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	bf08      	it	eq
 8002ab4:	f8c8 1000 	streq.w	r1, [r8]
 8002ab8:	5162      	str	r2, [r4, r5]
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	4630      	mov	r0, r6
 8002abe:	f000 f82f 	bl	8002b20 <__malloc_unlock>
 8002ac2:	f104 000b 	add.w	r0, r4, #11
 8002ac6:	1d23      	adds	r3, r4, #4
 8002ac8:	f020 0007 	bic.w	r0, r0, #7
 8002acc:	1ac2      	subs	r2, r0, r3
 8002ace:	bf1c      	itt	ne
 8002ad0:	1a1b      	subne	r3, r3, r0
 8002ad2:	50a3      	strne	r3, [r4, r2]
 8002ad4:	e7af      	b.n	8002a36 <_malloc_r+0x22>
 8002ad6:	6862      	ldr	r2, [r4, #4]
 8002ad8:	42a3      	cmp	r3, r4
 8002ada:	bf0c      	ite	eq
 8002adc:	f8c8 2000 	streq.w	r2, [r8]
 8002ae0:	605a      	strne	r2, [r3, #4]
 8002ae2:	e7eb      	b.n	8002abc <_malloc_r+0xa8>
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	6864      	ldr	r4, [r4, #4]
 8002ae8:	e7ae      	b.n	8002a48 <_malloc_r+0x34>
 8002aea:	463c      	mov	r4, r7
 8002aec:	687f      	ldr	r7, [r7, #4]
 8002aee:	e7b6      	b.n	8002a5e <_malloc_r+0x4a>
 8002af0:	461a      	mov	r2, r3
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	d1fb      	bne.n	8002af0 <_malloc_r+0xdc>
 8002af8:	2300      	movs	r3, #0
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	e7de      	b.n	8002abc <_malloc_r+0xa8>
 8002afe:	230c      	movs	r3, #12
 8002b00:	6033      	str	r3, [r6, #0]
 8002b02:	4630      	mov	r0, r6
 8002b04:	f000 f80c 	bl	8002b20 <__malloc_unlock>
 8002b08:	e794      	b.n	8002a34 <_malloc_r+0x20>
 8002b0a:	6005      	str	r5, [r0, #0]
 8002b0c:	e7d6      	b.n	8002abc <_malloc_r+0xa8>
 8002b0e:	bf00      	nop
 8002b10:	2000013c 	.word	0x2000013c

08002b14 <__malloc_lock>:
 8002b14:	4801      	ldr	r0, [pc, #4]	@ (8002b1c <__malloc_lock+0x8>)
 8002b16:	f000 bb44 	b.w	80031a2 <__retarget_lock_acquire_recursive>
 8002b1a:	bf00      	nop
 8002b1c:	20000280 	.word	0x20000280

08002b20 <__malloc_unlock>:
 8002b20:	4801      	ldr	r0, [pc, #4]	@ (8002b28 <__malloc_unlock+0x8>)
 8002b22:	f000 bb3f 	b.w	80031a4 <__retarget_lock_release_recursive>
 8002b26:	bf00      	nop
 8002b28:	20000280 	.word	0x20000280

08002b2c <srand>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <srand+0x44>)
 8002b30:	681d      	ldr	r5, [r3, #0]
 8002b32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002b34:	4604      	mov	r4, r0
 8002b36:	b9b3      	cbnz	r3, 8002b66 <srand+0x3a>
 8002b38:	2018      	movs	r0, #24
 8002b3a:	f7ff ff39 	bl	80029b0 <malloc>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6328      	str	r0, [r5, #48]	@ 0x30
 8002b42:	b920      	cbnz	r0, 8002b4e <srand+0x22>
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <srand+0x48>)
 8002b46:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <srand+0x4c>)
 8002b48:	2146      	movs	r1, #70	@ 0x46
 8002b4a:	f000 fb2d 	bl	80031a8 <__assert_func>
 8002b4e:	490b      	ldr	r1, [pc, #44]	@ (8002b7c <srand+0x50>)
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <srand+0x54>)
 8002b52:	e9c0 1300 	strd	r1, r3, [r0]
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <srand+0x58>)
 8002b58:	6083      	str	r3, [r0, #8]
 8002b5a:	230b      	movs	r3, #11
 8002b5c:	8183      	strh	r3, [r0, #12]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2001      	movs	r0, #1
 8002b62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002b66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611c      	str	r4, [r3, #16]
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	20000034 	.word	0x20000034
 8002b74:	0800401b 	.word	0x0800401b
 8002b78:	08004032 	.word	0x08004032
 8002b7c:	abcd330e 	.word	0xabcd330e
 8002b80:	e66d1234 	.word	0xe66d1234
 8002b84:	0005deec 	.word	0x0005deec

08002b88 <rand>:
 8002b88:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <rand+0x5c>)
 8002b8a:	b510      	push	{r4, lr}
 8002b8c:	681c      	ldr	r4, [r3, #0]
 8002b8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b90:	b9b3      	cbnz	r3, 8002bc0 <rand+0x38>
 8002b92:	2018      	movs	r0, #24
 8002b94:	f7ff ff0c 	bl	80029b0 <malloc>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8002b9c:	b920      	cbnz	r0, 8002ba8 <rand+0x20>
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <rand+0x60>)
 8002ba0:	4812      	ldr	r0, [pc, #72]	@ (8002bec <rand+0x64>)
 8002ba2:	2152      	movs	r1, #82	@ 0x52
 8002ba4:	f000 fb00 	bl	80031a8 <__assert_func>
 8002ba8:	4911      	ldr	r1, [pc, #68]	@ (8002bf0 <rand+0x68>)
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <rand+0x6c>)
 8002bac:	e9c0 1300 	strd	r1, r3, [r0]
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <rand+0x70>)
 8002bb2:	6083      	str	r3, [r0, #8]
 8002bb4:	230b      	movs	r3, #11
 8002bb6:	8183      	strh	r3, [r0, #12]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2001      	movs	r0, #1
 8002bbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002bc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002bc2:	480e      	ldr	r0, [pc, #56]	@ (8002bfc <rand+0x74>)
 8002bc4:	690b      	ldr	r3, [r1, #16]
 8002bc6:	694c      	ldr	r4, [r1, #20]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <rand+0x78>)
 8002bca:	4358      	muls	r0, r3
 8002bcc:	fb02 0004 	mla	r0, r2, r4, r0
 8002bd0:	fba3 3202 	umull	r3, r2, r3, r2
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	eb40 0002 	adc.w	r0, r0, r2
 8002bda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002bde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002be2:	bd10      	pop	{r4, pc}
 8002be4:	20000034 	.word	0x20000034
 8002be8:	0800401b 	.word	0x0800401b
 8002bec:	08004032 	.word	0x08004032
 8002bf0:	abcd330e 	.word	0xabcd330e
 8002bf4:	e66d1234 	.word	0xe66d1234
 8002bf8:	0005deec 	.word	0x0005deec
 8002bfc:	5851f42d 	.word	0x5851f42d
 8002c00:	4c957f2d 	.word	0x4c957f2d

08002c04 <std>:
 8002c04:	2300      	movs	r3, #0
 8002c06:	b510      	push	{r4, lr}
 8002c08:	4604      	mov	r4, r0
 8002c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c12:	6083      	str	r3, [r0, #8]
 8002c14:	8181      	strh	r1, [r0, #12]
 8002c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c18:	81c2      	strh	r2, [r0, #14]
 8002c1a:	6183      	str	r3, [r0, #24]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	2208      	movs	r2, #8
 8002c20:	305c      	adds	r0, #92	@ 0x5c
 8002c22:	f000 fa07 	bl	8003034 <memset>
 8002c26:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <std+0x58>)
 8002c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <std+0x5c>)
 8002c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <std+0x60>)
 8002c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <std+0x64>)
 8002c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <std+0x68>)
 8002c38:	6224      	str	r4, [r4, #32]
 8002c3a:	429c      	cmp	r4, r3
 8002c3c:	d006      	beq.n	8002c4c <std+0x48>
 8002c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c42:	4294      	cmp	r4, r2
 8002c44:	d002      	beq.n	8002c4c <std+0x48>
 8002c46:	33d0      	adds	r3, #208	@ 0xd0
 8002c48:	429c      	cmp	r4, r3
 8002c4a:	d105      	bne.n	8002c58 <std+0x54>
 8002c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c54:	f000 baa4 	b.w	80031a0 <__retarget_lock_init_recursive>
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08002e85 	.word	0x08002e85
 8002c60:	08002ea7 	.word	0x08002ea7
 8002c64:	08002edf 	.word	0x08002edf
 8002c68:	08002f03 	.word	0x08002f03
 8002c6c:	20000140 	.word	0x20000140

08002c70 <stdio_exit_handler>:
 8002c70:	4a02      	ldr	r2, [pc, #8]	@ (8002c7c <stdio_exit_handler+0xc>)
 8002c72:	4903      	ldr	r1, [pc, #12]	@ (8002c80 <stdio_exit_handler+0x10>)
 8002c74:	4803      	ldr	r0, [pc, #12]	@ (8002c84 <stdio_exit_handler+0x14>)
 8002c76:	f000 b869 	b.w	8002d4c <_fwalk_sglue>
 8002c7a:	bf00      	nop
 8002c7c:	20000028 	.word	0x20000028
 8002c80:	0800394d 	.word	0x0800394d
 8002c84:	20000038 	.word	0x20000038

08002c88 <cleanup_stdio>:
 8002c88:	6841      	ldr	r1, [r0, #4]
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <cleanup_stdio+0x34>)
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	4604      	mov	r4, r0
 8002c92:	d001      	beq.n	8002c98 <cleanup_stdio+0x10>
 8002c94:	f000 fe5a 	bl	800394c <_fflush_r>
 8002c98:	68a1      	ldr	r1, [r4, #8]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <cleanup_stdio+0x38>)
 8002c9c:	4299      	cmp	r1, r3
 8002c9e:	d002      	beq.n	8002ca6 <cleanup_stdio+0x1e>
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 fe53 	bl	800394c <_fflush_r>
 8002ca6:	68e1      	ldr	r1, [r4, #12]
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <cleanup_stdio+0x3c>)
 8002caa:	4299      	cmp	r1, r3
 8002cac:	d004      	beq.n	8002cb8 <cleanup_stdio+0x30>
 8002cae:	4620      	mov	r0, r4
 8002cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cb4:	f000 be4a 	b.w	800394c <_fflush_r>
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000140 	.word	0x20000140
 8002cc0:	200001a8 	.word	0x200001a8
 8002cc4:	20000210 	.word	0x20000210

08002cc8 <global_stdio_init.part.0>:
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <global_stdio_init.part.0+0x30>)
 8002ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8002cfc <global_stdio_init.part.0+0x34>)
 8002cce:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <global_stdio_init.part.0+0x38>)
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	f7ff ff94 	bl	8002c04 <std>
 8002cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2109      	movs	r1, #9
 8002ce4:	f7ff ff8e 	bl	8002c04 <std>
 8002ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cec:	2202      	movs	r2, #2
 8002cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf2:	2112      	movs	r1, #18
 8002cf4:	f7ff bf86 	b.w	8002c04 <std>
 8002cf8:	20000278 	.word	0x20000278
 8002cfc:	20000140 	.word	0x20000140
 8002d00:	08002c71 	.word	0x08002c71

08002d04 <__sfp_lock_acquire>:
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <__sfp_lock_acquire+0x8>)
 8002d06:	f000 ba4c 	b.w	80031a2 <__retarget_lock_acquire_recursive>
 8002d0a:	bf00      	nop
 8002d0c:	20000281 	.word	0x20000281

08002d10 <__sfp_lock_release>:
 8002d10:	4801      	ldr	r0, [pc, #4]	@ (8002d18 <__sfp_lock_release+0x8>)
 8002d12:	f000 ba47 	b.w	80031a4 <__retarget_lock_release_recursive>
 8002d16:	bf00      	nop
 8002d18:	20000281 	.word	0x20000281

08002d1c <__sinit>:
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	4604      	mov	r4, r0
 8002d20:	f7ff fff0 	bl	8002d04 <__sfp_lock_acquire>
 8002d24:	6a23      	ldr	r3, [r4, #32]
 8002d26:	b11b      	cbz	r3, 8002d30 <__sinit+0x14>
 8002d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d2c:	f7ff bff0 	b.w	8002d10 <__sfp_lock_release>
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <__sinit+0x28>)
 8002d32:	6223      	str	r3, [r4, #32]
 8002d34:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <__sinit+0x2c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f5      	bne.n	8002d28 <__sinit+0xc>
 8002d3c:	f7ff ffc4 	bl	8002cc8 <global_stdio_init.part.0>
 8002d40:	e7f2      	b.n	8002d28 <__sinit+0xc>
 8002d42:	bf00      	nop
 8002d44:	08002c89 	.word	0x08002c89
 8002d48:	20000278 	.word	0x20000278

08002d4c <_fwalk_sglue>:
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d50:	4607      	mov	r7, r0
 8002d52:	4688      	mov	r8, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	2600      	movs	r6, #0
 8002d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8002d60:	d505      	bpl.n	8002d6e <_fwalk_sglue+0x22>
 8002d62:	6824      	ldr	r4, [r4, #0]
 8002d64:	2c00      	cmp	r4, #0
 8002d66:	d1f7      	bne.n	8002d58 <_fwalk_sglue+0xc>
 8002d68:	4630      	mov	r0, r6
 8002d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d6e:	89ab      	ldrh	r3, [r5, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d907      	bls.n	8002d84 <_fwalk_sglue+0x38>
 8002d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	d003      	beq.n	8002d84 <_fwalk_sglue+0x38>
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4638      	mov	r0, r7
 8002d80:	47c0      	blx	r8
 8002d82:	4306      	orrs	r6, r0
 8002d84:	3568      	adds	r5, #104	@ 0x68
 8002d86:	e7e9      	b.n	8002d5c <_fwalk_sglue+0x10>

08002d88 <_puts_r>:
 8002d88:	6a03      	ldr	r3, [r0, #32]
 8002d8a:	b570      	push	{r4, r5, r6, lr}
 8002d8c:	6884      	ldr	r4, [r0, #8]
 8002d8e:	4605      	mov	r5, r0
 8002d90:	460e      	mov	r6, r1
 8002d92:	b90b      	cbnz	r3, 8002d98 <_puts_r+0x10>
 8002d94:	f7ff ffc2 	bl	8002d1c <__sinit>
 8002d98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d9a:	07db      	lsls	r3, r3, #31
 8002d9c:	d405      	bmi.n	8002daa <_puts_r+0x22>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	0598      	lsls	r0, r3, #22
 8002da2:	d402      	bmi.n	8002daa <_puts_r+0x22>
 8002da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002da6:	f000 f9fc 	bl	80031a2 <__retarget_lock_acquire_recursive>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	0719      	lsls	r1, r3, #28
 8002dae:	d502      	bpl.n	8002db6 <_puts_r+0x2e>
 8002db0:	6923      	ldr	r3, [r4, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d135      	bne.n	8002e22 <_puts_r+0x9a>
 8002db6:	4621      	mov	r1, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f000 f8e5 	bl	8002f88 <__swsetup_r>
 8002dbe:	b380      	cbz	r0, 8002e22 <_puts_r+0x9a>
 8002dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dc6:	07da      	lsls	r2, r3, #31
 8002dc8:	d405      	bmi.n	8002dd6 <_puts_r+0x4e>
 8002dca:	89a3      	ldrh	r3, [r4, #12]
 8002dcc:	059b      	lsls	r3, r3, #22
 8002dce:	d402      	bmi.n	8002dd6 <_puts_r+0x4e>
 8002dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dd2:	f000 f9e7 	bl	80031a4 <__retarget_lock_release_recursive>
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	da04      	bge.n	8002de8 <_puts_r+0x60>
 8002dde:	69a2      	ldr	r2, [r4, #24]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dc17      	bgt.n	8002e14 <_puts_r+0x8c>
 8002de4:	290a      	cmp	r1, #10
 8002de6:	d015      	beq.n	8002e14 <_puts_r+0x8c>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	6022      	str	r2, [r4, #0]
 8002dee:	7019      	strb	r1, [r3, #0]
 8002df0:	68a3      	ldr	r3, [r4, #8]
 8002df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60a3      	str	r3, [r4, #8]
 8002dfa:	2900      	cmp	r1, #0
 8002dfc:	d1ed      	bne.n	8002dda <_puts_r+0x52>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da11      	bge.n	8002e26 <_puts_r+0x9e>
 8002e02:	4622      	mov	r2, r4
 8002e04:	210a      	movs	r1, #10
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f87f 	bl	8002f0a <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d0d7      	beq.n	8002dc0 <_puts_r+0x38>
 8002e10:	250a      	movs	r5, #10
 8002e12:	e7d7      	b.n	8002dc4 <_puts_r+0x3c>
 8002e14:	4622      	mov	r2, r4
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f877 	bl	8002f0a <__swbuf_r>
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d1e7      	bne.n	8002df0 <_puts_r+0x68>
 8002e20:	e7ce      	b.n	8002dc0 <_puts_r+0x38>
 8002e22:	3e01      	subs	r6, #1
 8002e24:	e7e4      	b.n	8002df0 <_puts_r+0x68>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	6022      	str	r2, [r4, #0]
 8002e2c:	220a      	movs	r2, #10
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e7ee      	b.n	8002e10 <_puts_r+0x88>
	...

08002e34 <puts>:
 8002e34:	4b02      	ldr	r3, [pc, #8]	@ (8002e40 <puts+0xc>)
 8002e36:	4601      	mov	r1, r0
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	f7ff bfa5 	b.w	8002d88 <_puts_r>
 8002e3e:	bf00      	nop
 8002e40:	20000034 	.word	0x20000034

08002e44 <siprintf>:
 8002e44:	b40e      	push	{r1, r2, r3}
 8002e46:	b500      	push	{lr}
 8002e48:	b09c      	sub	sp, #112	@ 0x70
 8002e4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e4c:	9002      	str	r0, [sp, #8]
 8002e4e:	9006      	str	r0, [sp, #24]
 8002e50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e54:	4809      	ldr	r0, [pc, #36]	@ (8002e7c <siprintf+0x38>)
 8002e56:	9107      	str	r1, [sp, #28]
 8002e58:	9104      	str	r1, [sp, #16]
 8002e5a:	4909      	ldr	r1, [pc, #36]	@ (8002e80 <siprintf+0x3c>)
 8002e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e60:	9105      	str	r1, [sp, #20]
 8002e62:	6800      	ldr	r0, [r0, #0]
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	a902      	add	r1, sp, #8
 8002e68:	f000 fa62 	bl	8003330 <_svfiprintf_r>
 8002e6c:	9b02      	ldr	r3, [sp, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	b01c      	add	sp, #112	@ 0x70
 8002e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e78:	b003      	add	sp, #12
 8002e7a:	4770      	bx	lr
 8002e7c:	20000034 	.word	0x20000034
 8002e80:	ffff0208 	.word	0xffff0208

08002e84 <__sread>:
 8002e84:	b510      	push	{r4, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8c:	f000 f92a 	bl	80030e4 <_read_r>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	bfab      	itete	ge
 8002e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e96:	89a3      	ldrhlt	r3, [r4, #12]
 8002e98:	181b      	addge	r3, r3, r0
 8002e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e9e:	bfac      	ite	ge
 8002ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ea2:	81a3      	strhlt	r3, [r4, #12]
 8002ea4:	bd10      	pop	{r4, pc}

08002ea6 <__swrite>:
 8002ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eaa:	461f      	mov	r7, r3
 8002eac:	898b      	ldrh	r3, [r1, #12]
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	4616      	mov	r6, r2
 8002eb6:	d505      	bpl.n	8002ec4 <__swrite+0x1e>
 8002eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f000 f8fe 	bl	80030c0 <_lseek_r>
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ece:	81a3      	strh	r3, [r4, #12]
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eda:	f000 b925 	b.w	8003128 <_write_r>

08002ede <__sseek>:
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee6:	f000 f8eb 	bl	80030c0 <_lseek_r>
 8002eea:	1c43      	adds	r3, r0, #1
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	bf15      	itete	ne
 8002ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002efa:	81a3      	strheq	r3, [r4, #12]
 8002efc:	bf18      	it	ne
 8002efe:	81a3      	strhne	r3, [r4, #12]
 8002f00:	bd10      	pop	{r4, pc}

08002f02 <__sclose>:
 8002f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f06:	f000 b8b9 	b.w	800307c <_close_r>

08002f0a <__swbuf_r>:
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0c:	460e      	mov	r6, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	4605      	mov	r5, r0
 8002f12:	b118      	cbz	r0, 8002f1c <__swbuf_r+0x12>
 8002f14:	6a03      	ldr	r3, [r0, #32]
 8002f16:	b90b      	cbnz	r3, 8002f1c <__swbuf_r+0x12>
 8002f18:	f7ff ff00 	bl	8002d1c <__sinit>
 8002f1c:	69a3      	ldr	r3, [r4, #24]
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	071a      	lsls	r2, r3, #28
 8002f24:	d501      	bpl.n	8002f2a <__swbuf_r+0x20>
 8002f26:	6923      	ldr	r3, [r4, #16]
 8002f28:	b943      	cbnz	r3, 8002f3c <__swbuf_r+0x32>
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 f82b 	bl	8002f88 <__swsetup_r>
 8002f32:	b118      	cbz	r0, 8002f3c <__swbuf_r+0x32>
 8002f34:	f04f 37ff 	mov.w	r7, #4294967295
 8002f38:	4638      	mov	r0, r7
 8002f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	6922      	ldr	r2, [r4, #16]
 8002f40:	1a98      	subs	r0, r3, r2
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	b2f6      	uxtb	r6, r6
 8002f46:	4283      	cmp	r3, r0
 8002f48:	4637      	mov	r7, r6
 8002f4a:	dc05      	bgt.n	8002f58 <__swbuf_r+0x4e>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 fcfc 	bl	800394c <_fflush_r>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d1ed      	bne.n	8002f34 <__swbuf_r+0x2a>
 8002f58:	68a3      	ldr	r3, [r4, #8]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	6022      	str	r2, [r4, #0]
 8002f64:	701e      	strb	r6, [r3, #0]
 8002f66:	6962      	ldr	r2, [r4, #20]
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d004      	beq.n	8002f78 <__swbuf_r+0x6e>
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	07db      	lsls	r3, r3, #31
 8002f72:	d5e1      	bpl.n	8002f38 <__swbuf_r+0x2e>
 8002f74:	2e0a      	cmp	r6, #10
 8002f76:	d1df      	bne.n	8002f38 <__swbuf_r+0x2e>
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 fce6 	bl	800394c <_fflush_r>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0d9      	beq.n	8002f38 <__swbuf_r+0x2e>
 8002f84:	e7d6      	b.n	8002f34 <__swbuf_r+0x2a>
	...

08002f88 <__swsetup_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <__swsetup_r+0xa8>)
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	460c      	mov	r4, r1
 8002f92:	b118      	cbz	r0, 8002f9c <__swsetup_r+0x14>
 8002f94:	6a03      	ldr	r3, [r0, #32]
 8002f96:	b90b      	cbnz	r3, 8002f9c <__swsetup_r+0x14>
 8002f98:	f7ff fec0 	bl	8002d1c <__sinit>
 8002f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa0:	0719      	lsls	r1, r3, #28
 8002fa2:	d422      	bmi.n	8002fea <__swsetup_r+0x62>
 8002fa4:	06da      	lsls	r2, r3, #27
 8002fa6:	d407      	bmi.n	8002fb8 <__swsetup_r+0x30>
 8002fa8:	2209      	movs	r2, #9
 8002faa:	602a      	str	r2, [r5, #0]
 8002fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb6:	e033      	b.n	8003020 <__swsetup_r+0x98>
 8002fb8:	0758      	lsls	r0, r3, #29
 8002fba:	d512      	bpl.n	8002fe2 <__swsetup_r+0x5a>
 8002fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fbe:	b141      	cbz	r1, 8002fd2 <__swsetup_r+0x4a>
 8002fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fc4:	4299      	cmp	r1, r3
 8002fc6:	d002      	beq.n	8002fce <__swsetup_r+0x46>
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f000 f90b 	bl	80031e4 <_free_r>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6063      	str	r3, [r4, #4]
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	f043 0308 	orr.w	r3, r3, #8
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	6923      	ldr	r3, [r4, #16]
 8002fec:	b94b      	cbnz	r3, 8003002 <__swsetup_r+0x7a>
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff8:	d003      	beq.n	8003002 <__swsetup_r+0x7a>
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 fd05 	bl	8003a0c <__smakebuf_r>
 8003002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003006:	f013 0201 	ands.w	r2, r3, #1
 800300a:	d00a      	beq.n	8003022 <__swsetup_r+0x9a>
 800300c:	2200      	movs	r2, #0
 800300e:	60a2      	str	r2, [r4, #8]
 8003010:	6962      	ldr	r2, [r4, #20]
 8003012:	4252      	negs	r2, r2
 8003014:	61a2      	str	r2, [r4, #24]
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	b942      	cbnz	r2, 800302c <__swsetup_r+0xa4>
 800301a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800301e:	d1c5      	bne.n	8002fac <__swsetup_r+0x24>
 8003020:	bd38      	pop	{r3, r4, r5, pc}
 8003022:	0799      	lsls	r1, r3, #30
 8003024:	bf58      	it	pl
 8003026:	6962      	ldrpl	r2, [r4, #20]
 8003028:	60a2      	str	r2, [r4, #8]
 800302a:	e7f4      	b.n	8003016 <__swsetup_r+0x8e>
 800302c:	2000      	movs	r0, #0
 800302e:	e7f7      	b.n	8003020 <__swsetup_r+0x98>
 8003030:	20000034 	.word	0x20000034

08003034 <memset>:
 8003034:	4402      	add	r2, r0
 8003036:	4603      	mov	r3, r0
 8003038:	4293      	cmp	r3, r2
 800303a:	d100      	bne.n	800303e <memset+0xa>
 800303c:	4770      	bx	lr
 800303e:	f803 1b01 	strb.w	r1, [r3], #1
 8003042:	e7f9      	b.n	8003038 <memset+0x4>

08003044 <time>:
 8003044:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003046:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <time+0x34>)
 8003048:	f04f 36ff 	mov.w	r6, #4294967295
 800304c:	f04f 37ff 	mov.w	r7, #4294967295
 8003050:	4669      	mov	r1, sp
 8003052:	4604      	mov	r4, r0
 8003054:	2200      	movs	r2, #0
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	e9cd 6700 	strd	r6, r7, [sp]
 800305c:	f000 f81e 	bl	800309c <_gettimeofday_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	bfb8      	it	lt
 8003064:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800306c:	b10c      	cbz	r4, 8003072 <time+0x2e>
 800306e:	e9c4 0100 	strd	r0, r1, [r4]
 8003072:	b004      	add	sp, #16
 8003074:	bdd0      	pop	{r4, r6, r7, pc}
 8003076:	bf00      	nop
 8003078:	20000034 	.word	0x20000034

0800307c <_close_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4d06      	ldr	r5, [pc, #24]	@ (8003098 <_close_r+0x1c>)
 8003080:	2300      	movs	r3, #0
 8003082:	4604      	mov	r4, r0
 8003084:	4608      	mov	r0, r1
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	f7fd fed5 	bl	8000e36 <_close>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d102      	bne.n	8003096 <_close_r+0x1a>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	b103      	cbz	r3, 8003096 <_close_r+0x1a>
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	2000027c 	.word	0x2000027c

0800309c <_gettimeofday_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4d07      	ldr	r5, [pc, #28]	@ (80030bc <_gettimeofday_r+0x20>)
 80030a0:	2300      	movs	r3, #0
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	602b      	str	r3, [r5, #0]
 80030aa:	f000 fef7 	bl	8003e9c <_gettimeofday>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d102      	bne.n	80030b8 <_gettimeofday_r+0x1c>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	b103      	cbz	r3, 80030b8 <_gettimeofday_r+0x1c>
 80030b6:	6023      	str	r3, [r4, #0]
 80030b8:	bd38      	pop	{r3, r4, r5, pc}
 80030ba:	bf00      	nop
 80030bc:	2000027c 	.word	0x2000027c

080030c0 <_lseek_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4d07      	ldr	r5, [pc, #28]	@ (80030e0 <_lseek_r+0x20>)
 80030c4:	4604      	mov	r4, r0
 80030c6:	4608      	mov	r0, r1
 80030c8:	4611      	mov	r1, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	602a      	str	r2, [r5, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f7fd fed8 	bl	8000e84 <_lseek>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d102      	bne.n	80030de <_lseek_r+0x1e>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	b103      	cbz	r3, 80030de <_lseek_r+0x1e>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	2000027c 	.word	0x2000027c

080030e4 <_read_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4d07      	ldr	r5, [pc, #28]	@ (8003104 <_read_r+0x20>)
 80030e8:	4604      	mov	r4, r0
 80030ea:	4608      	mov	r0, r1
 80030ec:	4611      	mov	r1, r2
 80030ee:	2200      	movs	r2, #0
 80030f0:	602a      	str	r2, [r5, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f7fd fe66 	bl	8000dc4 <_read>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d102      	bne.n	8003102 <_read_r+0x1e>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	b103      	cbz	r3, 8003102 <_read_r+0x1e>
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	2000027c 	.word	0x2000027c

08003108 <_sbrk_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4d06      	ldr	r5, [pc, #24]	@ (8003124 <_sbrk_r+0x1c>)
 800310c:	2300      	movs	r3, #0
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	602b      	str	r3, [r5, #0]
 8003114:	f7fd fec4 	bl	8000ea0 <_sbrk>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_sbrk_r+0x1a>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_sbrk_r+0x1a>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	2000027c 	.word	0x2000027c

08003128 <_write_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4d07      	ldr	r5, [pc, #28]	@ (8003148 <_write_r+0x20>)
 800312c:	4604      	mov	r4, r0
 800312e:	4608      	mov	r0, r1
 8003130:	4611      	mov	r1, r2
 8003132:	2200      	movs	r2, #0
 8003134:	602a      	str	r2, [r5, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd fe61 	bl	8000dfe <_write>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_write_r+0x1e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_write_r+0x1e>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	2000027c 	.word	0x2000027c

0800314c <__errno>:
 800314c:	4b01      	ldr	r3, [pc, #4]	@ (8003154 <__errno+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000034 	.word	0x20000034

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4d0d      	ldr	r5, [pc, #52]	@ (8003190 <__libc_init_array+0x38>)
 800315c:	4c0d      	ldr	r4, [pc, #52]	@ (8003194 <__libc_init_array+0x3c>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	2600      	movs	r6, #0
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	4d0b      	ldr	r5, [pc, #44]	@ (8003198 <__libc_init_array+0x40>)
 800316a:	4c0c      	ldr	r4, [pc, #48]	@ (800319c <__libc_init_array+0x44>)
 800316c:	f000 fe9e 	bl	8003eac <_init>
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	2600      	movs	r6, #0
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	f855 3b04 	ldr.w	r3, [r5], #4
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	08004104 	.word	0x08004104
 8003194:	08004104 	.word	0x08004104
 8003198:	08004104 	.word	0x08004104
 800319c:	08004108 	.word	0x08004108

080031a0 <__retarget_lock_init_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_acquire_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <__retarget_lock_release_recursive>:
 80031a4:	4770      	bx	lr
	...

080031a8 <__assert_func>:
 80031a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031aa:	4614      	mov	r4, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <__assert_func+0x2c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4605      	mov	r5, r0
 80031b4:	68d8      	ldr	r0, [r3, #12]
 80031b6:	b954      	cbnz	r4, 80031ce <__assert_func+0x26>
 80031b8:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <__assert_func+0x30>)
 80031ba:	461c      	mov	r4, r3
 80031bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80031c0:	9100      	str	r1, [sp, #0]
 80031c2:	462b      	mov	r3, r5
 80031c4:	4905      	ldr	r1, [pc, #20]	@ (80031dc <__assert_func+0x34>)
 80031c6:	f000 fbe9 	bl	800399c <fiprintf>
 80031ca:	f000 fca5 	bl	8003b18 <abort>
 80031ce:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <__assert_func+0x38>)
 80031d0:	e7f4      	b.n	80031bc <__assert_func+0x14>
 80031d2:	bf00      	nop
 80031d4:	20000034 	.word	0x20000034
 80031d8:	080040c5 	.word	0x080040c5
 80031dc:	08004097 	.word	0x08004097
 80031e0:	0800408a 	.word	0x0800408a

080031e4 <_free_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4605      	mov	r5, r0
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d041      	beq.n	8003270 <_free_r+0x8c>
 80031ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f0:	1f0c      	subs	r4, r1, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfb8      	it	lt
 80031f6:	18e4      	addlt	r4, r4, r3
 80031f8:	f7ff fc8c 	bl	8002b14 <__malloc_lock>
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <_free_r+0x90>)
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	b933      	cbnz	r3, 8003210 <_free_r+0x2c>
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	6014      	str	r4, [r2, #0]
 8003206:	4628      	mov	r0, r5
 8003208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800320c:	f7ff bc88 	b.w	8002b20 <__malloc_unlock>
 8003210:	42a3      	cmp	r3, r4
 8003212:	d908      	bls.n	8003226 <_free_r+0x42>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	1821      	adds	r1, r4, r0
 8003218:	428b      	cmp	r3, r1
 800321a:	bf01      	itttt	eq
 800321c:	6819      	ldreq	r1, [r3, #0]
 800321e:	685b      	ldreq	r3, [r3, #4]
 8003220:	1809      	addeq	r1, r1, r0
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	e7ed      	b.n	8003202 <_free_r+0x1e>
 8003226:	461a      	mov	r2, r3
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b10b      	cbz	r3, 8003230 <_free_r+0x4c>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d9fa      	bls.n	8003226 <_free_r+0x42>
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	1850      	adds	r0, r2, r1
 8003234:	42a0      	cmp	r0, r4
 8003236:	d10b      	bne.n	8003250 <_free_r+0x6c>
 8003238:	6820      	ldr	r0, [r4, #0]
 800323a:	4401      	add	r1, r0
 800323c:	1850      	adds	r0, r2, r1
 800323e:	4283      	cmp	r3, r0
 8003240:	6011      	str	r1, [r2, #0]
 8003242:	d1e0      	bne.n	8003206 <_free_r+0x22>
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	6053      	str	r3, [r2, #4]
 800324a:	4408      	add	r0, r1
 800324c:	6010      	str	r0, [r2, #0]
 800324e:	e7da      	b.n	8003206 <_free_r+0x22>
 8003250:	d902      	bls.n	8003258 <_free_r+0x74>
 8003252:	230c      	movs	r3, #12
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	e7d6      	b.n	8003206 <_free_r+0x22>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf04      	itt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	6063      	str	r3, [r4, #4]
 8003266:	bf04      	itt	eq
 8003268:	1809      	addeq	r1, r1, r0
 800326a:	6021      	streq	r1, [r4, #0]
 800326c:	6054      	str	r4, [r2, #4]
 800326e:	e7ca      	b.n	8003206 <_free_r+0x22>
 8003270:	bd38      	pop	{r3, r4, r5, pc}
 8003272:	bf00      	nop
 8003274:	2000013c 	.word	0x2000013c

08003278 <__ssputs_r>:
 8003278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800327c:	688e      	ldr	r6, [r1, #8]
 800327e:	461f      	mov	r7, r3
 8003280:	42be      	cmp	r6, r7
 8003282:	680b      	ldr	r3, [r1, #0]
 8003284:	4682      	mov	sl, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4690      	mov	r8, r2
 800328a:	d82d      	bhi.n	80032e8 <__ssputs_r+0x70>
 800328c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003290:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003294:	d026      	beq.n	80032e4 <__ssputs_r+0x6c>
 8003296:	6965      	ldr	r5, [r4, #20]
 8003298:	6909      	ldr	r1, [r1, #16]
 800329a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800329e:	eba3 0901 	sub.w	r9, r3, r1
 80032a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a6:	1c7b      	adds	r3, r7, #1
 80032a8:	444b      	add	r3, r9
 80032aa:	106d      	asrs	r5, r5, #1
 80032ac:	429d      	cmp	r5, r3
 80032ae:	bf38      	it	cc
 80032b0:	461d      	movcc	r5, r3
 80032b2:	0553      	lsls	r3, r2, #21
 80032b4:	d527      	bpl.n	8003306 <__ssputs_r+0x8e>
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7ff fbac 	bl	8002a14 <_malloc_r>
 80032bc:	4606      	mov	r6, r0
 80032be:	b360      	cbz	r0, 800331a <__ssputs_r+0xa2>
 80032c0:	6921      	ldr	r1, [r4, #16]
 80032c2:	464a      	mov	r2, r9
 80032c4:	f000 fc1a 	bl	8003afc <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	6165      	str	r5, [r4, #20]
 80032d8:	444e      	add	r6, r9
 80032da:	eba5 0509 	sub.w	r5, r5, r9
 80032de:	6026      	str	r6, [r4, #0]
 80032e0:	60a5      	str	r5, [r4, #8]
 80032e2:	463e      	mov	r6, r7
 80032e4:	42be      	cmp	r6, r7
 80032e6:	d900      	bls.n	80032ea <__ssputs_r+0x72>
 80032e8:	463e      	mov	r6, r7
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	4632      	mov	r2, r6
 80032ee:	4641      	mov	r1, r8
 80032f0:	f000 fbc8 	bl	8003a84 <memmove>
 80032f4:	68a3      	ldr	r3, [r4, #8]
 80032f6:	1b9b      	subs	r3, r3, r6
 80032f8:	60a3      	str	r3, [r4, #8]
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	4433      	add	r3, r6
 80032fe:	6023      	str	r3, [r4, #0]
 8003300:	2000      	movs	r0, #0
 8003302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003306:	462a      	mov	r2, r5
 8003308:	f000 fc0d 	bl	8003b26 <_realloc_r>
 800330c:	4606      	mov	r6, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d1e0      	bne.n	80032d4 <__ssputs_r+0x5c>
 8003312:	6921      	ldr	r1, [r4, #16]
 8003314:	4650      	mov	r0, sl
 8003316:	f7ff ff65 	bl	80031e4 <_free_r>
 800331a:	230c      	movs	r3, #12
 800331c:	f8ca 3000 	str.w	r3, [sl]
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	e7e9      	b.n	8003302 <__ssputs_r+0x8a>
	...

08003330 <_svfiprintf_r>:
 8003330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003334:	4698      	mov	r8, r3
 8003336:	898b      	ldrh	r3, [r1, #12]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	b09d      	sub	sp, #116	@ 0x74
 800333c:	4607      	mov	r7, r0
 800333e:	460d      	mov	r5, r1
 8003340:	4614      	mov	r4, r2
 8003342:	d510      	bpl.n	8003366 <_svfiprintf_r+0x36>
 8003344:	690b      	ldr	r3, [r1, #16]
 8003346:	b973      	cbnz	r3, 8003366 <_svfiprintf_r+0x36>
 8003348:	2140      	movs	r1, #64	@ 0x40
 800334a:	f7ff fb63 	bl	8002a14 <_malloc_r>
 800334e:	6028      	str	r0, [r5, #0]
 8003350:	6128      	str	r0, [r5, #16]
 8003352:	b930      	cbnz	r0, 8003362 <_svfiprintf_r+0x32>
 8003354:	230c      	movs	r3, #12
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	b01d      	add	sp, #116	@ 0x74
 800335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003362:	2340      	movs	r3, #64	@ 0x40
 8003364:	616b      	str	r3, [r5, #20]
 8003366:	2300      	movs	r3, #0
 8003368:	9309      	str	r3, [sp, #36]	@ 0x24
 800336a:	2320      	movs	r3, #32
 800336c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003370:	f8cd 800c 	str.w	r8, [sp, #12]
 8003374:	2330      	movs	r3, #48	@ 0x30
 8003376:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003514 <_svfiprintf_r+0x1e4>
 800337a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800337e:	f04f 0901 	mov.w	r9, #1
 8003382:	4623      	mov	r3, r4
 8003384:	469a      	mov	sl, r3
 8003386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338a:	b10a      	cbz	r2, 8003390 <_svfiprintf_r+0x60>
 800338c:	2a25      	cmp	r2, #37	@ 0x25
 800338e:	d1f9      	bne.n	8003384 <_svfiprintf_r+0x54>
 8003390:	ebba 0b04 	subs.w	fp, sl, r4
 8003394:	d00b      	beq.n	80033ae <_svfiprintf_r+0x7e>
 8003396:	465b      	mov	r3, fp
 8003398:	4622      	mov	r2, r4
 800339a:	4629      	mov	r1, r5
 800339c:	4638      	mov	r0, r7
 800339e:	f7ff ff6b 	bl	8003278 <__ssputs_r>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 80a7 	beq.w	80034f6 <_svfiprintf_r+0x1c6>
 80033a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033aa:	445a      	add	r2, fp
 80033ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80033ae:	f89a 3000 	ldrb.w	r3, [sl]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 809f 	beq.w	80034f6 <_svfiprintf_r+0x1c6>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c2:	f10a 0a01 	add.w	sl, sl, #1
 80033c6:	9304      	str	r3, [sp, #16]
 80033c8:	9307      	str	r3, [sp, #28]
 80033ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80033d0:	4654      	mov	r4, sl
 80033d2:	2205      	movs	r2, #5
 80033d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d8:	484e      	ldr	r0, [pc, #312]	@ (8003514 <_svfiprintf_r+0x1e4>)
 80033da:	f7fc ff01 	bl	80001e0 <memchr>
 80033de:	9a04      	ldr	r2, [sp, #16]
 80033e0:	b9d8      	cbnz	r0, 800341a <_svfiprintf_r+0xea>
 80033e2:	06d0      	lsls	r0, r2, #27
 80033e4:	bf44      	itt	mi
 80033e6:	2320      	movmi	r3, #32
 80033e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ec:	0711      	lsls	r1, r2, #28
 80033ee:	bf44      	itt	mi
 80033f0:	232b      	movmi	r3, #43	@ 0x2b
 80033f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f6:	f89a 3000 	ldrb.w	r3, [sl]
 80033fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80033fc:	d015      	beq.n	800342a <_svfiprintf_r+0xfa>
 80033fe:	9a07      	ldr	r2, [sp, #28]
 8003400:	4654      	mov	r4, sl
 8003402:	2000      	movs	r0, #0
 8003404:	f04f 0c0a 	mov.w	ip, #10
 8003408:	4621      	mov	r1, r4
 800340a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340e:	3b30      	subs	r3, #48	@ 0x30
 8003410:	2b09      	cmp	r3, #9
 8003412:	d94b      	bls.n	80034ac <_svfiprintf_r+0x17c>
 8003414:	b1b0      	cbz	r0, 8003444 <_svfiprintf_r+0x114>
 8003416:	9207      	str	r2, [sp, #28]
 8003418:	e014      	b.n	8003444 <_svfiprintf_r+0x114>
 800341a:	eba0 0308 	sub.w	r3, r0, r8
 800341e:	fa09 f303 	lsl.w	r3, r9, r3
 8003422:	4313      	orrs	r3, r2
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	46a2      	mov	sl, r4
 8003428:	e7d2      	b.n	80033d0 <_svfiprintf_r+0xa0>
 800342a:	9b03      	ldr	r3, [sp, #12]
 800342c:	1d19      	adds	r1, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9103      	str	r1, [sp, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfbb      	ittet	lt
 8003436:	425b      	neglt	r3, r3
 8003438:	f042 0202 	orrlt.w	r2, r2, #2
 800343c:	9307      	strge	r3, [sp, #28]
 800343e:	9307      	strlt	r3, [sp, #28]
 8003440:	bfb8      	it	lt
 8003442:	9204      	strlt	r2, [sp, #16]
 8003444:	7823      	ldrb	r3, [r4, #0]
 8003446:	2b2e      	cmp	r3, #46	@ 0x2e
 8003448:	d10a      	bne.n	8003460 <_svfiprintf_r+0x130>
 800344a:	7863      	ldrb	r3, [r4, #1]
 800344c:	2b2a      	cmp	r3, #42	@ 0x2a
 800344e:	d132      	bne.n	80034b6 <_svfiprintf_r+0x186>
 8003450:	9b03      	ldr	r3, [sp, #12]
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	9203      	str	r2, [sp, #12]
 8003458:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800345c:	3402      	adds	r4, #2
 800345e:	9305      	str	r3, [sp, #20]
 8003460:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003524 <_svfiprintf_r+0x1f4>
 8003464:	7821      	ldrb	r1, [r4, #0]
 8003466:	2203      	movs	r2, #3
 8003468:	4650      	mov	r0, sl
 800346a:	f7fc feb9 	bl	80001e0 <memchr>
 800346e:	b138      	cbz	r0, 8003480 <_svfiprintf_r+0x150>
 8003470:	9b04      	ldr	r3, [sp, #16]
 8003472:	eba0 000a 	sub.w	r0, r0, sl
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	4082      	lsls	r2, r0
 800347a:	4313      	orrs	r3, r2
 800347c:	3401      	adds	r4, #1
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003484:	4824      	ldr	r0, [pc, #144]	@ (8003518 <_svfiprintf_r+0x1e8>)
 8003486:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800348a:	2206      	movs	r2, #6
 800348c:	f7fc fea8 	bl	80001e0 <memchr>
 8003490:	2800      	cmp	r0, #0
 8003492:	d036      	beq.n	8003502 <_svfiprintf_r+0x1d2>
 8003494:	4b21      	ldr	r3, [pc, #132]	@ (800351c <_svfiprintf_r+0x1ec>)
 8003496:	bb1b      	cbnz	r3, 80034e0 <_svfiprintf_r+0x1b0>
 8003498:	9b03      	ldr	r3, [sp, #12]
 800349a:	3307      	adds	r3, #7
 800349c:	f023 0307 	bic.w	r3, r3, #7
 80034a0:	3308      	adds	r3, #8
 80034a2:	9303      	str	r3, [sp, #12]
 80034a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034a6:	4433      	add	r3, r6
 80034a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034aa:	e76a      	b.n	8003382 <_svfiprintf_r+0x52>
 80034ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b0:	460c      	mov	r4, r1
 80034b2:	2001      	movs	r0, #1
 80034b4:	e7a8      	b.n	8003408 <_svfiprintf_r+0xd8>
 80034b6:	2300      	movs	r3, #0
 80034b8:	3401      	adds	r4, #1
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	4619      	mov	r1, r3
 80034be:	f04f 0c0a 	mov.w	ip, #10
 80034c2:	4620      	mov	r0, r4
 80034c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c8:	3a30      	subs	r2, #48	@ 0x30
 80034ca:	2a09      	cmp	r2, #9
 80034cc:	d903      	bls.n	80034d6 <_svfiprintf_r+0x1a6>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0c6      	beq.n	8003460 <_svfiprintf_r+0x130>
 80034d2:	9105      	str	r1, [sp, #20]
 80034d4:	e7c4      	b.n	8003460 <_svfiprintf_r+0x130>
 80034d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80034da:	4604      	mov	r4, r0
 80034dc:	2301      	movs	r3, #1
 80034de:	e7f0      	b.n	80034c2 <_svfiprintf_r+0x192>
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	462a      	mov	r2, r5
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <_svfiprintf_r+0x1f0>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	4638      	mov	r0, r7
 80034ec:	f3af 8000 	nop.w
 80034f0:	1c42      	adds	r2, r0, #1
 80034f2:	4606      	mov	r6, r0
 80034f4:	d1d6      	bne.n	80034a4 <_svfiprintf_r+0x174>
 80034f6:	89ab      	ldrh	r3, [r5, #12]
 80034f8:	065b      	lsls	r3, r3, #25
 80034fa:	f53f af2d 	bmi.w	8003358 <_svfiprintf_r+0x28>
 80034fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003500:	e72c      	b.n	800335c <_svfiprintf_r+0x2c>
 8003502:	ab03      	add	r3, sp, #12
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462a      	mov	r2, r5
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <_svfiprintf_r+0x1f0>)
 800350a:	a904      	add	r1, sp, #16
 800350c:	4638      	mov	r0, r7
 800350e:	f000 f879 	bl	8003604 <_printf_i>
 8003512:	e7ed      	b.n	80034f0 <_svfiprintf_r+0x1c0>
 8003514:	080040c6 	.word	0x080040c6
 8003518:	080040d0 	.word	0x080040d0
 800351c:	00000000 	.word	0x00000000
 8003520:	08003279 	.word	0x08003279
 8003524:	080040cc 	.word	0x080040cc

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4616      	mov	r6, r2
 800352e:	4698      	mov	r8, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003538:	4293      	cmp	r3, r2
 800353a:	bfb8      	it	lt
 800353c:	4613      	movlt	r3, r2
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003544:	4607      	mov	r7, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b10a      	cbz	r2, 800354e <_printf_common+0x26>
 800354a:	3301      	adds	r3, #1
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	0699      	lsls	r1, r3, #26
 8003552:	bf42      	ittt	mi
 8003554:	6833      	ldrmi	r3, [r6, #0]
 8003556:	3302      	addmi	r3, #2
 8003558:	6033      	strmi	r3, [r6, #0]
 800355a:	6825      	ldr	r5, [r4, #0]
 800355c:	f015 0506 	ands.w	r5, r5, #6
 8003560:	d106      	bne.n	8003570 <_printf_common+0x48>
 8003562:	f104 0a19 	add.w	sl, r4, #25
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	42ab      	cmp	r3, r5
 800356e:	dc26      	bgt.n	80035be <_printf_common+0x96>
 8003570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	3b00      	subs	r3, #0
 8003578:	bf18      	it	ne
 800357a:	2301      	movne	r3, #1
 800357c:	0692      	lsls	r2, r2, #26
 800357e:	d42b      	bmi.n	80035d8 <_printf_common+0xb0>
 8003580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003584:	4641      	mov	r1, r8
 8003586:	4638      	mov	r0, r7
 8003588:	47c8      	blx	r9
 800358a:	3001      	adds	r0, #1
 800358c:	d01e      	beq.n	80035cc <_printf_common+0xa4>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	6922      	ldr	r2, [r4, #16]
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf02      	ittt	eq
 800359a:	68e5      	ldreq	r5, [r4, #12]
 800359c:	6833      	ldreq	r3, [r6, #0]
 800359e:	1aed      	subeq	r5, r5, r3
 80035a0:	68a3      	ldr	r3, [r4, #8]
 80035a2:	bf0c      	ite	eq
 80035a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a8:	2500      	movne	r5, #0
 80035aa:	4293      	cmp	r3, r2
 80035ac:	bfc4      	itt	gt
 80035ae:	1a9b      	subgt	r3, r3, r2
 80035b0:	18ed      	addgt	r5, r5, r3
 80035b2:	2600      	movs	r6, #0
 80035b4:	341a      	adds	r4, #26
 80035b6:	42b5      	cmp	r5, r6
 80035b8:	d11a      	bne.n	80035f0 <_printf_common+0xc8>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e008      	b.n	80035d0 <_printf_common+0xa8>
 80035be:	2301      	movs	r3, #1
 80035c0:	4652      	mov	r2, sl
 80035c2:	4641      	mov	r1, r8
 80035c4:	4638      	mov	r0, r7
 80035c6:	47c8      	blx	r9
 80035c8:	3001      	adds	r0, #1
 80035ca:	d103      	bne.n	80035d4 <_printf_common+0xac>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	3501      	adds	r5, #1
 80035d6:	e7c6      	b.n	8003566 <_printf_common+0x3e>
 80035d8:	18e1      	adds	r1, r4, r3
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	2030      	movs	r0, #48	@ 0x30
 80035de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035e2:	4422      	add	r2, r4
 80035e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035ec:	3302      	adds	r3, #2
 80035ee:	e7c7      	b.n	8003580 <_printf_common+0x58>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4622      	mov	r2, r4
 80035f4:	4641      	mov	r1, r8
 80035f6:	4638      	mov	r0, r7
 80035f8:	47c8      	blx	r9
 80035fa:	3001      	adds	r0, #1
 80035fc:	d0e6      	beq.n	80035cc <_printf_common+0xa4>
 80035fe:	3601      	adds	r6, #1
 8003600:	e7d9      	b.n	80035b6 <_printf_common+0x8e>
	...

08003604 <_printf_i>:
 8003604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	7e0f      	ldrb	r7, [r1, #24]
 800360a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800360c:	2f78      	cmp	r7, #120	@ 0x78
 800360e:	4691      	mov	r9, r2
 8003610:	4680      	mov	r8, r0
 8003612:	460c      	mov	r4, r1
 8003614:	469a      	mov	sl, r3
 8003616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800361a:	d807      	bhi.n	800362c <_printf_i+0x28>
 800361c:	2f62      	cmp	r7, #98	@ 0x62
 800361e:	d80a      	bhi.n	8003636 <_printf_i+0x32>
 8003620:	2f00      	cmp	r7, #0
 8003622:	f000 80d2 	beq.w	80037ca <_printf_i+0x1c6>
 8003626:	2f58      	cmp	r7, #88	@ 0x58
 8003628:	f000 80b9 	beq.w	800379e <_printf_i+0x19a>
 800362c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003634:	e03a      	b.n	80036ac <_printf_i+0xa8>
 8003636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800363a:	2b15      	cmp	r3, #21
 800363c:	d8f6      	bhi.n	800362c <_printf_i+0x28>
 800363e:	a101      	add	r1, pc, #4	@ (adr r1, 8003644 <_printf_i+0x40>)
 8003640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003644:	0800369d 	.word	0x0800369d
 8003648:	080036b1 	.word	0x080036b1
 800364c:	0800362d 	.word	0x0800362d
 8003650:	0800362d 	.word	0x0800362d
 8003654:	0800362d 	.word	0x0800362d
 8003658:	0800362d 	.word	0x0800362d
 800365c:	080036b1 	.word	0x080036b1
 8003660:	0800362d 	.word	0x0800362d
 8003664:	0800362d 	.word	0x0800362d
 8003668:	0800362d 	.word	0x0800362d
 800366c:	0800362d 	.word	0x0800362d
 8003670:	080037b1 	.word	0x080037b1
 8003674:	080036db 	.word	0x080036db
 8003678:	0800376b 	.word	0x0800376b
 800367c:	0800362d 	.word	0x0800362d
 8003680:	0800362d 	.word	0x0800362d
 8003684:	080037d3 	.word	0x080037d3
 8003688:	0800362d 	.word	0x0800362d
 800368c:	080036db 	.word	0x080036db
 8003690:	0800362d 	.word	0x0800362d
 8003694:	0800362d 	.word	0x0800362d
 8003698:	08003773 	.word	0x08003773
 800369c:	6833      	ldr	r3, [r6, #0]
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6032      	str	r2, [r6, #0]
 80036a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036ac:	2301      	movs	r3, #1
 80036ae:	e09d      	b.n	80037ec <_printf_i+0x1e8>
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	1d19      	adds	r1, r3, #4
 80036b6:	6031      	str	r1, [r6, #0]
 80036b8:	0606      	lsls	r6, r0, #24
 80036ba:	d501      	bpl.n	80036c0 <_printf_i+0xbc>
 80036bc:	681d      	ldr	r5, [r3, #0]
 80036be:	e003      	b.n	80036c8 <_printf_i+0xc4>
 80036c0:	0645      	lsls	r5, r0, #25
 80036c2:	d5fb      	bpl.n	80036bc <_printf_i+0xb8>
 80036c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	da03      	bge.n	80036d4 <_printf_i+0xd0>
 80036cc:	232d      	movs	r3, #45	@ 0x2d
 80036ce:	426d      	negs	r5, r5
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036d4:	4859      	ldr	r0, [pc, #356]	@ (800383c <_printf_i+0x238>)
 80036d6:	230a      	movs	r3, #10
 80036d8:	e011      	b.n	80036fe <_printf_i+0xfa>
 80036da:	6821      	ldr	r1, [r4, #0]
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	0608      	lsls	r0, r1, #24
 80036e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80036e4:	d402      	bmi.n	80036ec <_printf_i+0xe8>
 80036e6:	0649      	lsls	r1, r1, #25
 80036e8:	bf48      	it	mi
 80036ea:	b2ad      	uxthmi	r5, r5
 80036ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80036ee:	4853      	ldr	r0, [pc, #332]	@ (800383c <_printf_i+0x238>)
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	bf14      	ite	ne
 80036f4:	230a      	movne	r3, #10
 80036f6:	2308      	moveq	r3, #8
 80036f8:	2100      	movs	r1, #0
 80036fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036fe:	6866      	ldr	r6, [r4, #4]
 8003700:	60a6      	str	r6, [r4, #8]
 8003702:	2e00      	cmp	r6, #0
 8003704:	bfa2      	ittt	ge
 8003706:	6821      	ldrge	r1, [r4, #0]
 8003708:	f021 0104 	bicge.w	r1, r1, #4
 800370c:	6021      	strge	r1, [r4, #0]
 800370e:	b90d      	cbnz	r5, 8003714 <_printf_i+0x110>
 8003710:	2e00      	cmp	r6, #0
 8003712:	d04b      	beq.n	80037ac <_printf_i+0x1a8>
 8003714:	4616      	mov	r6, r2
 8003716:	fbb5 f1f3 	udiv	r1, r5, r3
 800371a:	fb03 5711 	mls	r7, r3, r1, r5
 800371e:	5dc7      	ldrb	r7, [r0, r7]
 8003720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003724:	462f      	mov	r7, r5
 8003726:	42bb      	cmp	r3, r7
 8003728:	460d      	mov	r5, r1
 800372a:	d9f4      	bls.n	8003716 <_printf_i+0x112>
 800372c:	2b08      	cmp	r3, #8
 800372e:	d10b      	bne.n	8003748 <_printf_i+0x144>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	07df      	lsls	r7, r3, #31
 8003734:	d508      	bpl.n	8003748 <_printf_i+0x144>
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	6861      	ldr	r1, [r4, #4]
 800373a:	4299      	cmp	r1, r3
 800373c:	bfde      	ittt	le
 800373e:	2330      	movle	r3, #48	@ 0x30
 8003740:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003744:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003748:	1b92      	subs	r2, r2, r6
 800374a:	6122      	str	r2, [r4, #16]
 800374c:	f8cd a000 	str.w	sl, [sp]
 8003750:	464b      	mov	r3, r9
 8003752:	aa03      	add	r2, sp, #12
 8003754:	4621      	mov	r1, r4
 8003756:	4640      	mov	r0, r8
 8003758:	f7ff fee6 	bl	8003528 <_printf_common>
 800375c:	3001      	adds	r0, #1
 800375e:	d14a      	bne.n	80037f6 <_printf_i+0x1f2>
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	b004      	add	sp, #16
 8003766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	f043 0320 	orr.w	r3, r3, #32
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	4833      	ldr	r0, [pc, #204]	@ (8003840 <_printf_i+0x23c>)
 8003774:	2778      	movs	r7, #120	@ 0x78
 8003776:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	6831      	ldr	r1, [r6, #0]
 800377e:	061f      	lsls	r7, r3, #24
 8003780:	f851 5b04 	ldr.w	r5, [r1], #4
 8003784:	d402      	bmi.n	800378c <_printf_i+0x188>
 8003786:	065f      	lsls	r7, r3, #25
 8003788:	bf48      	it	mi
 800378a:	b2ad      	uxthmi	r5, r5
 800378c:	6031      	str	r1, [r6, #0]
 800378e:	07d9      	lsls	r1, r3, #31
 8003790:	bf44      	itt	mi
 8003792:	f043 0320 	orrmi.w	r3, r3, #32
 8003796:	6023      	strmi	r3, [r4, #0]
 8003798:	b11d      	cbz	r5, 80037a2 <_printf_i+0x19e>
 800379a:	2310      	movs	r3, #16
 800379c:	e7ac      	b.n	80036f8 <_printf_i+0xf4>
 800379e:	4827      	ldr	r0, [pc, #156]	@ (800383c <_printf_i+0x238>)
 80037a0:	e7e9      	b.n	8003776 <_printf_i+0x172>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	f023 0320 	bic.w	r3, r3, #32
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	e7f6      	b.n	800379a <_printf_i+0x196>
 80037ac:	4616      	mov	r6, r2
 80037ae:	e7bd      	b.n	800372c <_printf_i+0x128>
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	6825      	ldr	r5, [r4, #0]
 80037b4:	6961      	ldr	r1, [r4, #20]
 80037b6:	1d18      	adds	r0, r3, #4
 80037b8:	6030      	str	r0, [r6, #0]
 80037ba:	062e      	lsls	r6, r5, #24
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	d501      	bpl.n	80037c4 <_printf_i+0x1c0>
 80037c0:	6019      	str	r1, [r3, #0]
 80037c2:	e002      	b.n	80037ca <_printf_i+0x1c6>
 80037c4:	0668      	lsls	r0, r5, #25
 80037c6:	d5fb      	bpl.n	80037c0 <_printf_i+0x1bc>
 80037c8:	8019      	strh	r1, [r3, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	6123      	str	r3, [r4, #16]
 80037ce:	4616      	mov	r6, r2
 80037d0:	e7bc      	b.n	800374c <_printf_i+0x148>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	1d1a      	adds	r2, r3, #4
 80037d6:	6032      	str	r2, [r6, #0]
 80037d8:	681e      	ldr	r6, [r3, #0]
 80037da:	6862      	ldr	r2, [r4, #4]
 80037dc:	2100      	movs	r1, #0
 80037de:	4630      	mov	r0, r6
 80037e0:	f7fc fcfe 	bl	80001e0 <memchr>
 80037e4:	b108      	cbz	r0, 80037ea <_printf_i+0x1e6>
 80037e6:	1b80      	subs	r0, r0, r6
 80037e8:	6060      	str	r0, [r4, #4]
 80037ea:	6863      	ldr	r3, [r4, #4]
 80037ec:	6123      	str	r3, [r4, #16]
 80037ee:	2300      	movs	r3, #0
 80037f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037f4:	e7aa      	b.n	800374c <_printf_i+0x148>
 80037f6:	6923      	ldr	r3, [r4, #16]
 80037f8:	4632      	mov	r2, r6
 80037fa:	4649      	mov	r1, r9
 80037fc:	4640      	mov	r0, r8
 80037fe:	47d0      	blx	sl
 8003800:	3001      	adds	r0, #1
 8003802:	d0ad      	beq.n	8003760 <_printf_i+0x15c>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	079b      	lsls	r3, r3, #30
 8003808:	d413      	bmi.n	8003832 <_printf_i+0x22e>
 800380a:	68e0      	ldr	r0, [r4, #12]
 800380c:	9b03      	ldr	r3, [sp, #12]
 800380e:	4298      	cmp	r0, r3
 8003810:	bfb8      	it	lt
 8003812:	4618      	movlt	r0, r3
 8003814:	e7a6      	b.n	8003764 <_printf_i+0x160>
 8003816:	2301      	movs	r3, #1
 8003818:	4632      	mov	r2, r6
 800381a:	4649      	mov	r1, r9
 800381c:	4640      	mov	r0, r8
 800381e:	47d0      	blx	sl
 8003820:	3001      	adds	r0, #1
 8003822:	d09d      	beq.n	8003760 <_printf_i+0x15c>
 8003824:	3501      	adds	r5, #1
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	9903      	ldr	r1, [sp, #12]
 800382a:	1a5b      	subs	r3, r3, r1
 800382c:	42ab      	cmp	r3, r5
 800382e:	dcf2      	bgt.n	8003816 <_printf_i+0x212>
 8003830:	e7eb      	b.n	800380a <_printf_i+0x206>
 8003832:	2500      	movs	r5, #0
 8003834:	f104 0619 	add.w	r6, r4, #25
 8003838:	e7f5      	b.n	8003826 <_printf_i+0x222>
 800383a:	bf00      	nop
 800383c:	080040d7 	.word	0x080040d7
 8003840:	080040e8 	.word	0x080040e8

08003844 <__sflush_r>:
 8003844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384c:	0716      	lsls	r6, r2, #28
 800384e:	4605      	mov	r5, r0
 8003850:	460c      	mov	r4, r1
 8003852:	d454      	bmi.n	80038fe <__sflush_r+0xba>
 8003854:	684b      	ldr	r3, [r1, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	dc02      	bgt.n	8003860 <__sflush_r+0x1c>
 800385a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	dd48      	ble.n	80038f2 <__sflush_r+0xae>
 8003860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003862:	2e00      	cmp	r6, #0
 8003864:	d045      	beq.n	80038f2 <__sflush_r+0xae>
 8003866:	2300      	movs	r3, #0
 8003868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800386c:	682f      	ldr	r7, [r5, #0]
 800386e:	6a21      	ldr	r1, [r4, #32]
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	d030      	beq.n	80038d6 <__sflush_r+0x92>
 8003874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	0759      	lsls	r1, r3, #29
 800387a:	d505      	bpl.n	8003888 <__sflush_r+0x44>
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	1ad2      	subs	r2, r2, r3
 8003880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003882:	b10b      	cbz	r3, 8003888 <__sflush_r+0x44>
 8003884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003886:	1ad2      	subs	r2, r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800388c:	6a21      	ldr	r1, [r4, #32]
 800388e:	4628      	mov	r0, r5
 8003890:	47b0      	blx	r6
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	d106      	bne.n	80038a6 <__sflush_r+0x62>
 8003898:	6829      	ldr	r1, [r5, #0]
 800389a:	291d      	cmp	r1, #29
 800389c:	d82b      	bhi.n	80038f6 <__sflush_r+0xb2>
 800389e:	4a2a      	ldr	r2, [pc, #168]	@ (8003948 <__sflush_r+0x104>)
 80038a0:	410a      	asrs	r2, r1
 80038a2:	07d6      	lsls	r6, r2, #31
 80038a4:	d427      	bmi.n	80038f6 <__sflush_r+0xb2>
 80038a6:	2200      	movs	r2, #0
 80038a8:	6062      	str	r2, [r4, #4]
 80038aa:	04d9      	lsls	r1, r3, #19
 80038ac:	6922      	ldr	r2, [r4, #16]
 80038ae:	6022      	str	r2, [r4, #0]
 80038b0:	d504      	bpl.n	80038bc <__sflush_r+0x78>
 80038b2:	1c42      	adds	r2, r0, #1
 80038b4:	d101      	bne.n	80038ba <__sflush_r+0x76>
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	b903      	cbnz	r3, 80038bc <__sflush_r+0x78>
 80038ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80038bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038be:	602f      	str	r7, [r5, #0]
 80038c0:	b1b9      	cbz	r1, 80038f2 <__sflush_r+0xae>
 80038c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038c6:	4299      	cmp	r1, r3
 80038c8:	d002      	beq.n	80038d0 <__sflush_r+0x8c>
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7ff fc8a 	bl	80031e4 <_free_r>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80038d4:	e00d      	b.n	80038f2 <__sflush_r+0xae>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4628      	mov	r0, r5
 80038da:	47b0      	blx	r6
 80038dc:	4602      	mov	r2, r0
 80038de:	1c50      	adds	r0, r2, #1
 80038e0:	d1c9      	bne.n	8003876 <__sflush_r+0x32>
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0c6      	beq.n	8003876 <__sflush_r+0x32>
 80038e8:	2b1d      	cmp	r3, #29
 80038ea:	d001      	beq.n	80038f0 <__sflush_r+0xac>
 80038ec:	2b16      	cmp	r3, #22
 80038ee:	d11e      	bne.n	800392e <__sflush_r+0xea>
 80038f0:	602f      	str	r7, [r5, #0]
 80038f2:	2000      	movs	r0, #0
 80038f4:	e022      	b.n	800393c <__sflush_r+0xf8>
 80038f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	e01b      	b.n	8003936 <__sflush_r+0xf2>
 80038fe:	690f      	ldr	r7, [r1, #16]
 8003900:	2f00      	cmp	r7, #0
 8003902:	d0f6      	beq.n	80038f2 <__sflush_r+0xae>
 8003904:	0793      	lsls	r3, r2, #30
 8003906:	680e      	ldr	r6, [r1, #0]
 8003908:	bf08      	it	eq
 800390a:	694b      	ldreq	r3, [r1, #20]
 800390c:	600f      	str	r7, [r1, #0]
 800390e:	bf18      	it	ne
 8003910:	2300      	movne	r3, #0
 8003912:	eba6 0807 	sub.w	r8, r6, r7
 8003916:	608b      	str	r3, [r1, #8]
 8003918:	f1b8 0f00 	cmp.w	r8, #0
 800391c:	dde9      	ble.n	80038f2 <__sflush_r+0xae>
 800391e:	6a21      	ldr	r1, [r4, #32]
 8003920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003922:	4643      	mov	r3, r8
 8003924:	463a      	mov	r2, r7
 8003926:	4628      	mov	r0, r5
 8003928:	47b0      	blx	r6
 800392a:	2800      	cmp	r0, #0
 800392c:	dc08      	bgt.n	8003940 <__sflush_r+0xfc>
 800392e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003940:	4407      	add	r7, r0
 8003942:	eba8 0800 	sub.w	r8, r8, r0
 8003946:	e7e7      	b.n	8003918 <__sflush_r+0xd4>
 8003948:	dfbffffe 	.word	0xdfbffffe

0800394c <_fflush_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	690b      	ldr	r3, [r1, #16]
 8003950:	4605      	mov	r5, r0
 8003952:	460c      	mov	r4, r1
 8003954:	b913      	cbnz	r3, 800395c <_fflush_r+0x10>
 8003956:	2500      	movs	r5, #0
 8003958:	4628      	mov	r0, r5
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	b118      	cbz	r0, 8003966 <_fflush_r+0x1a>
 800395e:	6a03      	ldr	r3, [r0, #32]
 8003960:	b90b      	cbnz	r3, 8003966 <_fflush_r+0x1a>
 8003962:	f7ff f9db 	bl	8002d1c <__sinit>
 8003966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f3      	beq.n	8003956 <_fflush_r+0xa>
 800396e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003970:	07d0      	lsls	r0, r2, #31
 8003972:	d404      	bmi.n	800397e <_fflush_r+0x32>
 8003974:	0599      	lsls	r1, r3, #22
 8003976:	d402      	bmi.n	800397e <_fflush_r+0x32>
 8003978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800397a:	f7ff fc12 	bl	80031a2 <__retarget_lock_acquire_recursive>
 800397e:	4628      	mov	r0, r5
 8003980:	4621      	mov	r1, r4
 8003982:	f7ff ff5f 	bl	8003844 <__sflush_r>
 8003986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003988:	07da      	lsls	r2, r3, #31
 800398a:	4605      	mov	r5, r0
 800398c:	d4e4      	bmi.n	8003958 <_fflush_r+0xc>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	059b      	lsls	r3, r3, #22
 8003992:	d4e1      	bmi.n	8003958 <_fflush_r+0xc>
 8003994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003996:	f7ff fc05 	bl	80031a4 <__retarget_lock_release_recursive>
 800399a:	e7dd      	b.n	8003958 <_fflush_r+0xc>

0800399c <fiprintf>:
 800399c:	b40e      	push	{r1, r2, r3}
 800399e:	b503      	push	{r0, r1, lr}
 80039a0:	4601      	mov	r1, r0
 80039a2:	ab03      	add	r3, sp, #12
 80039a4:	4805      	ldr	r0, [pc, #20]	@ (80039bc <fiprintf+0x20>)
 80039a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	f000 f911 	bl	8003bd4 <_vfiprintf_r>
 80039b2:	b002      	add	sp, #8
 80039b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039b8:	b003      	add	sp, #12
 80039ba:	4770      	bx	lr
 80039bc:	20000034 	.word	0x20000034

080039c0 <__swhatbuf_r>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	460c      	mov	r4, r1
 80039c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c8:	2900      	cmp	r1, #0
 80039ca:	b096      	sub	sp, #88	@ 0x58
 80039cc:	4615      	mov	r5, r2
 80039ce:	461e      	mov	r6, r3
 80039d0:	da0d      	bge.n	80039ee <__swhatbuf_r+0x2e>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	bf14      	ite	ne
 80039de:	2340      	movne	r3, #64	@ 0x40
 80039e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039e4:	2000      	movs	r0, #0
 80039e6:	6031      	str	r1, [r6, #0]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	b016      	add	sp, #88	@ 0x58
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	466a      	mov	r2, sp
 80039f0:	f000 f862 	bl	8003ab8 <_fstat_r>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	dbec      	blt.n	80039d2 <__swhatbuf_r+0x12>
 80039f8:	9901      	ldr	r1, [sp, #4]
 80039fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80039fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a02:	4259      	negs	r1, r3
 8003a04:	4159      	adcs	r1, r3
 8003a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a0a:	e7eb      	b.n	80039e4 <__swhatbuf_r+0x24>

08003a0c <__smakebuf_r>:
 8003a0c:	898b      	ldrh	r3, [r1, #12]
 8003a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a10:	079d      	lsls	r5, r3, #30
 8003a12:	4606      	mov	r6, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	d507      	bpl.n	8003a28 <__smakebuf_r+0x1c>
 8003a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	6123      	str	r3, [r4, #16]
 8003a20:	2301      	movs	r3, #1
 8003a22:	6163      	str	r3, [r4, #20]
 8003a24:	b003      	add	sp, #12
 8003a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a28:	ab01      	add	r3, sp, #4
 8003a2a:	466a      	mov	r2, sp
 8003a2c:	f7ff ffc8 	bl	80039c0 <__swhatbuf_r>
 8003a30:	9f00      	ldr	r7, [sp, #0]
 8003a32:	4605      	mov	r5, r0
 8003a34:	4639      	mov	r1, r7
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7fe ffec 	bl	8002a14 <_malloc_r>
 8003a3c:	b948      	cbnz	r0, 8003a52 <__smakebuf_r+0x46>
 8003a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a42:	059a      	lsls	r2, r3, #22
 8003a44:	d4ee      	bmi.n	8003a24 <__smakebuf_r+0x18>
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	f043 0302 	orr.w	r3, r3, #2
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	e7e2      	b.n	8003a18 <__smakebuf_r+0xc>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	6020      	str	r0, [r4, #0]
 8003a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	9b01      	ldr	r3, [sp, #4]
 8003a5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a62:	b15b      	cbz	r3, 8003a7c <__smakebuf_r+0x70>
 8003a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f000 f837 	bl	8003adc <_isatty_r>
 8003a6e:	b128      	cbz	r0, 8003a7c <__smakebuf_r+0x70>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	89a3      	ldrh	r3, [r4, #12]
 8003a7e:	431d      	orrs	r5, r3
 8003a80:	81a5      	strh	r5, [r4, #12]
 8003a82:	e7cf      	b.n	8003a24 <__smakebuf_r+0x18>

08003a84 <memmove>:
 8003a84:	4288      	cmp	r0, r1
 8003a86:	b510      	push	{r4, lr}
 8003a88:	eb01 0402 	add.w	r4, r1, r2
 8003a8c:	d902      	bls.n	8003a94 <memmove+0x10>
 8003a8e:	4284      	cmp	r4, r0
 8003a90:	4623      	mov	r3, r4
 8003a92:	d807      	bhi.n	8003aa4 <memmove+0x20>
 8003a94:	1e43      	subs	r3, r0, #1
 8003a96:	42a1      	cmp	r1, r4
 8003a98:	d008      	beq.n	8003aac <memmove+0x28>
 8003a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aa2:	e7f8      	b.n	8003a96 <memmove+0x12>
 8003aa4:	4402      	add	r2, r0
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	428a      	cmp	r2, r1
 8003aaa:	d100      	bne.n	8003aae <memmove+0x2a>
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ab6:	e7f7      	b.n	8003aa8 <memmove+0x24>

08003ab8 <_fstat_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4d07      	ldr	r5, [pc, #28]	@ (8003ad8 <_fstat_r+0x20>)
 8003abc:	2300      	movs	r3, #0
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	f7fd f9c2 	bl	8000e4e <_fstat>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d102      	bne.n	8003ad4 <_fstat_r+0x1c>
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	b103      	cbz	r3, 8003ad4 <_fstat_r+0x1c>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000027c 	.word	0x2000027c

08003adc <_isatty_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_isatty_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fd f9c1 	bl	8000e6e <_isatty>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_isatty_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_isatty_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	2000027c 	.word	0x2000027c

08003afc <memcpy>:
 8003afc:	440a      	add	r2, r1
 8003afe:	4291      	cmp	r1, r2
 8003b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b04:	d100      	bne.n	8003b08 <memcpy+0xc>
 8003b06:	4770      	bx	lr
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b12:	4291      	cmp	r1, r2
 8003b14:	d1f9      	bne.n	8003b0a <memcpy+0xe>
 8003b16:	bd10      	pop	{r4, pc}

08003b18 <abort>:
 8003b18:	b508      	push	{r3, lr}
 8003b1a:	2006      	movs	r0, #6
 8003b1c:	f000 f99a 	bl	8003e54 <raise>
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7fd f944 	bl	8000dae <_exit>

08003b26 <_realloc_r>:
 8003b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2a:	4680      	mov	r8, r0
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	460c      	mov	r4, r1
 8003b30:	b921      	cbnz	r1, 8003b3c <_realloc_r+0x16>
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	4611      	mov	r1, r2
 8003b38:	f7fe bf6c 	b.w	8002a14 <_malloc_r>
 8003b3c:	b92a      	cbnz	r2, 8003b4a <_realloc_r+0x24>
 8003b3e:	f7ff fb51 	bl	80031e4 <_free_r>
 8003b42:	2400      	movs	r4, #0
 8003b44:	4620      	mov	r0, r4
 8003b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4a:	f000 f99f 	bl	8003e8c <_malloc_usable_size_r>
 8003b4e:	4285      	cmp	r5, r0
 8003b50:	4606      	mov	r6, r0
 8003b52:	d802      	bhi.n	8003b5a <_realloc_r+0x34>
 8003b54:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b58:	d8f4      	bhi.n	8003b44 <_realloc_r+0x1e>
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	f7fe ff59 	bl	8002a14 <_malloc_r>
 8003b62:	4607      	mov	r7, r0
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d0ec      	beq.n	8003b42 <_realloc_r+0x1c>
 8003b68:	42b5      	cmp	r5, r6
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	bf28      	it	cs
 8003b70:	4632      	movcs	r2, r6
 8003b72:	f7ff ffc3 	bl	8003afc <memcpy>
 8003b76:	4621      	mov	r1, r4
 8003b78:	4640      	mov	r0, r8
 8003b7a:	f7ff fb33 	bl	80031e4 <_free_r>
 8003b7e:	463c      	mov	r4, r7
 8003b80:	e7e0      	b.n	8003b44 <_realloc_r+0x1e>

08003b82 <__sfputc_r>:
 8003b82:	6893      	ldr	r3, [r2, #8]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	b410      	push	{r4}
 8003b8a:	6093      	str	r3, [r2, #8]
 8003b8c:	da08      	bge.n	8003ba0 <__sfputc_r+0x1e>
 8003b8e:	6994      	ldr	r4, [r2, #24]
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	db01      	blt.n	8003b98 <__sfputc_r+0x16>
 8003b94:	290a      	cmp	r1, #10
 8003b96:	d103      	bne.n	8003ba0 <__sfputc_r+0x1e>
 8003b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9c:	f7ff b9b5 	b.w	8002f0a <__swbuf_r>
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	1c58      	adds	r0, r3, #1
 8003ba4:	6010      	str	r0, [r2, #0]
 8003ba6:	7019      	strb	r1, [r3, #0]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <__sfputs_r>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	460f      	mov	r7, r1
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	18d5      	adds	r5, r2, r3
 8003bba:	42ac      	cmp	r4, r5
 8003bbc:	d101      	bne.n	8003bc2 <__sfputs_r+0x12>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e007      	b.n	8003bd2 <__sfputs_r+0x22>
 8003bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc6:	463a      	mov	r2, r7
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f7ff ffda 	bl	8003b82 <__sfputc_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d1f3      	bne.n	8003bba <__sfputs_r+0xa>
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bd4 <_vfiprintf_r>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	460d      	mov	r5, r1
 8003bda:	b09d      	sub	sp, #116	@ 0x74
 8003bdc:	4614      	mov	r4, r2
 8003bde:	4698      	mov	r8, r3
 8003be0:	4606      	mov	r6, r0
 8003be2:	b118      	cbz	r0, 8003bec <_vfiprintf_r+0x18>
 8003be4:	6a03      	ldr	r3, [r0, #32]
 8003be6:	b90b      	cbnz	r3, 8003bec <_vfiprintf_r+0x18>
 8003be8:	f7ff f898 	bl	8002d1c <__sinit>
 8003bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bee:	07d9      	lsls	r1, r3, #31
 8003bf0:	d405      	bmi.n	8003bfe <_vfiprintf_r+0x2a>
 8003bf2:	89ab      	ldrh	r3, [r5, #12]
 8003bf4:	059a      	lsls	r2, r3, #22
 8003bf6:	d402      	bmi.n	8003bfe <_vfiprintf_r+0x2a>
 8003bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bfa:	f7ff fad2 	bl	80031a2 <__retarget_lock_acquire_recursive>
 8003bfe:	89ab      	ldrh	r3, [r5, #12]
 8003c00:	071b      	lsls	r3, r3, #28
 8003c02:	d501      	bpl.n	8003c08 <_vfiprintf_r+0x34>
 8003c04:	692b      	ldr	r3, [r5, #16]
 8003c06:	b99b      	cbnz	r3, 8003c30 <_vfiprintf_r+0x5c>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f7ff f9bc 	bl	8002f88 <__swsetup_r>
 8003c10:	b170      	cbz	r0, 8003c30 <_vfiprintf_r+0x5c>
 8003c12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c14:	07dc      	lsls	r4, r3, #31
 8003c16:	d504      	bpl.n	8003c22 <_vfiprintf_r+0x4e>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	b01d      	add	sp, #116	@ 0x74
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	89ab      	ldrh	r3, [r5, #12]
 8003c24:	0598      	lsls	r0, r3, #22
 8003c26:	d4f7      	bmi.n	8003c18 <_vfiprintf_r+0x44>
 8003c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c2a:	f7ff fabb 	bl	80031a4 <__retarget_lock_release_recursive>
 8003c2e:	e7f3      	b.n	8003c18 <_vfiprintf_r+0x44>
 8003c30:	2300      	movs	r3, #0
 8003c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c34:	2320      	movs	r3, #32
 8003c36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c3e:	2330      	movs	r3, #48	@ 0x30
 8003c40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003df0 <_vfiprintf_r+0x21c>
 8003c44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c48:	f04f 0901 	mov.w	r9, #1
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	469a      	mov	sl, r3
 8003c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c54:	b10a      	cbz	r2, 8003c5a <_vfiprintf_r+0x86>
 8003c56:	2a25      	cmp	r2, #37	@ 0x25
 8003c58:	d1f9      	bne.n	8003c4e <_vfiprintf_r+0x7a>
 8003c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5e:	d00b      	beq.n	8003c78 <_vfiprintf_r+0xa4>
 8003c60:	465b      	mov	r3, fp
 8003c62:	4622      	mov	r2, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff ffa2 	bl	8003bb0 <__sfputs_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f000 80a7 	beq.w	8003dc0 <_vfiprintf_r+0x1ec>
 8003c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c74:	445a      	add	r2, fp
 8003c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c78:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 809f 	beq.w	8003dc0 <_vfiprintf_r+0x1ec>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c8c:	f10a 0a01 	add.w	sl, sl, #1
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	9307      	str	r3, [sp, #28]
 8003c94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c9a:	4654      	mov	r4, sl
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ca2:	4853      	ldr	r0, [pc, #332]	@ (8003df0 <_vfiprintf_r+0x21c>)
 8003ca4:	f7fc fa9c 	bl	80001e0 <memchr>
 8003ca8:	9a04      	ldr	r2, [sp, #16]
 8003caa:	b9d8      	cbnz	r0, 8003ce4 <_vfiprintf_r+0x110>
 8003cac:	06d1      	lsls	r1, r2, #27
 8003cae:	bf44      	itt	mi
 8003cb0:	2320      	movmi	r3, #32
 8003cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb6:	0713      	lsls	r3, r2, #28
 8003cb8:	bf44      	itt	mi
 8003cba:	232b      	movmi	r3, #43	@ 0x2b
 8003cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc6:	d015      	beq.n	8003cf4 <_vfiprintf_r+0x120>
 8003cc8:	9a07      	ldr	r2, [sp, #28]
 8003cca:	4654      	mov	r4, sl
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f04f 0c0a 	mov.w	ip, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd8:	3b30      	subs	r3, #48	@ 0x30
 8003cda:	2b09      	cmp	r3, #9
 8003cdc:	d94b      	bls.n	8003d76 <_vfiprintf_r+0x1a2>
 8003cde:	b1b0      	cbz	r0, 8003d0e <_vfiprintf_r+0x13a>
 8003ce0:	9207      	str	r2, [sp, #28]
 8003ce2:	e014      	b.n	8003d0e <_vfiprintf_r+0x13a>
 8003ce4:	eba0 0308 	sub.w	r3, r0, r8
 8003ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	46a2      	mov	sl, r4
 8003cf2:	e7d2      	b.n	8003c9a <_vfiprintf_r+0xc6>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	1d19      	adds	r1, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	9103      	str	r1, [sp, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bfbb      	ittet	lt
 8003d00:	425b      	neglt	r3, r3
 8003d02:	f042 0202 	orrlt.w	r2, r2, #2
 8003d06:	9307      	strge	r3, [sp, #28]
 8003d08:	9307      	strlt	r3, [sp, #28]
 8003d0a:	bfb8      	it	lt
 8003d0c:	9204      	strlt	r2, [sp, #16]
 8003d0e:	7823      	ldrb	r3, [r4, #0]
 8003d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d12:	d10a      	bne.n	8003d2a <_vfiprintf_r+0x156>
 8003d14:	7863      	ldrb	r3, [r4, #1]
 8003d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d18:	d132      	bne.n	8003d80 <_vfiprintf_r+0x1ac>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	9203      	str	r2, [sp, #12]
 8003d22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d26:	3402      	adds	r4, #2
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e00 <_vfiprintf_r+0x22c>
 8003d2e:	7821      	ldrb	r1, [r4, #0]
 8003d30:	2203      	movs	r2, #3
 8003d32:	4650      	mov	r0, sl
 8003d34:	f7fc fa54 	bl	80001e0 <memchr>
 8003d38:	b138      	cbz	r0, 8003d4a <_vfiprintf_r+0x176>
 8003d3a:	9b04      	ldr	r3, [sp, #16]
 8003d3c:	eba0 000a 	sub.w	r0, r0, sl
 8003d40:	2240      	movs	r2, #64	@ 0x40
 8003d42:	4082      	lsls	r2, r0
 8003d44:	4313      	orrs	r3, r2
 8003d46:	3401      	adds	r4, #1
 8003d48:	9304      	str	r3, [sp, #16]
 8003d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4e:	4829      	ldr	r0, [pc, #164]	@ (8003df4 <_vfiprintf_r+0x220>)
 8003d50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d54:	2206      	movs	r2, #6
 8003d56:	f7fc fa43 	bl	80001e0 <memchr>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d03f      	beq.n	8003dde <_vfiprintf_r+0x20a>
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <_vfiprintf_r+0x224>)
 8003d60:	bb1b      	cbnz	r3, 8003daa <_vfiprintf_r+0x1d6>
 8003d62:	9b03      	ldr	r3, [sp, #12]
 8003d64:	3307      	adds	r3, #7
 8003d66:	f023 0307 	bic.w	r3, r3, #7
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d70:	443b      	add	r3, r7
 8003d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d74:	e76a      	b.n	8003c4c <_vfiprintf_r+0x78>
 8003d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e7a8      	b.n	8003cd2 <_vfiprintf_r+0xfe>
 8003d80:	2300      	movs	r3, #0
 8003d82:	3401      	adds	r4, #1
 8003d84:	9305      	str	r3, [sp, #20]
 8003d86:	4619      	mov	r1, r3
 8003d88:	f04f 0c0a 	mov.w	ip, #10
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d92:	3a30      	subs	r2, #48	@ 0x30
 8003d94:	2a09      	cmp	r2, #9
 8003d96:	d903      	bls.n	8003da0 <_vfiprintf_r+0x1cc>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0c6      	beq.n	8003d2a <_vfiprintf_r+0x156>
 8003d9c:	9105      	str	r1, [sp, #20]
 8003d9e:	e7c4      	b.n	8003d2a <_vfiprintf_r+0x156>
 8003da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da4:	4604      	mov	r4, r0
 8003da6:	2301      	movs	r3, #1
 8003da8:	e7f0      	b.n	8003d8c <_vfiprintf_r+0x1b8>
 8003daa:	ab03      	add	r3, sp, #12
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	462a      	mov	r2, r5
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <_vfiprintf_r+0x228>)
 8003db2:	a904      	add	r1, sp, #16
 8003db4:	4630      	mov	r0, r6
 8003db6:	f3af 8000 	nop.w
 8003dba:	4607      	mov	r7, r0
 8003dbc:	1c78      	adds	r0, r7, #1
 8003dbe:	d1d6      	bne.n	8003d6e <_vfiprintf_r+0x19a>
 8003dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dc2:	07d9      	lsls	r1, r3, #31
 8003dc4:	d405      	bmi.n	8003dd2 <_vfiprintf_r+0x1fe>
 8003dc6:	89ab      	ldrh	r3, [r5, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d402      	bmi.n	8003dd2 <_vfiprintf_r+0x1fe>
 8003dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dce:	f7ff f9e9 	bl	80031a4 <__retarget_lock_release_recursive>
 8003dd2:	89ab      	ldrh	r3, [r5, #12]
 8003dd4:	065b      	lsls	r3, r3, #25
 8003dd6:	f53f af1f 	bmi.w	8003c18 <_vfiprintf_r+0x44>
 8003dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ddc:	e71e      	b.n	8003c1c <_vfiprintf_r+0x48>
 8003dde:	ab03      	add	r3, sp, #12
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	462a      	mov	r2, r5
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <_vfiprintf_r+0x228>)
 8003de6:	a904      	add	r1, sp, #16
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff fc0b 	bl	8003604 <_printf_i>
 8003dee:	e7e4      	b.n	8003dba <_vfiprintf_r+0x1e6>
 8003df0:	080040c6 	.word	0x080040c6
 8003df4:	080040d0 	.word	0x080040d0
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	08003bb1 	.word	0x08003bb1
 8003e00:	080040cc 	.word	0x080040cc

08003e04 <_raise_r>:
 8003e04:	291f      	cmp	r1, #31
 8003e06:	b538      	push	{r3, r4, r5, lr}
 8003e08:	4605      	mov	r5, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	d904      	bls.n	8003e18 <_raise_r+0x14>
 8003e0e:	2316      	movs	r3, #22
 8003e10:	6003      	str	r3, [r0, #0]
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003e1a:	b112      	cbz	r2, 8003e22 <_raise_r+0x1e>
 8003e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e20:	b94b      	cbnz	r3, 8003e36 <_raise_r+0x32>
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 f830 	bl	8003e88 <_getpid_r>
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e32:	f000 b817 	b.w	8003e64 <_kill_r>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d00a      	beq.n	8003e50 <_raise_r+0x4c>
 8003e3a:	1c59      	adds	r1, r3, #1
 8003e3c:	d103      	bne.n	8003e46 <_raise_r+0x42>
 8003e3e:	2316      	movs	r3, #22
 8003e40:	6003      	str	r3, [r0, #0]
 8003e42:	2001      	movs	r0, #1
 8003e44:	e7e7      	b.n	8003e16 <_raise_r+0x12>
 8003e46:	2100      	movs	r1, #0
 8003e48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4798      	blx	r3
 8003e50:	2000      	movs	r0, #0
 8003e52:	e7e0      	b.n	8003e16 <_raise_r+0x12>

08003e54 <raise>:
 8003e54:	4b02      	ldr	r3, [pc, #8]	@ (8003e60 <raise+0xc>)
 8003e56:	4601      	mov	r1, r0
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	f7ff bfd3 	b.w	8003e04 <_raise_r>
 8003e5e:	bf00      	nop
 8003e60:	20000034 	.word	0x20000034

08003e64 <_kill_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d07      	ldr	r5, [pc, #28]	@ (8003e84 <_kill_r+0x20>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	f7fc ff8c 	bl	8000d8e <_kill>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d102      	bne.n	8003e80 <_kill_r+0x1c>
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	b103      	cbz	r3, 8003e80 <_kill_r+0x1c>
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	bf00      	nop
 8003e84:	2000027c 	.word	0x2000027c

08003e88 <_getpid_r>:
 8003e88:	f7fc bf79 	b.w	8000d7e <_getpid>

08003e8c <_malloc_usable_size_r>:
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f18      	subs	r0, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfbc      	itt	lt
 8003e96:	580b      	ldrlt	r3, [r1, r0]
 8003e98:	18c0      	addlt	r0, r0, r3
 8003e9a:	4770      	bx	lr

08003e9c <_gettimeofday>:
 8003e9c:	4b02      	ldr	r3, [pc, #8]	@ (8003ea8 <_gettimeofday+0xc>)
 8003e9e:	2258      	movs	r2, #88	@ 0x58
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea6:	4770      	bx	lr
 8003ea8:	2000027c 	.word	0x2000027c

08003eac <_init>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr

08003eb8 <_fini>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr
